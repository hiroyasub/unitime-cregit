begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriodPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|CourseOfferingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamRoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamSectionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExamVerificationReport
extends|extends
name|PdfLegacyExamReport
block|{
specifier|protected
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ExamVerificationReport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|iSkipHoles
init|=
literal|true
decl_stmt|;
comment|// Skip subparts of the same itype as parent subpart
specifier|private
name|boolean
name|iSkipSuffixSubparts
init|=
name|ApplicationProperty
operator|.
name|ExaminationPdfReportsSkipSuffixSubpart
operator|.
name|isTrue
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iHasAssignment
init|=
literal|false
decl_stmt|;
specifier|public
name|ExamVerificationReport
parameter_list|(
name|int
name|mode
parameter_list|,
name|File
name|file
parameter_list|,
name|Session
name|session
parameter_list|,
name|ExamType
name|examType
parameter_list|,
name|Collection
argument_list|<
name|SubjectArea
argument_list|>
name|subjectAreas
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|super
argument_list|(
name|mode
argument_list|,
name|file
argument_list|,
literal|"EXAMINATION VERIFICATION REPORT"
argument_list|,
name|session
argument_list|,
name|examType
argument_list|,
name|subjectAreas
argument_list|,
name|exams
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iHasAssignment
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|public
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|getExams
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|getExams
argument_list|()
control|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSectionsIncludeCrosslistedDummies
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeCourse
operator|&&
name|section
operator|.
name|getOwnerId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeOffering
operator|&&
name|section
operator|.
name|getOwnerId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exams
return|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|getExams
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|getExams
argument_list|()
control|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSectionsIncludeCrosslistedDummies
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|&&
name|section
operator|.
name|getOwnerId
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeConfig
operator|&&
name|section
operator|.
name|getOwnerId
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iSkipSuffixSubparts
operator|&&
name|clazz
operator|.
name|getChildClasses
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Class_
name|child
range|:
name|clazz
operator|.
name|getChildClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
condition|)
name|exams
operator|.
name|addAll
argument_list|(
name|getExams
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|exams
return|;
block|}
specifier|public
name|String
name|genName
parameter_list|(
name|String
name|pattern
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
name|String
name|name
init|=
name|pattern
decl_stmt|;
name|int
name|idx
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|'%'
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|idx
operator|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'%'
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|char
name|code
init|=
name|name
operator|.
name|charAt
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|name4code
init|=
name|genName
argument_list|(
name|code
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|+
operator|(
name|name4code
operator|==
literal|null
condition|?
literal|""
else|:
name|name4code
operator|)
operator|+
name|name
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|protected
name|String
name|genName
parameter_list|(
name|char
name|code
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
switch|switch
condition|(
name|code
condition|)
block|{
case|case
literal|'_'
case|:
return|return
literal|" "
return|;
case|case
literal|'s'
case|:
return|return
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
return|;
case|case
literal|'c'
case|:
return|return
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
return|;
case|case
literal|'i'
case|:
return|return
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
return|;
case|case
literal|'n'
case|:
return|return
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
return|;
case|case
literal|'x'
case|:
return|return
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getName
argument_list|()
return|;
case|case
literal|'D'
case|:
return|return
name|clazz
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
return|;
case|case
literal|'d'
case|:
name|Department
name|d
init|=
name|clazz
operator|.
name|getControllingDept
argument_list|()
decl_stmt|;
return|return
operator|(
name|d
operator|.
name|getAbbreviation
argument_list|()
operator|==
literal|null
operator|||
name|d
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|d
operator|.
name|getDeptCode
argument_list|()
else|:
name|d
operator|.
name|getAbbreviation
argument_list|()
operator|)
return|;
case|case
literal|'a'
case|:
return|return
name|clazz
operator|.
name|getClassSuffix
argument_list|()
return|;
case|case
literal|'y'
case|:
return|return
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
return|;
case|case
literal|'e'
case|:
return|return
name|clazz
operator|.
name|getExternalUniqueId
argument_list|()
return|;
case|case
literal|'f'
case|:
return|return
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
return|;
case|case
literal|'o'
case|:
return|return
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
return|;
case|case
literal|'t'
case|:
return|return
literal|""
return|;
case|case
literal|'I'
case|:
return|return
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|toString
argument_list|()
return|;
case|case
literal|'p'
case|:
name|ItypeDesc
name|itype
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
decl_stmt|;
while|while
condition|(
name|itype
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|itype
operator|=
name|itype
operator|.
name|getParent
argument_list|()
expr_stmt|;
return|return
name|itype
operator|.
name|getAbbv
argument_list|()
return|;
case|case
literal|'P'
case|:
name|itype
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
expr_stmt|;
while|while
condition|(
name|itype
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|itype
operator|=
name|itype
operator|.
name|getParent
argument_list|()
expr_stmt|;
return|return
name|itype
operator|.
name|getItype
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
specifier|public
name|String
name|getMeetWith
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Vector
argument_list|<
name|Class_
argument_list|>
name|exclude
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Class_
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Class_
name|c1
parameter_list|,
name|Class_
name|c2
parameter_list|)
block|{
if|if
condition|(
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|c2
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|sx1
init|=
operator|(
name|iUseClassSuffix
condition|?
name|c1
operator|.
name|getClassSuffix
argument_list|()
else|:
name|c1
operator|.
name|getSectionNumberString
argument_list|()
operator|)
decl_stmt|;
name|String
name|sx2
init|=
operator|(
name|iUseClassSuffix
condition|?
name|c2
operator|.
name|getClassSuffix
argument_list|()
else|:
name|c2
operator|.
name|getSectionNumberString
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|sx1
operator|!=
literal|null
operator|&&
name|sx2
operator|!=
literal|null
condition|)
return|return
name|sx1
operator|.
name|compareTo
argument_list|(
name|sx2
argument_list|)
return|;
return|return
name|c1
operator|.
name|getSectionNumber
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSectionNumber
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|SchedulingSubpartComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|,
name|c2
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"MEET_WITH"
operator|.
name|equals
argument_list|(
name|dObj
operator|.
name|getDistributionPref
argument_list|()
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|j
init|=
name|dObj
operator|.
name|getDistributionPref
argument_list|()
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|xObj
init|=
operator|(
name|DistributionObject
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|exclude
operator|!=
literal|null
operator|&&
name|exclude
operator|.
name|contains
argument_list|(
name|xObj
operator|.
name|getPrefGroup
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|xObj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|classes
operator|.
name|add
argument_list|(
operator|(
name|Class_
operator|)
name|xObj
operator|.
name|getPrefGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|classes
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|xObj
operator|.
name|getPrefGroup
argument_list|()
operator|)
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|Class_
name|prev
init|=
name|clazz
decl_stmt|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|classes
control|)
block|{
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|ret
operator|+=
name|genName
argument_list|(
name|ApplicationProperty
operator|.
name|ExamNameClass
operator|.
name|value
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
if|else if
condition|(
name|prev
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
condition|)
block|{
comment|//same subject area
if|if
condition|(
name|prev
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|)
condition|)
block|{
comment|//same course number
if|if
condition|(
name|prev
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
name|ret
operator|+=
name|genName
argument_list|(
name|ApplicationProperty
operator|.
name|ExamNameSameSubpartClass
operator|.
name|value
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
else|else
name|ret
operator|+=
name|genName
argument_list|(
name|ApplicationProperty
operator|.
name|ExamNameSameCourseClass
operator|.
name|value
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//different course number
name|ret
operator|+=
name|genName
argument_list|(
name|ApplicationProperty
operator|.
name|ExamNameSameSubjectClass
operator|.
name|value
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|+=
name|genName
argument_list|(
name|ApplicationProperty
operator|.
name|ExamNameSeparator
operator|.
name|value
argument_list|()
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|ret
operator|+=
name|genName
argument_list|(
name|ApplicationProperty
operator|.
name|ExamNameClass
operator|.
name|value
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|prev
operator|=
name|c
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|String
name|formatSection
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
return|return
operator|(
operator|!
name|iUseClassSuffix
operator|||
name|clazz
operator|.
name|getClassSuffix
argument_list|()
operator|==
literal|null
operator|||
name|clazz
operator|.
name|getClassSuffix
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
else|:
name|clazz
operator|.
name|getClassSuffix
argument_list|()
operator|)
return|;
block|}
specifier|private
name|String
name|formatSection
parameter_list|(
name|Vector
argument_list|<
name|Class_
argument_list|>
name|classes
parameter_list|)
block|{
if|if
condition|(
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|classes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return
name|formatSection
argument_list|(
name|classes
operator|.
name|firstElement
argument_list|()
argument_list|)
return|;
return|return
name|formatSection
argument_list|(
name|classes
operator|.
name|firstElement
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|formatSection
argument_list|(
name|classes
operator|.
name|lastElement
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|boolean
name|hasCourseExam
parameter_list|,
name|boolean
name|hasSectionExam
parameter_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassEvent
argument_list|>
name|class2event
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
name|getExams
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exams
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|String
name|message
init|=
literal|"** NO EXAM **"
decl_stmt|;
if|if
condition|(
name|hasCourseExam
operator|&&
operator|!
name|hasSectionExam
condition|)
name|message
operator|=
literal|""
expr_stmt|;
comment|// Has other exam
if|if
condition|(
operator|!
name|hasSectionExam
operator|&&
operator|!
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|isOrganized
argument_list|()
condition|)
name|message
operator|=
literal|"Not organized instructional type"
expr_stmt|;
else|else
block|{
name|ClassEvent
name|event
init|=
name|class2event
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
operator|||
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|message
operator|=
literal|"Class not organized"
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|isFullTerm
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|TreeSet
name|meetings
init|=
operator|new
name|TreeSet
argument_list|(
name|event
operator|.
name|getMeetings
argument_list|()
argument_list|)
decl_stmt|;
name|Meeting
name|first
init|=
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|first
argument_list|()
decl_stmt|;
name|Meeting
name|last
init|=
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|last
argument_list|()
decl_stmt|;
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
name|message
operator|=
literal|"Class not full-term ("
operator|+
name|df
operator|.
name|format
argument_list|(
name|first
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|+
operator|(
name|first
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|equals
argument_list|(
name|last
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
condition|?
literal|""
else|:
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|last
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|)
operator|+
literal|")"
expr_stmt|;
block|}
block|}
return|return
name|message
return|;
block|}
specifier|private
name|void
name|print
parameter_list|(
name|Vector
argument_list|<
name|Class_
argument_list|>
name|same
parameter_list|,
name|boolean
name|hasCourseExam
parameter_list|,
name|boolean
name|hasSectionExam
parameter_list|,
name|int
name|minLimit
parameter_list|,
name|int
name|maxLimit
parameter_list|,
name|int
name|minEnrl
parameter_list|,
name|int
name|maxEnrl
parameter_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassEvent
argument_list|>
name|class2event
parameter_list|)
throws|throws
name|DocumentException
block|{
name|String
name|cmw
init|=
name|getMeetWith
argument_list|(
name|same
operator|.
name|firstElement
argument_list|()
argument_list|,
name|same
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
name|getExams
argument_list|(
name|same
operator|.
name|firstElement
argument_list|()
argument_list|)
decl_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|exams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|"** NO EXAM **"
decl_stmt|;
if|if
condition|(
name|hasCourseExam
operator|&&
operator|!
name|hasSectionExam
condition|)
name|message
operator|=
literal|""
expr_stmt|;
comment|// Has other exam
if|if
condition|(
operator|!
name|hasSectionExam
operator|&&
operator|!
name|same
operator|.
name|firstElement
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|isOrganized
argument_list|()
condition|)
name|message
operator|=
literal|"Not organized instructional type"
expr_stmt|;
else|else
block|{
name|ClassEvent
name|classEvent
init|=
name|class2event
operator|.
name|get
argument_list|(
name|same
operator|.
name|firstElement
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classEvent
operator|==
literal|null
operator|||
name|classEvent
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|message
operator|=
literal|"Class not organized"
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|isFullTerm
argument_list|(
name|classEvent
argument_list|)
condition|)
block|{
name|TreeSet
name|meetings
init|=
operator|new
name|TreeSet
argument_list|(
name|classEvent
operator|.
name|getMeetings
argument_list|()
argument_list|)
decl_stmt|;
name|Meeting
name|first
init|=
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|first
argument_list|()
decl_stmt|;
name|Meeting
name|last
init|=
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|last
argument_list|()
decl_stmt|;
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
name|message
operator|=
literal|"Class not full-term ("
operator|+
name|df
operator|.
name|format
argument_list|(
name|first
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|+
operator|(
name|first
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|equals
argument_list|(
name|last
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
condition|?
literal|""
else|:
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|last
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|)
operator|+
literal|")"
expr_stmt|;
block|}
block|}
name|String
name|title
init|=
operator|(
name|iDispNote
condition|?
name|same
operator|.
name|firstElement
argument_list|()
operator|.
name|getSchedulePrintNote
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
comment|/*             if (title!=null&& title.equals(same.firstElement().getSchedulingSubpart().getControllingCourseOffering().getTitle()))                 title = null;                 */
name|boolean
name|hasTitle
init|=
operator|(
name|title
operator|!=
literal|null
operator|&&
name|title
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
decl_stmt|;
name|boolean
name|titleSameLine
init|=
name|hasTitle
operator|&&
operator|(
literal|" "
operator|+
name|title
operator|)
operator|.
name|length
argument_list|()
operator|<=
operator|(
operator|(
name|iDispLimits
condition|?
literal|28
else|:
literal|46
operator|)
operator|-
name|formatSection
argument_list|(
name|same
argument_list|)
operator|.
name|length
argument_list|()
operator|-
operator|(
name|same
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|" ("
operator|+
name|same
operator|.
name|size
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
operator|.
name|length
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|titleSeparateLine
init|=
name|hasTitle
operator|&&
operator|!
name|titleSameLine
decl_stmt|;
name|boolean
name|hasMw
init|=
name|cmw
operator|.
name|length
argument_list|()
operator|>
literal|0
decl_stmt|;
name|boolean
name|mwSameLine
init|=
name|hasMw
operator|&&
operator|!
name|titleSameLine
operator|&&
operator|(
literal|" m/w "
operator|+
name|cmw
operator|)
operator|.
name|length
argument_list|()
operator|<=
operator|(
operator|(
name|iDispLimits
condition|?
literal|28
else|:
literal|46
operator|)
operator|-
name|formatSection
argument_list|(
name|same
argument_list|)
operator|.
name|length
argument_list|()
operator|-
operator|(
name|same
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|" ("
operator|+
name|same
operator|.
name|size
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
operator|.
name|length
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|mwSeparateLine
init|=
name|hasMw
operator|&&
operator|!
name|mwSameLine
decl_stmt|;
if|if
condition|(
operator|(
name|titleSeparateLine
operator|||
name|mwSeparateLine
operator|)
operator|&&
name|getLineNumber
argument_list|()
operator|+
literal|1
operator|+
operator|(
name|titleSeparateLine
condition|?
literal|0
else|:
literal|1
operator|)
operator|+
operator|(
name|mwSeparateLine
condition|?
literal|1
else|:
literal|0
operator|)
operator|>
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|println
argument_list|(
name|lpad
argument_list|(
name|iITypePrinted
condition|?
literal|""
else|:
name|same
operator|.
name|firstElement
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|13
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|formatSection
argument_list|(
name|same
argument_list|)
operator|+
operator|(
name|same
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|" ("
operator|+
name|same
operator|.
name|size
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
operator|(
name|titleSameLine
condition|?
literal|" "
operator|+
name|title
else|:
literal|""
operator|)
operator|+
operator|(
name|mwSameLine
condition|?
literal|" m/w "
operator|+
name|cmw
else|:
literal|""
operator|)
argument_list|,
operator|(
name|iDispLimits
condition|?
literal|28
else|:
literal|46
operator|)
argument_list|)
operator|+
operator|(
name|iDispLimits
condition|?
name|lpad
argument_list|(
name|maxLimit
operator|<=
literal|0
condition|?
literal|""
else|:
name|minLimit
operator|!=
name|maxLimit
condition|?
name|minLimit
operator|+
literal|"-"
operator|+
name|maxLimit
else|:
literal|""
operator|+
name|minLimit
argument_list|,
literal|9
argument_list|)
operator|+
name|lpad
argument_list|(
name|maxEnrl
operator|<=
literal|0
condition|?
literal|""
else|:
name|minEnrl
operator|!=
name|maxEnrl
condition|?
name|minEnrl
operator|+
literal|"-"
operator|+
name|maxEnrl
else|:
literal|""
operator|+
name|minEnrl
argument_list|,
literal|9
argument_list|)
operator|+
literal|" "
else|:
literal|" "
operator|)
operator|+
literal|"         "
operator|+
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|titleSeparateLine
condition|)
name|println
argument_list|(
name|lpad
argument_list|(
literal|""
argument_list|,
literal|13
argument_list|)
operator|+
literal|"  "
operator|+
operator|(
name|title
operator|.
name|length
argument_list|()
operator|>
literal|118
condition|?
name|title
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|115
argument_list|)
operator|+
literal|"..."
else|:
name|title
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mwSeparateLine
condition|)
name|println
argument_list|(
name|lpad
argument_list|(
literal|""
argument_list|,
literal|13
argument_list|)
operator|+
literal|"  Meets with "
operator|+
operator|(
name|cmw
operator|.
name|length
argument_list|()
operator|>
literal|107
condition|?
name|cmw
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|104
argument_list|)
operator|+
literal|"..."
else|:
name|cmw
operator|)
argument_list|)
expr_stmt|;
name|iITypePrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
block|}
else|else
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
name|Vector
argument_list|<
name|String
argument_list|>
name|rooms
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|times
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
block|{
name|times
operator|.
name|add
argument_list|(
name|rpad
argument_list|(
name|iHasAssignment
condition|?
literal|" Exam not assigned"
else|:
literal|" Section exam"
argument_list|,
literal|26
argument_list|)
argument_list|)
expr_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|rpad
argument_list|(
literal|""
argument_list|,
literal|23
argument_list|)
argument_list|)
expr_stmt|;
comment|//if (exam.getMaxRooms()==0) rooms.add(" "+rpad(iNoRoom, 22));
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getExam
argument_list|()
operator|.
name|getPreferences
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|||
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|pf
init|=
operator|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|?
literal|" "
else|:
literal|"!"
operator|)
decl_stmt|;
if|if
condition|(
name|pref
operator|instanceof
name|ExamPeriodPref
condition|)
block|{
name|ExamPeriodPref
name|xp
init|=
operator|(
name|ExamPeriodPref
operator|)
name|pref
decl_stmt|;
name|times
operator|.
name|add
argument_list|(
name|pf
operator|+
name|rpad
argument_list|(
name|formatPeriod
argument_list|(
name|xp
operator|.
name|getExamPeriod
argument_list|()
argument_list|,
name|exam
operator|.
name|getLength
argument_list|()
argument_list|,
name|exam
operator|.
name|getPrintOffset
argument_list|()
argument_list|)
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|exam
operator|.
name|getMaxRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|pref
operator|instanceof
name|RoomPref
condition|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|pref
decl_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|pf
operator|+
name|formatRoom
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
literal|""
operator|+
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
literal|""
operator|+
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getExamCapacity
argument_list|()
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pref
operator|instanceof
name|BuildingPref
condition|)
block|{
name|BuildingPref
name|bp
init|=
operator|(
name|BuildingPref
operator|)
name|pref
decl_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|pf
operator|+
name|rpad
argument_list|(
name|bp
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
literal|22
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pref
operator|instanceof
name|RoomFeaturePref
condition|)
block|{
name|RoomFeaturePref
name|fp
init|=
operator|(
name|RoomFeaturePref
operator|)
name|pref
decl_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|pf
operator|+
name|rpad
argument_list|(
name|fp
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|22
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pref
operator|instanceof
name|RoomGroupPref
condition|)
block|{
name|RoomGroupPref
name|gp
init|=
operator|(
name|RoomGroupPref
operator|)
name|pref
decl_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|pf
operator|+
name|rpad
argument_list|(
name|gp
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|22
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getExam
argument_list|()
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DistributionPref
name|pref
init|=
name|dObj
operator|.
name|getDistributionPref
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
continue|continue;
name|int
name|line
init|=
literal|0
decl_stmt|;
name|String
name|name
init|=
operator|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|?
literal|" "
else|:
literal|"!"
operator|)
operator|+
name|pref
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|toUpperCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"!SAME "
argument_list|)
condition|)
name|name
operator|=
literal|" Diff"
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|new
name|TreeSet
argument_list|(
name|pref
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|xObj
init|=
operator|(
name|DistributionObject
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|xObj
operator|.
name|equals
argument_list|(
name|dObj
argument_list|)
condition|)
continue|continue;
name|Exam
name|x
init|=
operator|(
name|Exam
operator|)
name|xObj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
operator|new
name|TreeSet
argument_list|(
name|x
operator|.
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|own
init|=
operator|(
name|ExamOwner
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|times
operator|.
name|add
argument_list|(
name|rpad
argument_list|(
name|rpad
argument_list|(
name|line
operator|>
literal|0
condition|?
literal|""
else|:
name|name
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|own
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|26
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|exam
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
operator|||
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rooms
operator|.
name|add
argument_list|(
literal|" "
operator|+
name|rpad
argument_list|(
name|iNoRoom
argument_list|,
literal|22
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|rooms
operator|.
name|add
argument_list|(
literal|" "
operator|+
name|formatRoom
argument_list|(
name|room
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
literal|""
operator|+
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
literal|""
operator|+
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|times
operator|.
name|add
argument_list|(
literal|" "
operator|+
name|rpad
argument_list|(
name|formatPeriod
argument_list|(
name|exam
argument_list|)
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Vector
argument_list|<
name|String
argument_list|>
name|meetsWith
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|int
name|maxCnt
init|=
name|Math
operator|.
name|max
argument_list|(
literal|4
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|rooms
operator|.
name|size
argument_list|()
argument_list|,
name|times
operator|.
name|size
argument_list|()
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSectionsIncludeCrosslistedDummies
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|&&
name|same
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getOwnerObject
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeConfig
operator|&&
name|section
operator|.
name|getOwnerId
argument_list|()
operator|.
name|equals
argument_list|(
name|same
operator|.
name|firstElement
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|cnt
operator|>=
name|maxCnt
condition|)
block|{
name|meetsWith
operator|.
name|add
argument_list|(
literal|" "
operator|+
name|rpad
argument_list|(
literal|"..."
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|iItype
condition|)
name|meetsWith
operator|.
name|add
argument_list|(
literal|" "
operator|+
name|rpad
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|meetsWith
operator|.
name|add
argument_list|(
literal|" "
operator|+
name|rpad
argument_list|(
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
name|int
name|nrLines
init|=
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|rooms
operator|.
name|size
argument_list|()
argument_list|,
name|meetsWith
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|times
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|title
init|=
operator|(
name|iDispNote
condition|?
name|same
operator|.
name|firstElement
argument_list|()
operator|.
name|getSchedulePrintNote
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
comment|/*             if (title!=null&& title.equals(same.firstElement().getSchedulingSubpart().getControllingCourseOffering().getTitle()))                 title = null;                 */
name|boolean
name|hasTitle
init|=
operator|!
name|iPeriodPrinted
operator|&&
operator|(
name|title
operator|!=
literal|null
operator|&&
name|title
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
decl_stmt|;
name|boolean
name|titleSameLine
init|=
name|hasTitle
operator|&&
operator|(
literal|" "
operator|+
name|title
operator|)
operator|.
name|length
argument_list|()
operator|<=
operator|(
operator|(
name|iDispLimits
condition|?
literal|28
else|:
literal|46
operator|)
operator|-
name|formatSection
argument_list|(
name|same
argument_list|)
operator|.
name|length
argument_list|()
operator|-
operator|(
name|same
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|" ("
operator|+
name|same
operator|.
name|size
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
operator|.
name|length
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|titleSecondLine
init|=
name|hasTitle
operator|&&
operator|!
name|titleSameLine
operator|&&
name|nrLines
operator|>
literal|1
operator|&&
operator|(
literal|" "
operator|+
name|title
operator|)
operator|.
name|length
argument_list|()
operator|<=
operator|(
name|iDispLimits
condition|?
literal|28
else|:
literal|46
operator|)
decl_stmt|;
name|boolean
name|titleSeparateLine
init|=
name|hasTitle
operator|&&
operator|!
name|titleSameLine
operator|&&
operator|!
name|titleSecondLine
decl_stmt|;
name|boolean
name|hasMw
init|=
operator|!
name|iPeriodPrinted
operator|&&
name|cmw
operator|.
name|length
argument_list|()
operator|>
literal|0
decl_stmt|;
name|boolean
name|mwSameLine
init|=
name|hasMw
operator|&&
operator|!
name|titleSameLine
operator|&&
operator|(
literal|" m/w "
operator|+
name|cmw
operator|)
operator|.
name|length
argument_list|()
operator|<=
operator|(
operator|(
name|iDispLimits
condition|?
literal|28
else|:
literal|46
operator|)
operator|-
name|formatSection
argument_list|(
name|same
argument_list|)
operator|.
name|length
argument_list|()
operator|-
operator|(
name|same
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|" ("
operator|+
name|same
operator|.
name|size
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
operator|.
name|length
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|mwSecondLine
init|=
name|hasMw
operator|&&
operator|!
name|mwSameLine
operator|&&
operator|!
name|titleSecondLine
operator|&&
name|nrLines
operator|>
literal|1
operator|&&
operator|(
literal|" Meets with "
operator|+
name|cmw
operator|)
operator|.
name|length
argument_list|()
operator|<=
operator|(
name|iDispLimits
condition|?
literal|28
else|:
literal|46
operator|)
decl_stmt|;
name|boolean
name|mwThirdLine
init|=
name|hasMw
operator|&&
operator|!
name|mwSameLine
operator|&&
name|titleSecondLine
operator|&&
name|nrLines
operator|>
literal|2
operator|&&
operator|(
literal|" Meets with "
operator|+
name|cmw
operator|)
operator|.
name|length
argument_list|()
operator|<=
operator|(
name|iDispLimits
condition|?
literal|28
else|:
literal|46
operator|)
decl_stmt|;
name|boolean
name|mwSeparateLine
init|=
name|hasMw
operator|&&
operator|!
name|mwSameLine
operator|&&
operator|!
name|mwSecondLine
operator|&&
operator|!
name|mwThirdLine
decl_stmt|;
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
name|nrLines
operator|+
operator|(
name|mwSeparateLine
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|titleSeparateLine
condition|?
literal|1
else|:
literal|0
operator|)
operator|>
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrLines
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|room
init|=
operator|(
name|idx
operator|<
name|rooms
operator|.
name|size
argument_list|()
condition|?
name|rooms
operator|.
name|elementAt
argument_list|(
name|idx
argument_list|)
else|:
name|rpad
argument_list|(
literal|""
argument_list|,
literal|23
argument_list|)
operator|)
decl_stmt|;
name|String
name|mw
init|=
operator|(
name|idx
operator|<
name|meetsWith
operator|.
name|size
argument_list|()
condition|?
name|meetsWith
operator|.
name|elementAt
argument_list|(
name|idx
argument_list|)
else|:
literal|""
operator|)
decl_stmt|;
name|String
name|time
init|=
operator|(
name|idx
operator|<
name|times
operator|.
name|size
argument_list|()
condition|?
name|times
operator|.
name|elementAt
argument_list|(
name|idx
argument_list|)
else|:
name|rpad
argument_list|(
literal|""
argument_list|,
literal|26
argument_list|)
operator|)
decl_stmt|;
name|println
argument_list|(
name|lpad
argument_list|(
name|idx
operator|>
literal|0
operator|||
name|iITypePrinted
condition|?
literal|""
else|:
name|same
operator|.
name|firstElement
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|13
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
name|idx
operator|>
literal|0
condition|?
operator|(
name|idx
operator|==
literal|1
operator|&&
name|mwSecondLine
condition|?
literal|" Meets with "
operator|+
name|cmw
else|:
literal|""
operator|)
operator|+
operator|(
name|idx
operator|==
literal|1
operator|&&
name|titleSecondLine
condition|?
literal|" "
operator|+
name|title
else|:
literal|""
operator|)
operator|+
operator|(
name|idx
operator|==
literal|2
operator|&&
name|mwThirdLine
condition|?
literal|" Meets with "
operator|+
name|cmw
else|:
literal|""
operator|)
else|:
name|formatSection
argument_list|(
name|same
argument_list|)
operator|+
operator|(
name|same
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|" ("
operator|+
name|same
operator|.
name|size
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
operator|(
name|titleSameLine
condition|?
literal|" "
operator|+
name|title
else|:
literal|""
operator|)
operator|+
operator|(
name|mwSameLine
condition|?
literal|" m/w "
operator|+
name|cmw
else|:
literal|""
operator|)
argument_list|,
operator|(
name|iDispLimits
condition|?
literal|28
else|:
literal|46
operator|)
argument_list|)
operator|+
operator|(
name|iDispLimits
condition|?
name|lpad
argument_list|(
name|iPeriodPrinted
operator|||
name|idx
operator|>
literal|0
operator|||
name|maxLimit
operator|<=
literal|0
condition|?
literal|""
else|:
name|minLimit
operator|!=
name|maxLimit
condition|?
name|minLimit
operator|+
literal|"-"
operator|+
name|maxLimit
else|:
literal|""
operator|+
name|minLimit
argument_list|,
literal|9
argument_list|)
operator|+
name|lpad
argument_list|(
name|iPeriodPrinted
operator|||
name|idx
operator|>
literal|0
operator|||
name|maxEnrl
operator|<=
literal|0
condition|?
literal|""
else|:
name|minEnrl
operator|!=
name|maxEnrl
condition|?
name|minEnrl
operator|+
literal|"-"
operator|+
name|maxEnrl
else|:
literal|""
operator|+
name|minEnrl
argument_list|,
literal|9
argument_list|)
operator|+
literal|" "
else|:
literal|" "
operator|)
operator|+
name|lpad
argument_list|(
name|idx
operator|>
literal|0
condition|?
literal|""
else|:
name|exam
operator|.
name|getSeatingType
argument_list|()
operator|==
name|Exam
operator|.
name|sSeatingTypeExam
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|idx
operator|>
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
literal|3
argument_list|)
operator|+
name|time
operator|+
name|room
operator|+
name|mw
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|0
operator|&&
name|titleSeparateLine
condition|)
name|println
argument_list|(
name|lpad
argument_list|(
literal|""
argument_list|,
literal|13
argument_list|)
operator|+
literal|"  "
operator|+
operator|(
name|title
operator|.
name|length
argument_list|()
operator|>
literal|118
condition|?
name|title
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|115
argument_list|)
operator|+
literal|"..."
else|:
name|title
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|0
operator|&&
name|mwSeparateLine
condition|)
name|println
argument_list|(
name|lpad
argument_list|(
literal|""
argument_list|,
literal|13
argument_list|)
operator|+
literal|"  Meets with "
operator|+
operator|(
name|cmw
operator|.
name|length
argument_list|()
operator|>
literal|107
condition|?
name|cmw
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|104
argument_list|)
operator|+
literal|"..."
else|:
name|cmw
operator|)
argument_list|)
expr_stmt|;
block|}
name|iITypePrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|printReport
parameter_list|()
throws|throws
name|DocumentException
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  Loading courses ..."
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
name|allCourses
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|Comparator
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CourseOffering
name|co1
parameter_list|,
name|CourseOffering
name|co2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|co1
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|co2
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|co1
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|compareTo
argument_list|(
name|co2
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|co1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|co2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasSubjectAreas
argument_list|()
condition|)
block|{
for|for
control|(
name|SubjectArea
name|subject
range|:
name|getSubjectAreas
argument_list|()
control|)
block|{
name|allCourses
operator|.
name|addAll
argument_list|(
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select co from CourseOffering co where  co.subjectArea.uniqueId=:subjectAreaId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|allCourses
operator|.
name|addAll
argument_list|(
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select co from CourseOffering co where  co.subjectArea.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allCourses
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|sLog
operator|.
name|info
argument_list|(
literal|"  Loading class events..."
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassEvent
argument_list|>
name|class2event
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasSubjectAreas
argument_list|()
condition|)
block|{
for|for
control|(
name|SubjectArea
name|subject
range|:
name|getSubjectAreas
argument_list|()
control|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c.uniqueId, e from ClassEvent e inner join e.clazz c left join fetch e.meetings m "
operator|+
literal|"inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.subjectArea.uniqueId=:subjectAreaId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|class2event
operator|.
name|put
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|ClassEvent
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c.uniqueId, e from ClassEvent e inner join e.clazz c left join fetch e.meetings m "
operator|+
literal|"inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.subjectArea.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|class2event
operator|.
name|put
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|ClassEvent
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|courseLimits
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|classLimits
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|iDispLimits
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  Loading course limits ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSubjectAreas
argument_list|()
condition|)
block|{
for|for
control|(
name|SubjectArea
name|subject
range|:
name|getSubjectAreas
argument_list|()
control|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select co.uniqueId, count(distinct s.student.uniqueId) from "
operator|+
literal|"StudentClassEnrollment s inner join s.courseOffering co where co.subjectArea.uniqueId=:subjectAreaId "
operator|+
literal|"group by co.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|courseLimits
operator|.
name|put
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select co.uniqueId, count(distinct s.student.uniqueId) from "
operator|+
literal|"StudentClassEnrollment s inner join s.courseOffering co where co.subjectArea.session.uniqueId=:sessionId "
operator|+
literal|"group by co.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|courseLimits
operator|.
name|put
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"  Loading class limits ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSubjectAreas
argument_list|()
condition|)
block|{
for|for
control|(
name|SubjectArea
name|subject
range|:
name|getSubjectAreas
argument_list|()
control|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c.uniqueId, count(distinct s.student.uniqueId) from "
operator|+
literal|"StudentClassEnrollment s inner join s.clazz c inner join s.courseOffering co where co.subjectArea.uniqueId=:subjectAreaId "
operator|+
literal|"group by c.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|classLimits
operator|.
name|put
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c.uniqueId, count(distinct s.student.uniqueId) from "
operator|+
literal|"StudentClassEnrollment s inner join s.clazz c inner join s.courseOffering co where co.subjectArea.session.uniqueId=:sessionId "
operator|+
literal|"group by c.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|classLimits
operator|.
name|put
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"  Printing report ..."
argument_list|)
expr_stmt|;
name|SubjectArea
name|subject
init|=
literal|null
decl_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Course        Title                       "
operator|+
operator|(
name|iDispLimits
condition|?
literal|"                  "
else|:
literal|"                  "
operator|)
operator|+
literal|" Alt  Len                                                  "
block|,
literal|"   InsType      Sections                  "
operator|+
operator|(
name|iDispLimits
condition|?
literal|" Limit    Enrollmt"
else|:
literal|"                  "
operator|)
operator|+
literal|" Seat gth Date& Time               Room         Cap ExCap Exam with"
block|,
literal|"------------- ----------------------------"
operator|+
operator|(
name|iDispLimits
condition|?
literal|" -------- --------"
else|:
literal|"------------------"
operator|)
operator|+
literal|" ---- --- ------------------------- ----------- ---- ----- --------------"
block|}
argument_list|)
expr_stmt|;
name|printHeader
argument_list|()
expr_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|allCourses
control|)
block|{
name|InstructionalOffering
name|io
init|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
if|if
condition|(
name|io
operator|.
name|isNotOffered
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|co
operator|.
name|isIsControl
argument_list|()
operator|&&
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|equals
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|subject
operator|==
literal|null
condition|)
block|{
name|subject
operator|=
name|co
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|setFooter
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|subject
operator|.
name|equals
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
condition|)
block|{
name|subject
operator|=
name|co
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|newPage
argument_list|()
expr_stmt|;
name|setFooter
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setPageName
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|CourseOfferingComparator
argument_list|(
name|CourseOfferingComparator
operator|.
name|COMPARE_BY_CTRL_CRS
argument_list|)
argument_list|)
decl_stmt|;
name|courses
operator|.
name|addAll
argument_list|(
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|hasCourseExam
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|courses
control|)
block|{
if|if
condition|(
operator|!
name|getExams
argument_list|(
name|course
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hasCourseExam
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|CourseOffering
name|course
range|:
name|courses
control|)
block|{
name|int
name|courseLimit
init|=
operator|-
literal|1
decl_stmt|;
name|InstructionalOffering
name|offering
init|=
name|course
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
name|boolean
name|unlimited
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|courseLimit
operator|=
name|co
operator|.
name|getReservation
argument_list|()
expr_stmt|;
if|if
condition|(
name|courseLimit
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|offering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|offering
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|)
name|courseLimit
operator|=
name|offering
operator|.
name|getLimit
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
block|}
name|Integer
name|enrl
init|=
operator|(
name|iDispLimits
condition|?
name|courseLimits
operator|.
name|get
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
name|getExams
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|String
name|courseName
init|=
operator|(
name|course
operator|.
name|isIsControl
argument_list|()
condition|?
literal|""
else|:
literal|" "
operator|)
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
decl_stmt|;
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|exams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|println
argument_list|(
name|rpad
argument_list|(
name|courseName
argument_list|,
literal|14
argument_list|)
operator|+
name|rpad
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|course
operator|.
name|getTitle
argument_list|()
argument_list|,
operator|(
name|iDispLimits
condition|?
literal|28
else|:
literal|46
operator|)
argument_list|)
operator|+
operator|(
name|iDispLimits
condition|?
name|lpad
argument_list|(
name|courseLimit
operator|<=
literal|0
condition|?
name|unlimited
condition|?
literal|"  inf"
else|:
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|courseLimit
argument_list|)
argument_list|,
literal|9
argument_list|)
operator|+
name|lpad
argument_list|(
name|enrl
operator|==
literal|null
operator|||
name|enrl
operator|<=
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|enrl
argument_list|)
argument_list|,
literal|9
argument_list|)
operator|+
literal|" "
else|:
literal|" "
operator|)
operator|+
literal|"         "
operator|+
operator|(
name|hasCourseExam
condition|?
literal|"** NO EXAM**"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
name|Vector
argument_list|<
name|String
argument_list|>
name|rooms
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|times
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
block|{
name|times
operator|.
name|add
argument_list|(
name|rpad
argument_list|(
name|iHasAssignment
condition|?
literal|" Exam not assigned"
else|:
literal|" Course Exam"
argument_list|,
literal|26
argument_list|)
argument_list|)
expr_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|rpad
argument_list|(
literal|""
argument_list|,
literal|23
argument_list|)
argument_list|)
expr_stmt|;
comment|//if (exam.getMaxRooms()==0) rooms.add(" "+rpad(iNoRoom, 22));
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getExam
argument_list|()
operator|.
name|getPreferences
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|||
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|pf
init|=
operator|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|?
literal|" "
else|:
literal|"!"
operator|)
decl_stmt|;
if|if
condition|(
name|pref
operator|instanceof
name|ExamPeriodPref
condition|)
block|{
name|ExamPeriodPref
name|xp
init|=
operator|(
name|ExamPeriodPref
operator|)
name|pref
decl_stmt|;
name|times
operator|.
name|add
argument_list|(
name|pf
operator|+
name|rpad
argument_list|(
name|formatPeriod
argument_list|(
name|xp
operator|.
name|getExamPeriod
argument_list|()
argument_list|,
name|exam
operator|.
name|getLength
argument_list|()
argument_list|,
name|exam
operator|.
name|getPrintOffset
argument_list|()
argument_list|)
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|exam
operator|.
name|getMaxRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|pref
operator|instanceof
name|RoomPref
condition|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|pref
decl_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|pf
operator|+
name|formatRoom
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
literal|""
operator|+
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
literal|""
operator|+
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getExamCapacity
argument_list|()
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pref
operator|instanceof
name|BuildingPref
condition|)
block|{
name|BuildingPref
name|bp
init|=
operator|(
name|BuildingPref
operator|)
name|pref
decl_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|pf
operator|+
name|rpad
argument_list|(
name|bp
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
literal|22
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pref
operator|instanceof
name|RoomFeaturePref
condition|)
block|{
name|RoomFeaturePref
name|fp
init|=
operator|(
name|RoomFeaturePref
operator|)
name|pref
decl_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|pf
operator|+
name|rpad
argument_list|(
name|fp
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|22
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pref
operator|instanceof
name|RoomGroupPref
condition|)
block|{
name|RoomGroupPref
name|gp
init|=
operator|(
name|RoomGroupPref
operator|)
name|pref
decl_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|pf
operator|+
name|rpad
argument_list|(
name|gp
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|22
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getExam
argument_list|()
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DistributionPref
name|pref
init|=
name|dObj
operator|.
name|getDistributionPref
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
continue|continue;
name|String
name|name
init|=
operator|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|?
literal|" "
else|:
literal|"!"
operator|)
operator|+
name|pref
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|toUpperCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"!SAME "
argument_list|)
condition|)
name|name
operator|=
literal|" Diff"
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|new
name|TreeSet
argument_list|(
name|pref
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|xObj
init|=
operator|(
name|DistributionObject
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|xObj
operator|.
name|equals
argument_list|(
name|dObj
argument_list|)
condition|)
continue|continue;
name|Exam
name|x
init|=
operator|(
name|Exam
operator|)
name|xObj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
operator|new
name|TreeSet
argument_list|(
name|x
operator|.
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|own
init|=
operator|(
name|ExamOwner
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|times
operator|.
name|add
argument_list|(
name|rpad
argument_list|(
name|rpad
argument_list|(
name|line
operator|>
literal|0
condition|?
literal|""
else|:
name|name
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|own
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|26
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|exam
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
operator|||
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rooms
operator|.
name|add
argument_list|(
literal|" "
operator|+
name|rpad
argument_list|(
name|iNoRoom
argument_list|,
literal|22
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|rooms
operator|.
name|add
argument_list|(
literal|" "
operator|+
name|formatRoom
argument_list|(
name|room
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
literal|""
operator|+
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
literal|""
operator|+
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|times
operator|.
name|add
argument_list|(
literal|" "
operator|+
name|rpad
argument_list|(
name|formatPeriod
argument_list|(
name|exam
argument_list|)
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Vector
argument_list|<
name|String
argument_list|>
name|meetsWith
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|int
name|maxCnt
init|=
name|Math
operator|.
name|max
argument_list|(
literal|4
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|rooms
operator|.
name|size
argument_list|()
argument_list|,
name|times
operator|.
name|size
argument_list|()
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSectionsIncludeCrosslistedDummies
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeCourse
operator|&&
name|course
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getOwnerId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeOffering
operator|&&
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getOwnerId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|cnt
operator|>=
name|maxCnt
condition|)
block|{
name|meetsWith
operator|.
name|add
argument_list|(
literal|" "
operator|+
name|rpad
argument_list|(
literal|"..."
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|iItype
condition|)
name|meetsWith
operator|.
name|add
argument_list|(
literal|" "
operator|+
name|rpad
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|meetsWith
operator|.
name|add
argument_list|(
literal|" "
operator|+
name|rpad
argument_list|(
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
name|int
name|nrLines
init|=
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|rooms
operator|.
name|size
argument_list|()
argument_list|,
name|meetsWith
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|times
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrLines
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|room
init|=
operator|(
name|idx
operator|<
name|rooms
operator|.
name|size
argument_list|()
condition|?
name|rooms
operator|.
name|elementAt
argument_list|(
name|idx
argument_list|)
else|:
name|rpad
argument_list|(
literal|""
argument_list|,
literal|23
argument_list|)
operator|)
decl_stmt|;
name|String
name|mw
init|=
operator|(
name|idx
operator|<
name|meetsWith
operator|.
name|size
argument_list|()
condition|?
name|meetsWith
operator|.
name|elementAt
argument_list|(
name|idx
argument_list|)
else|:
literal|""
operator|)
decl_stmt|;
name|String
name|time
init|=
operator|(
name|idx
operator|<
name|times
operator|.
name|size
argument_list|()
condition|?
name|times
operator|.
name|elementAt
argument_list|(
name|idx
argument_list|)
else|:
name|rpad
argument_list|(
literal|""
argument_list|,
literal|26
argument_list|)
operator|)
decl_stmt|;
name|println
argument_list|(
name|rpad
argument_list|(
name|idx
operator|>
literal|0
operator|||
name|iCoursePrinted
condition|?
literal|""
else|:
name|courseName
argument_list|,
literal|14
argument_list|)
operator|+
name|rpad
argument_list|(
name|idx
operator|>
literal|0
operator|||
name|iCoursePrinted
condition|?
literal|""
else|:
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|course
operator|.
name|getTitle
argument_list|()
argument_list|,
operator|(
name|iDispLimits
condition|?
literal|28
else|:
literal|46
operator|)
argument_list|)
operator|+
operator|(
name|iDispLimits
condition|?
name|lpad
argument_list|(
name|idx
operator|>
literal|0
operator|||
name|iCoursePrinted
condition|?
literal|""
else|:
name|courseLimit
operator|<=
literal|0
condition|?
name|unlimited
condition|?
literal|"  inf"
else|:
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|courseLimit
argument_list|)
argument_list|,
literal|9
argument_list|)
operator|+
name|lpad
argument_list|(
name|idx
operator|>
literal|0
operator|||
name|iCoursePrinted
operator|||
name|enrl
operator|==
literal|null
operator|||
name|enrl
operator|<=
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|enrl
argument_list|)
argument_list|,
literal|9
argument_list|)
operator|+
literal|" "
else|:
literal|" "
operator|)
operator|+
name|lpad
argument_list|(
name|idx
operator|>
literal|0
condition|?
literal|""
else|:
name|exam
operator|.
name|getSeatingType
argument_list|()
operator|==
name|Exam
operator|.
name|sSeatingTypeExam
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|idx
operator|>
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
literal|3
argument_list|)
operator|+
name|time
operator|+
name|room
operator|+
name|mw
argument_list|)
expr_stmt|;
block|}
name|iCoursePrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
block|}
block|}
name|TreeSet
argument_list|<
name|SchedulingSubpart
argument_list|>
name|subparts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|cfg
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
name|cfg
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasSubpartExam
init|=
literal|false
decl_stmt|;
name|InstrOfferingConfig
name|cfg
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|subparts
control|)
block|{
if|if
condition|(
name|iSkipSuffixSubparts
operator|&&
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
operator|&&
name|subpart
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|cfg
operator|==
literal|null
condition|)
block|{
name|cfg
operator|=
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|cfg
operator|.
name|equals
argument_list|(
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
argument_list|)
condition|)
block|{
name|cfg
operator|=
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
expr_stmt|;
name|hasSubpartExam
operator|=
literal|false
expr_stmt|;
block|}
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|TreeSet
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Class_
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Class_
name|c1
parameter_list|,
name|Class_
name|c2
parameter_list|)
block|{
if|if
condition|(
name|iUseClassSuffix
condition|)
block|{
name|String
name|sx1
init|=
name|c1
operator|.
name|getClassSuffix
argument_list|()
decl_stmt|;
name|String
name|sx2
init|=
name|c2
operator|.
name|getClassSuffix
argument_list|()
decl_stmt|;
if|if
condition|(
name|sx1
operator|!=
literal|null
operator|&&
name|sx2
operator|!=
literal|null
condition|)
return|return
name|sx1
operator|.
name|compareTo
argument_list|(
name|sx2
argument_list|)
return|;
block|}
return|return
name|c1
operator|.
name|getSectionNumber
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSectionNumber
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|mw
init|=
literal|null
decl_stmt|;
name|String
name|message
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
literal|null
decl_stmt|;
name|int
name|minEnrl
init|=
literal|0
decl_stmt|,
name|maxEnrl
init|=
literal|0
decl_stmt|,
name|minLimit
init|=
literal|0
decl_stmt|,
name|maxLimit
init|=
literal|0
decl_stmt|;
name|Vector
argument_list|<
name|Class_
argument_list|>
name|same
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|boolean
name|hasSectionExam
init|=
literal|false
decl_stmt|,
name|allSectionsHaveExam
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
if|if
condition|(
operator|!
name|getExams
argument_list|(
name|clazz
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hasSectionExam
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|allSectionsHaveExam
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allSectionsHaveExam
condition|)
name|hasSubpartExam
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
name|Integer
name|enrl
init|=
operator|(
name|iDispLimits
condition|?
name|classLimits
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|same
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|iSkipHoles
operator|||
name|same
operator|.
name|lastElement
argument_list|()
operator|.
name|getSectionNumber
argument_list|()
operator|+
literal|1
operator|==
name|clazz
operator|.
name|getSectionNumber
argument_list|()
operator|)
operator|&&
operator|(
operator|!
name|iDispNote
operator|||
name|ToolBox
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|,
name|same
operator|.
name|lastElement
argument_list|()
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
operator|)
operator|&&
name|exams
operator|.
name|equals
argument_list|(
name|getExams
argument_list|(
name|clazz
argument_list|)
argument_list|)
operator|&&
name|mw
operator|.
name|equals
argument_list|(
name|getMeetWith
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|&&
name|message
operator|.
name|equals
argument_list|(
name|getMessage
argument_list|(
name|clazz
argument_list|,
name|hasCourseExam
operator|||
name|hasSubpartExam
argument_list|,
name|hasSectionExam
argument_list|,
name|class2event
argument_list|)
argument_list|)
condition|)
block|{
name|minEnrl
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minEnrl
argument_list|,
operator|(
name|enrl
operator|==
literal|null
condition|?
literal|0
else|:
name|enrl
operator|.
name|intValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|maxEnrl
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxEnrl
argument_list|,
operator|(
name|enrl
operator|==
literal|null
condition|?
literal|0
else|:
name|enrl
operator|.
name|intValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|minLimit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minLimit
argument_list|,
name|clazz
operator|.
name|getClassLimit
argument_list|()
argument_list|)
expr_stmt|;
name|maxLimit
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxLimit
argument_list|,
name|clazz
operator|.
name|getClassLimit
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|=
name|getMessage
argument_list|(
name|clazz
argument_list|,
name|hasCourseExam
operator|||
name|hasSubpartExam
argument_list|,
name|hasSectionExam
argument_list|,
name|class2event
argument_list|)
expr_stmt|;
name|same
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|same
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
name|same
argument_list|,
name|hasCourseExam
argument_list|,
name|hasSectionExam
argument_list|,
name|minLimit
argument_list|,
name|maxLimit
argument_list|,
name|minEnrl
argument_list|,
name|maxEnrl
argument_list|,
name|class2event
argument_list|)
expr_stmt|;
name|same
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|exams
operator|=
name|getExams
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|mw
operator|=
name|getMeetWith
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|minEnrl
operator|=
name|maxEnrl
operator|=
operator|(
name|enrl
operator|==
literal|null
condition|?
literal|0
else|:
name|enrl
operator|.
name|intValue
argument_list|()
operator|)
expr_stmt|;
name|minLimit
operator|=
name|maxLimit
operator|=
name|clazz
operator|.
name|getClassLimit
argument_list|()
expr_stmt|;
name|message
operator|=
name|getMessage
argument_list|(
name|clazz
argument_list|,
name|hasCourseExam
operator|||
name|hasSubpartExam
argument_list|,
name|hasSectionExam
argument_list|,
name|class2event
argument_list|)
expr_stmt|;
name|same
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|same
operator|.
name|isEmpty
argument_list|()
condition|)
name|print
argument_list|(
name|same
argument_list|,
name|hasCourseExam
operator|||
name|hasSubpartExam
argument_list|,
name|hasSectionExam
argument_list|,
name|minLimit
argument_list|,
name|maxLimit
argument_list|,
name|minEnrl
argument_list|,
name|maxEnrl
argument_list|,
name|class2event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|lastPage
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

