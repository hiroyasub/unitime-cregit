begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|AbstractReport
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|AbstractReport
operator|.
name|Line
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CsvReportWriter
implements|implements
name|ReportWriter
block|{
specifier|private
name|PrintWriter
name|iPrint
init|=
literal|null
decl_stmt|;
specifier|private
name|Line
index|[]
name|iHeaderLine
init|=
literal|null
decl_stmt|;
specifier|public
name|CsvReportWriter
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|title2
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|session
parameter_list|)
throws|throws
name|DocumentException
throws|,
name|IOException
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|open
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFooter
parameter_list|(
name|String
name|footer
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHeader
parameter_list|(
name|Line
modifier|...
name|line
parameter_list|)
block|{
name|iHeaderLine
operator|=
name|line
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Line
index|[]
name|getHeader
parameter_list|()
block|{
return|return
name|iHeaderLine
return|;
block|}
specifier|protected
name|void
name|println
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|DocumentException
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
name|iPrint
operator|.
name|println
argument_list|()
expr_stmt|;
else|else
name|iPrint
operator|.
name|println
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|iPrint
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|DocumentException
throws|,
name|IOException
block|{
name|iPrint
operator|=
operator|new
name|PrintWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPageName
parameter_list|(
name|String
name|pageName
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCont
parameter_list|(
name|String
name|cont
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|printHeader
parameter_list|(
name|boolean
name|newPage
parameter_list|)
throws|throws
name|DocumentException
block|{
if|if
condition|(
name|iHeaderLine
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iHeaderLine
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|iHeaderLine
index|[
name|i
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|printLine
argument_list|(
name|iHeaderLine
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|newPage
parameter_list|()
throws|throws
name|DocumentException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|lastPage
parameter_list|()
throws|throws
name|DocumentException
block|{
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLineNumber
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNrLinesPerPage
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNrCharsPerLine
parameter_list|()
block|{
return|return
literal|1000
return|;
block|}
specifier|private
name|String
name|render
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|getText
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|getPadding
argument_list|()
operator|!=
literal|' '
operator|&&
name|cell
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|<
name|cell
operator|.
name|getLength
argument_list|()
condition|)
name|ret
operator|.
name|append
argument_list|(
name|cell
operator|.
name|render
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|append
argument_list|(
name|cell
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cell
operator|.
name|getCells
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|getText
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|getCellSeparator
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|append
argument_list|(
name|cell
operator|.
name|getCellSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cell
operator|.
name|getCells
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|getCells
argument_list|()
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getCellSeparator
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|append
argument_list|(
name|cell
operator|.
name|getCells
argument_list|()
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getCellSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|append
argument_list|(
name|render
argument_list|(
name|cell
operator|.
name|getCells
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|quote
parameter_list|(
name|String
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|cell
operator|.
name|indexOf
argument_list|(
literal|'"'
argument_list|)
operator|<
literal|0
operator|&&
name|cell
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
operator|<
literal|0
operator|&&
name|cell
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|<
literal|0
condition|)
return|return
name|cell
return|;
return|return
literal|"\""
operator|+
name|cell
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|"\"\""
argument_list|)
operator|+
literal|"\""
return|;
block|}
specifier|private
name|String
name|render
parameter_list|(
name|Line
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|line
operator|.
name|getLines
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|line
operator|.
name|getLines
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|ret
operator|.
name|append
argument_list|(
literal|",,"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|render
argument_list|(
name|line
operator|.
name|getLines
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|line
operator|.
name|getCells
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|line
operator|.
name|getCells
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|getCells
argument_list|()
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getColSpan
argument_list|()
operator|==
literal|0
condition|)
name|ret
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|append
argument_list|(
name|quote
argument_list|(
name|render
argument_list|(
name|line
operator|.
name|getCells
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|line
operator|.
name|getCells
argument_list|()
index|[
name|i
index|]
operator|.
name|getColSpan
argument_list|()
condition|;
name|j
operator|++
control|)
name|ret
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|printLine
parameter_list|(
name|Line
name|line
parameter_list|)
throws|throws
name|DocumentException
block|{
name|println
argument_list|(
name|render
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|printSeparator
parameter_list|(
name|Line
name|line
parameter_list|)
throws|throws
name|DocumentException
block|{
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSeparatorNrLines
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSkipRepeating
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

