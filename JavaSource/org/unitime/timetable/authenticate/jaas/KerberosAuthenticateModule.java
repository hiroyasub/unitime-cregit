begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 - 3.5 (University Timetabling Application)  * Copyright (C) 2012 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|authenticate
operator|.
name|jaas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|security
operator|.
name|auth
operator|.
name|module
operator|.
name|Krb5LoginModule
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|KerberosAuthenticateModule
extends|extends
name|Krb5LoginModule
block|{
specifier|private
name|String
name|iRealm
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|sharedState
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|AddRealmCallbackHandler
argument_list|(
name|callbackHandler
argument_list|)
argument_list|,
name|sharedState
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|iRealm
operator|=
operator|(
name|String
operator|)
name|options
operator|.
name|get
argument_list|(
literal|"realm"
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|AddRealmCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
name|CallbackHandler
name|iHandler
decl_stmt|;
specifier|private
name|AddRealmCallbackHandler
parameter_list|(
name|CallbackHandler
name|handler
parameter_list|)
block|{
name|iHandler
operator|=
name|handler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
name|iHandler
operator|.
name|handle
argument_list|(
name|callbacks
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRealm
operator|!=
literal|null
condition|)
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
name|NameCallback
name|nc
init|=
operator|(
name|NameCallback
operator|)
name|callback
decl_stmt|;
if|if
condition|(
name|nc
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|nc
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"@"
argument_list|)
condition|)
name|nc
operator|.
name|setName
argument_list|(
name|nc
operator|.
name|getName
argument_list|()
operator|+
literal|"@"
operator|+
name|iRealm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

