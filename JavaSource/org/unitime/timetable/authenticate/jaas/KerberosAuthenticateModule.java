begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|authenticate
operator|.
name|jaas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|spi
operator|.
name|LoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ManagerRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|security
operator|.
name|auth
operator|.
name|module
operator|.
name|Krb5LoginModule
import|;
end_import

begin_class
specifier|public
class|class
name|KerberosAuthenticateModule
implements|implements
name|LoginModule
block|{
specifier|private
name|Krb5LoginModule
name|kerberos
init|=
operator|new
name|Krb5LoginModule
argument_list|()
decl_stmt|;
specifier|private
name|Subject
name|subject
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|realm
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|sharedState
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
block|{
name|kerberos
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|AddRealmCallbackHandler
argument_list|(
name|callbackHandler
argument_list|)
argument_list|,
name|sharedState
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
name|this
operator|.
name|realm
operator|=
operator|(
name|String
operator|)
name|options
operator|.
name|get
argument_list|(
literal|"realm"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|login
parameter_list|()
throws|throws
name|LoginException
block|{
return|return
name|kerberos
operator|.
name|login
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|commit
parameter_list|()
throws|throws
name|LoginException
block|{
if|if
condition|(
operator|!
name|kerberos
operator|.
name|commit
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|KerberosPrincipal
name|principal
range|:
name|subject
operator|.
name|getPrincipals
argument_list|(
name|KerberosPrincipal
operator|.
name|class
argument_list|)
control|)
block|{
name|String
name|user
init|=
name|principal
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|endsWith
argument_list|(
literal|"@"
operator|+
name|principal
operator|.
name|getRealm
argument_list|()
argument_list|)
condition|)
name|user
operator|=
name|user
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|user
operator|.
name|length
argument_list|()
operator|-
name|principal
operator|.
name|getRealm
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|User
name|p
init|=
operator|new
name|User
argument_list|()
decl_stmt|;
name|p
operator|.
name|setLogin
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|p
operator|.
name|setId
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|p
operator|.
name|setName
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setAdmin
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|p
operator|.
name|setRoles
argument_list|(
operator|new
name|Vector
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setDepartments
argument_list|(
operator|new
name|Vector
argument_list|()
argument_list|)
expr_stmt|;
name|TimetableManager
name|manager
init|=
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setName
argument_list|(
name|manager
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get roles
for|for
control|(
name|Iterator
name|i
init|=
name|manager
operator|.
name|getManagerRoles
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ManagerRole
name|role
init|=
operator|(
name|ManagerRole
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|p
operator|.
name|getRoles
argument_list|()
operator|.
name|add
argument_list|(
name|role
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Get departments
for|for
control|(
name|Iterator
name|i
init|=
name|manager
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|p
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|dept
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check at least one role is found
if|if
condition|(
name|p
operator|.
name|getRoles
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.authentication.norole"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Role not found. Access denied to user: "
operator|+
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// Add user object to subjects public credentials
name|subject
operator|.
name|getPublicCredentials
argument_list|()
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|abort
parameter_list|()
throws|throws
name|LoginException
block|{
return|return
name|kerberos
operator|.
name|abort
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|logout
parameter_list|()
throws|throws
name|LoginException
block|{
return|return
name|kerberos
operator|.
name|logout
argument_list|()
return|;
block|}
specifier|private
class|class
name|AddRealmCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
name|CallbackHandler
name|iHandler
decl_stmt|;
specifier|private
name|AddRealmCallbackHandler
parameter_list|(
name|CallbackHandler
name|handler
parameter_list|)
block|{
name|iHandler
operator|=
name|handler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
name|iHandler
operator|.
name|handle
argument_list|(
name|callbacks
argument_list|)
expr_stmt|;
if|if
condition|(
name|realm
operator|!=
literal|null
condition|)
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
name|NameCallback
name|nc
init|=
operator|(
name|NameCallback
operator|)
name|callback
decl_stmt|;
if|if
condition|(
name|nc
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|nc
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"@"
argument_list|)
condition|)
name|nc
operator|.
name|setName
argument_list|(
name|nc
operator|.
name|getName
argument_list|()
operator|+
literal|"@"
operator|+
name|realm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

