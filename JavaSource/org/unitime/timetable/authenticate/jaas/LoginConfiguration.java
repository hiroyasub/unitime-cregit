begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|authenticate
operator|.
name|jaas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_comment
comment|/**  * Configure JAAS using tmtbl.authenticate.modules rather than .java.login.config file.  * @author Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|LoginConfiguration
extends|extends
name|Configuration
block|{
specifier|private
specifier|static
name|AppConfigurationEntry
index|[]
name|sEntries
init|=
literal|null
decl_stmt|;
specifier|public
name|LoginConfiguration
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Configuring authentication service ..."
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|module
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.authenticate.modules"
argument_list|,
literal|"sufficient "
operator|+
name|DbAuthenticateModule
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|";"
operator|+
literal|"sufficient "
operator|+
name|LdapAuthenticateModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|sEntries
operator|=
operator|new
name|AppConfigurationEntry
index|[
name|module
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|module
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|LoginModuleControlFlag
name|flag
init|=
name|LoginModuleControlFlag
operator|.
name|SUFFICIENT
decl_stmt|;
name|String
name|m
init|=
name|module
index|[
name|idx
index|]
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>
literal|0
condition|)
block|{
name|String
name|f
init|=
name|m
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|m
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
name|m
operator|=
name|m
operator|.
name|substring
argument_list|(
name|m
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"sufficient"
argument_list|)
condition|)
name|flag
operator|=
name|LoginModuleControlFlag
operator|.
name|SUFFICIENT
expr_stmt|;
if|else if
condition|(
name|f
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"optional"
argument_list|)
condition|)
name|flag
operator|=
name|LoginModuleControlFlag
operator|.
name|OPTIONAL
expr_stmt|;
if|else if
condition|(
name|f
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"required"
argument_list|)
condition|)
name|flag
operator|=
name|LoginModuleControlFlag
operator|.
name|REQUIRED
expr_stmt|;
if|else if
condition|(
name|f
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"requisite"
argument_list|)
condition|)
name|flag
operator|=
name|LoginModuleControlFlag
operator|.
name|REQUISITE
expr_stmt|;
block|}
name|Debug
operator|.
name|info
argument_list|(
literal|"  Using "
operator|+
name|m
operator|+
literal|" ("
operator|+
name|flag
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|sEntries
index|[
name|idx
index|]
operator|=
operator|new
name|AppConfigurationEntry
argument_list|(
name|m
argument_list|,
name|flag
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|sEntries
operator|==
literal|null
condition|)
name|init
argument_list|()
expr_stmt|;
return|return
name|sEntries
return|;
block|}
block|}
end_class

end_unit

