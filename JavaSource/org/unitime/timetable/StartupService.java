begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|engine
operator|.
name|jdbc
operator|.
name|connections
operator|.
name|spi
operator|.
name|ConnectionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|internal
operator|.
name|SessionFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|DisposableBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|InitializingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|connection
operator|.
name|DisposableConnectionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventExpirationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ApplicationConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|_BaseRootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LogCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|MessageLogAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|RoomAvailability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|queue
operator|.
name|LocalQueueProcessor
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"startupService"
argument_list|)
specifier|public
class|class
name|StartupService
implements|implements
name|InitializingBean
implements|,
name|DisposableBean
block|{
specifier|private
name|Exception
name|iInitializationException
init|=
literal|null
decl_stmt|;
specifier|private
name|MessageLogAppender
name|iMessageLogAppender
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"******* UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" build on "
operator|+
name|Constants
operator|.
name|getReleaseDate
argument_list|()
operator|+
literal|" is starting up *******"
argument_list|)
expr_stmt|;
try|try
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|" - Initializing Logging ... "
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|init
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|info
argument_list|(
literal|" - Initializing Hibernate ... "
argument_list|)
expr_stmt|;
name|_RootDAO
operator|.
name|initialize
argument_list|()
expr_stmt|;
comment|// Update logging according to the changes recorded in the application config
name|ApplicationConfig
operator|.
name|configureLogging
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|info
argument_list|(
literal|" - Creating Message Log Appender ... "
argument_list|)
expr_stmt|;
name|iMessageLogAppender
operator|=
operator|new
name|MessageLogAppender
argument_list|()
expr_stmt|;
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|addAppender
argument_list|(
name|iMessageLogAppender
argument_list|)
expr_stmt|;
if|if
condition|(
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|" - Initializing Room Availability Service ... "
argument_list|)
expr_stmt|;
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|startService
argument_list|()
expr_stmt|;
block|}
name|StudentSectioningPref
operator|.
name|updateStudentSectioningPreferences
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|info
argument_list|(
literal|" - Cleaning Logs ..."
argument_list|)
expr_stmt|;
name|LogCleaner
operator|.
name|cleanupLogs
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|info
argument_list|(
literal|" - Starting Event Expiration Service ..."
argument_list|)
expr_stmt|;
name|EventExpirationService
operator|.
name|getInstance
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|info
argument_list|(
literal|"******* UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" build on "
operator|+
name|Constants
operator|.
name|getReleaseDate
argument_list|()
operator|+
literal|" initialized successfully *******"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"UniTime Initialization Failed : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iInitializationException
operator|=
name|e
expr_stmt|;
block|}
finally|finally
block|{
name|_RootDAO
operator|.
name|closeCurrentThreadSessions
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Exception
name|getInitializationException
parameter_list|()
block|{
return|return
name|iInitializationException
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"******* UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" build on "
operator|+
name|Constants
operator|.
name|getReleaseDate
argument_list|()
operator|+
literal|" is going down *******"
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|info
argument_list|(
literal|" - Stopping Event Expiration Service ..."
argument_list|)
expr_stmt|;
name|EventExpirationService
operator|.
name|getInstance
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|SolverInfo
operator|.
name|stopInfoCacheCleanup
argument_list|()
expr_stmt|;
name|ApplicationProperties
operator|.
name|stopListener
argument_list|()
expr_stmt|;
if|if
condition|(
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|" - Stopping Room Availability Service ... "
argument_list|)
expr_stmt|;
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|stopService
argument_list|()
expr_stmt|;
block|}
name|LocalQueueProcessor
operator|.
name|stopProcessor
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|info
argument_list|(
literal|" - Removing Message Log Appender ... "
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|removeAppender
argument_list|(
name|iMessageLogAppender
argument_list|)
expr_stmt|;
name|iMessageLogAppender
operator|.
name|close
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|info
argument_list|(
literal|" - Closing Hibernate ... "
argument_list|)
expr_stmt|;
operator|(
operator|new
name|_BaseRootDAO
argument_list|()
block|{
name|void
name|closeHibernate
parameter_list|()
block|{
name|SessionFactory
name|sf
init|=
name|sSessionFactory
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|sSessionFactory
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|sf
operator|instanceof
name|SessionFactoryImpl
condition|)
block|{
name|ConnectionProvider
name|cp
init|=
operator|(
operator|(
name|SessionFactoryImpl
operator|)
name|sf
operator|)
operator|.
name|getConnectionProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|cp
operator|instanceof
name|DisposableConnectionProvider
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|DisposableConnectionProvider
operator|)
name|cp
operator|)
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
block|}
name|sf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Class
name|getReferenceClass
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
operator|)
operator|.
name|closeHibernate
argument_list|()
expr_stmt|;
comment|// CacheManager.getInstance().shutdown();
name|Debug
operator|.
name|info
argument_list|(
literal|"******* UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" shut down successfully *******"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"UniTime Shutdown Failed : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
else|else
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"UniTime Shutdown Failed : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

