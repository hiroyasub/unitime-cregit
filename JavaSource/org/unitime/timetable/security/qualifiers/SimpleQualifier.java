begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|qualifiers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|Qualifiable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SimpleQualifier
extends|extends
name|AbstractQualifier
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|SimpleQualifier
parameter_list|(
name|Qualifiable
name|qualifiable
parameter_list|)
block|{
name|super
argument_list|(
name|qualifiable
operator|.
name|getQualifierType
argument_list|()
argument_list|,
name|qualifiable
operator|.
name|getQualifierId
argument_list|()
argument_list|,
name|qualifiable
operator|.
name|getQualifierReference
argument_list|()
argument_list|,
name|qualifiable
operator|.
name|getQualifierLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SimpleQualifier
parameter_list|(
name|String
name|type
parameter_list|,
name|Serializable
name|id
parameter_list|,
name|String
name|reference
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|id
argument_list|,
name|reference
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SimpleQualifier
parameter_list|(
name|String
name|type
parameter_list|,
name|Serializable
name|idOrReference
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
operator|(
name|idOrReference
operator|instanceof
name|String
condition|?
literal|null
else|:
name|idOrReference
operator|)
argument_list|,
operator|(
name|idOrReference
operator|instanceof
name|String
condition|?
operator|(
name|String
operator|)
name|idOrReference
else|:
literal|null
operator|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

