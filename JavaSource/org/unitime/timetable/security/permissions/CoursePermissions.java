begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverServerService
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CoursePermissions
block|{
annotation|@
name|Service
argument_list|(
literal|"permissionOfferingLockNeeded"
argument_list|)
specifier|public
specifier|static
class|class
name|OfferingLockNeeded
implements|implements
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionSession
name|permissionSession
decl_stmt|;
annotation|@
name|Autowired
name|SolverServerService
name|solverServerService
decl_stmt|;
specifier|protected
name|OnlineSectioningServer
name|getInstance
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|solverServerService
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|getSolver
argument_list|(
name|sessionId
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|InstructionalOffering
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|isNotOffered
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getSession
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|StudentsAssistant
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|StudentsOnline
argument_list|)
condition|)
return|return
literal|false
return|;
name|OnlineSectioningServer
name|server
init|=
name|getInstance
argument_list|(
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|server
operator|!=
literal|null
operator|&&
operator|!
name|server
operator|.
name|isOfferingLocked
argument_list|(
name|source
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|InstructionalOffering
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|InstructionalOffering
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|Service
argument_list|(
literal|"permissionOfferingLockNeededLimitedEdit"
argument_list|)
specifier|public
specifier|static
class|class
name|OfferingLockNeededLimitedEdit
implements|implements
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionSession
name|permissionSession
decl_stmt|;
annotation|@
name|Autowired
name|SolverServerService
name|solverServerService
decl_stmt|;
specifier|protected
name|OnlineSectioningServer
name|getInstance
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|solverServerService
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|getSolver
argument_list|(
name|sessionId
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|InstructionalOffering
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|isNotOffered
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getSession
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|StudentsOnline
argument_list|)
condition|)
return|return
literal|false
return|;
name|OnlineSectioningServer
name|server
init|=
name|getInstance
argument_list|(
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|server
operator|!=
literal|null
operator|&&
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
operator|&&
operator|!
name|server
operator|.
name|isOfferingLocked
argument_list|(
name|source
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|InstructionalOffering
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|InstructionalOffering
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|Service
argument_list|(
literal|"permissionOfferingEdit"
argument_list|)
specifier|public
specifier|static
class|class
name|OfferingEdit
implements|implements
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|InstructionalOffering
name|source
parameter_list|)
block|{
comment|// Owner can edit one of the course offerings
for|for
control|(
name|CourseOffering
name|course
range|:
name|source
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|course
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerLimitedEdit
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
comment|// Manager can edit external department
name|Set
argument_list|<
name|Department
argument_list|>
name|externals
init|=
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|source
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
if|if
condition|(
name|externals
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerLimitedEdit
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|InstructionalOffering
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|InstructionalOffering
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|OfferingCanLock
argument_list|)
specifier|public
specifier|static
class|class
name|OfferingCanLock
implements|implements
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
block|{
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingEdit
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeeded
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|InstructionalOffering
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// locking not need (e.g., bad status or already locked)
if|if
condition|(
operator|!
name|permissionOfferingEdit
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// user is not able to edit the offering -> no need to lock
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|InstructionalOffering
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|InstructionalOffering
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|OfferingCanUnlock
argument_list|)
specifier|public
specifier|static
class|class
name|OfferingCanUnlock
implements|implements
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
block|{
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingEdit
decl_stmt|;
annotation|@
name|Autowired
name|SolverServerService
name|solverServerService
decl_stmt|;
specifier|protected
name|OnlineSectioningServer
name|getInstance
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|solverServerService
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|getSolver
argument_list|(
name|sessionId
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|InstructionalOffering
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|permissionOfferingEdit
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// user is not able to edit the offering -> no need to lock
name|OnlineSectioningServer
name|server
init|=
name|getInstance
argument_list|(
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|OfferingCanUnlock
argument_list|)
operator|&&
name|server
operator|!=
literal|null
operator|&&
name|server
operator|.
name|isOfferingLocked
argument_list|(
name|source
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|InstructionalOffering
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|InstructionalOffering
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|AddCourseOffering
argument_list|)
specifier|public
specifier|static
class|class
name|AddCourseOffering
implements|implements
name|Permission
argument_list|<
name|SubjectArea
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|SubjectArea
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|SubjectArea
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|SubjectArea
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructionalOfferingDetail
argument_list|)
specifier|public
specifier|static
class|class
name|InstructionalOfferingDetail
implements|implements
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|InstructionalOffering
name|source
parameter_list|)
block|{
comment|// Owner can view one of the course offerings
for|for
control|(
name|CourseOffering
name|course
range|:
name|source
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|course
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerView
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
comment|/* 			for (Department dept: source.getSession().getDepartments()) { 				if (dept.isExternalManager()&& permissionDepartment.check(user, dept, DepartmentStatusType.Status.ManagerView)) 					return true; 			} 			*/
comment|// Manager can view one of the classes
name|Set
argument_list|<
name|Department
argument_list|>
name|externals
init|=
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|source
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
if|if
condition|(
name|externals
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerView
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|InstructionalOffering
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|InstructionalOffering
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|SchedulingSubpartDetail
argument_list|)
specifier|public
specifier|static
class|class
name|SchedulingSubpartDetail
implements|implements
name|Permission
argument_list|<
name|SchedulingSubpart
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|SchedulingSubpart
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getControllingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerView
argument_list|,
name|source
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerView
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|SchedulingSubpart
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|SchedulingSubpart
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ClassDetail
argument_list|)
specifier|public
specifier|static
class|class
name|ClassDetail
implements|implements
name|Permission
argument_list|<
name|Class_
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Class_
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getControllingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerView
argument_list|,
name|source
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerView
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Class_
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Class_
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ClassEdit
argument_list|)
specifier|public
specifier|static
class|class
name|ClassEdit
implements|implements
name|Permission
argument_list|<
name|Class_
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeeded
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Class_
name|source
parameter_list|)
block|{
comment|// cancelled classes cannot be edited
if|if
condition|(
name|source
operator|.
name|isCancelled
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
operator|!
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getControllingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|,
name|source
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerEdit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Class_
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Class_
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|SchedulingSubpartEdit
argument_list|)
specifier|public
specifier|static
class|class
name|SchedulingSubpartEdit
implements|implements
name|Permission
argument_list|<
name|SchedulingSubpart
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeeded
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|SchedulingSubpart
name|source
parameter_list|)
block|{
return|return
operator|!
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getControllingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|,
name|source
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerEdit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|SchedulingSubpart
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|SchedulingSubpart
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|MultipleClassSetup
argument_list|)
specifier|public
specifier|static
class|class
name|MultipleClassSetup
implements|implements
name|Permission
argument_list|<
name|InstrOfferingConfig
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeeded
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|InstrOfferingConfig
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// Manager can edit external department
name|Set
argument_list|<
name|Department
argument_list|>
name|externals
init|=
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|source
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
if|if
condition|(
name|externals
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerEdit
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|InstrOfferingConfig
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstrOfferingConfigEdit
argument_list|)
specifier|public
specifier|static
class|class
name|InstrOfferingConfigEdit
implements|implements
name|Permission
argument_list|<
name|InstrOfferingConfig
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeeded
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|InstrOfferingConfig
name|source
parameter_list|)
block|{
if|if
condition|(
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|source
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|InstrOfferingConfig
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstrOfferingConfigAdd
argument_list|)
specifier|public
specifier|static
class|class
name|InstrOfferingConfigAdd
implements|implements
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeeded
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|InstructionalOffering
name|source
parameter_list|)
block|{
if|if
condition|(
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|source
operator|.
name|isNotOffered
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|InstructionalOffering
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|InstructionalOffering
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstrOfferingConfigDelete
argument_list|)
specifier|public
specifier|static
class|class
name|InstrOfferingConfigDelete
implements|implements
name|Permission
argument_list|<
name|InstrOfferingConfig
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeeded
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|InstrOfferingConfig
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|source
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|source
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Manager can edit external department
name|Set
argument_list|<
name|Department
argument_list|>
name|externals
init|=
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|source
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
if|if
condition|(
name|externals
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
operator|&&
operator|!
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerEdit
argument_list|)
operator|&&
operator|!
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|can
argument_list|(
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|InstrOfferingConfig
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstrOfferingConfigEditDepartment
argument_list|)
specifier|public
specifier|static
class|class
name|InstrOfferingConfigEditDepartment
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|isExternalManager
argument_list|()
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerEdit
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|source
operator|.
name|isExternalManager
argument_list|()
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|source
operator|.
name|isExternalManager
argument_list|()
operator|&&
name|source
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|can
argument_list|(
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstrOfferingConfigEditSubpart
argument_list|)
specifier|public
specifier|static
class|class
name|InstrOfferingConfigEditSubpart
extends|extends
name|SchedulingSubpartEdit
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructionalOfferingCrossLists
argument_list|)
specifier|public
specifier|static
class|class
name|InstructionalOfferingCrossLists
implements|implements
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeeded
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|InstructionalOffering
name|source
parameter_list|)
block|{
if|if
condition|(
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|InstructionalOffering
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|InstructionalOffering
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|MultipleClassSetupDepartment
argument_list|)
specifier|public
specifier|static
class|class
name|MultipleClassSetupDepartment
extends|extends
name|InstrOfferingConfigEditDepartment
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|MultipleClassSetupClass
argument_list|)
specifier|public
specifier|static
class|class
name|MultipleClassSetupClassEdit
extends|extends
name|ClassEdit
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|OfferingMakeOffered
argument_list|)
specifier|public
specifier|static
class|class
name|OfferingMakeOffered
implements|implements
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|InstructionalOffering
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|source
operator|.
name|isNotOffered
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|InstructionalOffering
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|InstructionalOffering
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|OfferingMakeNotOffered
argument_list|)
specifier|public
specifier|static
class|class
name|OfferingMakeNotOffered
implements|implements
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeeded
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|InstructionalOffering
name|source
parameter_list|)
block|{
if|if
condition|(
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|source
operator|.
name|isNotOffered
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|InstructionalOffering
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|InstructionalOffering
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|OfferingDelete
argument_list|)
specifier|public
specifier|static
class|class
name|OfferingDelete
implements|implements
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|InstructionalOffering
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|source
operator|.
name|isNotOffered
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|InstructionalOffering
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|InstructionalOffering
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|EditCourseOffering
argument_list|)
specifier|public
specifier|static
class|class
name|EditCourseOffering
implements|implements
name|Permission
argument_list|<
name|CourseOffering
argument_list|>
block|{
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeeded
decl_stmt|;
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|CourseOffering
name|source
parameter_list|)
block|{
if|if
condition|(
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|CourseOffering
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|CourseOffering
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|EditCourseOfferingNote
argument_list|)
specifier|public
specifier|static
class|class
name|EditCourseOfferingNote
implements|implements
name|Permission
argument_list|<
name|CourseOffering
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|CourseOffering
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerLimitedEdit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|CourseOffering
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|CourseOffering
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|EditCourseOfferingCoordinators
argument_list|)
specifier|public
specifier|static
class|class
name|EditCourseOfferingCoordinators
implements|implements
name|Permission
argument_list|<
name|CourseOffering
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|CourseOffering
name|source
parameter_list|)
block|{
return|return
name|source
operator|.
name|isIsControl
argument_list|()
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerLimitedEdit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|CourseOffering
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|CourseOffering
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|CanUseHardPeriodPrefs
argument_list|)
specifier|public
specifier|static
class|class
name|CanUseHardPeriodPrefs
implements|implements
name|Permission
argument_list|<
name|PreferenceGroup
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|PreferenceGroup
name|source
parameter_list|)
block|{
return|return
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|PreferenceGroup
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|PreferenceGroup
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|CanUseHardTimePrefs
argument_list|)
specifier|public
specifier|static
class|class
name|CanUseHardTimePrefs
implements|implements
name|Permission
argument_list|<
name|PreferenceGroup
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|PreferenceGroup
name|source
parameter_list|)
block|{
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
operator|||
name|source
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|true
return|;
name|Department
name|department
init|=
name|source
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|Class_
condition|)
name|department
operator|=
operator|(
operator|(
name|Class_
operator|)
name|source
operator|)
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|SchedulingSubpart
condition|)
name|department
operator|=
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|source
operator|)
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
return|return
name|department
operator|==
literal|null
operator|||
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
name|department
argument_list|)
operator|||
name|source
operator|.
name|getDepartment
argument_list|()
operator|.
name|getAllowReqTime
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|PreferenceGroup
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|PreferenceGroup
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|CanUseHardRoomPrefs
argument_list|)
specifier|public
specifier|static
class|class
name|CanUseHardRoomPrefs
implements|implements
name|Permission
argument_list|<
name|PreferenceGroup
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|PreferenceGroup
name|source
parameter_list|)
block|{
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
operator|||
name|source
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|true
return|;
name|Department
name|department
init|=
name|source
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|Class_
condition|)
name|department
operator|=
operator|(
operator|(
name|Class_
operator|)
name|source
operator|)
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|SchedulingSubpart
condition|)
name|department
operator|=
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|source
operator|)
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
return|return
name|department
operator|==
literal|null
operator|||
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
name|department
argument_list|)
operator|||
name|source
operator|.
name|getDepartment
argument_list|()
operator|.
name|getAllowReqRoom
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|PreferenceGroup
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|PreferenceGroup
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|CanUseHardDistributionPrefs
argument_list|)
specifier|public
specifier|static
class|class
name|CanUseHardDistributionPrefs
implements|implements
name|Permission
argument_list|<
name|PreferenceGroup
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|PreferenceGroup
name|source
parameter_list|)
block|{
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
operator|||
name|source
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|true
return|;
name|Department
name|department
init|=
name|source
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|Class_
condition|)
name|department
operator|=
operator|(
operator|(
name|Class_
operator|)
name|source
operator|)
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|SchedulingSubpart
condition|)
name|department
operator|=
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|source
operator|)
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
return|return
name|department
operator|==
literal|null
operator|||
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
name|department
argument_list|)
operator|||
name|source
operator|.
name|getDepartment
argument_list|()
operator|.
name|getAllowReqDistribution
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|PreferenceGroup
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|PreferenceGroup
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructionalOfferings
argument_list|)
specifier|public
specifier|static
class|class
name|InstructionalOfferings
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerView
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerView
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructionalOfferingsExportPDF
argument_list|)
specifier|public
specifier|static
class|class
name|InstructionalOfferingsExportPDF
extends|extends
name|InstructionalOfferings
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructionalOfferingsWorksheetPDF
argument_list|)
specifier|public
specifier|static
class|class
name|InstructionalOfferingsWorksheetPDF
extends|extends
name|InstructionalOfferings
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|Classes
argument_list|)
specifier|public
specifier|static
class|class
name|Classes
extends|extends
name|InstructionalOfferings
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ClassesExportPDF
argument_list|)
specifier|public
specifier|static
class|class
name|ClassesExportPDF
extends|extends
name|InstructionalOfferings
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DistributionPreferenceClass
argument_list|)
specifier|public
specifier|static
class|class
name|DistributionPreferenceClass
extends|extends
name|ClassEdit
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ClassEditClearPreferences
argument_list|)
specifier|public
specifier|static
class|class
name|ClassEditClearPreferences
extends|extends
name|ClassEdit
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DistributionPreferenceSubpart
argument_list|)
specifier|public
specifier|static
class|class
name|DistributionPreferenceSubpart
extends|extends
name|SchedulingSubpartEdit
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|SchedulingSubpartDetailClearClassPreferences
argument_list|)
specifier|public
specifier|static
class|class
name|SchedulingSubpartDetailClearClassPreferences
extends|extends
name|SchedulingSubpartEdit
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|SchedulingSubpartEditClearPreferences
argument_list|)
specifier|public
specifier|static
class|class
name|SchedulingSubpartEditClearPreferences
extends|extends
name|SchedulingSubpartEdit
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DistributionPreferences
argument_list|)
specifier|public
specifier|static
class|class
name|DistributionPreferences
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|,
name|source
operator|.
name|isExternalManager
argument_list|()
condition|?
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerView
else|:
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerView
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DistributionPreferenceAdd
argument_list|)
specifier|public
specifier|static
class|class
name|DistributionPreferenceAdd
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|,
name|source
operator|.
name|isExternalManager
argument_list|()
condition|?
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerEdit
else|:
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DistributionPreferenceEdit
argument_list|)
specifier|public
specifier|static
class|class
name|DistributionPreferenceEdit
implements|implements
name|Permission
argument_list|<
name|DistributionPref
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|Class_
argument_list|>
name|permissionClassEdit
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|SchedulingSubpart
argument_list|>
name|permissionSchedulingSubpartEdit
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|DistributionPref
name|source
parameter_list|)
block|{
comment|// Get owning department
name|Department
name|owner
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|getOwner
argument_list|()
operator|instanceof
name|DepartmentalInstructor
condition|)
block|{
name|owner
operator|=
operator|(
operator|(
name|DepartmentalInstructor
operator|)
name|source
operator|.
name|getOwner
argument_list|()
operator|)
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|owner
operator|=
operator|(
name|Department
operator|)
name|source
operator|.
name|getOwner
argument_list|()
expr_stmt|;
block|}
comment|// No owning department
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// If departmental dependent role, check distribution type applicability
if|if
condition|(
operator|!
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
operator|&&
operator|!
name|source
operator|.
name|getDistributionType
argument_list|()
operator|.
name|isApplicable
argument_list|(
name|owner
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// If my department -> check status
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|owner
argument_list|)
condition|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|owner
argument_list|,
name|owner
operator|.
name|isExternalManager
argument_list|()
condition|?
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerEdit
else|:
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
return|;
block|}
else|else
block|{
block|}
comment|// Not my department -- check if it is allowed to require
if|if
condition|(
operator|!
name|owner
operator|.
name|isAllowReqDistribution
argument_list|()
condition|)
block|{
if|if
condition|(
name|source
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
block|{
if|if
condition|(
name|source
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getAllowedPref
argument_list|()
operator|.
name|indexOf
argument_list|(
name|PreferenceLevel
operator|.
name|sCharLevelStronglyPreferred
argument_list|)
operator|>=
literal|0
condition|)
name|source
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|)
expr_stmt|;
else|else
return|return
literal|false
return|;
block|}
if|if
condition|(
name|source
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
if|if
condition|(
name|source
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getAllowedPref
argument_list|()
operator|.
name|indexOf
argument_list|(
name|PreferenceLevel
operator|.
name|sCharLevelStronglyDiscouraged
argument_list|)
operator|>=
literal|0
condition|)
name|source
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
else|else
return|return
literal|false
return|;
block|}
block|}
comment|// Not my department -- must be able to edit all classes and subparts
for|for
control|(
name|DistributionObject
name|distrObj
range|:
name|source
operator|.
name|getDistributionObjects
argument_list|()
control|)
block|{
if|if
condition|(
name|distrObj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
if|if
condition|(
operator|!
name|permissionClassEdit
operator|.
name|check
argument_list|(
name|user
argument_list|,
operator|(
name|Class_
operator|)
name|distrObj
operator|.
name|getPrefGroup
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|distrObj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
if|if
condition|(
operator|!
name|permissionSchedulingSubpartEdit
operator|.
name|check
argument_list|(
name|user
argument_list|,
operator|(
name|SchedulingSubpart
operator|)
name|distrObj
operator|.
name|getPrefGroup
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|DistributionPref
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|DistributionPref
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DistributionPreferenceDelete
argument_list|)
specifier|public
specifier|static
class|class
name|DistributionPreferenceDelete
implements|implements
name|Permission
argument_list|<
name|DistributionPref
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|Class_
argument_list|>
name|permissionClassEdit
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|SchedulingSubpart
argument_list|>
name|permissionSchedulingSubpartEdit
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|DistributionPref
name|source
parameter_list|)
block|{
comment|// Get owning department
name|Department
name|owner
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|getOwner
argument_list|()
operator|instanceof
name|DepartmentalInstructor
condition|)
block|{
name|owner
operator|=
operator|(
operator|(
name|DepartmentalInstructor
operator|)
name|source
operator|.
name|getOwner
argument_list|()
operator|)
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|owner
operator|=
operator|(
name|Department
operator|)
name|source
operator|.
name|getOwner
argument_list|()
expr_stmt|;
block|}
comment|// No owning department
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
return|return
literal|true
return|;
comment|// If my department -> check status
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|owner
argument_list|)
condition|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|owner
argument_list|,
name|owner
operator|.
name|isExternalManager
argument_list|()
condition|?
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerEdit
else|:
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
return|;
block|}
comment|// Not my department -- must be able to edit all classes and subparts
for|for
control|(
name|DistributionObject
name|distrObj
range|:
name|source
operator|.
name|getDistributionObjects
argument_list|()
control|)
block|{
if|if
condition|(
name|distrObj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
if|if
condition|(
operator|!
name|permissionClassEdit
operator|.
name|check
argument_list|(
name|user
argument_list|,
operator|(
name|Class_
operator|)
name|distrObj
operator|.
name|getPrefGroup
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|distrObj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
if|if
condition|(
operator|!
name|permissionSchedulingSubpartEdit
operator|.
name|check
argument_list|(
name|user
argument_list|,
operator|(
name|SchedulingSubpart
operator|)
name|distrObj
operator|.
name|getPrefGroup
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|DistributionPref
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|DistributionPref
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DistributionPreferenceDetail
argument_list|)
specifier|public
specifier|static
class|class
name|DistributionPreferenceDetail
implements|implements
name|Permission
argument_list|<
name|DistributionPref
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|Class_
argument_list|>
name|permissionClassDetail
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|SchedulingSubpart
argument_list|>
name|permissionSchedulingSubpartDetail
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|DistributionPref
name|source
parameter_list|)
block|{
comment|// Get owning department
name|Department
name|owner
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|getOwner
argument_list|()
operator|instanceof
name|DepartmentalInstructor
condition|)
block|{
name|owner
operator|=
operator|(
operator|(
name|DepartmentalInstructor
operator|)
name|source
operator|.
name|getOwner
argument_list|()
operator|)
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|owner
operator|=
operator|(
name|Department
operator|)
name|source
operator|.
name|getOwner
argument_list|()
expr_stmt|;
block|}
comment|// No owning department
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// If my department -> check status
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|owner
argument_list|)
condition|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|owner
argument_list|,
name|owner
operator|.
name|isExternalManager
argument_list|()
condition|?
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerView
else|:
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerView
argument_list|)
return|;
block|}
comment|// Not my department -- must be able to view at least one class or subpart
for|for
control|(
name|DistributionObject
name|distrObj
range|:
name|source
operator|.
name|getDistributionObjects
argument_list|()
control|)
block|{
if|if
condition|(
name|distrObj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
if|if
condition|(
name|permissionClassDetail
operator|.
name|check
argument_list|(
name|user
argument_list|,
operator|(
name|Class_
operator|)
name|distrObj
operator|.
name|getPrefGroup
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|distrObj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
if|if
condition|(
name|permissionSchedulingSubpartDetail
operator|.
name|check
argument_list|(
name|user
argument_list|,
operator|(
name|SchedulingSubpart
operator|)
name|distrObj
operator|.
name|getPrefGroup
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|DistributionPref
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|DistributionPref
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ClassDelete
argument_list|)
specifier|public
specifier|static
class|class
name|ClassDelete
extends|extends
name|ClassDeleteNoEnrollmentCheck
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Class_
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|ClassDeleteNoEnrollmentCheck
argument_list|)
condition|)
block|{
comment|// There is a committed solution -> class with enrollment cannot be edited
if|if
condition|(
name|source
operator|.
name|getManagingDept
argument_list|()
operator|!=
literal|null
operator|&&
name|source
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|!=
literal|null
operator|&&
name|source
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|getCommittedSolution
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|source
operator|.
name|getEnrollment
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
name|super
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ClassDeleteNoEnrollmentCheck
argument_list|)
specifier|public
specifier|static
class|class
name|ClassDeleteNoEnrollmentCheck
implements|implements
name|Permission
argument_list|<
name|Class_
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeeded
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Class_
name|source
parameter_list|)
block|{
return|return
operator|!
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getControllingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|,
name|source
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerEdit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Class_
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Class_
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ClassCancel
argument_list|)
specifier|public
specifier|static
class|class
name|ClassCancel
implements|implements
name|Permission
argument_list|<
name|Class_
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeeded
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Class_
name|source
parameter_list|)
block|{
comment|// Must have a committed solution (not the class per se, but the managing department)
if|if
condition|(
name|source
operator|.
name|getManagingDept
argument_list|()
operator|==
literal|null
operator|||
name|source
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|==
literal|null
operator|||
name|source
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|getCommittedSolution
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
operator|!
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getControllingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|,
name|source
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerEdit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Class_
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Class_
operator|.
name|class
return|;
block|}
block|}
block|}
end_class

end_unit

