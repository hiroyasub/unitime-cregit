begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Curriculum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_class
specifier|public
class|class
name|CurriculumPermissions
block|{
annotation|@
name|Service
argument_list|(
literal|"permissionCurriculumView"
argument_list|)
specifier|public
specifier|static
class|class
name|CanView
implements|implements
name|Permission
argument_list|<
name|Session
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionSession
name|permissionSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|source
parameter_list|)
block|{
return|return
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|,
name|Right
operator|.
name|CurriculumView
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Session
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Session
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|Service
argument_list|(
literal|"permissionCurriculumAdd"
argument_list|)
specifier|public
specifier|static
class|class
name|CanAdd
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
return|return
name|source
operator|!=
literal|null
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|,
name|Right
operator|.
name|CurriculumAdd
argument_list|,
operator|(
name|source
operator|.
name|isExternalManager
argument_list|()
condition|?
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerEdit
else|:
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|Service
argument_list|(
literal|"permissionCurriculumEdit"
argument_list|)
specifier|public
specifier|static
class|class
name|CanEdit
implements|implements
name|Permission
argument_list|<
name|Curriculum
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Curriculum
name|source
parameter_list|)
block|{
name|Department
name|department
init|=
operator|(
name|source
operator|==
literal|null
condition|?
literal|null
else|:
name|source
operator|.
name|getDepartment
argument_list|()
operator|)
decl_stmt|;
return|return
name|department
operator|!=
literal|null
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|department
argument_list|,
name|Right
operator|.
name|CurriculumEdit
argument_list|,
operator|(
name|department
operator|.
name|isExternalManager
argument_list|()
condition|?
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerEdit
else|:
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Curriculum
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Curriculum
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|Service
argument_list|(
literal|"permissionCurriculumDetail"
argument_list|)
specifier|public
specifier|static
class|class
name|CanDetail
implements|implements
name|Permission
argument_list|<
name|Curriculum
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Curriculum
name|source
parameter_list|)
block|{
return|return
name|source
operator|!=
literal|null
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|Right
operator|.
name|CurriculumDetail
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Curriculum
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Curriculum
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|Service
argument_list|(
literal|"permissionCurriculumDelete"
argument_list|)
specifier|public
specifier|static
class|class
name|CanDelete
implements|implements
name|Permission
argument_list|<
name|Curriculum
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Curriculum
name|source
parameter_list|)
block|{
name|Department
name|department
init|=
operator|(
name|source
operator|==
literal|null
condition|?
literal|null
else|:
name|source
operator|.
name|getDepartment
argument_list|()
operator|)
decl_stmt|;
return|return
name|department
operator|!=
literal|null
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|department
argument_list|,
name|Right
operator|.
name|CurriculumDelete
argument_list|,
operator|(
name|department
operator|.
name|isExternalManager
argument_list|()
condition|?
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerEdit
else|:
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Curriculum
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Curriculum
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|Service
argument_list|(
literal|"permissionCurriculumMerge"
argument_list|)
specifier|public
specifier|static
class|class
name|CanMerge
implements|implements
name|Permission
argument_list|<
name|Curriculum
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Curriculum
name|source
parameter_list|)
block|{
name|Department
name|department
init|=
operator|(
name|source
operator|==
literal|null
condition|?
literal|null
else|:
name|source
operator|.
name|getDepartment
argument_list|()
operator|)
decl_stmt|;
return|return
name|department
operator|!=
literal|null
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|department
argument_list|,
name|Right
operator|.
name|CurriculumMerge
argument_list|,
operator|(
name|department
operator|.
name|isExternalManager
argument_list|()
condition|?
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerEdit
else|:
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Curriculum
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Curriculum
operator|.
name|class
return|;
block|}
block|}
block|}
end_class

end_unit

