begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
operator|.
name|Permission
operator|.
name|PermissionSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_class
annotation|@
name|Service
argument_list|(
literal|"permissionSession"
argument_list|)
specifier|public
class|class
name|SimpleSessionPermission
implements|implements
name|PermissionSession
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
return|return
name|check
argument_list|(
name|user
argument_list|,
name|session
argument_list|,
name|right
argument_list|()
argument_list|)
operator|&&
name|checkStatus
argument_list|(
name|session
operator|.
name|getStatusType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|session
parameter_list|,
name|Right
name|right
parameter_list|,
name|DepartmentStatusType
operator|.
name|Status
modifier|...
name|status
parameter_list|)
block|{
comment|// Not authenticated or no authority -> no permission
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
operator|||
name|session
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|UserAuthority
name|authority
init|=
name|user
operator|.
name|getCurrentAuthority
argument_list|()
decl_stmt|;
comment|// Academic session check
if|if
condition|(
operator|!
name|authority
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|SessionIndependent
argument_list|)
operator|&&
operator|!
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|authority
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Right check
if|if
condition|(
name|right
operator|!=
literal|null
operator|&&
operator|!
name|authority
operator|.
name|hasRight
argument_list|(
name|right
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Test session check
if|if
condition|(
operator|!
name|authority
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|AllowTestSessions
argument_list|)
operator|&&
operator|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|==
literal|null
operator|||
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
operator|)
condition|)
return|return
literal|false
return|;
comment|// Check session status
if|if
condition|(
name|status
operator|.
name|length
operator|>
literal|0
operator|&&
operator|!
name|authority
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|StatusIndependent
argument_list|)
condition|)
block|{
name|DepartmentStatusType
name|type
init|=
name|session
operator|.
name|getStatusType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|DepartmentStatusType
operator|.
name|Status
name|s
range|:
name|status
control|)
block|{
if|if
condition|(
name|type
operator|.
name|can
argument_list|(
name|s
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Session
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Session
operator|.
name|class
return|;
block|}
specifier|public
name|Right
name|right
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|checkStatus
parameter_list|(
name|DepartmentStatusType
name|status
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

