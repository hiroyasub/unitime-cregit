begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventDateMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PointInTimeData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SavedHQL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SavedHQL
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SponsoringOrganization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ItypeDescDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|AdministrationPermissions
block|{
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|Chameleon
argument_list|)
specifier|public
specifier|static
class|class
name|Chameleon
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DatePatterns
argument_list|)
specifier|public
specifier|static
class|class
name|DatePatterns
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|TimePatterns
argument_list|)
specifier|public
specifier|static
class|class
name|TimePatterns
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ExaminationPeriods
argument_list|)
specifier|public
specifier|static
class|class
name|ExaminationPeriods
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DataExchange
argument_list|)
specifier|public
specifier|static
class|class
name|DataExchange
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|SessionRollForward
argument_list|)
specifier|public
specifier|static
class|class
name|SessionRollForward
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|Departments
argument_list|)
specifier|public
specifier|static
class|class
name|Departments
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DepartmentAdd
argument_list|)
specifier|public
specifier|static
class|class
name|DepartmentAdd
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DepartmentEdit
argument_list|)
specifier|public
specifier|static
class|class
name|DepartmentEdit
extends|extends
name|SimpleDepartmentPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DepartmentLimitedEdit
argument_list|)
specifier|public
specifier|static
class|class
name|DepartmentEditControllingDepartmentStatuses
extends|extends
name|DepartmentEdit
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
return|return
name|super
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
operator|&&
name|source
operator|.
name|isExternalManager
argument_list|()
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DepartmentDelete
argument_list|)
specifier|public
specifier|static
class|class
name|DepartmentDelete
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|Permission
argument_list|<
name|Department
argument_list|>
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|source
operator|.
name|getSolverGroup
argument_list|()
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
name|int
name|nrOffered
init|=
operator|(
operator|(
name|Number
operator|)
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(io) from CourseOffering co inner join co.instructionalOffering io "
operator|+
literal|"where co.subjectArea.department.uniqueId=:deptId and io.notOffered = false"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|source
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
return|return
name|nrOffered
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DepartmentEditChangeExternalManager
argument_list|)
specifier|public
specifier|static
class|class
name|DepartmentEditChangeExternalManager
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|Permission
argument_list|<
name|Department
argument_list|>
name|permissionDepartmentEdit
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|permissionDepartmentEdit
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|source
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
name|int
name|nrExtManaged
init|=
operator|(
operator|(
name|Number
operator|)
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(c) from Class_ c where c.managingDept.uniqueId=:deptId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|source
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
return|return
name|nrExtManaged
operator|==
literal|0
return|;
block|}
else|else
block|{
return|return
name|source
operator|.
name|getSubjectAreas
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|AcademicSessionEdit
argument_list|)
specifier|public
specifier|static
class|class
name|AcademicSessionEdit
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|AcademicSessionDelete
argument_list|)
specifier|public
specifier|static
class|class
name|AcademicSessionDelete
implements|implements
name|Permission
argument_list|<
name|Session
argument_list|>
block|{
annotation|@
name|Autowired
name|Permission
argument_list|<
name|Session
argument_list|>
name|permissionSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|source
operator|.
name|getStatusType
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|source
operator|.
name|getStatusType
argument_list|()
operator|.
name|isActive
argument_list|()
operator|||
name|source
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Session
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Session
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|TimetableManagerEdit
argument_list|)
specifier|public
specifier|static
class|class
name|TimetableManagerEdit
implements|implements
name|Permission
argument_list|<
name|TimetableManager
argument_list|>
block|{
annotation|@
name|Autowired
name|Permission
argument_list|<
name|Session
argument_list|>
name|permissionSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|TimetableManager
name|source
parameter_list|)
block|{
for|for
control|(
name|Department
name|d
range|:
name|source
operator|.
name|getDepartments
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|d
operator|.
name|getSession
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|TimetableManager
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|TimetableManager
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|TimetableManagerDelete
argument_list|)
specifier|public
specifier|static
class|class
name|TimetableManagerDelete
extends|extends
name|TimetableManagerEdit
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|TimetableManager
name|source
parameter_list|)
block|{
for|for
control|(
name|Department
name|d
range|:
name|source
operator|.
name|getDepartments
argument_list|()
control|)
if|if
condition|(
operator|!
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|d
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|SolverGroups
argument_list|)
specifier|public
specifier|static
class|class
name|SolverGroups
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|SubjectAreas
argument_list|)
specifier|public
specifier|static
class|class
name|SubjectAreas
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|SubjectAreaAdd
argument_list|)
specifier|public
specifier|static
class|class
name|SubjectAreaAdd
extends|extends
name|SubjectAreas
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|SubjectAreaEdit
argument_list|)
specifier|public
specifier|static
class|class
name|SubjectAreaEdit
implements|implements
name|Permission
argument_list|<
name|SubjectArea
argument_list|>
block|{
annotation|@
name|Autowired
name|Permission
argument_list|<
name|Department
argument_list|>
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|SubjectArea
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|SubjectArea
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|SubjectArea
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|SubjectAreaDelete
argument_list|)
specifier|public
specifier|static
class|class
name|SubjectAreaDelete
extends|extends
name|SubjectAreaEdit
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|SubjectArea
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
operator|!
name|source
operator|.
name|hasOfferedCourses
argument_list|()
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|SubjectAreaChangeDepartment
argument_list|)
specifier|public
specifier|static
class|class
name|SubjectAreaChangeDepartment
extends|extends
name|SubjectAreaEdit
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|SubjectArea
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
operator|!
name|source
operator|.
name|hasOfferedCourses
argument_list|()
operator|||
name|source
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
operator|||
name|source
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|==
literal|null
operator|||
name|source
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|getSolutions
argument_list|()
operator|==
literal|null
operator|||
name|source
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|getSolutions
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|LastChanges
argument_list|)
specifier|public
specifier|static
class|class
name|LastChanges
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructionalTypeEdit
argument_list|)
specifier|public
specifier|static
class|class
name|InstructionalTypeEdit
implements|implements
name|Permission
argument_list|<
name|ItypeDesc
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|ItypeDesc
name|source
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|ItypeDesc
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|ItypeDesc
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructionalTypeDelete
argument_list|)
specifier|public
specifier|static
class|class
name|InstructionalTypeDelete
extends|extends
name|InstructionalTypeEdit
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|ItypeDesc
name|source
parameter_list|)
block|{
name|int
name|nrUsed
init|=
operator|(
operator|(
name|Number
operator|)
name|ItypeDescDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(s) from SchedulingSubpart s where s.itype.itype=:itype"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"itype"
argument_list|,
name|source
operator|.
name|getItype
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|nrChildren
init|=
operator|(
operator|(
name|Number
operator|)
name|ItypeDescDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(i) from ItypeDesc i where i.parent.itype=:itype"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"itype"
argument_list|,
name|source
operator|.
name|getItype
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
return|return
name|nrUsed
operator|==
literal|0
operator|&&
name|nrChildren
operator|==
literal|0
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|SponsoringOrganizationEdit
argument_list|)
specifier|public
specifier|static
class|class
name|SponsoringOrganizationEdit
implements|implements
name|Permission
argument_list|<
name|SponsoringOrganization
argument_list|>
block|{
annotation|@
name|Autowired
name|Permission
argument_list|<
name|Session
argument_list|>
name|permissionSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|SponsoringOrganization
name|source
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|SponsoringOrganization
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|SponsoringOrganization
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|SponsoringOrganizationDelete
argument_list|)
specifier|public
specifier|static
class|class
name|SponsoringOrganizationDelete
extends|extends
name|SponsoringOrganizationEdit
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DistributionTypeEdit
argument_list|)
specifier|public
specifier|static
class|class
name|DistributionTypeEdit
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|HQLReports
argument_list|)
specifier|public
specifier|static
class|class
name|HQLReports
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|HQLReportAdd
argument_list|)
specifier|public
specifier|static
class|class
name|HQLReportAdd
extends|extends
name|HQLReports
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|HQLReportEdit
argument_list|)
specifier|public
specifier|static
class|class
name|HQLReportEdit
implements|implements
name|Permission
argument_list|<
name|SavedHQL
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|SavedHQL
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|isSet
argument_list|(
name|SavedHQL
operator|.
name|Flag
operator|.
name|ADMIN_ONLY
argument_list|)
condition|)
return|return
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|HQLReportsAdminOnly
argument_list|)
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|SavedHQL
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|SavedHQL
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|HQLReportDelete
argument_list|)
specifier|public
specifier|static
class|class
name|HQLReportDelete
extends|extends
name|HQLReportEdit
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|HQLReportsCourses
argument_list|)
specifier|public
specifier|static
class|class
name|HQLReportsCourses
extends|extends
name|HQLReports
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|source
parameter_list|)
block|{
return|return
name|super
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
operator|&&
name|SavedHQL
operator|.
name|hasQueries
argument_list|(
name|Flag
operator|.
name|APPEARANCE_COURSES
argument_list|,
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|HQLReportsAdminOnly
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|HQLReportsExaminations
argument_list|)
specifier|public
specifier|static
class|class
name|HQLReportsExaminations
extends|extends
name|HQLReports
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|source
parameter_list|)
block|{
return|return
name|super
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
operator|&&
name|SavedHQL
operator|.
name|hasQueries
argument_list|(
name|Flag
operator|.
name|APPEARANCE_EXAMS
argument_list|,
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|HQLReportsAdminOnly
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|HQLReportsEvents
argument_list|)
specifier|public
specifier|static
class|class
name|HQLReportsEvents
extends|extends
name|HQLReports
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|source
parameter_list|)
block|{
return|return
name|super
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
operator|&&
name|SavedHQL
operator|.
name|hasQueries
argument_list|(
name|Flag
operator|.
name|APPEARANCE_EVENTS
argument_list|,
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|HQLReportsAdminOnly
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|HQLReportsStudents
argument_list|)
specifier|public
specifier|static
class|class
name|HQLReportsStudents
extends|extends
name|HQLReports
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|source
parameter_list|)
block|{
return|return
name|super
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
operator|&&
name|SavedHQL
operator|.
name|hasQueries
argument_list|(
name|Flag
operator|.
name|APPEARANCE_SECTIONING
argument_list|,
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|HQLReportsAdminOnly
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|HQLReportsAdministration
argument_list|)
specifier|public
specifier|static
class|class
name|HQLReportsAdministration
extends|extends
name|HQLReports
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|source
parameter_list|)
block|{
return|return
name|super
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
operator|&&
operator|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|HQLReportAdd
argument_list|)
operator|||
name|SavedHQL
operator|.
name|hasQueries
argument_list|(
name|Flag
operator|.
name|APPEARANCE_ADMINISTRATION
argument_list|,
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|HQLReportsAdminOnly
argument_list|)
argument_list|)
operator|)
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|HQLReportsAdminOnly
argument_list|)
specifier|public
specifier|static
class|class
name|HQLReportsAdminOnly
extends|extends
name|HQLReports
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|PointInTimeDataReports
argument_list|)
specifier|public
specifier|static
class|class
name|PointInTimeDataReports
extends|extends
name|SimpleSessionPermission
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|session
parameter_list|,
name|DepartmentStatusType
operator|.
name|Status
modifier|...
name|status
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|session
argument_list|,
name|status
argument_list|)
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
if|if
condition|(
name|PointInTimeData
operator|.
name|findAllForSession
argument_list|(
name|session
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
return|return
operator|(
literal|true
operator|)
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|AcademicAreas
argument_list|)
specifier|public
specifier|static
class|class
name|AcademicAreas
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|AcademicClassifications
argument_list|)
specifier|public
specifier|static
class|class
name|AcademicClassifications
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|Majors
argument_list|)
specifier|public
specifier|static
class|class
name|Majors
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|Concentrations
argument_list|)
specifier|public
specifier|static
class|class
name|Concentrations
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|Degrees
argument_list|)
specifier|public
specifier|static
class|class
name|Degrees
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|Programs
argument_list|)
specifier|public
specifier|static
class|class
name|Programs
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|Campuses
argument_list|)
specifier|public
specifier|static
class|class
name|Campuses
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|Minors
argument_list|)
specifier|public
specifier|static
class|class
name|Minors
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|StudentGroups
argument_list|)
specifier|public
specifier|static
class|class
name|StudentGroups
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|StudentAccommodations
argument_list|)
specifier|public
specifier|static
class|class
name|StudentAccommodations
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|StudentAdvisors
argument_list|)
specifier|public
specifier|static
class|class
name|StudentAdvisors
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|AcademicAreaEdit
argument_list|)
specifier|public
specifier|static
class|class
name|AcademicAreaEdit
extends|extends
name|AcademicAreas
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|AcademicClassificationEdit
argument_list|)
specifier|public
specifier|static
class|class
name|AcademicClassificationEdit
extends|extends
name|AcademicClassifications
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|MajorEdit
argument_list|)
specifier|public
specifier|static
class|class
name|MajorEdit
extends|extends
name|Majors
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ConcentrationEdit
argument_list|)
specifier|public
specifier|static
class|class
name|ConcentrationEdit
extends|extends
name|Concentrations
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DegreeEdit
argument_list|)
specifier|public
specifier|static
class|class
name|DegreeEdit
extends|extends
name|Concentrations
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ProgramEdit
argument_list|)
specifier|public
specifier|static
class|class
name|ProgramEdit
extends|extends
name|Concentrations
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|CampusEdit
argument_list|)
specifier|public
specifier|static
class|class
name|CampusEdit
extends|extends
name|Concentrations
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|MinorEdit
argument_list|)
specifier|public
specifier|static
class|class
name|MinorEdit
extends|extends
name|MajorEdit
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|StudentGroupEdit
argument_list|)
specifier|public
specifier|static
class|class
name|StudentGroupEdit
extends|extends
name|StudentGroups
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|StudentAccommodationEdit
argument_list|)
specifier|public
specifier|static
class|class
name|StudentAccommodationEdit
extends|extends
name|StudentAccommodations
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|StudentAdvisorEdit
argument_list|)
specifier|public
specifier|static
class|class
name|StudentAdvisorEdit
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|EventStatuses
argument_list|)
specifier|public
specifier|static
class|class
name|EventStatuses
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|Permission
argument_list|<
name|Department
argument_list|>
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|source
operator|.
name|isAllowEvents
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|nrRooms
init|=
operator|(
operator|(
name|Number
operator|)
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(r) from Room r "
operator|+
literal|"where r.eventDepartment.uniqueId=:deptId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|source
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nrRooms
operator|>
literal|0
condition|)
return|return
literal|true
return|;
name|int
name|nrLocations
init|=
operator|(
operator|(
name|Number
operator|)
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(r) from NonUniversityLocation r "
operator|+
literal|"where r.eventDepartment.uniqueId=:deptId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|source
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
return|return
name|nrLocations
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|EventStatusEdit
argument_list|)
specifier|public
specifier|static
class|class
name|EventStatusEdit
extends|extends
name|EventStatuses
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructorRoles
argument_list|)
specifier|public
specifier|static
class|class
name|InstructorRoles
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|Permission
argument_list|<
name|Department
argument_list|>
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|source
operator|.
name|isAllowEvents
argument_list|()
operator|&&
operator|!
name|Roles
operator|.
name|findAllInstructorRoles
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructorRoleEdit
argument_list|)
specifier|public
specifier|static
class|class
name|InstructorRoleEdit
extends|extends
name|InstructorRoles
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|EventDateMappings
argument_list|)
specifier|public
specifier|static
class|class
name|EventDateMappings
implements|implements
name|Permission
argument_list|<
name|Session
argument_list|>
block|{
annotation|@
name|Autowired
name|Permission
argument_list|<
name|Session
argument_list|>
name|permissionSession
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|Session
argument_list|>
name|permissionEventDateMappingEdit
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Is there a mapping to show?
if|if
condition|(
name|EventDateMapping
operator|.
name|hasMapping
argument_list|(
name|source
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// Is there a mapping to add?
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|EventDateMappingEdit
argument_list|)
operator|&&
name|permissionEventDateMappingEdit
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Session
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Session
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|EventDateMappingEdit
argument_list|)
specifier|public
specifier|static
class|class
name|EventDateMappingEdit
implements|implements
name|Permission
argument_list|<
name|Session
argument_list|>
block|{
annotation|@
name|Autowired
name|Permission
argument_list|<
name|Session
argument_list|>
name|permissionSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
name|int
name|nrCommitted
init|=
operator|(
operator|(
name|Number
operator|)
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(s) from Solution s where s.owner.session.uniqueId = :sessionId and s.commited = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|source
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
return|return
name|nrCommitted
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Session
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Session
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|StandardEventNotesSessionEdit
argument_list|)
specifier|public
specifier|static
class|class
name|StandardEventNotesSessionEdit
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|StandardEventNotesDepartmentEdit
argument_list|)
specifier|public
specifier|static
class|class
name|StandardEventNotesDepartmentEdit
extends|extends
name|SimpleDepartmentPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ChangePassword
argument_list|)
specifier|public
specifier|static
class|class
name|ChangePassword
implements|implements
name|Permission
argument_list|<
name|Session
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|source
parameter_list|)
block|{
if|if
condition|(
name|user
operator|instanceof
name|UserContext
operator|.
name|Chameleon
condition|)
return|return
literal|false
return|;
return|return
name|User
operator|.
name|findByUserName
argument_list|(
name|user
operator|.
name|getUsername
argument_list|()
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Session
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Session
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ApiRetrieveRooms
argument_list|)
specifier|public
specifier|static
class|class
name|ApiRetrieveRooms
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ApiRoomPictureUpload
argument_list|)
specifier|public
specifier|static
class|class
name|ApiRoomPictureUpload
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ApiRoomEdit
argument_list|)
specifier|public
specifier|static
class|class
name|ApiRoomEdit
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ApiRetrieveEvents
argument_list|)
specifier|public
specifier|static
class|class
name|ApiRetrieveEvents
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ApiRetrieveEnrollments
argument_list|)
specifier|public
specifier|static
class|class
name|ApiRetrieveEnrollments
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ApiRetrieveInstructorSchedule
argument_list|)
specifier|public
specifier|static
class|class
name|ApiRetrieveInstructorSchedule
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ApiRetrieveClassInfo
argument_list|)
specifier|public
specifier|static
class|class
name|ApiRetrieveClassInfo
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ApiOnlineStudentScheduliung
argument_list|)
specifier|public
specifier|static
class|class
name|ApiOnlineStudentScheduliung
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ApiRetrieveInstructors
argument_list|)
specifier|public
specifier|static
class|class
name|ApiRetriveInstructors
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ApiRetrieveCurricula
argument_list|)
specifier|public
specifier|static
class|class
name|ApiRetriveCurricula
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ApiRetrieveStudentGroups
argument_list|)
specifier|public
specifier|static
class|class
name|ApiRetrieveStudentGroups
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ApiVariableTitleSectionLookup
argument_list|)
specifier|public
specifier|static
class|class
name|ApiVariableTitleSectionLookup
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ApiVariableTitleSectionCreate
argument_list|)
specifier|public
specifier|static
class|class
name|ApiVariableTitleSectionCreate
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|EventServiceProviderEditSession
argument_list|)
specifier|public
specifier|static
class|class
name|EventServiceProviderEditSession
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|EventServiceProviderEditDepartment
argument_list|)
specifier|public
specifier|static
class|class
name|EventServiceProviderEditDepartment
extends|extends
name|SimpleDepartmentPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|Tasks
argument_list|)
specifier|public
specifier|static
class|class
name|Tasks
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|TaskDetail
argument_list|)
specifier|public
specifier|static
class|class
name|TaskDetail
extends|extends
name|SimpleSessionPermission
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|TaskEdit
argument_list|)
specifier|public
specifier|static
class|class
name|TaskEdit
extends|extends
name|SimpleSessionPermission
block|{}
block|}
end_class

end_unit

