begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_class
specifier|public
class|class
name|InstructorPermissions
block|{
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|AssignInstructors
argument_list|)
specifier|public
specifier|static
class|class
name|AssignInstructors
implements|implements
name|Permission
argument_list|<
name|InstrOfferingConfig
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeededLimitedEdit
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|InstrOfferingConfig
name|source
parameter_list|)
block|{
if|if
condition|(
name|permissionOfferingLockNeededLimitedEdit
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerLimitedEdit
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// Manager can edit external department
name|Set
argument_list|<
name|Department
argument_list|>
name|externals
init|=
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|source
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
if|if
condition|(
name|externals
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerLimitedEdit
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|InstrOfferingConfig
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|AssignInstructorsClass
argument_list|)
specifier|public
specifier|static
class|class
name|AssignInstructorsClass
implements|implements
name|Permission
argument_list|<
name|Class_
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeededLimitedEdit
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Class_
name|source
parameter_list|)
block|{
return|return
operator|!
name|permissionOfferingLockNeededLimitedEdit
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getControllingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerLimitedEdit
argument_list|,
name|source
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerLimitedEdit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Class_
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Class_
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructorDetail
argument_list|)
specifier|public
specifier|static
class|class
name|InstructorDetail
implements|implements
name|Permission
argument_list|<
name|DepartmentalInstructor
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|DepartmentalInstructor
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerView
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|DepartmentalInstructor
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructorEdit
argument_list|)
specifier|public
specifier|static
class|class
name|EditInstructor
implements|implements
name|Permission
argument_list|<
name|DepartmentalInstructor
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|DepartmentalInstructor
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerLimitedEdit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|DepartmentalInstructor
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructorDelete
argument_list|)
specifier|public
specifier|static
class|class
name|DeleteInstructor
extends|extends
name|EditInstructor
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|DepartmentalInstructor
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|source
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|source
operator|.
name|getExams
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|super
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructorPreferences
argument_list|)
specifier|public
specifier|static
class|class
name|InstructorPreferences
implements|implements
name|Permission
argument_list|<
name|DepartmentalInstructor
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|DepartmentalInstructor
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|DepartmentalInstructor
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructorEditClearPreferences
argument_list|)
specifier|public
specifier|static
class|class
name|InstructorEditClearPreferences
extends|extends
name|InstructorPreferences
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructorAdd
argument_list|)
specifier|public
specifier|static
class|class
name|InstructorAdd
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerLimitedEdit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|Instructors
argument_list|)
specifier|public
specifier|static
class|class
name|Instructors
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|InstructorsExportPdf
argument_list|)
specifier|public
specifier|static
class|class
name|InstructorsExportPdf
extends|extends
name|Instructors
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|ManageInstructors
argument_list|)
specifier|public
specifier|static
class|class
name|ManageInstructors
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerLimitedEdit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
block|}
end_class

end_unit

