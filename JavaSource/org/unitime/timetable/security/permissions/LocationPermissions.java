begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalRoom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalRoomDepartment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|GlobalRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|qualifiers
operator|.
name|SimpleQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_class
specifier|public
class|class
name|LocationPermissions
block|{
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|Rooms
argument_list|)
specifier|public
specifier|static
class|class
name|Rooms
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
operator|||
name|source
operator|.
name|isExternalManager
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomsExportPdf
argument_list|)
specifier|public
specifier|static
class|class
name|RoomsExportPdf
extends|extends
name|Rooms
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomsExportCsv
argument_list|)
specifier|public
specifier|static
class|class
name|RoomsExportCsv
extends|extends
name|Rooms
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomDetail
argument_list|)
specifier|public
specifier|static
class|class
name|RoomDetail
implements|implements
name|Permission
argument_list|<
name|Location
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Location
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
return|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|source
operator|.
name|getRoomDepts
argument_list|()
control|)
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Location
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Location
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomEdit
argument_list|)
specifier|public
specifier|static
class|class
name|RoomEdit
implements|implements
name|Permission
argument_list|<
name|Room
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Room
name|source
parameter_list|)
block|{
name|boolean
name|controls
init|=
operator|(
name|source
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|true
else|:
literal|false
operator|)
decl_stmt|;
name|boolean
name|allDepts
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|source
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
if|if
condition|(
name|rd
operator|.
name|isControl
argument_list|()
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
name|controls
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
name|allDepts
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|controls
operator|||
name|allDepts
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Room
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Room
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|NonUniversityLocationEdit
argument_list|)
specifier|public
specifier|static
class|class
name|NonUniversityLocationEdit
implements|implements
name|Permission
argument_list|<
name|NonUniversityLocation
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|NonUniversityLocation
name|source
parameter_list|)
block|{
name|boolean
name|controls
init|=
operator|(
name|source
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|true
else|:
literal|false
operator|)
decl_stmt|;
name|boolean
name|allDepts
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|source
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
if|if
condition|(
name|rd
operator|.
name|isControl
argument_list|()
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
name|controls
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
name|allDepts
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|controls
operator|||
name|allDepts
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|NonUniversityLocation
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|NonUniversityLocation
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomEditChangeControll
argument_list|)
specifier|public
specifier|static
class|class
name|RoomEditChangeControll
implements|implements
name|Permission
argument_list|<
name|Location
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Location
name|source
parameter_list|)
block|{
name|boolean
name|controls
init|=
operator|(
name|source
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|true
else|:
literal|false
operator|)
decl_stmt|;
name|boolean
name|allDepts
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|source
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
if|if
condition|(
name|rd
operator|.
name|isControl
argument_list|()
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
name|controls
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
name|allDepts
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|controls
operator|||
name|allDepts
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Location
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Location
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomEditChangeCapacity
argument_list|)
specifier|public
specifier|static
class|class
name|RoomEditChangeCapacity
implements|implements
name|Permission
argument_list|<
name|Location
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Location
name|source
parameter_list|)
block|{
name|boolean
name|controls
init|=
operator|(
name|source
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|true
else|:
literal|false
operator|)
decl_stmt|;
name|boolean
name|allDepts
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|source
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
if|if
condition|(
name|rd
operator|.
name|isControl
argument_list|()
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
name|controls
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
name|allDepts
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|controls
operator|||
name|allDepts
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Location
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Location
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomEditChangeExaminationStatus
argument_list|)
specifier|public
specifier|static
class|class
name|RoomEditChangeExaminationStatus
extends|extends
name|RoomEditChangeCapacity
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomEditChangeExternalId
argument_list|)
specifier|public
specifier|static
class|class
name|RoomEditChangeExternalId
extends|extends
name|RoomEditChangeCapacity
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomEditChangeRoomProperties
argument_list|)
specifier|public
specifier|static
class|class
name|RoomEditChangeRoomProperties
extends|extends
name|RoomEditChangeCapacity
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomEditChangeType
argument_list|)
specifier|public
specifier|static
class|class
name|RoomEditChangeType
extends|extends
name|RoomEditChangeCapacity
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomEditChangeEventProperties
argument_list|)
specifier|public
specifier|static
class|class
name|RoomEditChangeEventProperties
extends|extends
name|RoomEditChangeCapacity
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|EditRoomDepartments
argument_list|)
specifier|public
specifier|static
class|class
name|EditRoomDepartments
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
return|return
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
operator|||
operator|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
operator|&&
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getQualifiers
argument_list|(
literal|"Department"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomDepartments
argument_list|)
specifier|public
specifier|static
class|class
name|RoomDepartments
extends|extends
name|EditRoomDepartments
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|EditRoomDepartmentsExams
argument_list|)
specifier|public
specifier|static
class|class
name|EditRoomDepartmentsExams
implements|implements
name|Permission
argument_list|<
name|Session
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionSession
name|permissionSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|source
parameter_list|)
block|{
return|return
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Session
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Session
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|BuildingList
argument_list|)
specifier|public
specifier|static
class|class
name|BuildingList
implements|implements
name|Permission
argument_list|<
name|Session
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionSession
name|permissionSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|source
parameter_list|)
block|{
return|return
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Session
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Session
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|BuildingAdd
argument_list|)
specifier|public
specifier|static
class|class
name|BuildingAdd
extends|extends
name|BuildingList
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|BuildingExportPdf
argument_list|)
specifier|public
specifier|static
class|class
name|BuildingExportPdf
extends|extends
name|BuildingList
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|BuildingUpdateData
argument_list|)
specifier|public
specifier|static
class|class
name|BuildingUpdateData
extends|extends
name|BuildingList
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|BuildingEdit
argument_list|)
specifier|public
specifier|static
class|class
name|BuildingEdit
implements|implements
name|Permission
argument_list|<
name|Building
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionSession
name|permissionSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Building
name|source
parameter_list|)
block|{
return|return
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getSession
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Building
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Building
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|BuildingDelete
argument_list|)
specifier|public
specifier|static
class|class
name|BuildingDelete
implements|implements
name|Permission
argument_list|<
name|Building
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionSession
name|permissionSession
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|Room
argument_list|>
name|permissionRoomDelete
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Building
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Room
name|room
range|:
name|RoomDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findByBuilding
argument_list|(
name|RoomDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|source
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
if|if
condition|(
operator|!
name|permissionRoomDelete
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|room
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Building
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Building
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomDelete
argument_list|)
specifier|public
specifier|static
class|class
name|RoomDelete
implements|implements
name|Permission
argument_list|<
name|Room
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Room
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|isUsed
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
operator|&&
operator|!
name|source
operator|.
name|getExamTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|boolean
name|controls
init|=
operator|(
name|source
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|true
else|:
literal|false
operator|)
decl_stmt|;
name|boolean
name|allDepts
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|source
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
if|if
condition|(
name|rd
operator|.
name|isControl
argument_list|()
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
name|controls
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
name|allDepts
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|controls
operator|&&
operator|!
name|allDepts
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Room
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Room
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|NonUniversityLocationDelete
argument_list|)
specifier|public
specifier|static
class|class
name|NonUniversityLocationDelete
implements|implements
name|Permission
argument_list|<
name|NonUniversityLocation
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|NonUniversityLocation
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|isUsed
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
operator|&&
operator|!
name|source
operator|.
name|getExamTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|boolean
name|controls
init|=
literal|false
decl_stmt|;
name|boolean
name|allDepts
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|source
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
if|if
condition|(
name|rd
operator|.
name|isControl
argument_list|()
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
name|controls
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
name|allDepts
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|controls
operator|&&
operator|!
name|allDepts
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|NonUniversityLocation
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|NonUniversityLocation
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|AddSpecialUseRoomExternalRoom
argument_list|)
specifier|public
specifier|static
class|class
name|AddSpecialUseRoomExternalRoom
implements|implements
name|Permission
argument_list|<
name|ExternalRoom
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|ExternalRoom
name|source
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
operator|||
name|source
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|UserAuthority
name|authority
init|=
name|user
operator|.
name|getCurrentAuthority
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|authority
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|AddSpecialUseRoom
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|authority
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
for|for
control|(
name|ExternalRoomDepartment
name|dept
range|:
name|source
operator|.
name|getRoomDepartments
argument_list|()
control|)
block|{
if|if
condition|(
name|authority
operator|.
name|hasQualifier
argument_list|(
operator|new
name|SimpleQualifier
argument_list|(
literal|"Department"
argument_list|,
name|dept
operator|.
name|getDepartmentCode
argument_list|()
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|ExternalRoom
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|ExternalRoom
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|AddSpecialUseRoom
argument_list|)
specifier|public
specifier|static
class|class
name|AddSpecialUseRoom
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
operator|&&
operator|!
name|ExternalRoom
operator|.
name|findAll
argument_list|(
name|source
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|AddNonUnivLocation
argument_list|)
specifier|public
specifier|static
class|class
name|AddNonUnivLocation
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|AddRoom
argument_list|)
specifier|public
specifier|static
class|class
name|AddRoom
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|TravelTimesLoad
argument_list|)
specifier|public
specifier|static
class|class
name|TravelTimesLoad
extends|extends
name|BuildingList
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|TravelTimesSave
argument_list|)
specifier|public
specifier|static
class|class
name|TravelTimesSave
extends|extends
name|BuildingList
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomAvailability
argument_list|)
specifier|public
specifier|static
class|class
name|RoomAvailability
implements|implements
name|Permission
argument_list|<
name|Session
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionSession
name|permissionSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|source
parameter_list|)
block|{
return|return
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
operator|&&
operator|(
name|Exam
operator|.
name|hasFinalExams
argument_list|(
name|source
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|||
name|Exam
operator|.
name|hasMidtermExams
argument_list|(
name|source
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Session
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Session
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomDetailAvailability
argument_list|)
specifier|public
specifier|static
class|class
name|RoomDetailAvailability
extends|extends
name|RoomDetail
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomDetailPeriodPreferences
argument_list|)
specifier|public
specifier|static
class|class
name|RoomDetailPeriodPreferences
extends|extends
name|RoomDetail
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomEditAvailability
argument_list|)
specifier|public
specifier|static
class|class
name|RoomEditAvailability
implements|implements
name|Permission
argument_list|<
name|Location
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Location
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
return|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|source
operator|.
name|getRoomDepts
argument_list|()
control|)
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Location
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Location
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomDetailEventAvailability
argument_list|)
specifier|public
specifier|static
class|class
name|RoomDetailEventAvailability
implements|implements
name|Permission
argument_list|<
name|Location
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Location
name|source
parameter_list|)
block|{
return|return
name|source
operator|.
name|getEventDepartment
argument_list|()
operator|!=
literal|null
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getEventDepartment
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Location
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Location
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomEditEventAvailability
argument_list|)
specifier|public
specifier|static
class|class
name|RoomEditEventAvailability
extends|extends
name|RoomDetailEventAvailability
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomEditPreference
argument_list|)
specifier|public
specifier|static
class|class
name|RoomEditPreference
extends|extends
name|RoomEditAvailability
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomEditFeatures
argument_list|)
specifier|public
specifier|static
class|class
name|RoomEditFeatures
extends|extends
name|RoomEditAvailability
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomEditGroups
argument_list|)
specifier|public
specifier|static
class|class
name|RoomEditGroups
extends|extends
name|RoomEditAvailability
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomEditGlobalFeatures
argument_list|)
specifier|public
specifier|static
class|class
name|RoomEditGlobalFeatures
extends|extends
name|RoomEditAvailability
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomEditGlobalGroups
argument_list|)
specifier|public
specifier|static
class|class
name|RoomEditGlobalGroups
extends|extends
name|RoomEditAvailability
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomFeatures
argument_list|)
specifier|public
specifier|static
class|class
name|RoomFeatures
extends|extends
name|Rooms
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomFeaturesExportPdf
argument_list|)
specifier|public
specifier|static
class|class
name|RoomFeaturesExportPdf
extends|extends
name|RoomsExportPdf
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DepartmenalRoomFeatureEdit
argument_list|)
specifier|public
specifier|static
class|class
name|DepartmenalRoomFeatureEdit
implements|implements
name|Permission
argument_list|<
name|DepartmentRoomFeature
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|DepartmentRoomFeature
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|DepartmentRoomFeature
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|DepartmentRoomFeature
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DepartmenalRoomFeatureDelete
argument_list|)
specifier|public
specifier|static
class|class
name|DepartmenalRoomFeatureDelete
extends|extends
name|DepartmenalRoomFeatureEdit
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|GlobalRoomFeatureEdit
argument_list|)
specifier|public
specifier|static
class|class
name|GlobalRoomFeatureEdit
implements|implements
name|Permission
argument_list|<
name|GlobalRoomFeature
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionSession
name|permissionSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|GlobalRoomFeature
name|source
parameter_list|)
block|{
return|return
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getSession
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|GlobalRoomFeature
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|GlobalRoomFeature
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|GlobalRoomFeatureDelete
argument_list|)
specifier|public
specifier|static
class|class
name|GlobalRoomFeatureDelete
extends|extends
name|GlobalRoomFeatureEdit
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|GlobalRoomFeatureAdd
argument_list|)
specifier|public
specifier|static
class|class
name|GlobalRoomFeatureAdd
implements|implements
name|Permission
argument_list|<
name|Session
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionSession
name|permissionSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|source
parameter_list|)
block|{
return|return
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Session
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Session
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DepartmentRoomFeatureAdd
argument_list|)
specifier|public
specifier|static
class|class
name|DepartmentRoomFeatureAdd
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomGroups
argument_list|)
specifier|public
specifier|static
class|class
name|RoomGroups
extends|extends
name|Rooms
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|RoomGroupsExportPdf
argument_list|)
specifier|public
specifier|static
class|class
name|RoomGroupsExportPdf
extends|extends
name|RoomsExportPdf
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DepartmenalRoomGroupEdit
argument_list|)
specifier|public
specifier|static
class|class
name|DepartmenalRoomGroupEdit
implements|implements
name|Permission
argument_list|<
name|RoomGroup
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|RoomGroup
name|source
parameter_list|)
block|{
return|return
operator|!
name|source
operator|.
name|isGlobal
argument_list|()
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getDepartment
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|RoomGroup
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|RoomGroup
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DepartmenalRoomGroupDelete
argument_list|)
specifier|public
specifier|static
class|class
name|DepartmenalRoomGroupDelete
extends|extends
name|DepartmenalRoomGroupEdit
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|GlobalRoomGroupEdit
argument_list|)
specifier|public
specifier|static
class|class
name|GlobalRoomGroupEdit
implements|implements
name|Permission
argument_list|<
name|RoomGroup
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionSession
name|permissionSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|RoomGroup
name|source
parameter_list|)
block|{
return|return
name|source
operator|.
name|isGlobal
argument_list|()
operator|&&
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
operator|.
name|getSession
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|RoomGroup
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|RoomGroup
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|GlobalRoomGroupEditSetDefault
argument_list|)
specifier|public
specifier|static
class|class
name|GlobalRoomGroupEditSetDefault
extends|extends
name|GlobalRoomGroupEdit
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|GlobalRoomGroupDelete
argument_list|)
specifier|public
specifier|static
class|class
name|GlobalRoomGroupDelete
extends|extends
name|GlobalRoomGroupEdit
block|{}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|GlobalRoomGroupAdd
argument_list|)
specifier|public
specifier|static
class|class
name|GlobalRoomGroupAdd
implements|implements
name|Permission
argument_list|<
name|Session
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionSession
name|permissionSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Session
name|source
parameter_list|)
block|{
return|return
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Session
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Session
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|PermissionForRight
argument_list|(
name|Right
operator|.
name|DepartmentRoomGroupAdd
argument_list|)
specifier|public
specifier|static
class|class
name|DepartmentRoomGroupAdd
implements|implements
name|Permission
argument_list|<
name|Department
argument_list|>
block|{
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|source
parameter_list|)
block|{
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Department
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|Department
operator|.
name|class
return|;
block|}
block|}
block|}
end_class

end_unit

