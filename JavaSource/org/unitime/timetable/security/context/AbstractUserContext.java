begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|context
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|Qualifiable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|qualifiers
operator|.
name|SimpleQualifier
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractUserContext
implements|implements
name|UserContext
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|UserAuthority
name|iCurrentAuthority
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|UserAuthority
argument_list|>
name|iAuthorities
init|=
operator|new
name|HashSet
argument_list|<
name|UserAuthority
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAccountNonExpired
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAccountNonLocked
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCredentialsNonExpired
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|UserAuthority
name|getCurrentAuthority
parameter_list|()
block|{
return|return
name|iCurrentAuthority
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCurrentAuthority
parameter_list|(
name|UserAuthority
name|authority
parameter_list|)
block|{
if|if
condition|(
name|hasAuthority
argument_list|(
name|authority
argument_list|)
condition|)
name|iCurrentAuthority
operator|=
name|authority
expr_stmt|;
else|else
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid authority."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAuthority
parameter_list|(
name|UserAuthority
name|authority
parameter_list|)
block|{
return|return
name|getAuthorities
argument_list|()
operator|.
name|contains
argument_list|(
name|authority
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAuthority
parameter_list|(
name|String
name|role
parameter_list|,
name|Long
name|uniqueId
parameter_list|)
block|{
return|return
name|getAuthority
argument_list|(
name|role
argument_list|,
name|uniqueId
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|UserAuthority
name|getAuthority
parameter_list|(
name|String
name|role
parameter_list|,
name|Long
name|uniqueId
parameter_list|)
block|{
name|UserQualifier
name|session
init|=
operator|(
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getCurrentAuthority
argument_list|()
operator|.
name|getAcademicSession
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|UserAuthority
name|authority
range|:
name|getAuthorities
argument_list|()
control|)
block|{
if|if
condition|(
name|role
operator|!=
literal|null
operator|&&
operator|!
name|role
operator|.
name|equals
argument_list|(
name|authority
operator|.
name|getRole
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|uniqueId
operator|!=
literal|null
operator|&&
name|uniqueId
operator|.
name|equals
argument_list|(
name|authority
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
name|authority
return|;
if|if
condition|(
name|uniqueId
operator|==
literal|null
operator|&&
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|equals
argument_list|(
name|authority
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
condition|)
return|return
name|authority
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAuthority
parameter_list|(
name|String
name|authority
parameter_list|)
block|{
return|return
name|getAuthority
argument_list|(
name|authority
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|UserAuthority
name|getAuthority
parameter_list|(
name|String
name|authority
parameter_list|)
block|{
for|for
control|(
name|UserAuthority
name|a
range|:
name|getAuthorities
argument_list|()
control|)
if|if
condition|(
name|authority
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getAuthority
argument_list|()
argument_list|)
condition|)
return|return
name|a
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getCurrentAcademicSessionId
parameter_list|()
block|{
return|return
operator|(
name|Long
operator|)
operator|(
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
operator|||
name|getCurrentAuthority
argument_list|()
operator|.
name|getAcademicSession
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getCurrentAuthority
argument_list|()
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getQualifierId
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasDepartment
parameter_list|(
name|Long
name|departmentId
parameter_list|)
block|{
return|return
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
operator|new
name|SimpleQualifier
argument_list|(
name|Department
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|departmentId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
return|return
name|hasAuthority
argument_list|(
name|role
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|?
extends|extends
name|UserAuthority
argument_list|>
name|getAuthorities
parameter_list|()
block|{
return|return
name|iAuthorities
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|UserAuthority
argument_list|>
name|getAuthorities
parameter_list|(
name|String
name|role
parameter_list|,
name|Qualifiable
modifier|...
name|filter
parameter_list|)
block|{
name|List
argument_list|<
name|UserAuthority
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|UserAuthority
argument_list|>
argument_list|()
decl_stmt|;
name|authorities
label|:
for|for
control|(
name|UserAuthority
name|authority
range|:
name|getAuthorities
argument_list|()
control|)
block|{
if|if
condition|(
name|role
operator|!=
literal|null
operator|&&
operator|!
name|role
operator|.
name|equals
argument_list|(
name|authority
operator|.
name|getRole
argument_list|()
argument_list|)
condition|)
continue|continue
name|authorities
continue|;
for|for
control|(
name|Qualifiable
name|q
range|:
name|filter
control|)
if|if
condition|(
operator|!
name|authority
operator|.
name|hasQualifier
argument_list|(
name|q
argument_list|)
condition|)
continue|continue
name|authorities
continue|;
name|ret
operator|.
name|add
argument_list|(
name|authority
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|void
name|addAuthority
parameter_list|(
name|UserAuthority
name|authority
parameter_list|)
block|{
name|iAuthorities
operator|.
name|add
argument_list|(
name|authority
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|iProperties
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|value
operator|!=
literal|null
condition|?
name|value
else|:
name|defaultValue
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|iProperties
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iProperties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|iProperties
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
name|UserProperty
name|property
parameter_list|)
block|{
return|return
name|getProperty
argument_list|(
name|property
operator|.
name|key
argument_list|()
argument_list|,
name|property
operator|.
name|defaultValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|UserProperty
name|property
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|setProperty
argument_list|(
name|property
operator|.
name|key
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

