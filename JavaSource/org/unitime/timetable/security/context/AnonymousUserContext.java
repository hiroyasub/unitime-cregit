begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|context
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|authority
operator|.
name|RoleAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|qualifiers
operator|.
name|SimpleQualifier
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|AnonymousUserContext
extends|extends
name|AbstractUserContext
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|AnonymousUserContext
parameter_list|()
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|TimetableManagerDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|TreeSet
argument_list|<
name|Session
argument_list|>
name|sessions
init|=
operator|new
name|TreeSet
argument_list|<
name|Session
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Settings
name|setting
range|:
operator|(
name|List
argument_list|<
name|Settings
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from Settings"
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|setting
operator|.
name|getDefaultValue
argument_list|()
operator|!=
literal|null
condition|)
name|setProperty
argument_list|(
name|setting
operator|.
name|getKey
argument_list|()
argument_list|,
name|setting
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Roles
name|anonRole
init|=
name|Roles
operator|.
name|getRole
argument_list|(
name|Roles
operator|.
name|ROLE_ANONYMOUS
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|anonRole
operator|!=
literal|null
operator|&&
name|anonRole
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Session
name|session
range|:
operator|new
name|TreeSet
argument_list|<
name|Session
argument_list|>
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|hibSession
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isAllowNoRole
argument_list|()
operator|||
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
continue|continue;
name|List
argument_list|<
name|?
extends|extends
name|UserAuthority
argument_list|>
name|authorities
init|=
name|getAuthorities
argument_list|(
literal|null
argument_list|,
operator|new
name|SimpleQualifier
argument_list|(
literal|"Session"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|UserAuthority
name|authority
init|=
operator|new
name|RoleAuthority
argument_list|(
operator|-
literal|1l
argument_list|,
name|anonRole
argument_list|)
decl_stmt|;
name|authority
operator|.
name|addQualifier
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|addAuthority
argument_list|(
name|authority
argument_list|)
expr_stmt|;
name|sessions
operator|.
name|add
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Session
name|session
init|=
name|UniTimeUserContext
operator|.
name|defaultSession
argument_list|(
name|sessions
argument_list|,
literal|null
argument_list|,
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|PrimaryCampus
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|UserAuthority
argument_list|>
name|authorities
init|=
name|getAuthorities
argument_list|(
literal|null
argument_list|,
operator|new
name|SimpleQualifier
argument_list|(
literal|"Session"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authorities
operator|.
name|isEmpty
argument_list|()
condition|)
name|setCurrentAuthority
argument_list|(
name|authorities
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getExternalUserId
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Guest"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEmail
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
block|}
end_class

end_unit

