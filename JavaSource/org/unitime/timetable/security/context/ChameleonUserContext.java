begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|context
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_class
specifier|public
class|class
name|ChameleonUserContext
extends|extends
name|UniTimeUserContext
implements|implements
name|UserContext
operator|.
name|Chameleon
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|UserContext
name|iOriginalUser
decl_stmt|;
specifier|public
name|ChameleonUserContext
parameter_list|(
name|String
name|userId
parameter_list|,
name|UserContext
name|originalUser
parameter_list|)
block|{
name|super
argument_list|(
name|userId
argument_list|,
name|originalUser
operator|.
name|getUsername
argument_list|()
argument_list|,
name|originalUser
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|iOriginalUser
operator|=
name|originalUser
expr_stmt|;
if|if
condition|(
name|iOriginalUser
operator|instanceof
name|UserContext
operator|.
name|Chameleon
condition|)
name|iOriginalUser
operator|=
operator|(
operator|(
name|UserContext
operator|.
name|Chameleon
operator|)
name|iOriginalUser
operator|)
operator|.
name|getOriginalUserContext
argument_list|()
expr_stmt|;
if|if
condition|(
name|originalUser
operator|.
name|getCurrentAuthority
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|UserAuthority
name|authority
init|=
name|getAuthority
argument_list|(
name|originalUser
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getAuthority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|authority
operator|!=
literal|null
condition|)
name|setCurrentAuthority
argument_list|(
name|authority
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|UserContext
name|getOriginalUserContext
parameter_list|()
block|{
return|return
name|iOriginalUser
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|super
operator|.
name|getName
argument_list|()
operator|+
literal|" (A)"
return|;
block|}
block|}
end_class

end_unit

