begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|context
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|access
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|qualifiers
operator|.
name|SimpleQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ChameleonUserContext
extends|extends
name|UniTimeUserContext
implements|implements
name|UserContext
operator|.
name|Chameleon
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|UserContext
name|iOriginalUser
decl_stmt|;
specifier|public
name|ChameleonUserContext
parameter_list|(
name|String
name|userId
parameter_list|,
name|UserContext
name|originalUser
parameter_list|)
block|{
name|super
argument_list|(
name|userId
argument_list|,
name|originalUser
operator|.
name|getUsername
argument_list|()
argument_list|,
name|originalUser
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Original user is session dependent -> remove all session independent authorities from the new user
if|if
condition|(
name|originalUser
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|originalUser
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|SessionIndependent
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
extends|extends
name|UserAuthority
argument_list|>
name|i
init|=
name|getAuthorities
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|UserAuthority
name|authority
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|authority
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|SessionIndependent
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getCurrentAuthority
argument_list|()
operator|!=
literal|null
operator|&&
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|SessionIndependent
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|UserAuthority
argument_list|>
name|authorities
init|=
name|getAuthorities
argument_list|(
literal|null
argument_list|,
operator|new
name|SimpleQualifier
argument_list|(
literal|"Session"
argument_list|,
name|originalUser
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authorities
operator|.
name|isEmpty
argument_list|()
condition|)
name|setCurrentAuthority
argument_list|(
name|authorities
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Access denied for "
operator|+
name|super
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|": not enough permissions for role "
operator|+
name|getCurrentAuthority
argument_list|()
operator|.
name|getRole
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
block|}
if|if
condition|(
name|getAuthorities
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Access denied for "
operator|+
name|super
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|": no role available."
argument_list|)
throw|;
block|}
name|iOriginalUser
operator|=
name|originalUser
expr_stmt|;
if|if
condition|(
name|iOriginalUser
operator|instanceof
name|UserContext
operator|.
name|Chameleon
condition|)
name|iOriginalUser
operator|=
operator|(
operator|(
name|UserContext
operator|.
name|Chameleon
operator|)
name|iOriginalUser
operator|)
operator|.
name|getOriginalUserContext
argument_list|()
expr_stmt|;
if|if
condition|(
name|originalUser
operator|.
name|getCurrentAuthority
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|UserAuthority
name|authority
init|=
name|getAuthority
argument_list|(
name|originalUser
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getAuthority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|authority
operator|!=
literal|null
condition|)
name|setCurrentAuthority
argument_list|(
name|authority
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|UserContext
name|getOriginalUserContext
parameter_list|()
block|{
return|return
name|iOriginalUser
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|super
operator|.
name|getName
argument_list|()
operator|+
literal|" (A)"
return|;
block|}
block|}
end_class

end_unit

