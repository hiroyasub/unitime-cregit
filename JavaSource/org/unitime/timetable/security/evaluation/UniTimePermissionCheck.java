begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|evaluation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|BeansException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|InitializingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|access
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|SecurityMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|Qualifiable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
operator|.
name|Permission
operator|.
name|PermissionDepartment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
operator|.
name|Permission
operator|.
name|PermissionSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|qualifiers
operator|.
name|SimpleQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"unitimePermissionCheck"
argument_list|)
specifier|public
class|class
name|UniTimePermissionCheck
implements|implements
name|PermissionCheck
implements|,
name|InitializingBean
block|{
specifier|protected
specifier|static
name|SecurityMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|SecurityMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UniTimePermissionCheck
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|ApplicationContext
name|applicationContext
decl_stmt|;
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|PermissionSession
name|permissionSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|checkPermission
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Serializable
name|targetId
parameter_list|,
name|String
name|targetType
parameter_list|,
name|Right
name|right
parameter_list|)
throws|throws
name|AccessDeniedException
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|noAuthentication
argument_list|(
name|right
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|right
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|noAuthority
argument_list|(
name|right
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|right
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|right
operator|==
literal|null
condition|)
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|noRight
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|right
argument_list|)
condition|)
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|missingRight
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|targetType
operator|==
literal|null
operator|&&
name|right
operator|.
name|hasType
argument_list|()
condition|)
name|targetType
operator|=
name|right
operator|.
name|type
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
if|if
condition|(
name|targetType
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|targetId
operator|!=
literal|null
operator|&&
name|targetId
operator|instanceof
name|Collection
condition|)
block|{
for|for
control|(
name|Serializable
name|id
range|:
operator|(
name|Collection
argument_list|<
name|Serializable
argument_list|>
operator|)
name|targetId
control|)
name|checkPermission
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
name|targetType
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|targetId
operator|!=
literal|null
operator|&&
name|targetId
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
for|for
control|(
name|Serializable
name|id
range|:
operator|(
name|Serializable
index|[]
operator|)
name|targetId
control|)
name|checkPermission
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
name|targetType
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|String
name|className
init|=
name|targetType
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
name|className
operator|=
literal|"org.unitime.timetable.model."
operator|+
name|className
expr_stmt|;
comment|// Special cases
if|if
condition|(
name|targetId
operator|==
literal|null
operator|&&
name|Session
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
name|targetId
operator|=
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|targetId
operator|==
literal|null
operator|&&
name|Department
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
name|AccessDeniedException
name|firstDenial
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|user
argument_list|)
control|)
block|{
try|try
block|{
name|checkPermission
argument_list|(
name|user
argument_list|,
name|d
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|firstDenial
operator|==
literal|null
condition|)
name|firstDenial
operator|=
name|e
expr_stmt|;
block|}
block|}
if|if
condition|(
name|firstDenial
operator|!=
literal|null
condition|)
throw|throw
name|firstDenial
throw|;
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|noDepartment
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|targetId
operator|==
literal|null
operator|&&
name|SubjectArea
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
name|AccessDeniedException
name|firstDenial
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SubjectArea
name|sa
range|:
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|user
argument_list|)
control|)
block|{
try|try
block|{
name|checkPermission
argument_list|(
name|user
argument_list|,
name|sa
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|firstDenial
operator|==
literal|null
condition|)
name|firstDenial
operator|=
name|e
expr_stmt|;
block|}
block|}
if|if
condition|(
name|firstDenial
operator|!=
literal|null
condition|)
throw|throw
name|firstDenial
throw|;
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|noSubject
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|targetId
operator|==
literal|null
operator|&&
name|SolverGroup
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
name|AccessDeniedException
name|firstDenial
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SolverGroup
name|g
range|:
name|SolverGroup
operator|.
name|getUserSolverGroups
argument_list|(
name|user
argument_list|)
control|)
block|{
try|try
block|{
name|checkPermission
argument_list|(
name|user
argument_list|,
name|g
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|firstDenial
operator|==
literal|null
condition|)
name|firstDenial
operator|=
name|e
expr_stmt|;
block|}
block|}
if|if
condition|(
name|firstDenial
operator|!=
literal|null
condition|)
throw|throw
name|firstDenial
throw|;
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|noSolverGroup
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|targetId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|noDomainObject
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|,
name|targetType
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|targetId
operator|instanceof
name|Qualifiable
condition|)
block|{
name|Qualifiable
name|q
init|=
operator|(
name|Qualifiable
operator|)
name|targetId
decl_stmt|;
if|if
condition|(
name|targetType
operator|==
literal|null
operator|||
name|targetType
operator|.
name|equals
argument_list|(
name|q
operator|.
name|getQualifierType
argument_list|()
argument_list|)
condition|)
block|{
name|checkPermission
argument_list|(
name|user
argument_list|,
name|q
operator|.
name|getQualifierId
argument_list|()
argument_list|,
name|q
operator|.
name|getQualifierType
argument_list|()
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|wrongDomainObject
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|,
name|q
operator|.
name|getQualifierType
argument_list|()
argument_list|,
name|targetType
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|targetId
operator|instanceof
name|String
operator|&&
name|Department
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
name|Department
name|dept
init|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
operator|(
name|String
operator|)
name|targetId
argument_list|,
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dept
operator|!=
literal|null
condition|)
block|{
name|checkPermission
argument_list|(
name|user
argument_list|,
name|dept
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|targetId
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
name|targetId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|targetId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|targetId
operator|instanceof
name|Long
operator|)
condition|)
block|{
try|try
block|{
name|targetId
operator|=
operator|(
name|Serializable
operator|)
name|targetId
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getUniqueId"
argument_list|)
operator|.
name|invoke
argument_list|(
name|targetId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
try|try
block|{
name|targetId
operator|=
operator|(
name|Serializable
operator|)
name|targetId
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getId"
argument_list|)
operator|.
name|invoke
argument_list|(
name|targetId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
name|Object
name|domainObject
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|get
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
argument_list|,
name|targetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|domainObject
operator|==
literal|null
condition|)
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|domainObjectNotExists
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|,
name|targetType
argument_list|)
argument_list|)
throw|;
name|checkPermission
argument_list|(
name|user
argument_list|,
name|domainObject
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|permissionCheckFailedException
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|,
name|targetType
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkPermission
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Object
name|domainObject
parameter_list|,
name|Right
name|right
parameter_list|)
throws|throws
name|AccessDeniedException
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|noAuthentication
argument_list|(
name|right
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|right
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|noAuthority
argument_list|(
name|right
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|right
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|right
operator|==
literal|null
condition|)
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|noRight
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|right
argument_list|)
condition|)
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|missingRight
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|domainObject
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|domainObject
operator|instanceof
name|Collection
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|domainObject
control|)
name|checkPermission
argument_list|(
name|user
argument_list|,
name|o
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|domainObject
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
operator|(
name|Object
index|[]
operator|)
name|domainObject
control|)
name|checkPermission
argument_list|(
name|user
argument_list|,
name|o
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|right
operator|.
name|hasType
argument_list|()
operator|&&
operator|!
name|right
operator|.
name|type
argument_list|()
operator|.
name|isInstance
argument_list|(
name|domainObject
argument_list|)
condition|)
block|{
if|if
condition|(
name|domainObject
operator|instanceof
name|Qualifiable
condition|)
block|{
name|checkPermission
argument_list|(
name|user
argument_list|,
operator|(
operator|(
name|Qualifiable
operator|)
name|domainObject
operator|)
operator|.
name|getQualifierId
argument_list|()
argument_list|,
operator|(
operator|(
name|Qualifiable
operator|)
name|domainObject
operator|)
operator|.
name|getQualifierType
argument_list|()
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|domainObject
operator|instanceof
name|Long
condition|)
block|{
name|checkPermission
argument_list|(
name|user
argument_list|,
operator|(
name|Long
operator|)
name|domainObject
argument_list|,
name|right
operator|.
name|type
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|wrongDomainObject
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|,
name|domainObject
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|right
operator|.
name|type
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
name|Permission
argument_list|<
name|?
argument_list|>
name|perm
init|=
operator|(
name|Permission
argument_list|<
name|?
argument_list|>
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"permission"
operator|+
name|right
operator|.
name|name
argument_list|()
argument_list|,
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|perm
operator|!=
literal|null
operator|&&
name|perm
operator|.
name|type
argument_list|()
operator|.
name|isInstance
argument_list|(
name|domainObject
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|Boolean
operator|)
name|perm
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"check"
argument_list|,
name|UserContext
operator|.
name|class
argument_list|,
name|perm
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|invoke
argument_list|(
name|perm
argument_list|,
name|user
argument_list|,
name|domainObject
argument_list|)
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|permissionCheckFailed
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|,
name|domainObject
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|BeansException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|permissionCheckFailedException
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|,
name|domainObject
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|domainObject
operator|instanceof
name|Session
condition|)
block|{
if|if
condition|(
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
operator|(
name|Session
operator|)
name|domainObject
argument_list|)
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|sessionCheckFailed
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|,
name|domainObject
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|domainObject
operator|instanceof
name|Department
condition|)
block|{
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
operator|(
name|Department
operator|)
name|domainObject
argument_list|)
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|departmentCheckFailed
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|,
name|domainObject
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Right
name|r
range|:
name|Right
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|r
operator|.
name|hasType
argument_list|()
condition|)
block|{
try|try
block|{
name|Permission
argument_list|<
name|?
argument_list|>
name|p
init|=
operator|(
name|Permission
argument_list|<
name|?
argument_list|>
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"permission"
operator|+
name|r
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"No permission found for "
operator|+
name|r
operator|+
literal|" ("
operator|+
name|r
operator|.
name|type
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|r
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|p
operator|.
name|type
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Permission "
operator|+
name|r
operator|+
literal|" ("
operator|+
name|r
operator|.
name|type
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|") has a wrong type ("
operator|+
name|p
operator|.
name|type
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|BeansException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to find a permission "
operator|+
name|r
operator|+
literal|" ("
operator|+
name|r
operator|.
name|type
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to check permission "
operator|+
name|r
operator|+
literal|" ("
operator|+
name|r
operator|.
name|type
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkPermissionAnyAuthority
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Serializable
name|targetId
parameter_list|,
name|String
name|targetType
parameter_list|,
name|Right
name|right
parameter_list|,
name|Qualifiable
modifier|...
name|filter
parameter_list|)
throws|throws
name|AccessDeniedException
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|noAuthentication
argument_list|(
name|right
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|right
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
name|AccessDeniedException
name|ret
init|=
literal|null
decl_stmt|;
name|authorities
label|:
for|for
control|(
name|UserAuthority
name|authority
range|:
name|user
operator|.
name|getAuthorities
argument_list|()
control|)
block|{
for|for
control|(
name|Qualifiable
name|q
range|:
name|filter
control|)
if|if
condition|(
operator|!
name|authority
operator|.
name|hasQualifier
argument_list|(
name|q
argument_list|)
condition|)
continue|continue
name|authorities
continue|;
try|try
block|{
name|checkPermission
argument_list|(
operator|new
name|UserContextWrapper
argument_list|(
name|user
argument_list|,
name|authority
argument_list|)
argument_list|,
name|targetId
argument_list|,
name|targetType
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|ret
operator|=
name|e
expr_stmt|;
block|}
block|}
throw|throw
operator|(
name|ret
operator|!=
literal|null
condition|?
name|ret
else|:
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|noMatchingAuthority
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkPermissionAnyAuthority
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Object
name|targetObject
parameter_list|,
name|Right
name|right
parameter_list|,
name|Qualifiable
modifier|...
name|filter
parameter_list|)
throws|throws
name|AccessDeniedException
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|noAuthentication
argument_list|(
name|right
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|right
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
name|AccessDeniedException
name|ret
init|=
literal|null
decl_stmt|;
name|authorities
label|:
for|for
control|(
name|UserAuthority
name|authority
range|:
name|user
operator|.
name|getAuthorities
argument_list|()
control|)
block|{
for|for
control|(
name|Qualifiable
name|q
range|:
name|filter
control|)
if|if
condition|(
operator|!
name|authority
operator|.
name|hasQualifier
argument_list|(
name|q
argument_list|)
condition|)
continue|continue
name|authorities
continue|;
try|try
block|{
name|checkPermission
argument_list|(
operator|new
name|UserContextWrapper
argument_list|(
name|user
argument_list|,
name|authority
argument_list|)
argument_list|,
name|targetObject
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|ret
operator|=
name|e
expr_stmt|;
block|}
block|}
throw|throw
operator|(
name|ret
operator|!=
literal|null
condition|?
name|ret
else|:
operator|new
name|AccessDeniedException
argument_list|(
name|MSG
operator|.
name|noMatchingAuthority
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPermission
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Serializable
name|targetId
parameter_list|,
name|String
name|targetType
parameter_list|,
name|Right
name|right
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|right
operator|==
literal|null
operator|||
operator|!
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|right
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|targetType
operator|==
literal|null
operator|&&
name|right
operator|.
name|hasType
argument_list|()
condition|)
name|targetType
operator|=
name|right
operator|.
name|type
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
if|if
condition|(
name|targetType
operator|==
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|targetId
operator|!=
literal|null
operator|&&
name|targetId
operator|instanceof
name|Collection
condition|)
block|{
for|for
control|(
name|Serializable
name|id
range|:
operator|(
name|Collection
argument_list|<
name|Serializable
argument_list|>
operator|)
name|targetId
control|)
if|if
condition|(
operator|!
name|hasPermission
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
name|targetType
argument_list|,
name|right
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|targetId
operator|!=
literal|null
operator|&&
name|targetId
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
for|for
control|(
name|Serializable
name|id
range|:
operator|(
name|Serializable
index|[]
operator|)
name|targetId
control|)
if|if
condition|(
operator|!
name|hasPermission
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
name|targetType
argument_list|,
name|right
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
try|try
block|{
name|String
name|className
init|=
name|targetType
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
name|className
operator|=
literal|"org.unitime.timetable.model."
operator|+
name|className
expr_stmt|;
comment|// Special cases
if|if
condition|(
name|targetId
operator|==
literal|null
operator|&&
name|Session
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
name|targetId
operator|=
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|targetId
operator|==
literal|null
operator|&&
name|Department
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
for|for
control|(
name|Department
name|d
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|user
argument_list|)
control|)
if|if
condition|(
name|hasPermission
argument_list|(
name|user
argument_list|,
name|d
argument_list|,
name|right
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|targetId
operator|==
literal|null
operator|&&
name|SubjectArea
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
for|for
control|(
name|SubjectArea
name|sa
range|:
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|user
argument_list|)
control|)
if|if
condition|(
name|hasPermission
argument_list|(
name|user
argument_list|,
name|sa
argument_list|,
name|right
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|targetId
operator|==
literal|null
operator|&&
name|SolverGroup
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
for|for
control|(
name|SolverGroup
name|g
range|:
name|SolverGroup
operator|.
name|getUserSolverGroups
argument_list|(
name|user
argument_list|)
control|)
if|if
condition|(
name|hasPermission
argument_list|(
name|user
argument_list|,
name|g
argument_list|,
name|right
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|targetId
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|targetId
operator|instanceof
name|Qualifiable
condition|)
block|{
name|Qualifiable
name|q
init|=
operator|(
name|Qualifiable
operator|)
name|targetId
decl_stmt|;
if|if
condition|(
name|targetType
operator|==
literal|null
operator|||
name|targetType
operator|.
name|equals
argument_list|(
name|q
operator|.
name|getQualifierType
argument_list|()
argument_list|)
condition|)
return|return
name|hasPermission
argument_list|(
name|user
argument_list|,
name|q
operator|.
name|getQualifierId
argument_list|()
argument_list|,
name|q
operator|.
name|getQualifierType
argument_list|()
argument_list|,
name|right
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
if|if
condition|(
name|targetId
operator|instanceof
name|String
operator|&&
name|Department
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
name|Department
name|dept
init|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
operator|(
name|String
operator|)
name|targetId
argument_list|,
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dept
operator|!=
literal|null
condition|)
return|return
name|hasPermission
argument_list|(
name|user
argument_list|,
name|dept
argument_list|,
name|right
argument_list|)
return|;
block|}
if|if
condition|(
name|targetId
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
name|targetId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|targetId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|targetId
operator|instanceof
name|Long
operator|)
condition|)
block|{
try|try
block|{
name|targetId
operator|=
operator|(
name|Serializable
operator|)
name|targetId
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getUniqueId"
argument_list|)
operator|.
name|invoke
argument_list|(
name|targetId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
try|try
block|{
name|targetId
operator|=
operator|(
name|Serializable
operator|)
name|targetId
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getId"
argument_list|)
operator|.
name|invoke
argument_list|(
name|targetId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
name|Object
name|domainObject
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|get
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
argument_list|,
name|targetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|domainObject
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|hasPermission
argument_list|(
name|user
argument_list|,
name|domainObject
argument_list|,
name|right
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPermission
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Object
name|domainObject
parameter_list|,
name|Right
name|right
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|right
operator|==
literal|null
operator|||
operator|!
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|right
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|domainObject
operator|==
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|domainObject
operator|instanceof
name|Collection
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|domainObject
control|)
if|if
condition|(
operator|!
name|hasPermission
argument_list|(
name|user
argument_list|,
name|o
argument_list|,
name|right
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|domainObject
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
operator|(
name|Object
index|[]
operator|)
name|domainObject
control|)
if|if
condition|(
operator|!
name|hasPermission
argument_list|(
name|user
argument_list|,
name|o
argument_list|,
name|right
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|right
operator|.
name|hasType
argument_list|()
operator|&&
operator|!
name|right
operator|.
name|type
argument_list|()
operator|.
name|isInstance
argument_list|(
name|domainObject
argument_list|)
condition|)
block|{
if|if
condition|(
name|domainObject
operator|instanceof
name|Qualifiable
condition|)
block|{
return|return
name|hasPermission
argument_list|(
name|user
argument_list|,
operator|(
operator|(
name|Qualifiable
operator|)
name|domainObject
operator|)
operator|.
name|getQualifierId
argument_list|()
argument_list|,
operator|(
operator|(
name|Qualifiable
operator|)
name|domainObject
operator|)
operator|.
name|getQualifierType
argument_list|()
argument_list|,
name|right
argument_list|)
return|;
block|}
if|if
condition|(
name|domainObject
operator|instanceof
name|Long
condition|)
block|{
return|return
name|hasPermission
argument_list|(
name|user
argument_list|,
operator|(
name|Long
operator|)
name|domainObject
argument_list|,
name|right
operator|.
name|type
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|right
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
try|try
block|{
name|Permission
argument_list|<
name|?
argument_list|>
name|perm
init|=
operator|(
name|Permission
argument_list|<
name|?
argument_list|>
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"permission"
operator|+
name|right
operator|.
name|name
argument_list|()
argument_list|,
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|perm
operator|!=
literal|null
operator|&&
name|perm
operator|.
name|type
argument_list|()
operator|.
name|isInstance
argument_list|(
name|domainObject
argument_list|)
condition|)
return|return
operator|(
name|Boolean
operator|)
name|perm
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"check"
argument_list|,
name|UserContext
operator|.
name|class
argument_list|,
name|perm
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|invoke
argument_list|(
name|perm
argument_list|,
name|user
argument_list|,
name|domainObject
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|domainObject
operator|instanceof
name|Session
condition|)
return|return
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
operator|(
name|Session
operator|)
name|domainObject
argument_list|)
return|;
if|if
condition|(
name|domainObject
operator|instanceof
name|Department
condition|)
return|return
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
operator|(
name|Department
operator|)
name|domainObject
argument_list|)
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPermissionAnyAuthority
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Serializable
name|targetId
parameter_list|,
name|String
name|targetType
parameter_list|,
name|Right
name|right
parameter_list|,
name|Qualifiable
modifier|...
name|filter
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|authorities
label|:
for|for
control|(
name|UserAuthority
name|authority
range|:
name|user
operator|.
name|getAuthorities
argument_list|()
control|)
block|{
for|for
control|(
name|Qualifiable
name|q
range|:
name|filter
control|)
if|if
condition|(
operator|!
name|authority
operator|.
name|hasQualifier
argument_list|(
name|q
argument_list|)
condition|)
continue|continue
name|authorities
continue|;
if|if
condition|(
name|hasPermission
argument_list|(
operator|new
name|UserContextWrapper
argument_list|(
name|user
argument_list|,
name|authority
argument_list|)
argument_list|,
name|targetId
argument_list|,
name|targetType
argument_list|,
name|right
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPermissionAnyAuthority
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Object
name|targetObject
parameter_list|,
name|Right
name|right
parameter_list|,
name|Qualifiable
modifier|...
name|filter
parameter_list|)
throws|throws
name|AccessDeniedException
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|authorities
label|:
for|for
control|(
name|UserAuthority
name|authority
range|:
name|user
operator|.
name|getAuthorities
argument_list|()
control|)
block|{
for|for
control|(
name|Qualifiable
name|q
range|:
name|filter
control|)
if|if
condition|(
operator|!
name|authority
operator|.
name|hasQualifier
argument_list|(
name|q
argument_list|)
condition|)
continue|continue
name|authorities
continue|;
if|if
condition|(
name|hasPermission
argument_list|(
operator|new
name|UserContextWrapper
argument_list|(
name|user
argument_list|,
name|authority
argument_list|)
argument_list|,
name|targetObject
argument_list|,
name|right
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
class|class
name|UserContextWrapper
implements|implements
name|UserContext
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|UserAuthority
name|iAuthority
decl_stmt|;
name|UserContext
name|iContext
decl_stmt|;
specifier|public
name|UserContextWrapper
parameter_list|(
name|UserContext
name|context
parameter_list|,
name|UserAuthority
name|authority
parameter_list|)
block|{
name|iContext
operator|=
name|context
expr_stmt|;
name|iAuthority
operator|=
name|authority
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|iContext
operator|.
name|isEnabled
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCredentialsNonExpired
parameter_list|()
block|{
return|return
name|iContext
operator|.
name|isCredentialsNonExpired
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAccountNonLocked
parameter_list|()
block|{
return|return
name|iContext
operator|.
name|isAccountNonLocked
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAccountNonExpired
parameter_list|()
block|{
return|return
name|iContext
operator|.
name|isAccountNonExpired
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|iContext
operator|.
name|getUsername
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|iContext
operator|.
name|getPassword
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|UserProperty
name|property
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|iContext
operator|.
name|setProperty
argument_list|(
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|iContext
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCurrentAuthority
parameter_list|(
name|UserAuthority
name|authority
parameter_list|)
block|{
name|iAuthority
operator|=
name|authority
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
return|return
name|iContext
operator|.
name|hasRole
argument_list|(
name|role
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasDepartment
parameter_list|(
name|Long
name|departmentId
parameter_list|)
block|{
return|return
name|iAuthority
operator|.
name|hasQualifier
argument_list|(
operator|new
name|SimpleQualifier
argument_list|(
name|Department
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|departmentId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAuthority
parameter_list|(
name|String
name|authority
parameter_list|)
block|{
return|return
name|iContext
operator|.
name|hasAuthority
argument_list|(
name|authority
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAuthority
parameter_list|(
name|String
name|role
parameter_list|,
name|Long
name|uniqueId
parameter_list|)
block|{
return|return
name|iContext
operator|.
name|hasAuthority
argument_list|(
name|role
argument_list|,
name|uniqueId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAuthority
parameter_list|(
name|UserAuthority
name|authority
parameter_list|)
block|{
return|return
name|iContext
operator|.
name|hasAuthority
argument_list|(
name|authority
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
name|UserProperty
name|property
parameter_list|)
block|{
return|return
name|iContext
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
return|return
name|iContext
operator|.
name|getProperty
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|iContext
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|iContext
operator|.
name|getProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iContext
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getExternalUserId
parameter_list|()
block|{
return|return
name|iContext
operator|.
name|getExternalUserId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEmail
parameter_list|()
block|{
return|return
name|iContext
operator|.
name|getEmail
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|UserAuthority
name|getCurrentAuthority
parameter_list|()
block|{
return|return
name|iAuthority
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getCurrentAcademicSessionId
parameter_list|()
block|{
return|return
operator|(
name|Long
operator|)
operator|(
name|iAuthority
operator|.
name|getAcademicSession
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|iAuthority
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getQualifierId
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|UserAuthority
name|getAuthority
parameter_list|(
name|String
name|authority
parameter_list|)
block|{
return|return
name|iContext
operator|.
name|getAuthority
argument_list|(
name|authority
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|UserAuthority
name|getAuthority
parameter_list|(
name|String
name|role
parameter_list|,
name|Long
name|uniqueId
parameter_list|)
block|{
return|return
name|iContext
operator|.
name|getAuthority
argument_list|(
name|role
argument_list|,
name|uniqueId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|UserAuthority
argument_list|>
name|getAuthorities
parameter_list|(
name|String
name|role
parameter_list|,
name|Qualifiable
modifier|...
name|filter
parameter_list|)
block|{
return|return
name|iContext
operator|.
name|getAuthorities
argument_list|(
name|role
argument_list|,
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|?
extends|extends
name|UserAuthority
argument_list|>
name|getAuthorities
parameter_list|()
block|{
return|return
name|iContext
operator|.
name|getAuthorities
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTrueExternalUserId
parameter_list|()
block|{
return|return
name|iContext
operator|.
name|getTrueExternalUserId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTrueName
parameter_list|()
block|{
return|return
name|iContext
operator|.
name|getTrueName
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

