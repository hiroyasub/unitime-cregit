begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|connectors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PositionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/api/instructors"
argument_list|)
specifier|public
class|class
name|InstructorsConnector
extends|extends
name|ApiConnector
block|{
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|departmentId
init|=
name|helper
operator|.
name|getOptinalParameterLong
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DepartmentInfo
argument_list|>
name|response
init|=
operator|new
name|ArrayList
argument_list|<
name|DepartmentInfo
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|departmentId
operator|!=
literal|null
condition|)
block|{
name|Department
name|department
init|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|departmentId
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Department "
operator|+
name|departmentId
operator|+
literal|" does not exist."
argument_list|)
throw|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|department
operator|.
name|getSession
argument_list|()
argument_list|,
name|Right
operator|.
name|ApiRetrieveInstructors
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
operator|new
name|DepartmentInfo
argument_list|(
name|department
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|String
name|deptCode
init|=
name|helper
operator|.
name|getOptinalParameter
argument_list|(
literal|"code"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|deptCode
operator|!=
literal|null
condition|)
block|{
name|Department
name|department
init|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|deptCode
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Department "
operator|+
name|deptCode
operator|+
literal|" does not exist."
argument_list|)
throw|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|department
operator|.
name|getSession
argument_list|()
argument_list|,
name|Right
operator|.
name|ApiRetrieveInstructors
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
operator|new
name|DepartmentInfo
argument_list|(
name|department
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|sessionId
argument_list|,
literal|"Session"
argument_list|,
name|Right
operator|.
name|ApiRetrieveInstructors
argument_list|)
expr_stmt|;
for|for
control|(
name|Department
name|department
range|:
name|Department
operator|.
name|findAllBeingUsed
argument_list|(
name|sessionId
argument_list|)
control|)
name|response
operator|.
name|add
argument_list|(
operator|new
name|DepartmentInfo
argument_list|(
name|department
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|helper
operator|.
name|setResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
class|class
name|DepartmentInfo
block|{
name|Long
name|iDepartmentId
decl_stmt|;
name|String
name|iExternalId
decl_stmt|;
name|String
name|iDeptCode
decl_stmt|;
name|String
name|iAbbreviation
decl_stmt|;
name|String
name|iName
decl_stmt|;
name|Boolean
name|iExternallyManaged
decl_stmt|;
name|String
name|iExternalName
decl_stmt|,
name|iExternalAbbreviation
decl_stmt|;
name|List
argument_list|<
name|InstructorInfo
argument_list|>
name|iInstructors
init|=
operator|new
name|ArrayList
argument_list|<
name|InstructorInfo
argument_list|>
argument_list|()
decl_stmt|;
name|DepartmentInfo
parameter_list|(
name|Department
name|d
parameter_list|)
block|{
name|iDepartmentId
operator|=
name|d
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iExternalId
operator|=
name|d
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
name|iDeptCode
operator|=
name|d
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
name|iAbbreviation
operator|=
name|d
operator|.
name|getAbbreviation
argument_list|()
expr_stmt|;
name|iName
operator|=
name|d
operator|.
name|getName
argument_list|()
expr_stmt|;
name|iExternallyManaged
operator|=
name|d
operator|.
name|isExternalManager
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
name|iExternalName
operator|=
name|d
operator|.
name|getExternalMgrLabel
argument_list|()
expr_stmt|;
name|iExternalAbbreviation
operator|=
name|d
operator|.
name|getExternalMgrAbbv
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|DepartmentalInstructor
name|i
range|:
name|d
operator|.
name|getInstructors
argument_list|()
control|)
name|iInstructors
operator|.
name|add
argument_list|(
operator|new
name|InstructorInfo
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|InstructorInfo
block|{
name|Long
name|iInstructorId
decl_stmt|;
name|String
name|iExternalId
decl_stmt|;
name|String
name|iFirstName
decl_stmt|;
name|String
name|iMiddleName
decl_stmt|;
name|String
name|iLastName
decl_stmt|;
name|String
name|iTitle
decl_stmt|;
name|PositionInfo
name|iPosition
decl_stmt|;
name|String
name|iEmail
decl_stmt|;
name|String
name|iAcademicTitle
decl_stmt|;
name|InstructorInfo
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
name|iInstructorId
operator|=
name|instructor
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iExternalId
operator|=
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
name|iFirstName
operator|=
name|instructor
operator|.
name|getFirstName
argument_list|()
expr_stmt|;
name|iMiddleName
operator|=
name|instructor
operator|.
name|getMiddleName
argument_list|()
expr_stmt|;
name|iLastName
operator|=
name|instructor
operator|.
name|getLastName
argument_list|()
expr_stmt|;
name|iTitle
operator|=
name|instructor
operator|.
name|getAcademicTitle
argument_list|()
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|!=
literal|null
condition|)
name|iPosition
operator|=
operator|new
name|PositionInfo
argument_list|(
name|instructor
operator|.
name|getPositionType
argument_list|()
argument_list|)
expr_stmt|;
name|iEmail
operator|=
name|instructor
operator|.
name|getEmail
argument_list|()
expr_stmt|;
name|iAcademicTitle
operator|=
name|instructor
operator|.
name|getAcademicTitle
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|PositionInfo
block|{
name|String
name|iReference
decl_stmt|;
name|String
name|iLabel
decl_stmt|;
name|PositionInfo
parameter_list|(
name|PositionType
name|type
parameter_list|)
block|{
name|iReference
operator|=
name|type
operator|.
name|getReference
argument_list|()
expr_stmt|;
name|iLabel
operator|=
name|type
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"instructors"
return|;
block|}
block|}
end_class

end_unit

