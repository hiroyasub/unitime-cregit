begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|connectors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|context
operator|.
name|UniTimeUserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/api/roles"
argument_list|)
specifier|public
class|class
name|RolesConnector
extends|extends
name|ApiConnector
block|{
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|Right
operator|.
name|ApiRetrieveRoles
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|format
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Session
argument_list|>
name|sessions
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Session order by academicInitiative, sessionBeginDateTime"
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SessionInfo
argument_list|>
name|response
init|=
operator|new
name|ArrayList
argument_list|<
name|SessionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalId
operator|==
literal|null
operator|||
name|externalId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Session
name|session
range|:
name|sessions
control|)
block|{
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|==
literal|null
operator|||
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
continue|continue;
name|response
operator|.
name|add
argument_list|(
operator|new
name|SessionInfo
argument_list|(
name|format
argument_list|,
name|session
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|ApiTrimLeadingZerosFromUserExternalIds
operator|.
name|isTrue
argument_list|()
condition|)
while|while
condition|(
name|externalId
operator|.
name|startsWith
argument_list|(
literal|"0"
argument_list|)
condition|)
name|externalId
operator|=
name|externalId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|UniTimeUserContext
name|context
init|=
operator|new
name|UniTimeUserContext
argument_list|(
name|externalId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Session
name|session
range|:
name|sessions
control|)
block|{
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|==
literal|null
operator|||
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
continue|continue;
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|UserAuthority
name|authority
range|:
name|context
operator|.
name|getAuthorities
argument_list|(
literal|null
argument_list|,
name|session
argument_list|)
control|)
block|{
if|if
condition|(
name|Roles
operator|.
name|ROLE_NONE
operator|.
name|equals
argument_list|(
name|authority
operator|.
name|getRole
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|Roles
operator|.
name|ROLE_ANONYMOUS
operator|.
name|equals
argument_list|(
name|authority
operator|.
name|getRole
argument_list|()
argument_list|)
condition|)
continue|continue;
name|roles
operator|.
name|add
argument_list|(
name|authority
operator|.
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|roles
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|response
operator|.
name|add
argument_list|(
operator|new
name|SessionInfo
argument_list|(
name|format
argument_list|,
name|session
argument_list|,
name|roles
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|helper
operator|.
name|setResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
class|class
name|SessionInfo
block|{
name|Long
name|iSessionId
decl_stmt|;
name|String
name|iReference
decl_stmt|;
name|Boolean
name|iSelected
decl_stmt|;
name|String
name|iYear
decl_stmt|;
name|String
name|iTerm
decl_stmt|;
name|String
name|iCampus
decl_stmt|;
name|String
name|iExternalTerm
decl_stmt|;
name|String
name|iExternalCampus
decl_stmt|;
name|String
name|iBeginDate
decl_stmt|;
name|String
name|iEndDate
decl_stmt|;
name|String
name|iClassEndDate
decl_stmt|;
name|String
name|iExamBeginDate
decl_stmt|;
name|String
name|iEventBeginDate
decl_stmt|;
name|String
name|iEventEndDate
decl_stmt|;
name|StatusInfo
name|iStatus
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|iRoles
decl_stmt|;
name|SessionInfo
parameter_list|(
name|DateFormat
name|format
parameter_list|,
name|Session
name|session
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|roles
parameter_list|,
name|Boolean
name|selected
parameter_list|)
block|{
name|iSessionId
operator|=
name|session
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iReference
operator|=
name|session
operator|.
name|getReference
argument_list|()
expr_stmt|;
name|iYear
operator|=
name|session
operator|.
name|getAcademicYear
argument_list|()
expr_stmt|;
name|iTerm
operator|=
name|session
operator|.
name|getAcademicTerm
argument_list|()
expr_stmt|;
name|iCampus
operator|=
name|session
operator|.
name|getAcademicInitiative
argument_list|()
expr_stmt|;
name|iBeginDate
operator|=
name|format
operator|.
name|format
argument_list|(
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|iEndDate
operator|=
name|format
operator|.
name|format
argument_list|(
name|session
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|iClassEndDate
operator|=
name|format
operator|.
name|format
argument_list|(
name|session
operator|.
name|getClassesEndDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|iExamBeginDate
operator|=
name|format
operator|.
name|format
argument_list|(
name|session
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|iEventBeginDate
operator|=
name|format
operator|.
name|format
argument_list|(
name|session
operator|.
name|getEventBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|iEventEndDate
operator|=
name|format
operator|.
name|format
argument_list|(
name|session
operator|.
name|getEventEndDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iStatus
operator|=
operator|new
name|StatusInfo
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
name|iRoles
operator|=
name|roles
expr_stmt|;
name|iSelected
operator|=
name|selected
expr_stmt|;
block|}
block|}
class|class
name|StatusInfo
block|{
name|String
name|iRefenrece
decl_stmt|;
name|String
name|iLabel
decl_stmt|;
name|Boolean
name|iClasses
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|iExams
decl_stmt|;
name|String
name|iStudentScheduling
decl_stmt|;
name|StatusInfo
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|DepartmentStatusType
name|status
init|=
name|session
operator|.
name|getStatusType
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|iRefenrece
operator|=
name|status
operator|.
name|getReference
argument_list|()
expr_stmt|;
name|iLabel
operator|=
name|status
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|iClasses
operator|=
name|status
operator|.
name|canNoRoleReportClass
argument_list|()
expr_stmt|;
name|iExams
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|ExamType
name|type
range|:
name|ExamType
operator|.
name|findAllUsed
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
name|ExamStatus
name|examStatus
init|=
name|ExamStatus
operator|.
name|findStatus
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|examStatus
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeFinal
operator|&&
name|examStatus
operator|.
name|effectiveStatus
argument_list|()
operator|.
name|canNoRoleReportExamFinal
argument_list|()
condition|)
name|iExams
operator|.
name|add
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeMidterm
operator|&&
name|examStatus
operator|.
name|effectiveStatus
argument_list|()
operator|.
name|canNoRoleReportExamMidterm
argument_list|()
condition|)
name|iExams
operator|.
name|add
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|type
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeFinal
operator|&&
name|status
operator|.
name|canNoRoleReportExamFinal
argument_list|()
condition|)
name|iExams
operator|.
name|add
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeMidterm
operator|&&
name|status
operator|.
name|canNoRoleReportExamMidterm
argument_list|()
condition|)
name|iExams
operator|.
name|add
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|status
operator|.
name|canOnlineSectionStudents
argument_list|()
condition|)
name|iStudentScheduling
operator|=
literal|"online"
expr_stmt|;
if|else if
condition|(
name|status
operator|.
name|canSectionAssistStudents
argument_list|()
condition|)
name|iStudentScheduling
operator|=
literal|"assistant"
expr_stmt|;
if|else if
condition|(
name|status
operator|.
name|canPreRegisterStudents
argument_list|()
condition|)
name|iStudentScheduling
operator|=
literal|"registration"
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"roles"
return|;
block|}
block|}
end_class

end_unit

