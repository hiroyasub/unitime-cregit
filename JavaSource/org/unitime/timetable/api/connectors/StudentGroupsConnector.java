begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|connectors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/api/student-groups"
argument_list|)
specifier|public
class|class
name|StudentGroupsConnector
extends|extends
name|ApiConnector
block|{
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|sessionId
argument_list|,
literal|"Session"
argument_list|,
name|Right
operator|.
name|ApiRetrieveStudentGroups
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StudentGroupInfo
argument_list|>
name|response
init|=
operator|new
name|ArrayList
argument_list|<
name|StudentGroupInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentGroup
name|g
range|:
operator|(
name|List
argument_list|<
name|StudentGroup
argument_list|>
operator|)
name|StudentGroupDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StudentGroup g where g.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|response
operator|.
name|add
argument_list|(
operator|new
name|StudentGroupInfo
argument_list|(
name|g
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|setResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|StudentGroupInfo
block|{
name|Long
name|iId
decl_stmt|;
name|String
name|iExternalId
decl_stmt|;
name|String
name|iAbbreviation
decl_stmt|;
name|String
name|iName
decl_stmt|;
name|List
argument_list|<
name|StudentInfo
argument_list|>
name|iStudents
init|=
operator|new
name|ArrayList
argument_list|<
name|StudentInfo
argument_list|>
argument_list|()
decl_stmt|;
name|StudentGroupInfo
parameter_list|(
name|StudentGroup
name|g
parameter_list|)
block|{
name|iId
operator|=
name|g
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iExternalId
operator|=
name|g
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
name|iAbbreviation
operator|=
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
expr_stmt|;
name|iName
operator|=
name|g
operator|.
name|getGroupName
argument_list|()
expr_stmt|;
for|for
control|(
name|Student
name|s
range|:
name|g
operator|.
name|getStudents
argument_list|()
control|)
name|iStudents
operator|.
name|add
argument_list|(
operator|new
name|StudentInfo
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|CurriculumInfo
block|{
name|String
name|iArea
decl_stmt|;
name|String
name|iClassification
decl_stmt|;
name|String
name|iMajor
decl_stmt|;
name|String
name|iMinor
decl_stmt|;
name|CurriculumInfo
parameter_list|(
name|StudentAreaClassificationMajor
name|acm
parameter_list|)
block|{
name|iArea
operator|=
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
expr_stmt|;
name|iClassification
operator|=
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|iMajor
operator|=
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
expr_stmt|;
block|}
name|CurriculumInfo
parameter_list|(
name|StudentAreaClassificationMinor
name|acm
parameter_list|)
block|{
name|iArea
operator|=
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
expr_stmt|;
name|iClassification
operator|=
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|iMinor
operator|=
name|acm
operator|.
name|getMinor
argument_list|()
operator|.
name|getCode
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|StudentInfo
block|{
name|Long
name|iStudentId
decl_stmt|;
name|String
name|iExternalId
decl_stmt|;
name|String
name|iFirstName
decl_stmt|;
name|String
name|iMiddleName
decl_stmt|;
name|String
name|iLastName
decl_stmt|;
name|String
name|iTitle
decl_stmt|;
name|String
name|iEmail
decl_stmt|;
name|String
name|iSectioningStatus
decl_stmt|;
name|List
argument_list|<
name|CurriculumInfo
argument_list|>
name|iCurriculum
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|iArea
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|iClassification
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|iMajor
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|iMinor
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|iGroup
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|iAccomodation
decl_stmt|;
name|Long
name|iCourseId
decl_stmt|;
name|String
name|iSubjectArea
decl_stmt|;
name|String
name|iCourseNumber
decl_stmt|;
name|String
name|iCourseTitle
decl_stmt|;
name|Long
name|iClassId
decl_stmt|;
name|String
name|iSubpart
decl_stmt|;
name|String
name|iSectionNumber
decl_stmt|;
name|String
name|iClassSuffix
decl_stmt|;
name|String
name|iClassExternalId
decl_stmt|;
name|Date
name|iRequestDate
decl_stmt|,
name|iEnrollmentDate
decl_stmt|;
name|StudentInfo
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|iStudentId
operator|=
name|student
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iExternalId
operator|=
name|student
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
name|iFirstName
operator|=
name|student
operator|.
name|getFirstName
argument_list|()
expr_stmt|;
name|iMiddleName
operator|=
name|student
operator|.
name|getMiddleName
argument_list|()
expr_stmt|;
name|iLastName
operator|=
name|student
operator|.
name|getLastName
argument_list|()
expr_stmt|;
name|iTitle
operator|=
name|student
operator|.
name|getAcademicTitle
argument_list|()
expr_stmt|;
name|iEmail
operator|=
name|student
operator|.
name|getEmail
argument_list|()
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getSectioningStatus
argument_list|()
operator|!=
literal|null
condition|)
name|iSectioningStatus
operator|=
name|student
operator|.
name|getSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
expr_stmt|;
for|for
control|(
name|StudentAreaClassificationMajor
name|aac
range|:
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
block|{
if|if
condition|(
name|iArea
operator|==
literal|null
condition|)
block|{
name|iArea
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iClassification
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|iMajor
operator|==
literal|null
condition|)
name|iMajor
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iArea
operator|.
name|add
argument_list|(
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|iClassification
operator|.
name|add
argument_list|(
name|aac
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|iMajor
operator|.
name|add
argument_list|(
name|aac
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCurriculum
operator|==
literal|null
condition|)
name|iCurriculum
operator|=
operator|new
name|ArrayList
argument_list|<
name|CurriculumInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iCurriculum
operator|.
name|add
argument_list|(
operator|new
name|CurriculumInfo
argument_list|(
name|aac
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentAreaClassificationMinor
name|minor
range|:
name|student
operator|.
name|getAreaClasfMinors
argument_list|()
control|)
block|{
if|if
condition|(
name|iMinor
operator|==
literal|null
condition|)
name|iMinor
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iMinor
operator|.
name|add
argument_list|(
name|minor
operator|.
name|getMinor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCurriculum
operator|==
literal|null
condition|)
name|iCurriculum
operator|=
operator|new
name|ArrayList
argument_list|<
name|CurriculumInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iCurriculum
operator|.
name|add
argument_list|(
operator|new
name|CurriculumInfo
argument_list|(
name|minor
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentGroup
name|group
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|iGroup
operator|==
literal|null
condition|)
name|iGroup
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iGroup
operator|.
name|add
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentAccomodation
name|accomodation
range|:
name|student
operator|.
name|getAccomodations
argument_list|()
control|)
block|{
if|if
condition|(
name|iAccomodation
operator|==
literal|null
condition|)
name|iAccomodation
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iAccomodation
operator|.
name|add
argument_list|(
name|accomodation
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"student-groups"
return|;
block|}
block|}
end_class

end_unit

