begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|connectors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|BinaryFileApiHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|BinaryFileApiHelper
operator|.
name|BinaryFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventAction
operator|.
name|EventContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FutureOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomDetailInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomPictureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomUpdateRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AttachementType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|LocationPicture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocationPicture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPicture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationPictureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|rooms
operator|.
name|RoomDetailsBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|rooms
operator|.
name|RoomPicturesBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|rooms
operator|.
name|RoomUpdateBackend
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/api/rooms"
argument_list|)
specifier|public
class|class
name|RoomsConnector
extends|extends
name|ApiConnector
block|{
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|pictureId
init|=
name|helper
operator|.
name|getOptinalParameterLong
argument_list|(
literal|"pictureId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|pictureId
operator|!=
literal|null
condition|)
block|{
name|LocationPicture
name|picture
init|=
name|LocationPictureDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|pictureId
argument_list|)
decl_stmt|;
if|if
condition|(
name|picture
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Room picture of the given id does not exist."
argument_list|)
throw|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|picture
operator|.
name|getLocation
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|Right
operator|.
name|ApiRetrieveRooms
argument_list|)
expr_stmt|;
name|helper
operator|.
name|setResponse
argument_list|(
operator|new
name|BinaryFile
argument_list|(
name|picture
operator|.
name|getDataFile
argument_list|()
argument_list|,
name|picture
operator|.
name|getContentType
argument_list|()
argument_list|,
name|picture
operator|.
name|getFileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given academic session no longer exists."
argument_list|)
throw|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|session
argument_list|,
name|Right
operator|.
name|ApiRetrieveRooms
argument_list|)
expr_stmt|;
name|RoomFilterRpcRequest
name|request
init|=
operator|new
name|RoomFilterRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCommand
argument_list|(
name|FilterRpcRequest
operator|.
name|Command
operator|.
name|ENUMERATE
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|helper
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|command
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"r:text"
argument_list|)
condition|)
block|{
name|request
operator|.
name|setText
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"r:text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"r:"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|helper
operator|.
name|getParameterValues
argument_list|(
name|command
argument_list|)
control|)
name|request
operator|.
name|addOption
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setOption
argument_list|(
literal|"flag"
argument_list|,
literal|"plain"
argument_list|)
expr_stmt|;
name|EventContext
name|context
init|=
operator|new
name|EventContext
argument_list|(
name|helper
operator|.
name|getSessionContext
argument_list|()
argument_list|,
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
name|FilterRpcResponse
name|response
init|=
operator|new
name|FilterRpcResponse
argument_list|()
decl_stmt|;
operator|new
name|RoomDetailsBackend
argument_list|()
operator|.
name|enumarate
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RoomDetailInterface
argument_list|>
name|rooms
init|=
operator|new
name|ArrayList
argument_list|<
name|RoomDetailInterface
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|hasResults
argument_list|()
condition|)
block|{
for|for
control|(
name|Entity
name|e
range|:
name|response
operator|.
name|getResults
argument_list|()
control|)
name|rooms
operator|.
name|add
argument_list|(
operator|(
name|RoomDetailInterface
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|setResponse
argument_list|(
name|rooms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doPut
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|Location
name|location
init|=
literal|null
decl_stmt|;
name|Long
name|roomId
init|=
name|helper
operator|.
name|getOptinalParameterLong
argument_list|(
literal|"roomId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomId
operator|!=
literal|null
condition|)
block|{
name|location
operator|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|roomId
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Room "
operator|+
name|roomId
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
else|else
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|String
name|room
init|=
name|helper
operator|.
name|getRequiredParameter
argument_list|(
literal|"room"
argument_list|)
decl_stmt|;
name|location
operator|=
name|Location
operator|.
name|findByName
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|room
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Room "
operator|+
name|room
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
argument_list|,
name|Right
operator|.
name|ApiRoomPictureUpload
argument_list|)
expr_stmt|;
name|BinaryFile
name|file
init|=
name|helper
operator|.
name|getRequest
argument_list|(
name|BinaryFile
operator|.
name|class
argument_list|)
decl_stmt|;
name|updatePicture
argument_list|(
name|helper
argument_list|,
name|location
argument_list|,
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|getOptinalParameterBoolean
argument_list|(
literal|"future"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Location
argument_list|>
name|futureLocations
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select l from Location l, Session s where "
operator|+
literal|"l.permanentId = :permanentId and s.uniqueId = :sessionId and s.sessionBeginDateTime< l.session.sessionBeginDateTime "
operator|+
literal|"order by l.session.sessionBeginDateTime"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"permanentId"
argument_list|,
name|location
operator|.
name|getPermanentId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|loc
range|:
name|futureLocations
control|)
name|updatePicture
argument_list|(
name|helper
argument_list|,
name|loc
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|doDelete
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|pictureId
init|=
name|helper
operator|.
name|getOptinalParameterLong
argument_list|(
literal|"pictureId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|pictureId
operator|!=
literal|null
condition|)
block|{
name|LocationPicture
name|picture
init|=
name|LocationPictureDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|pictureId
argument_list|)
decl_stmt|;
if|if
condition|(
name|picture
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Room picture of the given id does not exist."
argument_list|)
throw|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|picture
operator|.
name|getLocation
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|Right
operator|.
name|ApiRoomPictureUpload
argument_list|)
expr_stmt|;
name|picture
operator|.
name|getLocation
argument_list|()
operator|.
name|getPictures
argument_list|()
operator|.
name|remove
argument_list|(
name|picture
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|picture
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|helper
operator|.
name|setResponse
argument_list|(
operator|new
name|RoomPictureInterface
argument_list|(
name|picture
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|picture
operator|.
name|getFileName
argument_list|()
argument_list|,
name|picture
operator|.
name|getContentType
argument_list|()
argument_list|,
name|picture
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|RoomPicturesBackend
operator|.
name|getPictureType
argument_list|(
name|picture
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Location
name|location
init|=
literal|null
decl_stmt|;
name|Long
name|roomId
init|=
name|helper
operator|.
name|getOptinalParameterLong
argument_list|(
literal|"roomId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomId
operator|!=
literal|null
condition|)
block|{
name|location
operator|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|roomId
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Room "
operator|+
name|roomId
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
else|else
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|String
name|room
init|=
name|helper
operator|.
name|getRequiredParameter
argument_list|(
literal|"room"
argument_list|)
decl_stmt|;
name|location
operator|=
name|Location
operator|.
name|findByName
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|room
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Room "
operator|+
name|room
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
argument_list|,
name|Right
operator|.
name|ApiRoomEdit
argument_list|)
expr_stmt|;
name|RoomUpdateRpcRequest
name|request
init|=
operator|new
name|RoomUpdateRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setLocationId
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSessionId
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setOperation
argument_list|(
name|RoomUpdateRpcRequest
operator|.
name|Operation
operator|.
name|DELETE
argument_list|)
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|getOptinalParameterBoolean
argument_list|(
literal|"future"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Location
argument_list|>
name|futureLocations
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select l from Location l, Session s where "
operator|+
literal|"l.permanentId = :permanentId and s.uniqueId = :sessionId and s.sessionBeginDateTime< l.session.sessionBeginDateTime "
operator|+
literal|"order by l.session.sessionBeginDateTime"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"permanentId"
argument_list|,
name|location
operator|.
name|getPermanentId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|loc
range|:
name|futureLocations
control|)
name|request
operator|.
name|setFutureFlag
argument_list|(
name|loc
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|FutureOperation
operator|.
name|getFlagAllEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|setResponse
argument_list|(
operator|new
name|RoomUpdateBackend
argument_list|()
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|helper
operator|.
name|getSessionContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|updatePicture
parameter_list|(
name|ApiHelper
name|helper
parameter_list|,
name|Location
name|location
parameter_list|,
name|BinaryFile
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|helper
operator|.
name|getOptinalParameter
argument_list|(
literal|"name"
argument_list|,
name|file
operator|.
name|getFileName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'name' was not provided."
argument_list|)
throw|;
name|String
name|type
init|=
name|helper
operator|.
name|getOptinalParameter
argument_list|(
literal|"contentType"
argument_list|,
name|file
operator|.
name|getContentType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'contentType' was not provided."
argument_list|)
throw|;
name|String
name|reference
init|=
name|helper
operator|.
name|getOptinalParameter
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Uploaded file "
operator|+
name|name
operator|+
literal|" of type "
operator|+
name|type
operator|+
literal|" and size "
operator|+
name|file
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|LocationPicture
name|picture
init|=
literal|null
decl_stmt|;
for|for
control|(
name|LocationPicture
name|p
range|:
name|location
operator|.
name|getPictures
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getFileName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|picture
operator|=
name|p
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|picture
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|picture
operator|=
operator|new
name|RoomPicture
argument_list|()
expr_stmt|;
name|picture
operator|.
name|setFileName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|picture
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|getPictures
argument_list|()
operator|.
name|add
argument_list|(
operator|(
name|RoomPicture
operator|)
name|picture
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|picture
operator|=
operator|new
name|NonUniversityLocationPicture
argument_list|()
expr_stmt|;
name|picture
operator|.
name|setFileName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|picture
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NonUniversityLocation
operator|)
name|location
operator|)
operator|.
name|getPictures
argument_list|()
operator|.
name|add
argument_list|(
operator|(
name|NonUniversityLocationPicture
operator|)
name|picture
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
name|picture
operator|.
name|setContentType
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
name|picture
operator|.
name|setType
argument_list|(
name|AttachementType
operator|.
name|findByReference
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|,
name|reference
argument_list|)
argument_list|)
expr_stmt|;
name|picture
operator|.
name|setTimeStamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|picture
operator|.
name|setDataFile
argument_list|(
name|file
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|picture
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|helper
operator|.
name|setResponse
argument_list|(
operator|new
name|RoomPictureInterface
argument_list|(
name|picture
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|picture
operator|.
name|getFileName
argument_list|()
argument_list|,
name|picture
operator|.
name|getContentType
argument_list|()
argument_list|,
name|picture
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|RoomPicturesBackend
operator|.
name|getPictureType
argument_list|(
name|picture
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doPost
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|RoomDetailInterface
name|room
init|=
name|helper
operator|.
name|getRequest
argument_list|(
name|RoomDetailInterface
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No room data provided."
argument_list|)
throw|;
name|Long
name|roomId
init|=
name|helper
operator|.
name|getOptinalParameterLong
argument_list|(
literal|"roomId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomId
operator|!=
literal|null
condition|)
name|room
operator|.
name|setUniqueId
argument_list|(
name|roomId
argument_list|)
expr_stmt|;
name|room
operator|.
name|setSessionId
argument_list|(
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
operator|&&
name|room
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
if|if
condition|(
name|helper
operator|.
name|getOptinalParameter
argument_list|(
literal|"room"
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Location
name|location
init|=
name|Location
operator|.
name|findByName
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|,
name|room
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|helper
operator|.
name|getOptinalParameter
argument_list|(
literal|"room"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
name|room
operator|.
name|setUniqueId
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|room
operator|.
name|getSessionId
argument_list|()
operator|!=
literal|null
condition|?
name|room
operator|.
name|getSessionId
argument_list|()
else|:
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|ApiRoomEdit
argument_list|)
expr_stmt|;
name|RoomUpdateRpcRequest
name|request
init|=
operator|new
name|RoomUpdateRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setLocationId
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSessionId
argument_list|(
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRoom
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|request
operator|.
name|setOperation
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|RoomUpdateRpcRequest
operator|.
name|Operation
operator|.
name|CREATE
else|:
name|RoomUpdateRpcRequest
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|String
index|[]
name|flags
init|=
name|helper
operator|.
name|getParameterValues
argument_list|(
literal|"flag"
argument_list|)
decl_stmt|;
name|int
name|f
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|flags
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|flag
range|:
name|flags
control|)
name|f
operator|=
name|FutureOperation
operator|.
name|valueOf
argument_list|(
name|flag
operator|.
name|toUpperCase
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|==
literal|0
condition|)
name|f
operator|=
name|FutureOperation
operator|.
name|PICTURES
operator|.
name|clear
argument_list|(
name|FutureOperation
operator|.
name|getFlagAllEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setFutureFlag
argument_list|(
literal|0l
argument_list|,
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|getOptinalParameterBoolean
argument_list|(
literal|"future"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
if|if
condition|(
name|room
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Location
argument_list|>
name|futureLocations
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select l from Location l, Location o where "
operator|+
literal|"o.uniqueId = :uniqueId and l.permanentId = o.permanentId and o.session.sessionBeginDateTime< l.session.sessionBeginDateTime "
operator|+
literal|"order by l.session.sessionBeginDateTime"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|loc
range|:
name|futureLocations
control|)
name|request
operator|.
name|setFutureFlag
argument_list|(
name|loc
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|futureSessionIds
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select f.uniqueId from Session f, Session s where "
operator|+
literal|"s.uniqueId = :sessionId and s.sessionBeginDateTime< f.sessionBeginDateTime and s.academicInitiative = f.academicInitiative "
operator|+
literal|"order by f.sessionBeginDateTime"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|room
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|futureSessionIds
control|)
name|request
operator|.
name|setFutureFlag
argument_list|(
operator|-
name|id
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
name|helper
operator|.
name|setResponse
argument_list|(
operator|new
name|RoomUpdateBackend
argument_list|()
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|helper
operator|.
name|getSessionContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ApiHelper
name|createHelper
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
block|{
return|return
operator|new
name|BinaryFileApiHelper
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|sessionContext
argument_list|,
name|getCacheMode
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"rooms"
return|;
block|}
block|}
end_class

end_unit

