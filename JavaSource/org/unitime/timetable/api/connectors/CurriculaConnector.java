begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|connectors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|CurriculaServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|AcademicAreaInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CurriculumFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|MajorInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Curriculum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CurriculumDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|curricula
operator|.
name|CurriculumFilterBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/api/curricula"
argument_list|)
specifier|public
class|class
name|CurriculaConnector
extends|extends
name|ApiConnector
block|{
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
specifier|final
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|curriculumId
init|=
name|helper
operator|.
name|getOptinalParameterLong
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|curriculumId
operator|!=
literal|null
condition|)
block|{
name|Curriculum
name|curriculum
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|curriculumId
argument_list|)
decl_stmt|;
if|if
condition|(
name|curriculum
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Curriculum "
operator|+
name|curriculumId
operator|+
literal|" does not exist."
argument_list|)
throw|;
specifier|final
name|Long
name|sessionId
init|=
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|sessionId
argument_list|,
literal|"Session"
argument_list|,
name|Right
operator|.
name|ApiRetrieveCurricula
argument_list|)
expr_stmt|;
name|CurriculaServlet
name|servlet
init|=
operator|new
name|CurriculaServlet
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SessionContext
name|getSessionContext
parameter_list|()
block|{
return|return
name|helper
operator|.
name|getSessionContext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Long
name|getAcademicSessionId
parameter_list|()
block|{
return|return
name|sessionId
return|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|setResponse
argument_list|(
name|servlet
operator|.
name|loadCurriculum
argument_list|(
name|curriculumId
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|CurriculumFilterRpcRequest
name|filter
init|=
operator|new
name|CurriculumFilterRpcRequest
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setCommand
argument_list|(
name|FilterRpcRequest
operator|.
name|Command
operator|.
name|ENUMERATE
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|helper
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|command
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"c:text"
argument_list|)
condition|)
block|{
name|filter
operator|.
name|setText
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"c:text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"c:"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|helper
operator|.
name|getParameterValues
argument_list|(
name|command
argument_list|)
control|)
name|filter
operator|.
name|addOption
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|sessionId
argument_list|,
literal|"Session"
argument_list|,
name|Right
operator|.
name|ApiRetrieveCurricula
argument_list|)
expr_stmt|;
name|CurriculaServlet
name|servlet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|getOptinalParameterBoolean
argument_list|(
literal|"details"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|servlet
operator|=
operator|new
name|CurriculaServlet
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SessionContext
name|getSessionContext
parameter_list|()
block|{
return|return
name|helper
operator|.
name|getSessionContext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Long
name|getAcademicSessionId
parameter_list|()
block|{
return|return
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
name|results
init|=
operator|new
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Curriculum
name|c
range|:
name|CurriculumFilterBackend
operator|.
name|curricula
argument_list|(
name|sessionId
argument_list|,
name|filter
operator|.
name|getOptions
argument_list|()
argument_list|,
operator|new
name|Query
argument_list|(
name|filter
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|Department
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|servlet
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|servlet
operator|.
name|loadCurriculum
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CurriculumInterface
name|ci
init|=
operator|new
name|CurriculumInterface
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setAbbv
argument_list|(
name|c
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setName
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setMultipleMajors
argument_list|(
name|c
operator|.
name|isMultipleMajors
argument_list|()
argument_list|)
expr_stmt|;
name|DepartmentInterface
name|di
init|=
operator|new
name|DepartmentInterface
argument_list|()
decl_stmt|;
name|di
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setAbbv
argument_list|(
name|c
operator|.
name|getDepartment
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setCode
argument_list|(
name|c
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setName
argument_list|(
name|c
operator|.
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setDepartment
argument_list|(
name|di
argument_list|)
expr_stmt|;
name|AcademicAreaInterface
name|ai
init|=
operator|new
name|AcademicAreaInterface
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ai
operator|.
name|setAbbv
argument_list|(
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|ai
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setAcademicArea
argument_list|(
name|ai
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|PosMajor
argument_list|>
name|i
init|=
name|c
operator|.
name|getMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|major
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|MajorInterface
name|mi
init|=
operator|new
name|MajorInterface
argument_list|()
decl_stmt|;
name|mi
operator|.
name|setId
argument_list|(
name|major
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|setCode
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|major
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ci
operator|.
name|addMajor
argument_list|(
name|mi
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
name|helper
operator|.
name|setResponse
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"curricula"
return|;
block|}
block|}
end_class

end_unit

