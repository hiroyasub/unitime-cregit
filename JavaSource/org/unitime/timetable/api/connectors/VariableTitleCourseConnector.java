begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|connectors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstrOffrConfigChangeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalSectionMonitoredUpdateMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalSectionMonitoredUpdateMessage
operator|.
name|ExternalSectionCreationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalVariableTitleDataLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingConsentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_class
annotation|@
name|Service
argument_list|(
literal|"/api/var-title-crs"
argument_list|)
specifier|public
class|class
name|VariableTitleCourseConnector
extends|extends
name|ApiConnector
block|{
annotation|@
name|Override
specifier|protected
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"var-title-crs"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|VariableTitleQuery
name|vtq
init|=
name|helper
operator|.
name|getRequest
argument_list|(
name|VariableTitleQuery
operator|.
name|class
argument_list|)
decl_stmt|;
name|validateRequest
argument_list|(
name|vtq
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|getAcadSession
argument_list|(
name|vtq
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|,
name|Right
operator|.
name|ApiVariableTitleSectionLookup
argument_list|)
expr_stmt|;
name|findClassAndUpdateQueryData
argument_list|(
name|vtq
argument_list|,
name|findCourse
argument_list|(
name|vtq
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|setResponse
argument_list|(
name|vtq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doPost
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|VariableTitleQuery
name|vtq
init|=
name|helper
operator|.
name|getRequest
argument_list|(
name|VariableTitleQuery
operator|.
name|class
argument_list|)
decl_stmt|;
name|validateRequest
argument_list|(
name|vtq
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|getAcadSession
argument_list|(
name|vtq
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|,
name|Right
operator|.
name|ApiVariableTitleSectionCreate
argument_list|)
expr_stmt|;
name|findOrCreateVariableTitleSection
argument_list|(
name|vtq
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|helper
operator|.
name|setResponse
argument_list|(
name|vtq
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|validateRequest
parameter_list|(
name|VariableTitleQuery
name|variableTitleQuery
parameter_list|,
name|ApiHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
name|variableTitleQuery
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing Query Data."
argument_list|)
throw|;
block|}
if|if
condition|(
name|variableTitleQuery
operator|.
name|getCampus
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing Campus."
argument_list|)
throw|;
block|}
if|if
condition|(
name|variableTitleQuery
operator|.
name|getYear
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing Year."
argument_list|)
throw|;
block|}
if|if
condition|(
name|variableTitleQuery
operator|.
name|getTerm
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing Term."
argument_list|)
throw|;
block|}
if|if
condition|(
name|variableTitleQuery
operator|.
name|getSubjectArea
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing Subject Area."
argument_list|)
throw|;
block|}
if|if
condition|(
name|variableTitleQuery
operator|.
name|getCourseNumber
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing Course Number."
argument_list|)
throw|;
block|}
if|if
condition|(
name|variableTitleQuery
operator|.
name|getCourseTitle
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing Course Title."
argument_list|)
throw|;
block|}
if|if
condition|(
name|variableTitleQuery
operator|.
name|getInstructorId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing Instructor Id."
argument_list|)
throw|;
block|}
if|if
condition|(
name|variableTitleQuery
operator|.
name|getStartDate
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing Start Date."
argument_list|)
throw|;
block|}
if|if
condition|(
name|variableTitleQuery
operator|.
name|getEndDate
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing End Date."
argument_list|)
throw|;
block|}
if|if
condition|(
name|getAcadSession
argument_list|(
name|variableTitleQuery
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not found for campus, year, and term."
argument_list|)
throw|;
block|}
name|SubjectArea
name|sa
init|=
name|getSubjectObject
argument_list|(
name|variableTitleQuery
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sa
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Subject area not found for campus, year, term, and subject area abbreviaton."
argument_list|)
throw|;
block|}
if|if
condition|(
name|DepartmentalInstructor
operator|.
name|findByPuidDepartmentId
argument_list|(
name|variableTitleQuery
operator|.
name|getInstructorId
argument_list|()
argument_list|,
name|sa
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instructor with matching id not found for provided subject area."
argument_list|)
throw|;
block|}
empty_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|VariableTitleConfigName
operator|.
name|value
argument_list|()
operator|==
literal|null
operator|||
name|ApplicationProperty
operator|.
name|VariableTitleConfigName
operator|.
name|value
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Variable Title Application Properties: Config Name must be set."
argument_list|)
throw|;
block|}
if|if
condition|(
name|ApplicationProperty
operator|.
name|VariableTitleDefaultLimit
operator|.
name|value
argument_list|()
operator|==
literal|null
operator|||
name|ApplicationProperty
operator|.
name|VariableTitleDefaultLimit
operator|.
name|value
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Variable Title Application Properties: Default Limit must be set."
argument_list|)
throw|;
block|}
if|if
condition|(
name|ApplicationProperty
operator|.
name|VariableTitleInstructionalType
operator|.
name|value
argument_list|()
operator|==
literal|null
operator|||
name|ApplicationProperty
operator|.
name|VariableTitleInstructionalType
operator|.
name|value
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Variable Title Application Properties: Instructional Type must be set."
argument_list|)
throw|;
block|}
if|if
condition|(
name|ItypeDesc
operator|.
name|findForReference
argument_list|(
name|ApplicationProperty
operator|.
name|VariableTitleInstructionalType
operator|.
name|value
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Variable Title Application Properties: Instructional Type Not Found."
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|Session
name|getAcadSession
parameter_list|(
name|VariableTitleQuery
name|variableTitleQuery
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
return|return
name|Session
operator|.
name|getSessionUsingCampusYearTerm
argument_list|(
name|variableTitleQuery
operator|.
name|getCampus
argument_list|()
argument_list|,
name|variableTitleQuery
operator|.
name|getYear
argument_list|()
argument_list|,
name|variableTitleQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
specifier|private
name|SubjectArea
name|getSubjectObject
parameter_list|(
name|VariableTitleQuery
name|variableTitleQuery
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
return|return
operator|(
name|SubjectArea
operator|.
name|findUsingCampusYearTermExternalSubjectAbbreviation
argument_list|(
name|variableTitleQuery
operator|.
name|getCampus
argument_list|()
argument_list|,
name|variableTitleQuery
operator|.
name|getYear
argument_list|()
argument_list|,
name|variableTitleQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|variableTitleQuery
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|hibSession
argument_list|)
operator|)
return|;
block|}
specifier|private
name|CourseOffering
name|findCourse
parameter_list|(
name|VariableTitleQuery
name|variableTitleQuery
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"from CourseOffering co"
argument_list|)
operator|.
name|append
argument_list|(
literal|" where co.instructionalOffering.session.uniqueId = "
argument_list|)
operator|.
name|append
argument_list|(
name|getAcadSession
argument_list|(
name|variableTitleQuery
argument_list|,
name|hibSession
argument_list|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" and co.subjectArea.uniqueId = "
argument_list|)
operator|.
name|append
argument_list|(
name|getSubjectObject
argument_list|(
name|variableTitleQuery
argument_list|,
name|hibSession
argument_list|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" and co.courseNbr like '"
argument_list|)
operator|.
name|append
argument_list|(
name|variableTitleQuery
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"%' and co.title = '"
argument_list|)
operator|.
name|append
argument_list|(
name|variableTitleQuery
operator|.
name|getCourseTitle
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
return|return
operator|(
name|CourseOffering
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|Class_
name|findClass
parameter_list|(
name|VariableTitleQuery
name|variableTitleQuery
parameter_list|,
name|CourseOffering
name|courseOffering
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|courseOffering
operator|!=
literal|null
operator|&&
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
operator|!=
literal|null
operator|&&
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|InstrOfferingConfig
name|ioc
range|:
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|(
operator|(
name|ApplicationProperty
operator|.
name|VariableTitleConfigName
operator|.
name|value
argument_list|()
operator|!=
literal|null
operator|&&
name|ApplicationProperty
operator|.
name|VariableTitleConfigName
operator|.
name|value
argument_list|()
operator|!=
literal|""
operator|&&
name|ioc
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationProperty
operator|.
name|VariableTitleConfigName
operator|.
name|value
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|ApplicationProperty
operator|.
name|VariableTitleConfigName
operator|.
name|value
argument_list|()
operator|==
literal|null
operator|||
name|ApplicationProperty
operator|.
name|VariableTitleConfigName
operator|.
name|value
argument_list|()
operator|.
name|trim
argument_list|()
operator|==
literal|""
operator|)
operator|)
condition|)
block|{
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getSis_ref
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationProperty
operator|.
name|VariableTitleInstructionalType
operator|.
name|value
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|c
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|variableTitleQuery
operator|.
name|getInstructorId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|effectiveDatePattern
argument_list|()
operator|.
name|getStartDate
argument_list|()
operator|.
name|equals
argument_list|(
name|variableTitleQuery
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|&&
name|c
operator|.
name|effectiveDatePattern
argument_list|()
operator|.
name|getEndDate
argument_list|()
operator|.
name|equals
argument_list|(
name|variableTitleQuery
operator|.
name|getEndDate
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|findClassAndUpdateQueryData
parameter_list|(
name|VariableTitleQuery
name|variableTitleQuery
parameter_list|,
name|CourseOffering
name|courseOffering
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Class_
name|clazz
init|=
name|findClass
argument_list|(
name|variableTitleQuery
argument_list|,
name|courseOffering
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|variableTitleQuery
operator|.
name|setFullCourseNumber
argument_list|(
name|courseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|variableTitleQuery
operator|.
name|setExternalId
argument_list|(
name|clazz
operator|.
name|getExternalId
argument_list|(
name|courseOffering
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|variableTitleQuery
operator|.
name|setStatus
argument_list|(
name|findClassCreationStatus
argument_list|(
name|courseOffering
argument_list|,
name|clazz
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|findClassCreationStatus
parameter_list|(
name|CourseOffering
name|courseOffering
parameter_list|,
name|Class_
name|clazz
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|ExternalInstrOffrConfigChangeAction
name|externalInstrOffrConfigChangeAction
init|=
literal|null
decl_stmt|;
try|try
block|{
name|externalInstrOffrConfigChangeAction
operator|=
name|lookupExternalConfigChangeAction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Error trying to instantiate External Config Change Action, section will not be sent to the External System, FAILED will be returned by default"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|ExternalSectionCreationStatus
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|createExternalSectionAndReturnStatus
argument_list|(
name|courseOffering
argument_list|,
name|clazz
argument_list|,
operator|(
name|externalInstrOffrConfigChangeAction
operator|!=
literal|null
operator|)
argument_list|,
name|externalInstrOffrConfigChangeAction
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
specifier|private
name|String
name|createExternalSectionAndReturnStatus
parameter_list|(
name|CourseOffering
name|co
parameter_list|,
name|Class_
name|clazz
parameter_list|,
name|boolean
name|externalConfigChangeActionExists
parameter_list|,
name|ExternalInstrOffrConfigChangeAction
name|configChangeAction
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|co
operator|==
literal|null
operator|||
name|co
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|ExternalSectionCreationStatus
operator|.
name|DOES_NOT_EXIST
operator|.
name|toString
argument_list|()
return|;
block|}
if|else if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|ExternalSectionCreationStatus
operator|.
name|DOES_NOT_EXIST
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|externalConfigChangeActionExists
operator|&&
name|configChangeAction
operator|==
literal|null
condition|)
block|{
return|return
name|ExternalSectionCreationStatus
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
return|;
block|}
if|else if
condition|(
name|configChangeAction
operator|==
literal|null
condition|)
block|{
return|return
name|ExternalSectionCreationStatus
operator|.
name|SUCCESS
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
name|ExternalSectionMonitoredUpdateMessage
name|externalSectionMonitoredUpdateMessage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|externalSectionMonitoredUpdateMessage
operator|=
name|lookupExternalSectionMonitoredUpdateMessageAction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Error trying to instantiate External Section Monitored Message Action, section will not be sent to the External System, FAILED will be returned by default"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|ExternalSectionCreationStatus
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|externalSectionMonitoredUpdateMessage
operator|!=
literal|null
condition|)
block|{
return|return
name|externalSectionMonitoredUpdateMessage
operator|.
name|monitorExternalSectionUpdate
argument_list|(
name|co
argument_list|,
name|clazz
argument_list|,
name|configChangeAction
argument_list|,
name|ApplicationProperty
operator|.
name|VariableTitleExternalSystemWaitTime
operator|.
name|intValue
argument_list|()
argument_list|,
name|hibSession
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|ExternalSectionCreationStatus
operator|.
name|SUCCESS
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|String
name|generateCourseNumber
parameter_list|(
name|SubjectArea
name|subjectArea
parameter_list|,
name|String
name|courseNumber
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|existingNumbers
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select co.courseNbr from CourseOffering co where co.subjectArea.uniqueId = :subjId and co.courseNbr like '"
operator|+
name|courseNumber
operator|+
literal|"%'"
decl_stmt|;
name|existingNumbers
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjId"
argument_list|,
name|subjectArea
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|char
name|char1
init|=
literal|'A'
decl_stmt|,
name|char2
init|=
literal|'A'
decl_stmt|;
name|boolean
name|needSecondCharacter
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|char1
operator|<=
literal|'Z'
operator|&&
name|char2
operator|<=
literal|'Z'
condition|)
block|{
name|StringBuffer
name|chkCrsNumber
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|chkCrsNumber
operator|.
name|append
argument_list|(
name|courseNumber
argument_list|)
operator|.
name|append
argument_list|(
name|ApplicationProperty
operator|.
name|VariableTitleCourseSuffixDefaultStartCharacter
operator|.
name|value
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|char1
argument_list|)
expr_stmt|;
if|if
condition|(
name|needSecondCharacter
condition|)
block|{
name|chkCrsNumber
operator|.
name|append
argument_list|(
name|char2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|existingNumbers
operator|.
name|contains
argument_list|(
name|chkCrsNumber
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|needSecondCharacter
condition|)
block|{
if|if
condition|(
name|char1
operator|==
literal|'Z'
condition|)
block|{
name|char1
operator|=
literal|'A'
expr_stmt|;
name|needSecondCharacter
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|char1
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|char2
operator|==
literal|'Z'
condition|)
block|{
name|char2
operator|=
literal|'A'
expr_stmt|;
name|char1
operator|++
expr_stmt|;
block|}
else|else
block|{
name|char2
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
return|return
name|chkCrsNumber
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|InstructionalOffering
name|createOffering
parameter_list|(
name|VariableTitleQuery
name|variableTitleQuery
parameter_list|,
name|SubjectArea
name|subjectArea
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|String
name|newCourseNumber
init|=
name|generateCourseNumber
argument_list|(
name|subjectArea
argument_list|,
name|variableTitleQuery
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|CourseOffering
name|courseOffering
init|=
operator|new
name|CourseOffering
argument_list|()
decl_stmt|;
name|OfferingConsentType
name|consent
init|=
name|OfferingConsentType
operator|.
name|getOfferingConsentTypeForReference
argument_list|(
name|ApplicationProperty
operator|.
name|VariableTitleDefaultConsentType
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|courseOffering
operator|.
name|setSubjectArea
argument_list|(
name|subjectArea
argument_list|)
expr_stmt|;
name|subjectArea
operator|.
name|addTocourseOfferings
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setSubjectAreaAbbv
argument_list|(
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setCourseNbr
argument_list|(
name|newCourseNumber
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setTitle
argument_list|(
name|variableTitleQuery
operator|.
name|getCourseTitle
argument_list|()
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setIsControl
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setNbrExpectedStudents
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setDemand
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setConsentType
argument_list|(
name|consent
argument_list|)
expr_stmt|;
name|InstructionalOffering
name|instructionalOffering
init|=
operator|new
name|InstructionalOffering
argument_list|()
decl_stmt|;
name|instructionalOffering
operator|.
name|setNotOffered
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|instructionalOffering
operator|.
name|addTocourseOfferings
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setInstructionalOffering
argument_list|(
name|instructionalOffering
argument_list|)
expr_stmt|;
name|instructionalOffering
operator|.
name|setSession
argument_list|(
name|subjectArea
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|instructionalOffering
operator|.
name|setByReservationOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|instructionalOffering
operator|.
name|generateInstrOfferingPermId
argument_list|()
expr_stmt|;
name|instructionalOffering
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|instructionalOffering
argument_list|)
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|courseOffering
argument_list|)
argument_list|)
expr_stmt|;
name|ExternalVariableTitleDataLookup
name|externalVariableTitleDataLookup
init|=
literal|null
decl_stmt|;
try|try
block|{
name|externalVariableTitleDataLookup
operator|=
name|lookupExternalVariableTitleDataLookup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Error trying to instantiate variable title data lookup class, course credit config will not be created."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|externalVariableTitleDataLookup
operator|!=
literal|null
condition|)
block|{
name|CourseCreditFormat
name|ccf
init|=
name|externalVariableTitleDataLookup
operator|.
name|courseCreditFormatForCourse
argument_list|(
name|subjectArea
argument_list|,
name|variableTitleQuery
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|subjectArea
operator|.
name|getSession
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|Float
name|minCredit
init|=
name|externalVariableTitleDataLookup
operator|.
name|minCreditForCourse
argument_list|(
name|subjectArea
argument_list|,
name|variableTitleQuery
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|subjectArea
operator|.
name|getSession
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|Float
name|maxCredit
init|=
name|externalVariableTitleDataLookup
operator|.
name|maxCreditForCourse
argument_list|(
name|subjectArea
argument_list|,
name|variableTitleQuery
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|subjectArea
operator|.
name|getSession
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|ccf
operator|!=
literal|null
operator|&&
name|minCredit
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|VariableTitleDefaultCourseCreditType
operator|.
name|value
argument_list|()
operator|!=
literal|null
operator|&&
name|ApplicationProperty
operator|.
name|VariableTitleDefaultCourseCreditType
operator|.
name|value
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|&&
name|ApplicationProperty
operator|.
name|VariableTitleDefaultCourseCreditUnitType
operator|.
name|value
argument_list|()
operator|!=
literal|null
operator|&&
name|ApplicationProperty
operator|.
name|VariableTitleDefaultCourseCreditUnitType
operator|.
name|value
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|CourseCreditType
name|cct
init|=
name|CourseCreditType
operator|.
name|getCourseCreditTypeForReference
argument_list|(
name|ApplicationProperty
operator|.
name|VariableTitleDefaultCourseCreditType
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|CourseCreditUnitType
name|ccut
init|=
name|CourseCreditUnitType
operator|.
name|getCourseCreditUnitTypeForReference
argument_list|(
name|ApplicationProperty
operator|.
name|VariableTitleDefaultCourseCreditUnitType
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cct
operator|!=
literal|null
operator|&
name|ccut
operator|!=
literal|null
condition|)
block|{
name|CourseCreditUnitConfig
name|ccuc
init|=
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|ccf
operator|.
name|getReference
argument_list|()
argument_list|,
name|cct
argument_list|,
name|ccut
argument_list|,
name|minCredit
argument_list|,
name|maxCredit
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
decl_stmt|;
name|ccuc
operator|.
name|setOwner
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|addTocreditConfigs
argument_list|(
name|ccuc
argument_list|)
expr_stmt|;
name|ccuc
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|ccuc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|instructionalOffering
return|;
block|}
specifier|private
name|InstrOfferingConfig
name|createConfiguration
parameter_list|(
name|InstructionalOffering
name|instructionalOffering
parameter_list|,
name|String
name|configName
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|InstrOfferingConfig
name|instrOfferingConfig
init|=
operator|new
name|InstrOfferingConfig
argument_list|()
decl_stmt|;
name|instrOfferingConfig
operator|.
name|setInstructionalOffering
argument_list|(
name|instructionalOffering
argument_list|)
expr_stmt|;
name|instructionalOffering
operator|.
name|addToinstrOfferingConfigs
argument_list|(
name|instrOfferingConfig
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|VariableTitleDefaultLimit
operator|.
name|intValue
argument_list|()
operator|<
literal|0
condition|)
block|{
name|instrOfferingConfig
operator|.
name|setUnlimitedEnrollment
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|instrOfferingConfig
operator|.
name|setLimit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|instrOfferingConfig
operator|.
name|setUnlimitedEnrollment
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|instrOfferingConfig
operator|.
name|setLimit
argument_list|(
name|ApplicationProperty
operator|.
name|VariableTitleDefaultLimit
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|instrOfferingConfig
operator|.
name|setName
argument_list|(
name|configName
argument_list|)
expr_stmt|;
name|instrOfferingConfig
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|instrOfferingConfig
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|instrOfferingConfig
return|;
block|}
specifier|private
name|SchedulingSubpart
name|createSubpart
parameter_list|(
name|InstrOfferingConfig
name|instrOfferingConfig
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|ItypeDesc
name|itype
init|=
name|ItypeDesc
operator|.
name|findForReference
argument_list|(
name|ApplicationProperty
operator|.
name|VariableTitleInstructionalType
operator|.
name|value
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|SchedulingSubpart
name|ss
init|=
operator|new
name|SchedulingSubpart
argument_list|()
decl_stmt|;
name|ss
operator|.
name|setInstrOfferingConfig
argument_list|(
name|instrOfferingConfig
argument_list|)
expr_stmt|;
name|instrOfferingConfig
operator|.
name|addToschedulingSubparts
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setItype
argument_list|(
name|itype
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setMinutesPerWk
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setAutoSpreadInTime
argument_list|(
name|ApplicationProperty
operator|.
name|SchedulingSubpartAutoSpreadInTimeDefault
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setStudentAllowOverlap
argument_list|(
name|ApplicationProperty
operator|.
name|SchedulingSubpartStudentOverlapsDefault
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setChildSubparts
argument_list|(
operator|new
name|HashSet
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setSession
argument_list|(
name|instrOfferingConfig
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|ss
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ss
return|;
block|}
specifier|private
name|Class_
name|createClass
parameter_list|(
name|VariableTitleQuery
name|variableTitleQuery
parameter_list|,
name|SubjectArea
name|subjectArea
parameter_list|,
name|SchedulingSubpart
name|ss
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|DatePattern
name|datePattern
init|=
name|lookupDatePattern
argument_list|(
name|variableTitleQuery
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|datePattern
operator|==
literal|null
condition|)
block|{
name|datePattern
operator|=
name|createVariableTitleDatePattern
argument_list|(
name|variableTitleQuery
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
name|Class_
name|clazz
init|=
operator|new
name|Class_
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|setCancelled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setControllingDept
argument_list|(
name|subjectArea
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setManagingDept
argument_list|(
name|subjectArea
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|datePattern
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|clazz
operator|.
name|setDatePattern
argument_list|(
name|datePattern
argument_list|)
expr_stmt|;
block|}
name|clazz
operator|.
name|setDisplayInstructor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|VariableTitleDefaultLimit
operator|.
name|intValue
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|clazz
operator|.
name|setExpectedCapacity
argument_list|(
name|ApplicationProperty
operator|.
name|VariableTitleDefaultLimit
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setMaxExpectedCapacity
argument_list|(
name|ApplicationProperty
operator|.
name|VariableTitleDefaultLimit
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clazz
operator|.
name|setExpectedCapacity
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setMaxExpectedCapacity
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|clazz
operator|.
name|setEnabledForStudentScheduling
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setNbrRooms
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setSchedulingSubpart
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setRoomRatio
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ss
operator|.
name|addToclasses
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|DepartmentalInstructor
name|di
init|=
name|DepartmentalInstructor
operator|.
name|findByPuidDepartmentId
argument_list|(
name|variableTitleQuery
operator|.
name|getInstructorId
argument_list|()
argument_list|,
name|subjectArea
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|ClassInstructor
name|ci
init|=
operator|new
name|ClassInstructor
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setLead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setPercentShare
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setInstructor
argument_list|(
name|di
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setClassInstructing
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|addToclassInstructors
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|clazz
return|;
block|}
specifier|private
name|InstrOfferingConfig
name|findConfigWithName
parameter_list|(
name|InstructionalOffering
name|instructionalOffering
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|InstrOfferingConfig
name|ioc
range|:
name|instructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|ioc
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|ioc
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|isConfigValidForVariableTitle
parameter_list|(
name|InstrOfferingConfig
name|instrOfferingConfig
parameter_list|)
block|{
if|if
condition|(
name|instrOfferingConfig
operator|.
name|getSchedulingSubparts
argument_list|()
operator|==
literal|null
operator|||
name|instrOfferingConfig
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|instrOfferingConfig
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|instrOfferingConfig
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getSis_ref
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationProperty
operator|.
name|VariableTitleInstructionalType
operator|.
name|value
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|InstrOfferingConfig
name|findOrCreateVariableTitleConfig
parameter_list|(
name|InstructionalOffering
name|instructionalOffering
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|InstrOfferingConfig
name|instrOfferingConfig
init|=
literal|null
decl_stmt|;
name|String
name|vtConfigName
init|=
name|ApplicationProperty
operator|.
name|VariableTitleConfigName
operator|.
name|value
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|instrOfferingConfig
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|instructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|!=
literal|null
operator|&&
name|instructionalOffering
operator|.
name|existsConfig
argument_list|(
name|vtConfigName
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|InstrOfferingConfig
name|checkIoc
init|=
name|findConfigWithName
argument_list|(
name|instructionalOffering
argument_list|,
name|vtConfigName
argument_list|)
decl_stmt|;
if|if
condition|(
name|isConfigValidForVariableTitle
argument_list|(
name|checkIoc
argument_list|)
condition|)
block|{
name|instrOfferingConfig
operator|=
name|checkIoc
expr_stmt|;
block|}
else|else
block|{
name|cnt
operator|++
expr_stmt|;
name|vtConfigName
operator|=
name|ApplicationProperty
operator|.
name|VariableTitleConfigName
operator|.
name|value
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
name|cnt
expr_stmt|;
block|}
block|}
else|else
block|{
name|instrOfferingConfig
operator|=
name|createConfiguration
argument_list|(
name|instructionalOffering
argument_list|,
name|vtConfigName
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|instrOfferingConfig
return|;
block|}
specifier|private
name|void
name|findOrCreateVariableTitleSection
parameter_list|(
name|VariableTitleQuery
name|variableTitleQuery
parameter_list|,
name|ApiHelper
name|helper
parameter_list|)
block|{
name|CourseOffering
name|courseOffering
init|=
name|findCourse
argument_list|(
name|variableTitleQuery
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|courseOffering
operator|!=
literal|null
condition|)
block|{
name|clazz
operator|=
name|findClass
argument_list|(
name|variableTitleQuery
argument_list|,
name|courseOffering
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|variableTitleQuery
operator|.
name|setFullCourseNumber
argument_list|(
name|courseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|variableTitleQuery
operator|.
name|setExternalId
argument_list|(
name|clazz
operator|.
name|getExternalId
argument_list|(
name|courseOffering
argument_list|)
argument_list|)
expr_stmt|;
name|variableTitleQuery
operator|.
name|setStatus
argument_list|(
name|findClassCreationStatus
argument_list|(
name|courseOffering
argument_list|,
name|clazz
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|ExternalInstrOffrConfigChangeAction
name|configChangeAction
init|=
literal|null
decl_stmt|;
name|boolean
name|configChangeActionExists
init|=
literal|false
decl_stmt|;
try|try
block|{
name|configChangeAction
operator|=
name|lookupExternalConfigChangeAction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Error trying to instantiate External Config Change Action, this will result in a FAILED response."
argument_list|,
name|e2
argument_list|)
expr_stmt|;
name|configChangeActionExists
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|configChangeAction
operator|!=
literal|null
condition|)
block|{
name|configChangeActionExists
operator|=
literal|true
expr_stmt|;
block|}
name|Transaction
name|trans
init|=
literal|null
decl_stmt|;
try|try
block|{
name|trans
operator|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|SubjectArea
name|subjectArea
init|=
name|getSubjectObject
argument_list|(
name|variableTitleQuery
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
name|InstructionalOffering
name|instructionalOffering
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|courseOffering
operator|==
literal|null
condition|)
block|{
name|instructionalOffering
operator|=
name|createOffering
argument_list|(
name|variableTitleQuery
argument_list|,
name|subjectArea
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
name|courseOffering
operator|=
name|instructionalOffering
operator|.
name|getControllingCourseOffering
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|instructionalOffering
operator|=
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
expr_stmt|;
if|if
condition|(
name|instructionalOffering
operator|.
name|isNotOffered
argument_list|()
condition|)
block|{
name|instructionalOffering
operator|.
name|setNotOffered
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|instructionalOffering
argument_list|)
expr_stmt|;
block|}
block|}
name|InstrOfferingConfig
name|instrOfferingConfig
init|=
name|findOrCreateVariableTitleConfig
argument_list|(
name|instructionalOffering
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulingSubpart
name|schedulingSubpart
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|instrOfferingConfig
operator|.
name|getSchedulingSubparts
argument_list|()
operator|==
literal|null
operator|||
name|instrOfferingConfig
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|schedulingSubpart
operator|=
name|createSubpart
argument_list|(
name|instrOfferingConfig
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|instrOfferingConfig
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
name|schedulingSubpart
operator|=
name|ss
expr_stmt|;
block|}
block|}
name|clazz
operator|=
name|createClass
argument_list|(
name|variableTitleQuery
argument_list|,
name|subjectArea
argument_list|,
name|schedulingSubpart
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|configChangeAction
operator|!=
literal|null
operator|&&
operator|!
name|configChangeAction
operator|.
name|validateConfigChangeCanOccur
argument_list|(
name|instructionalOffering
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Configuration change violates rules for Add On, rolling back the change."
argument_list|)
throw|;
block|}
name|instructionalOffering
operator|.
name|computeLabels
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|,
name|helper
operator|.
name|getSessionContext
argument_list|()
argument_list|,
name|clazz
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|VARIABLE_TITLE_API
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
name|instrOfferingConfig
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|trans
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Failed to create variable title section."
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|trans
operator|!=
literal|null
operator|&&
name|trans
operator|.
name|isActive
argument_list|()
condition|)
name|trans
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Unable to roll back transaction."
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
name|variableTitleQuery
operator|.
name|setStatus
argument_list|(
name|ExternalSectionCreationStatus
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|variableTitleQuery
operator|.
name|setStatus
argument_list|(
name|createExternalSectionAndReturnStatus
argument_list|(
name|courseOffering
argument_list|,
name|clazz
argument_list|,
name|configChangeActionExists
argument_list|,
name|configChangeAction
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseOffering
operator|!=
literal|null
operator|&&
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|variableTitleQuery
operator|.
name|setFullCourseNumber
argument_list|(
name|courseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|courseOffering
operator|!=
literal|null
operator|&&
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|clazz
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|variableTitleQuery
operator|.
name|setExternalId
argument_list|(
name|clazz
operator|.
name|getExternalId
argument_list|(
name|courseOffering
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ExternalInstrOffrConfigChangeAction
name|lookupExternalConfigChangeAction
parameter_list|()
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
throws|,
name|NoSuchMethodException
throws|,
name|SecurityException
throws|,
name|ClassNotFoundException
block|{
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionInstrOffrConfigChange
operator|.
name|value
argument_list|()
decl_stmt|;
name|ExternalInstrOffrConfigChangeAction
name|configChangeAction
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configChangeAction
operator|=
operator|(
name|ExternalInstrOffrConfigChangeAction
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
return|return
name|configChangeAction
return|;
block|}
specifier|private
name|ExternalVariableTitleDataLookup
name|lookupExternalVariableTitleDataLookup
parameter_list|()
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
throws|,
name|NoSuchMethodException
throws|,
name|SecurityException
throws|,
name|ClassNotFoundException
block|{
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalVariableTitleDataLookup
operator|.
name|value
argument_list|()
decl_stmt|;
name|ExternalVariableTitleDataLookup
name|externalVariableTitleDataLookup
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|externalVariableTitleDataLookup
operator|=
operator|(
name|ExternalVariableTitleDataLookup
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
return|return
name|externalVariableTitleDataLookup
return|;
block|}
specifier|private
name|ExternalSectionMonitoredUpdateMessage
name|lookupExternalSectionMonitoredUpdateMessageAction
parameter_list|()
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
throws|,
name|NoSuchMethodException
throws|,
name|SecurityException
throws|,
name|ClassNotFoundException
block|{
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionSectionMonitoredUpdateMessage
operator|.
name|value
argument_list|()
decl_stmt|;
name|ExternalSectionMonitoredUpdateMessage
name|esmum
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|esmum
operator|=
operator|(
name|ExternalSectionMonitoredUpdateMessage
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
return|return
name|esmum
return|;
block|}
specifier|private
name|DatePattern
name|createVariableTitleDatePattern
parameter_list|(
name|VariableTitleQuery
name|variableTitleQuery
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|DatePattern
name|dp
init|=
operator|new
name|DatePattern
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setName
argument_list|(
name|generatedVariableTitleDatePatternName
argument_list|(
name|variableTitleQuery
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setSession
argument_list|(
name|this
operator|.
name|getAcadSession
argument_list|(
name|variableTitleQuery
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setPatternOffset
argument_list|(
name|variableTitleQuery
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|variableTitleQuery
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|cal
operator|.
name|getTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|variableTitleQuery
operator|.
name|getEndDate
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|dp
operator|.
name|setPattern
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setType
argument_list|(
name|DatePattern
operator|.
name|sTypeExtended
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|dp
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dp
return|;
block|}
specifier|private
name|String
name|generatedVariableTitleDatePatternName
parameter_list|(
name|VariableTitleQuery
name|variableTitleQuery
parameter_list|)
block|{
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ApplicationProperty
operator|.
name|VariableTitleDatePatternPrefix
operator|.
name|value
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|sdf
operator|.
name|format
argument_list|(
name|variableTitleQuery
operator|.
name|getStartDate
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
operator|.
name|append
argument_list|(
name|sdf
operator|.
name|format
argument_list|(
name|variableTitleQuery
operator|.
name|getEndDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|DatePattern
name|lookupDatePattern
parameter_list|(
name|VariableTitleQuery
name|variableTitleQuery
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Session
name|s
init|=
name|getAcadSession
argument_list|(
name|variableTitleQuery
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getDefaultDatePattern
argument_list|()
operator|!=
literal|null
operator|&&
name|s
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getStartDate
argument_list|()
operator|.
name|equals
argument_list|(
name|variableTitleQuery
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|&&
name|s
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getEndDate
argument_list|()
operator|.
name|equals
argument_list|(
name|variableTitleQuery
operator|.
name|getEndDate
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|s
operator|.
name|getDefaultDatePattern
argument_list|()
operator|)
return|;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"from DatePattern dp"
argument_list|)
operator|.
name|append
argument_list|(
literal|" where dp.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and dp.type = "
argument_list|)
operator|.
name|append
argument_list|(
name|DatePattern
operator|.
name|sTypeExtended
argument_list|)
operator|.
name|append
argument_list|(
literal|" and dp.name = '"
argument_list|)
operator|.
name|append
argument_list|(
name|generatedVariableTitleDatePatternName
argument_list|(
name|variableTitleQuery
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|DatePattern
name|dp
init|=
operator|(
name|DatePattern
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|DatePattern
name|sdp
range|:
name|DatePattern
operator|.
name|findAll
argument_list|(
name|s
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
control|)
block|{
if|if
condition|(
operator|(
name|sdp
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|DatePattern
operator|.
name|sTypeStandard
argument_list|)
operator|||
name|sdp
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|DatePattern
operator|.
name|sTypeNonStandard
argument_list|)
operator|)
operator|&&
name|sdp
operator|.
name|getStartDate
argument_list|()
operator|.
name|equals
argument_list|(
name|variableTitleQuery
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|&&
name|sdp
operator|.
name|getEndDate
argument_list|()
operator|.
name|equals
argument_list|(
name|variableTitleQuery
operator|.
name|getEndDate
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|sdp
operator|.
name|getPattern
argument_list|()
operator|.
name|contains
argument_list|(
literal|"0"
argument_list|)
operator|&&
name|sdp
operator|.
name|respectsSessionHolidaysAndHasNoNonHolidayBreaks
argument_list|()
condition|)
block|{
name|dp
operator|=
name|sdp
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|dp
return|;
block|}
specifier|public
class|class
name|VariableTitleQuery
implements|implements
name|Serializable
block|{
comment|/** 		 *  		 */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|String
name|iCampus
decl_stmt|;
name|String
name|iYear
decl_stmt|;
name|String
name|iTerm
decl_stmt|;
name|String
name|iSubjectArea
decl_stmt|;
name|String
name|iCourseNumber
decl_stmt|;
name|String
name|iCourseTitle
decl_stmt|;
name|String
name|iInstructorId
decl_stmt|;
name|Date
name|iStartDate
decl_stmt|;
name|Date
name|iEndDate
decl_stmt|;
name|String
name|iFullCourseNumber
decl_stmt|;
name|String
name|iExternalId
decl_stmt|;
name|String
name|iStatus
decl_stmt|;
specifier|public
name|VariableTitleQuery
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getCampus
parameter_list|()
block|{
return|return
name|iCampus
return|;
block|}
specifier|public
name|void
name|setCampus
parameter_list|(
name|String
name|campus
parameter_list|)
block|{
name|this
operator|.
name|iCampus
operator|=
name|campus
expr_stmt|;
block|}
specifier|public
name|String
name|getYear
parameter_list|()
block|{
return|return
name|iYear
return|;
block|}
specifier|public
name|void
name|setYear
parameter_list|(
name|String
name|year
parameter_list|)
block|{
name|this
operator|.
name|iYear
operator|=
name|year
expr_stmt|;
block|}
specifier|public
name|String
name|getTerm
parameter_list|()
block|{
return|return
name|iTerm
return|;
block|}
specifier|public
name|void
name|setTerm
parameter_list|(
name|String
name|term
parameter_list|)
block|{
name|this
operator|.
name|iTerm
operator|=
name|term
expr_stmt|;
block|}
specifier|public
name|String
name|getSubjectArea
parameter_list|()
block|{
return|return
name|iSubjectArea
return|;
block|}
specifier|public
name|void
name|setSubjectArea
parameter_list|(
name|String
name|subjectArea
parameter_list|)
block|{
name|this
operator|.
name|iSubjectArea
operator|=
name|subjectArea
expr_stmt|;
block|}
specifier|public
name|String
name|getCourseNumber
parameter_list|()
block|{
return|return
name|iCourseNumber
return|;
block|}
specifier|public
name|void
name|setCourseNumber
parameter_list|(
name|String
name|courseNumber
parameter_list|)
block|{
name|this
operator|.
name|iCourseNumber
operator|=
name|courseNumber
expr_stmt|;
block|}
specifier|public
name|String
name|getCourseTitle
parameter_list|()
block|{
return|return
name|iCourseTitle
return|;
block|}
specifier|public
name|void
name|setCourseTitle
parameter_list|(
name|String
name|courseTitle
parameter_list|)
block|{
name|this
operator|.
name|iCourseTitle
operator|=
name|courseTitle
expr_stmt|;
block|}
specifier|public
name|String
name|getInstructorId
parameter_list|()
block|{
return|return
name|iInstructorId
return|;
block|}
specifier|public
name|void
name|setInstructorId
parameter_list|(
name|String
name|instructorId
parameter_list|)
block|{
name|this
operator|.
name|iInstructorId
operator|=
name|instructorId
expr_stmt|;
block|}
specifier|public
name|Date
name|getStartDate
parameter_list|()
block|{
return|return
name|iStartDate
return|;
block|}
specifier|public
name|void
name|setStartDate
parameter_list|(
name|Date
name|startDate
parameter_list|)
block|{
name|this
operator|.
name|iStartDate
operator|=
name|startDate
expr_stmt|;
block|}
specifier|public
name|Date
name|getEndDate
parameter_list|()
block|{
return|return
name|iEndDate
return|;
block|}
specifier|public
name|void
name|setEndDate
parameter_list|(
name|Date
name|endDate
parameter_list|)
block|{
name|this
operator|.
name|iEndDate
operator|=
name|endDate
expr_stmt|;
block|}
specifier|public
name|String
name|getFullCourseNumber
parameter_list|()
block|{
return|return
name|iFullCourseNumber
return|;
block|}
specifier|public
name|void
name|setFullCourseNumber
parameter_list|(
name|String
name|fullCourseNumber
parameter_list|)
block|{
name|this
operator|.
name|iFullCourseNumber
operator|=
name|fullCourseNumber
expr_stmt|;
block|}
specifier|public
name|String
name|getExternalId
parameter_list|()
block|{
return|return
name|iExternalId
return|;
block|}
specifier|public
name|void
name|setExternalId
parameter_list|(
name|String
name|externalId
parameter_list|)
block|{
name|this
operator|.
name|iExternalId
operator|=
name|externalId
expr_stmt|;
block|}
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|iStatus
return|;
block|}
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|this
operator|.
name|iStatus
operator|=
name|status
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

