begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|connectors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|BuildingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|BuildingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/api/buildings"
argument_list|)
specifier|public
class|class
name|BuildingsConntector
extends|extends
name|ApiConnector
block|{
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|sessionId
argument_list|,
literal|"Session"
argument_list|,
name|Right
operator|.
name|ApiRetrieveRooms
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BuildingInterface
argument_list|>
name|buildings
init|=
operator|new
name|ArrayList
argument_list|<
name|BuildingInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Building
name|b
range|:
name|Building
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|)
control|)
block|{
name|BuildingInterface
name|building
init|=
operator|new
name|BuildingInterface
argument_list|()
decl_stmt|;
name|building
operator|.
name|setId
argument_list|(
name|b
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setName
argument_list|(
name|b
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setAbbreviation
argument_list|(
name|b
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setX
argument_list|(
name|b
operator|.
name|getCoordinateX
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setY
argument_list|(
name|b
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setExternalId
argument_list|(
name|b
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|buildings
operator|.
name|add
argument_list|(
name|building
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|setResponse
argument_list|(
name|buildings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doDelete
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|Transaction
name|tx
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|Building
name|building
init|=
literal|null
decl_stmt|;
name|Long
name|buildingId
init|=
name|helper
operator|.
name|getOptinalParameterLong
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|buildingId
operator|!=
literal|null
condition|)
block|{
name|building
operator|=
name|BuildingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|buildingId
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|building
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Building "
operator|+
name|buildingId
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
else|else
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|String
name|externalId
init|=
name|helper
operator|.
name|getOptinalParameter
argument_list|(
literal|"externalId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalId
operator|!=
literal|null
condition|)
block|{
name|building
operator|=
operator|(
name|Building
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Building where externalUniqueId = :externalId and session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
if|if
condition|(
name|building
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Building "
operator|+
name|externalId
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
if|if
condition|(
name|building
operator|==
literal|null
condition|)
block|{
name|String
name|abbv
init|=
name|helper
operator|.
name|getRequiredParameter
argument_list|(
literal|"building"
argument_list|)
decl_stmt|;
name|building
operator|=
operator|(
name|Building
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Building where (abbreviation = :abbv or name = :abbv) and session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"abbv"
argument_list|,
name|abbv
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
if|if
condition|(
name|building
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Building "
operator|+
name|abbv
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
block|}
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|building
operator|.
name|getSession
argument_list|()
argument_list|,
name|Right
operator|.
name|ApiRoomEdit
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|building
argument_list|,
name|Right
operator|.
name|BuildingDelete
argument_list|)
expr_stmt|;
for|for
control|(
name|Room
name|r
range|:
operator|(
name|List
argument_list|<
name|Room
argument_list|>
operator|)
name|BuildingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Room r where r.building.uniqueId = :buildingId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"buildingId"
argument_list|,
name|building
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"delete RoomPref p where p.room.uniqueId = :roomId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"roomId"
argument_list|,
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Assignment
argument_list|>
name|i
init|=
name|r
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|a
operator|.
name|getRooms
argument_list|()
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|,
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
argument_list|,
name|building
operator|.
name|getSession
argument_list|()
argument_list|,
name|building
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|BUILDING_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|building
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
if|if
condition|(
name|e
operator|instanceof
name|IOException
condition|)
throw|throw
operator|(
name|IOException
operator|)
name|e
throw|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|doPost
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|BuildingInterface
name|b
init|=
name|helper
operator|.
name|getRequest
argument_list|(
name|BuildingInterface
operator|.
name|class
argument_list|)
decl_stmt|;
name|Transaction
name|tx
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|Building
name|building
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|building
operator|=
name|BuildingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|b
operator|.
name|getId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|building
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Building "
operator|+
name|b
operator|.
name|getId
argument_list|()
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
else|else
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
if|if
condition|(
name|b
operator|.
name|getExternalId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|building
operator|=
operator|(
name|Building
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Building where externalUniqueId = :externalId and session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|b
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|b
operator|.
name|getAbbreviation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|building
operator|=
operator|(
name|Building
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Building where abbreviation = :abbv and session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"abbv"
argument_list|,
name|b
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|building
operator|!=
literal|null
condition|)
block|{
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|building
operator|.
name|getSession
argument_list|()
argument_list|,
name|Right
operator|.
name|ApiRoomEdit
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|building
argument_list|,
name|Right
operator|.
name|BuildingEdit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
literal|"Session"
argument_list|,
name|Right
operator|.
name|ApiRoomEdit
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
literal|"Session"
argument_list|,
name|Right
operator|.
name|BuildingAdd
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|Operation
name|op
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|building
operator|==
literal|null
condition|)
block|{
name|building
operator|=
operator|new
name|Building
argument_list|()
expr_stmt|;
name|building
operator|.
name|setSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|op
operator|=
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
expr_stmt|;
block|}
else|else
block|{
name|op
operator|=
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
expr_stmt|;
block|}
name|building
operator|.
name|setName
argument_list|(
name|b
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setAbbreviation
argument_list|(
name|b
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setExternalUniqueId
argument_list|(
name|b
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setCoordinateX
argument_list|(
name|b
operator|.
name|getX
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setCoordinateY
argument_list|(
name|b
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|building
argument_list|)
expr_stmt|;
name|b
operator|.
name|setId
argument_list|(
name|building
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|,
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
argument_list|,
name|building
operator|.
name|getSession
argument_list|()
argument_list|,
name|building
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|BUILDING_EDIT
argument_list|,
name|op
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
if|if
condition|(
name|e
operator|instanceof
name|IOException
condition|)
throw|throw
operator|(
name|IOException
operator|)
name|e
throw|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|helper
operator|.
name|setResponse
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"buildings"
return|;
block|}
block|}
end_class

end_unit

