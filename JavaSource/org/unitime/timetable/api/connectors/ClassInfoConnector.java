begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|connectors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PositionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/api/class-info"
argument_list|)
specifier|public
class|class
name|ClassInfoConnector
extends|extends
name|ApiConnector
block|{
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|sessionId
argument_list|,
literal|"Session"
argument_list|,
name|Right
operator|.
name|ApiRetrieveInstructorSchedule
argument_list|)
expr_stmt|;
name|String
name|classId
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|classId
operator|==
literal|null
condition|)
name|classId
operator|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"classId"
argument_list|)
expr_stmt|;
if|if
condition|(
name|classId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter ID not provided"
argument_list|)
throw|;
name|Class_
name|clazz
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|classId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Class with the given ID does not exist."
argument_list|)
throw|;
name|helper
operator|.
name|setResponse
argument_list|(
operator|new
name|ClassInfo
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
block|}
class|class
name|InstructorInfo
block|{
name|Long
name|iInstructorId
decl_stmt|;
name|String
name|iFirstName
decl_stmt|;
name|String
name|iMiddleName
decl_stmt|;
name|String
name|iLastName
decl_stmt|;
name|String
name|iTitle
decl_stmt|;
name|PositionInfo
name|iPosition
decl_stmt|;
name|String
name|iEmail
decl_stmt|;
name|DepartmentInfo
name|iDepartment
decl_stmt|;
name|InstructorInfo
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
name|iInstructorId
operator|=
name|instructor
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iFirstName
operator|=
name|instructor
operator|.
name|getFirstName
argument_list|()
expr_stmt|;
name|iMiddleName
operator|=
name|instructor
operator|.
name|getMiddleName
argument_list|()
expr_stmt|;
name|iLastName
operator|=
name|instructor
operator|.
name|getLastName
argument_list|()
expr_stmt|;
name|iTitle
operator|=
name|instructor
operator|.
name|getAcademicTitle
argument_list|()
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|!=
literal|null
condition|)
name|iPosition
operator|=
operator|new
name|PositionInfo
argument_list|(
name|instructor
operator|.
name|getPositionType
argument_list|()
argument_list|)
expr_stmt|;
name|iEmail
operator|=
name|instructor
operator|.
name|getEmail
argument_list|()
expr_stmt|;
name|iDepartment
operator|=
operator|new
name|DepartmentInfo
argument_list|(
name|instructor
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|DepartmentInfo
block|{
name|String
name|iCode
decl_stmt|;
name|String
name|iName
decl_stmt|;
name|DepartmentInfo
parameter_list|(
name|Department
name|department
parameter_list|)
block|{
name|iCode
operator|=
name|department
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
name|iName
operator|=
name|department
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
class|class
name|PositionInfo
block|{
name|String
name|iReference
decl_stmt|;
name|String
name|iLabel
decl_stmt|;
name|PositionInfo
parameter_list|(
name|PositionType
name|type
parameter_list|)
block|{
name|iReference
operator|=
name|type
operator|.
name|getReference
argument_list|()
expr_stmt|;
name|iLabel
operator|=
name|type
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
block|}
class|class
name|InstructorAssignmentInfo
extends|extends
name|InstructorInfo
block|{
name|Boolean
name|iLead
decl_stmt|;
name|Integer
name|iPercentShare
decl_stmt|;
name|InstructorAssignmentInfo
parameter_list|(
name|ClassInstructor
name|ci
parameter_list|)
block|{
name|super
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|iLead
operator|=
name|ci
operator|.
name|getLead
argument_list|()
expr_stmt|;
name|iPercentShare
operator|=
name|ci
operator|.
name|getPercentShare
argument_list|()
expr_stmt|;
block|}
block|}
class|class
name|CourseInfo
block|{
name|Long
name|iCourseId
decl_stmt|;
name|String
name|iSubjectArea
decl_stmt|;
name|String
name|iCourseNumber
decl_stmt|;
name|String
name|iCourseTitle
decl_stmt|;
name|boolean
name|iControl
decl_stmt|;
name|String
name|iType
decl_stmt|;
name|String
name|iClassSuffix
decl_stmt|;
name|String
name|iClassExternalId
decl_stmt|;
name|String
name|iCredit
decl_stmt|;
name|String
name|iNote
decl_stmt|;
name|CourseInfo
parameter_list|(
name|CourseOffering
name|co
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
name|iCourseId
operator|=
name|co
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iSubjectArea
operator|=
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
expr_stmt|;
name|iCourseNumber
operator|=
name|co
operator|.
name|getCourseNbr
argument_list|()
expr_stmt|;
name|iCourseTitle
operator|=
name|co
operator|.
name|getTitle
argument_list|()
expr_stmt|;
name|iControl
operator|=
name|co
operator|.
name|isIsControl
argument_list|()
expr_stmt|;
if|if
condition|(
name|co
operator|.
name|getCourseType
argument_list|()
operator|!=
literal|null
condition|)
name|iType
operator|=
name|co
operator|.
name|getCourseType
argument_list|()
operator|.
name|getReference
argument_list|()
expr_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|iClassSuffix
operator|=
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|iClassExternalId
operator|=
name|clazz
operator|.
name|getExternalId
argument_list|(
name|co
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|co
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
name|iCredit
operator|=
name|co
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
expr_stmt|;
name|iNote
operator|=
name|co
operator|.
name|getScheduleBookNote
argument_list|()
expr_stmt|;
block|}
block|}
class|class
name|ClassInfo
block|{
name|List
argument_list|<
name|CourseInfo
argument_list|>
name|iCourse
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Long
name|iClassId
decl_stmt|;
name|String
name|iSubpart
decl_stmt|;
name|String
name|iSectionNumber
decl_stmt|;
name|String
name|iNote
decl_stmt|;
name|Integer
name|iLimit
decl_stmt|;
name|List
argument_list|<
name|AssignmentInfo
argument_list|>
name|iMeetings
decl_stmt|;
name|List
argument_list|<
name|InstructorAssignmentInfo
argument_list|>
name|iInstructors
decl_stmt|;
name|List
argument_list|<
name|InstructorInfo
argument_list|>
name|iCoordinators
decl_stmt|;
name|List
argument_list|<
name|ExamInfo
argument_list|>
name|iExams
decl_stmt|;
name|ClassInfo
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|iClassId
operator|=
name|clazz
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iSectionNumber
operator|=
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
expr_stmt|;
name|iSubpart
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|iNote
operator|=
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
expr_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
name|iCourse
operator|.
name|add
argument_list|(
operator|new
name|CourseInfo
argument_list|(
name|course
argument_list|,
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|int
name|minLimit
init|=
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|iMeetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|AssignmentInfo
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iMeetings
operator|.
name|add
argument_list|(
operator|new
name|AssignmentInfo
argument_list|(
name|assignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDatePattern
argument_list|()
argument_list|,
name|i
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Location
name|location
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
name|iMeetings
operator|.
name|add
argument_list|(
operator|new
name|AssignmentInfo
argument_list|(
name|assignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDatePattern
argument_list|()
argument_list|,
name|i
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
condition|)
block|{
name|int
name|roomLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|assignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomSize
argument_list|()
operator|/
operator|(
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|||
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|limit
operator|>=
literal|0
condition|)
name|iLimit
operator|=
name|limit
expr_stmt|;
name|iInstructors
operator|=
operator|new
name|ArrayList
argument_list|<
name|InstructorAssignmentInfo
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
name|iInstructors
operator|.
name|add
argument_list|(
operator|new
name|InstructorAssignmentInfo
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iCoordinators
operator|=
operator|new
name|ArrayList
argument_list|<
name|InstructorInfo
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|di
range|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCoordinators
argument_list|()
control|)
block|{
name|iCoordinators
operator|.
name|add
argument_list|(
operator|new
name|InstructorInfo
argument_list|(
name|di
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iExams
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExamInfo
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Exam
name|exam
range|:
operator|(
name|List
argument_list|<
name|Exam
argument_list|>
operator|)
name|Exam
operator|.
name|findAllRelated
argument_list|(
literal|"Class_"
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
name|iExams
operator|.
name|add
argument_list|(
operator|new
name|ExamInfo
argument_list|(
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
class|class
name|AssignmentInfo
block|{
name|String
name|iDayOfWeek
decl_stmt|;
name|String
name|iStartTime
decl_stmt|;
name|String
name|iEndTime
decl_stmt|;
name|String
name|iDatePattern
decl_stmt|;
name|String
name|iFirstDate
decl_stmt|;
name|String
name|iLastDate
decl_stmt|;
name|String
name|iBuilding
decl_stmt|;
name|String
name|iRoomNumber
decl_stmt|;
name|String
name|iLocation
decl_stmt|;
name|String
name|iRoomType
decl_stmt|;
name|Integer
name|iRoomCapacity
decl_stmt|;
name|AssignmentInfo
parameter_list|(
name|TimeLocation
name|time
parameter_list|,
name|DatePattern
name|dp
parameter_list|,
name|int
name|day
parameter_list|,
name|Location
name|room
parameter_list|)
block|{
if|if
condition|(
name|time
operator|!=
literal|null
condition|)
block|{
name|iStartTime
operator|=
name|time
operator|.
name|getStartTimeHeader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEndTime
operator|=
name|time
operator|.
name|getEndTimeHeader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iDayOfWeek
operator|=
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|day
index|]
expr_stmt|;
name|iDatePattern
operator|=
name|time
operator|.
name|getDatePatternName
argument_list|()
expr_stmt|;
name|Date
name|firstDate
init|=
name|firstDate
argument_list|(
name|dp
argument_list|,
name|Constants
operator|.
name|DAY_CODES
index|[
name|day
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstDate
operator|!=
literal|null
condition|)
name|iFirstDate
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
operator|.
name|format
argument_list|(
name|firstDate
argument_list|)
expr_stmt|;
name|Date
name|lastDate
init|=
name|lastDate
argument_list|(
name|dp
argument_list|,
name|Constants
operator|.
name|DAY_CODES
index|[
name|day
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastDate
operator|!=
literal|null
condition|)
name|iLastDate
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
operator|.
name|format
argument_list|(
name|lastDate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|room
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|room
operator|instanceof
name|Room
condition|)
block|{
name|iBuilding
operator|=
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getBuildingAbbv
argument_list|()
expr_stmt|;
name|iRoomNumber
operator|=
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getRoomNumber
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iLocation
operator|=
name|room
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
name|iRoomType
operator|=
name|room
operator|.
name|getRoomTypeLabel
argument_list|()
expr_stmt|;
name|iRoomCapacity
operator|=
name|room
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
class|class
name|ExamInfo
block|{
name|Long
name|iExamId
decl_stmt|;
name|String
name|iName
decl_stmt|;
name|Integer
name|iSize
decl_stmt|;
name|List
argument_list|<
name|ExamOwnerInfo
argument_list|>
name|iOwners
init|=
operator|new
name|ArrayList
argument_list|<
name|ExamOwnerInfo
argument_list|>
argument_list|()
decl_stmt|;
name|PeriodInfo
name|iPeriod
decl_stmt|;
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|iRoom
decl_stmt|;
name|ExamInfo
parameter_list|(
name|Exam
name|exam
parameter_list|)
block|{
name|iExamId
operator|=
name|exam
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iName
operator|=
name|exam
operator|.
name|getName
argument_list|()
expr_stmt|;
for|for
control|(
name|ExamOwner
name|owner
range|:
name|exam
operator|.
name|getOwners
argument_list|()
control|)
name|iOwners
operator|.
name|add
argument_list|(
operator|new
name|ExamOwnerInfo
argument_list|(
name|owner
argument_list|)
argument_list|)
expr_stmt|;
name|iSize
operator|=
name|exam
operator|.
name|getSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
name|iPeriod
operator|=
operator|new
name|PeriodInfo
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Location
name|room
range|:
name|exam
operator|.
name|getAssignedRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|iRoom
operator|==
literal|null
condition|)
name|iRoom
operator|=
operator|new
name|ArrayList
argument_list|<
name|RoomInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iRoom
operator|.
name|add
argument_list|(
operator|new
name|RoomInfo
argument_list|(
name|room
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
class|class
name|ExamOwnerInfo
block|{
name|String
name|iType
decl_stmt|;
name|Long
name|iCourseId
decl_stmt|;
name|Long
name|iOfferingId
decl_stmt|;
name|Long
name|iConfigurationId
decl_stmt|;
name|Long
name|iClassId
decl_stmt|;
name|String
name|iSubjectArea
decl_stmt|;
name|String
name|iCourseNumber
decl_stmt|;
name|String
name|iCourseTitle
decl_stmt|;
name|String
name|iClassSuffix
decl_stmt|;
name|String
name|iClassExternalId
decl_stmt|;
name|String
name|iSubpart
decl_stmt|;
name|String
name|iSectionNumber
decl_stmt|;
name|String
name|iConfiguration
decl_stmt|;
specifier|public
name|ExamOwnerInfo
parameter_list|(
name|ExamOwner
name|owner
parameter_list|)
block|{
switch|switch
condition|(
name|owner
operator|.
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|ExamOwner
operator|.
name|sOwnerTypeClass
case|:
name|iType
operator|=
literal|"Class"
expr_stmt|;
name|iClassId
operator|=
name|owner
operator|.
name|getOwnerId
argument_list|()
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeConfig
case|:
name|iType
operator|=
literal|"Config"
expr_stmt|;
name|iConfigurationId
operator|=
name|owner
operator|.
name|getOwnerId
argument_list|()
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeCourse
case|:
name|iType
operator|=
literal|"Course"
expr_stmt|;
name|iCourseId
operator|=
name|owner
operator|.
name|getOwnerId
argument_list|()
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeOffering
case|:
name|iType
operator|=
literal|"Offering"
expr_stmt|;
name|iOfferingId
operator|=
name|owner
operator|.
name|getOwnerId
argument_list|()
expr_stmt|;
break|break;
block|}
name|iSubjectArea
operator|=
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
expr_stmt|;
name|iCourseNumber
operator|=
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
expr_stmt|;
name|iCourseTitle
operator|=
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getTitle
argument_list|()
expr_stmt|;
if|if
condition|(
name|owner
operator|.
name|getOwnerObject
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|iClassId
operator|=
name|clazz
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iClassSuffix
operator|=
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|owner
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
name|iClassExternalId
operator|=
name|clazz
operator|.
name|getExternalId
argument_list|(
name|owner
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
name|iSubpart
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|iSectionNumber
operator|=
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|owner
operator|.
name|getOwnerObject
argument_list|()
operator|instanceof
name|InstrOfferingConfig
condition|)
block|{
name|iConfiguration
operator|=
operator|(
operator|(
name|InstrOfferingConfig
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|iConfigurationId
operator|=
name|owner
operator|.
name|getOwnerId
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
class|class
name|PeriodInfo
block|{
name|String
name|iDate
decl_stmt|;
name|String
name|iStartTime
decl_stmt|;
name|String
name|iEndTime
decl_stmt|;
name|PeriodInfo
parameter_list|(
name|ExamPeriod
name|period
parameter_list|)
block|{
name|iDate
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
operator|.
name|format
argument_list|(
name|period
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|period
operator|.
name|getStartSlot
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|int
name|sh
init|=
name|start
operator|/
literal|60
decl_stmt|;
name|int
name|sm
init|=
name|start
operator|%
literal|60
decl_stmt|;
name|iStartTime
operator|=
name|sh
operator|+
literal|":"
operator|+
operator|(
name|sm
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|sm
expr_stmt|;
name|int
name|end
init|=
name|start
operator|+
name|period
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|eh
init|=
name|end
operator|/
literal|60
decl_stmt|;
name|int
name|em
init|=
name|end
operator|%
literal|60
decl_stmt|;
name|iEndTime
operator|=
name|eh
operator|+
literal|":"
operator|+
operator|(
name|em
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|em
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|RoomInfo
block|{
name|String
name|iBuilding
decl_stmt|;
name|String
name|iRoomNumber
decl_stmt|;
name|String
name|iLocation
decl_stmt|;
name|String
name|iRoomType
decl_stmt|;
name|Integer
name|iRoomCapacity
decl_stmt|;
name|RoomInfo
parameter_list|(
name|Location
name|room
parameter_list|)
block|{
if|if
condition|(
name|room
operator|instanceof
name|Room
condition|)
block|{
name|iBuilding
operator|=
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getBuildingAbbv
argument_list|()
expr_stmt|;
name|iRoomNumber
operator|=
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getRoomNumber
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iLocation
operator|=
name|room
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
name|iRoomType
operator|=
name|room
operator|.
name|getRoomTypeLabel
argument_list|()
expr_stmt|;
name|iRoomCapacity
operator|=
name|room
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|Date
name|firstDate
parameter_list|(
name|DatePattern
name|dp
parameter_list|,
name|int
name|dayCode
parameter_list|)
block|{
if|if
condition|(
name|dp
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|BitSet
name|weekCode
init|=
name|dp
operator|.
name|getPatternBitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|weekCode
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Date
name|dpFirstDate
init|=
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|dp
operator|.
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|,
name|dp
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|weekCode
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
while|while
condition|(
name|idx
operator|<
name|weekCode
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|weekCode
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
specifier|static
name|Date
name|lastDate
parameter_list|(
name|DatePattern
name|dp
parameter_list|,
name|int
name|dayCode
parameter_list|)
block|{
if|if
condition|(
name|dp
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|BitSet
name|weekCode
init|=
name|dp
operator|.
name|getPatternBitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|weekCode
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Date
name|dpFirstDate
init|=
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|dp
operator|.
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|,
name|dp
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|weekCode
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|Date
name|last
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
operator|&&
name|last
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|weekCode
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|--
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

