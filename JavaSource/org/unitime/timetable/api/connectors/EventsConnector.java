begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|connectors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
operator|.
name|ApiHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventLookupBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|ResourceLookupBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventAction
operator|.
name|EventContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventDetailBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PersonInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ApproveEventRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ContactInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventDetailRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventLookupRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventPropertiesRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RoomFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SaveEventRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SaveOrApproveEventRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SaveOrApproveEventRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventContact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Staff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventContactDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|MeetingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/api/events"
argument_list|)
specifier|public
class|class
name|EventsConnector
extends|extends
name|ApiConnector
block|{
specifier|private
annotation|@
name|Autowired
name|ApplicationContext
name|applicationContext
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"eventId"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Event
name|event
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|helper
operator|.
name|getRequiredParameterLong
argument_list|(
literal|"eventId"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given event no longer exists."
argument_list|)
throw|;
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getSession
argument_list|()
operator|!=
literal|null
condition|)
name|sessionId
operator|=
name|event
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
else|else
block|{
for|for
control|(
name|Meeting
name|m
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sessionId
operator|=
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|sessionId
argument_list|,
literal|"Session"
argument_list|,
name|Right
operator|.
name|ApiRetrieveEvents
argument_list|)
expr_stmt|;
name|EventDetailRpcRequest
name|request
init|=
operator|new
name|EventDetailRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setEventId
argument_list|(
name|event
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|EventContext
name|context
init|=
operator|new
name|EventContext
argument_list|(
name|helper
operator|.
name|getSessionContext
argument_list|()
argument_list|,
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setResponse
argument_list|(
operator|new
name|EventDetailBackend
argument_list|()
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given academic session no longer exists."
argument_list|)
throw|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|session
argument_list|,
name|Right
operator|.
name|ApiRetrieveEvents
argument_list|)
expr_stmt|;
name|EventLookupRpcRequest
name|request
init|=
operator|new
name|EventLookupRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
name|request
operator|.
name|setResourceId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|ext
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"ext"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
condition|)
name|request
operator|.
name|setResourceExternalId
argument_list|(
name|ext
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
name|type
operator|=
name|ResourceType
operator|.
name|ROOM
operator|.
name|name
argument_list|()
expr_stmt|;
name|request
operator|.
name|setResourceType
argument_list|(
name|ResourceType
operator|.
name|valueOf
argument_list|(
name|type
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|EventFilterRpcRequest
name|eventFilter
init|=
operator|new
name|EventFilterRpcRequest
argument_list|()
decl_stmt|;
name|eventFilter
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setEventFilter
argument_list|(
name|eventFilter
argument_list|)
expr_stmt|;
name|RoomFilterRpcRequest
name|roomFilter
init|=
operator|new
name|RoomFilterRpcRequest
argument_list|()
decl_stmt|;
name|roomFilter
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|helper
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|command
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"e:text"
argument_list|)
condition|)
block|{
name|eventFilter
operator|.
name|setText
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"e:text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"e:"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|helper
operator|.
name|getParameterValues
argument_list|(
name|command
argument_list|)
control|)
name|eventFilter
operator|.
name|addOption
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"r:text"
argument_list|)
condition|)
block|{
name|roomFilter
operator|.
name|setText
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"r:text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"r:"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|helper
operator|.
name|getParameterValues
argument_list|(
name|command
argument_list|)
control|)
name|roomFilter
operator|.
name|addOption
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setRoomFilter
argument_list|(
name|roomFilter
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|!=
name|ResourceType
operator|.
name|ROOM
operator|&&
name|request
operator|.
name|getResourceType
argument_list|()
operator|!=
name|ResourceType
operator|.
name|PERSON
operator|&&
name|request
operator|.
name|getResourceId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|name
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|ResourceInterface
name|resource
init|=
operator|new
name|ResourceLookupBackend
argument_list|()
operator|.
name|findResource
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
name|request
operator|.
name|setResourceId
argument_list|(
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|EventContext
name|context
init|=
operator|new
name|EventContext
argument_list|(
name|helper
operator|.
name|getSessionContext
argument_list|()
argument_list|,
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
init|=
operator|new
name|EventLookupBackend
argument_list|()
operator|.
name|findEvents
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"1"
operator|.
name|equals
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"ua"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|EventInterface
argument_list|>
name|i
init|=
name|events
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|EventInterface
name|event
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Unavailabile
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|helper
operator|.
name|setResponse
argument_list|(
name|events
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fixContact
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|ContactInterface
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|.
name|getExternalId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventContactDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|EventContact
name|contact
init|=
operator|(
name|EventContact
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from EventContact where externalUniqueId = :userId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"userId"
argument_list|,
name|c
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|contact
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|setFirstName
argument_list|(
name|contact
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMiddleName
argument_list|(
name|contact
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setLastName
argument_list|(
name|contact
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setAcademicTitle
argument_list|(
name|contact
operator|.
name|getAcademicTitle
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setEmail
argument_list|(
name|contact
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPhone
argument_list|(
name|contact
operator|.
name|getPhone
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|TimetableManager
name|manager
init|=
operator|(
name|TimetableManager
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from TimetableManager where externalUniqueId = :userId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"userId"
argument_list|,
name|c
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|setExternalId
argument_list|(
name|manager
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setFirstName
argument_list|(
name|manager
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMiddleName
argument_list|(
name|manager
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setLastName
argument_list|(
name|manager
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setAcademicTitle
argument_list|(
name|manager
operator|.
name|getAcademicTitle
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setEmail
argument_list|(
name|manager
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from DepartmentalInstructor where department.session.uniqueId = :sessionId and externalUniqueId = :userId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"userId"
argument_list|,
name|c
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|setExternalId
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setFirstName
argument_list|(
name|instructor
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMiddleName
argument_list|(
name|instructor
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setLastName
argument_list|(
name|instructor
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setAcademicTitle
argument_list|(
name|instructor
operator|.
name|getAcademicTitle
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setEmail
argument_list|(
name|instructor
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Staff
name|staff
init|=
operator|(
name|Staff
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from Staff where externalUniqueId = :userId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"userId"
argument_list|,
name|c
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|staff
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|setExternalId
argument_list|(
name|staff
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setFirstName
argument_list|(
name|staff
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMiddleName
argument_list|(
name|staff
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setLastName
argument_list|(
name|staff
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setAcademicTitle
argument_list|(
name|staff
operator|.
name|getAcademicTitle
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setEmail
argument_list|(
name|staff
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from Student where session.uniqueId = :sessionId and externalUniqueId = :userId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"userId"
argument_list|,
name|c
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setFirstName
argument_list|(
name|student
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMiddleName
argument_list|(
name|student
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setLastName
argument_list|(
name|student
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setAcademicTitle
argument_list|(
name|student
operator|.
name|getAcademicTitle
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setEmail
argument_list|(
name|student
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|else if
condition|(
name|c
operator|.
name|hasEmail
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|PersonInterface
argument_list|>
name|people
init|=
name|GwtRpcServlet
operator|.
name|execute
argument_list|(
operator|new
name|PersonInterface
operator|.
name|LookupRequest
argument_list|(
name|c
operator|.
name|getEmail
argument_list|()
argument_list|,
literal|"mustHaveExternalId,session="
operator|+
name|sessionId
argument_list|)
argument_list|,
name|applicationContext
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|people
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PersonInterface
name|person
range|:
name|people
control|)
block|{
name|c
operator|.
name|setFirstName
argument_list|(
name|person
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMiddleName
argument_list|(
name|person
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setLastName
argument_list|(
name|person
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setAcademicTitle
argument_list|(
name|person
operator|.
name|getAcademicTitle
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setEmail
argument_list|(
name|person
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPhone
argument_list|(
name|person
operator|.
name|getPhone
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setExternalId
argument_list|(
name|person
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|doPost
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|EventInterface
name|event
init|=
name|helper
operator|.
name|getRequest
argument_list|(
name|EventInterface
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No event data provided."
argument_list|)
throw|;
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
operator|&&
name|event
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Event
name|e
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|event
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getSession
argument_list|()
operator|!=
literal|null
condition|)
name|sessionId
operator|=
name|e
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
else|else
block|{
for|for
control|(
name|Meeting
name|m
range|:
name|e
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sessionId
operator|=
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
if|if
condition|(
name|event
operator|.
name|hasMeetings
argument_list|()
condition|)
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|meeting
operator|.
name|getId
argument_list|()
operator|!=
literal|null
operator|&&
name|meeting
operator|.
name|getMeetingDate
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Meeting
name|m
init|=
name|MeetingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|meeting
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
continue|continue;
name|meeting
operator|.
name|setMeetingDate
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setDayOfWeek
argument_list|(
name|Constants
operator|.
name|getDayOfWeek
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartTime
argument_list|(
name|m
operator|.
name|getStartTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStopTime
argument_list|(
name|m
operator|.
name|getStopTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartSlot
argument_list|(
name|m
operator|.
name|getStartPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setEndSlot
argument_list|(
name|m
operator|.
name|getStopPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartOffset
argument_list|(
name|m
operator|.
name|getStartOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|m
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setEndOffset
argument_list|(
name|m
operator|.
name|getStopOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|m
operator|.
name|getStopOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovalDate
argument_list|(
name|m
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovalStatus
argument_list|(
name|m
operator|.
name|getApprovalStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ResourceInterface
name|location
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|location
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|location
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setName
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setSize
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomType
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setBreakTime
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getEffectiveBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setMessage
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getEventMessage
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setIgnoreRoomCheck
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|isIgnoreRoomCheck
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setDisplayName
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setPartitionParentId
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getPartitionParentId
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|meeting
operator|.
name|hasLocation
argument_list|()
operator|&&
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|&&
name|meeting
operator|.
name|getLocationName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Location
name|l
init|=
name|Location
operator|.
name|findByName
argument_list|(
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|meeting
operator|.
name|getLocationName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|ResourceInterface
name|location
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|location
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|location
operator|.
name|setId
argument_list|(
name|l
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setName
argument_list|(
name|l
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setSize
argument_list|(
name|l
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomType
argument_list|(
name|l
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setBreakTime
argument_list|(
name|l
operator|.
name|getEffectiveBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setMessage
argument_list|(
name|l
operator|.
name|getEventMessage
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setIgnoreRoomCheck
argument_list|(
name|l
operator|.
name|isIgnoreRoomCheck
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setDisplayName
argument_list|(
name|l
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setPartitionParentId
argument_list|(
name|l
operator|.
name|getPartitionParentId
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|event
operator|.
name|hasContact
argument_list|()
condition|)
name|fixContact
argument_list|(
name|sessionId
argument_list|,
name|event
operator|.
name|getContact
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|hasAdditionalContacts
argument_list|()
condition|)
for|for
control|(
name|ContactInterface
name|c
range|:
name|event
operator|.
name|getAdditionalContacts
argument_list|()
control|)
name|fixContact
argument_list|(
name|sessionId
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|String
name|op
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"operation"
argument_list|)
decl_stmt|;
name|SaveOrApproveEventRpcRequest
operator|.
name|Operation
name|operation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
name|operation
operator|=
name|SaveOrApproveEventRpcRequest
operator|.
name|Operation
operator|.
name|valueOf
argument_list|(
name|op
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given academic session no longer exists."
argument_list|)
throw|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|session
argument_list|,
name|Right
operator|.
name|ApiRetrieveEvents
argument_list|)
expr_stmt|;
name|EventContext
name|context
init|=
operator|new
name|EventContext
argument_list|(
name|helper
operator|.
name|getSessionContext
argument_list|()
argument_list|,
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getContact
argument_list|()
operator|==
literal|null
condition|)
name|event
operator|.
name|setContact
argument_list|(
name|GwtRpcServlet
operator|.
name|execute
argument_list|(
operator|new
name|EventPropertiesRpcRequest
argument_list|(
name|sessionId
argument_list|)
argument_list|,
name|applicationContext
argument_list|,
name|context
argument_list|)
operator|.
name|getMainContact
argument_list|()
argument_list|)
expr_stmt|;
name|SaveOrApproveEventRpcRequest
name|save
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
name|save
operator|=
operator|new
name|SaveEventRpcRequest
argument_list|()
expr_stmt|;
else|else
block|{
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|UPDATE
case|:
case|case
name|DELETE
case|:
name|save
operator|=
operator|new
name|SaveEventRpcRequest
argument_list|()
expr_stmt|;
break|break;
default|default:
name|ApproveEventRpcRequest
name|approve
init|=
operator|new
name|ApproveEventRpcRequest
argument_list|()
decl_stmt|;
name|approve
operator|.
name|setOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|hasMeetings
argument_list|()
condition|)
for|for
control|(
name|MeetingInterface
name|m
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
name|approve
operator|.
name|addMeeting
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|save
operator|=
name|approve
expr_stmt|;
break|break;
block|}
block|}
name|save
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEmailConfirmation
argument_list|(
name|helper
operator|.
name|getOptinalParameterBoolean
argument_list|(
literal|"email"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|save
operator|.
name|setMessage
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"message"
argument_list|)
argument_list|)
expr_stmt|;
name|save
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|SaveOrApproveEventRpcResponse
name|response
init|=
name|GwtRpcServlet
operator|.
name|execute
argument_list|(
name|save
argument_list|,
name|applicationContext
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doDelete
parameter_list|(
name|ApiHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|EventInterface
name|event
init|=
operator|new
name|EventInterface
argument_list|()
decl_stmt|;
name|event
operator|.
name|setId
argument_list|(
name|helper
operator|.
name|getRequiredParameterLong
argument_list|(
literal|"eventId"
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMeetings
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Event
name|e
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|event
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given event no longer exists."
argument_list|)
throw|;
name|event
operator|.
name|setType
argument_list|(
name|EventInterface
operator|.
name|EventType
operator|.
name|values
argument_list|()
index|[
name|e
operator|.
name|getEventType
argument_list|()
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ContactInterface
name|contact
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|contact
operator|.
name|setFirstName
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setMiddleName
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setLastName
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setAcademicTitle
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getAcademicTitle
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setEmail
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setContact
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getSession
argument_list|()
operator|!=
literal|null
condition|)
name|sessionId
operator|=
name|e
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
else|else
block|{
for|for
control|(
name|Meeting
name|m
range|:
name|e
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sessionId
operator|=
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given academic session no longer exists."
argument_list|)
throw|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|session
argument_list|,
name|Right
operator|.
name|ApiRetrieveEvents
argument_list|)
expr_stmt|;
name|SaveEventRpcRequest
name|save
init|=
operator|new
name|SaveEventRpcRequest
argument_list|()
decl_stmt|;
name|save
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEmailConfirmation
argument_list|(
name|helper
operator|.
name|getOptinalParameterBoolean
argument_list|(
literal|"email"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|save
operator|.
name|setMessage
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"message"
argument_list|)
argument_list|)
expr_stmt|;
name|save
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|EventContext
name|context
init|=
operator|new
name|EventContext
argument_list|(
name|helper
operator|.
name|getSessionContext
argument_list|()
argument_list|,
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
name|SaveOrApproveEventRpcResponse
name|response
init|=
name|GwtRpcServlet
operator|.
name|execute
argument_list|(
name|save
argument_list|,
name|applicationContext
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"events"
return|;
block|}
block|}
end_class

end_unit

