begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ErrorMessage
block|{
name|int
name|code
decl_stmt|;
name|String
name|message
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|exception
decl_stmt|;
specifier|public
name|ErrorMessage
parameter_list|(
name|int
name|code
parameter_list|,
name|ApiHelper
name|helper
parameter_list|)
block|{
name|this
operator|.
name|code
operator|=
name|code
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|helper
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|helper
operator|.
name|getParameter
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ErrorMessage
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|message
parameter_list|,
name|ApiHelper
name|helper
parameter_list|)
block|{
name|this
argument_list|(
name|code
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
specifier|public
name|ErrorMessage
parameter_list|(
name|int
name|code
parameter_list|,
name|Throwable
name|error
parameter_list|,
name|ApiHelper
name|helper
parameter_list|)
block|{
name|this
argument_list|(
name|code
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|error
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|StringWriter
name|trace
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|error
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|trace
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|exception
operator|.
name|add
argument_list|(
name|error
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StackTraceElement
name|e
range|:
name|error
operator|.
name|getStackTrace
argument_list|()
control|)
name|exception
operator|.
name|add
argument_list|(
literal|"at "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Throwable
name|cause
init|=
name|error
operator|.
name|getCause
argument_list|()
decl_stmt|;
while|while
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|exception
operator|.
name|add
argument_list|(
literal|"Caused by: "
operator|+
name|cause
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StackTraceElement
name|e
range|:
name|cause
operator|.
name|getStackTrace
argument_list|()
control|)
name|exception
operator|.
name|add
argument_list|(
literal|"at "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

