begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractApiHelper
implements|implements
name|ApiHelper
block|{
specifier|protected
name|SessionContext
name|iContext
decl_stmt|;
specifier|protected
name|HttpServletRequest
name|iRequest
decl_stmt|;
specifier|protected
name|HttpServletResponse
name|iResponse
decl_stmt|;
specifier|protected
name|Long
name|iSessionId
init|=
literal|null
decl_stmt|;
specifier|protected
name|CacheMode
name|iCacheMode
init|=
literal|null
decl_stmt|;
specifier|protected
name|org
operator|.
name|hibernate
operator|.
name|Session
name|iHibSession
init|=
literal|null
decl_stmt|;
specifier|public
name|AbstractApiHelper
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|CacheMode
name|cacheMode
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
name|iResponse
operator|=
name|response
expr_stmt|;
name|iContext
operator|=
name|context
expr_stmt|;
name|iCacheMode
operator|=
name|cacheMode
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendError
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|iResponse
operator|.
name|sendError
argument_list|(
name|code
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendError
parameter_list|(
name|int
name|code
parameter_list|)
throws|throws
name|IOException
block|{
name|iResponse
operator|.
name|sendError
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Long
name|guessAcademicSessionId
parameter_list|()
block|{
name|Long
name|sessionId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getParameter
argument_list|(
literal|"sid"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|sessionId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|getParameter
argument_list|(
literal|"sid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iContext
operator|.
name|isAuthenticated
argument_list|()
condition|)
name|sessionId
operator|=
operator|(
name|Long
operator|)
operator|(
name|iContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|iContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getQualifierId
argument_list|()
operator|)
expr_stmt|;
else|else
name|sessionId
operator|=
operator|(
name|Long
operator|)
name|iContext
operator|.
name|getAttribute
argument_list|(
literal|"sessionId"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getParameter
argument_list|(
literal|"term"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|sessions
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s.uniqueId from Session s where "
operator|+
literal|"s.academicTerm || s.academicYear = :term or "
operator|+
literal|"s.academicTerm || s.academicYear || s.academicInitiative = :term"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"term"
argument_list|,
name|getParameter
argument_list|(
literal|"term"
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sessions
operator|.
name|isEmpty
argument_list|()
condition|)
name|sessionId
operator|=
name|sessions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|sessionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getAcademicSessionId
parameter_list|()
block|{
if|if
condition|(
name|iSessionId
operator|==
literal|null
condition|)
name|iSessionId
operator|=
name|guessAcademicSessionId
argument_list|()
expr_stmt|;
return|return
name|iSessionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|iRequest
operator|.
name|getParameter
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getParameterValues
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|iRequest
operator|.
name|getParameterValues
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getParameterNames
parameter_list|()
block|{
return|return
name|iRequest
operator|.
name|getParameterNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SessionContext
name|getSessionContext
parameter_list|()
block|{
return|return
name|iContext
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Session
name|getHibSession
parameter_list|()
block|{
if|if
condition|(
name|iHibSession
operator|==
literal|null
condition|)
block|{
name|iHibSession
operator|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
expr_stmt|;
if|if
condition|(
name|iCacheMode
operator|!=
literal|null
condition|)
name|iHibSession
operator|.
name|setCacheMode
argument_list|(
name|iCacheMode
argument_list|)
expr_stmt|;
block|}
return|return
name|iHibSession
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOptinalParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|ret
init|=
name|getParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|(
name|ret
operator|!=
literal|null
condition|?
name|ret
else|:
name|defaultValue
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRequiredParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|ret
init|=
name|getParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter '"
operator|+
name|name
operator|+
literal|"' was not provided."
argument_list|)
throw|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getOptinalParameterInteger
parameter_list|(
name|String
name|name
parameter_list|,
name|Integer
name|defaultValue
parameter_list|)
block|{
name|String
name|ret
init|=
name|getParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|ret
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter '"
operator|+
name|name
operator|+
literal|"' must be an integer."
argument_list|)
throw|;
block|}
block|}
return|return
name|defaultValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getRequiredParameterInteger
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|ret
init|=
name|getParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter '"
operator|+
name|name
operator|+
literal|"' was not provided."
argument_list|)
throw|;
try|try
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|ret
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter '"
operator|+
name|name
operator|+
literal|"' must be an integer."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getOptinalParameterLong
parameter_list|(
name|String
name|name
parameter_list|,
name|Long
name|defaultValue
parameter_list|)
block|{
name|String
name|ret
init|=
name|getParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|ret
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter '"
operator|+
name|name
operator|+
literal|"' must be a long."
argument_list|)
throw|;
block|}
block|}
return|return
name|defaultValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getRequiredParameterLong
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|ret
init|=
name|getParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter '"
operator|+
name|name
operator|+
literal|"' was not provided."
argument_list|)
throw|;
try|try
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|ret
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter '"
operator|+
name|name
operator|+
literal|"' must be a long."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|getOptinalParameterBoolean
parameter_list|(
name|String
name|name
parameter_list|,
name|Boolean
name|defaultValue
parameter_list|)
block|{
name|String
name|ret
init|=
name|getParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ret
argument_list|)
operator|||
literal|"1"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ret
argument_list|)
return|;
block|}
return|return
name|defaultValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|getRequiredParameterBoolean
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|ret
init|=
name|getParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter '"
operator|+
name|name
operator|+
literal|"' was not provided."
argument_list|)
throw|;
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ret
argument_list|)
operator|||
literal|"1"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ret
argument_list|)
return|;
block|}
block|}
end_class

end_unit

