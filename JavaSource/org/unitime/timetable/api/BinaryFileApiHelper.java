begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|BinaryFileApiHelper
extends|extends
name|JsonApiHelper
block|{
specifier|public
name|BinaryFileApiHelper
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|CacheMode
name|cacheMode
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|context
argument_list|,
name|cacheMode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|P
parameter_list|>
name|P
name|getRequest
parameter_list|(
name|Type
name|requestType
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|requestType
operator|.
name|equals
argument_list|(
name|BinaryFile
operator|.
name|class
argument_list|)
condition|)
block|{
name|InputStream
name|is
init|=
name|iRequest
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|read
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|16384
index|]
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|is
operator|.
name|read
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
name|buffer
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|BinaryFile
name|output
init|=
operator|new
name|BinaryFile
argument_list|(
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|iRequest
operator|.
name|getContentType
argument_list|()
argument_list|,
name|getFileName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|P
operator|)
name|output
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getRequest
argument_list|(
name|requestType
argument_list|)
return|;
block|}
block|}
specifier|protected
name|String
name|getFileName
parameter_list|()
block|{
name|String
name|param
init|=
name|iRequest
operator|.
name|getHeader
argument_list|(
literal|"Content-Disposition"
argument_list|)
decl_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|cd
range|:
name|param
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"filename"
argument_list|)
condition|)
block|{
name|String
name|fileName
init|=
name|cd
operator|.
name|substring
argument_list|(
name|cd
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
return|return
name|fileName
operator|.
name|substring
argument_list|(
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|substring
argument_list|(
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'\\'
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
parameter_list|>
name|void
name|setResponse
parameter_list|(
name|R
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|instanceof
name|BinaryFile
condition|)
block|{
name|BinaryFile
name|file
init|=
operator|(
name|BinaryFile
operator|)
name|response
decl_stmt|;
name|iResponse
operator|.
name|setContentType
argument_list|(
name|file
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|setHeader
argument_list|(
literal|"Pragma"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|addHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"must-revalidate"
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|addHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|addHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"no-store"
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|setDateHeader
argument_list|(
literal|"Date"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|setDateHeader
argument_list|(
literal|"Expires"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment; filename=\""
operator|+
name|file
operator|.
name|getFileName
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|iResponse
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|file
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|setResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BinaryFile
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|byte
index|[]
name|iBuffer
decl_stmt|;
specifier|public
name|String
name|iContentType
decl_stmt|;
specifier|public
name|String
name|iFileName
decl_stmt|;
specifier|public
name|BinaryFile
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|String
name|contentType
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|iBuffer
operator|=
name|buffer
expr_stmt|;
name|iContentType
operator|=
name|contentType
expr_stmt|;
name|iFileName
operator|=
name|fileName
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
return|return
name|iBuffer
return|;
block|}
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|iContentType
return|;
block|}
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|iFileName
return|;
block|}
block|}
block|}
end_class

end_unit

