begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|FieldNamingStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|stream
operator|.
name|JsonReader
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|JsonApiHelper
extends|extends
name|AbstractApiHelper
block|{
specifier|protected
name|Gson
name|iGson
decl_stmt|;
specifier|public
name|JsonApiHelper
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|CacheMode
name|cacheMode
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|context
argument_list|,
name|cacheMode
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Gson
name|createGson
parameter_list|()
block|{
return|return
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|java
operator|.
name|sql
operator|.
name|Timestamp
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
operator|.
name|format
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|java
operator|.
name|sql
operator|.
name|Date
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
operator|.
name|format
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|Date
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
operator|.
name|format
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|setFieldNamingStrategy
argument_list|(
operator|new
name|FieldNamingStrategy
argument_list|()
block|{
name|Pattern
name|iPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"i([A-Z])(.*)"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|translateName
parameter_list|(
name|Field
name|f
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|iPattern
operator|.
name|matcher
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
return|return
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
return|;
else|else
return|return
name|f
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|setPrettyPrinting
argument_list|()
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|P
parameter_list|>
name|P
name|getRequest
parameter_list|(
name|Type
name|requestType
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|iGson
operator|==
literal|null
condition|)
name|iGson
operator|=
name|createGson
argument_list|()
expr_stmt|;
name|JsonReader
name|reader
init|=
operator|new
name|JsonReader
argument_list|(
name|iRequest
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|iGson
operator|.
name|fromJson
argument_list|(
name|reader
argument_list|,
name|requestType
argument_list|)
return|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
parameter_list|>
name|void
name|setResponse
parameter_list|(
name|R
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|iGson
operator|==
literal|null
condition|)
name|iGson
operator|=
name|createGson
argument_list|()
expr_stmt|;
name|iResponse
operator|.
name|setContentType
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|setHeader
argument_list|(
literal|"Pragma"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|addHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"must-revalidate"
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|addHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|addHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"no-store"
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|setDateHeader
argument_list|(
literal|"Date"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|setDateHeader
argument_list|(
literal|"Expires"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment; filename=\"response.json\""
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
name|iResponse
operator|.
name|getWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|iGson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendError
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|iResponse
operator|.
name|setStatus
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|setResponse
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|code
argument_list|,
name|message
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|iResponse
operator|.
name|sendError
argument_list|(
name|code
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendError
parameter_list|(
name|int
name|code
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|iResponse
operator|.
name|setStatus
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|setResponse
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|code
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|iResponse
operator|.
name|sendError
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendError
parameter_list|(
name|int
name|code
parameter_list|,
name|Throwable
name|error
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|iResponse
operator|.
name|setStatus
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|setResponse
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|code
argument_list|,
name|error
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|iResponse
operator|.
name|sendError
argument_list|(
name|code
argument_list|,
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

