begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|OnlineSectioningLogDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|OnlineSectioningLogger
extends|extends
name|Thread
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OnlineSectioningLogger
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|StudentSectioningConstants
name|CONST
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|OnlineSectioningLog
operator|.
name|Action
argument_list|>
name|iActions
init|=
operator|new
name|Vector
argument_list|<
name|OnlineSectioningLog
operator|.
name|Action
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iActive
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iEnabled
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|iLogLimit
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|PrintWriter
name|iOut
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|OnlineSectioningLogger
name|sInstance
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|OnlineSectioningLogger
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|sInstance
operator|==
literal|null
condition|)
name|startLogger
argument_list|()
expr_stmt|;
return|return
name|sInstance
return|;
block|}
specifier|public
specifier|static
name|void
name|startLogger
parameter_list|()
block|{
if|if
condition|(
name|sInstance
operator|==
literal|null
condition|)
block|{
name|sInstance
operator|=
operator|new
name|OnlineSectioningLogger
argument_list|()
expr_stmt|;
name|sInstance
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|stopLogger
parameter_list|()
block|{
if|if
condition|(
name|sInstance
operator|!=
literal|null
condition|)
block|{
name|sInstance
operator|.
name|iActive
operator|=
literal|false
expr_stmt|;
name|sInstance
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|sInstance
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
name|sInstance
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|OnlineSectioningLogger
parameter_list|()
block|{
name|super
argument_list|(
literal|"OnlineSectioningLogger"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iEnabled
operator|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingLoggingEnabled
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|iLogLimit
operator|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingLogLimit
operator|.
name|intValue
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingLogFile
operator|.
name|value
argument_list|()
operator|!=
literal|null
condition|)
name|iOut
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingLogFile
operator|.
name|value
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Unable to create sectioning log: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|iEnabled
return|;
block|}
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|iEnabled
operator|=
name|enabled
expr_stmt|;
block|}
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|iActive
return|;
block|}
specifier|public
name|void
name|record
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Log
name|log
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
operator|||
operator|!
name|isEnabled
argument_list|()
operator|||
operator|!
name|isActive
argument_list|()
condition|)
return|return;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Action
name|action
range|:
name|log
operator|.
name|getActionList
argument_list|()
control|)
block|{
if|if
condition|(
name|action
operator|.
name|hasStartTime
argument_list|()
operator|&&
name|action
operator|.
name|hasStudent
argument_list|()
operator|&&
name|action
operator|.
name|hasOperation
argument_list|()
operator|&&
name|action
operator|.
name|hasSession
argument_list|()
operator|&&
name|ApplicationProperty
operator|.
name|OnlineSchedulingLogOperation
operator|.
name|isTrue
argument_list|(
name|action
operator|.
name|getOperation
argument_list|()
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|iActions
init|)
block|{
if|if
condition|(
name|iLogLimit
operator|<=
literal|0
operator|||
name|iActions
operator|.
name|size
argument_list|()
operator|<
name|iLogLimit
condition|)
name|iActions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iOut
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|iOut
init|)
block|{
name|iOut
operator|.
name|print
argument_list|(
name|OnlineSectioningLog
operator|.
name|Log
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAction
argument_list|(
name|action
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iOut
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|protected
specifier|static
name|String
name|getRequestMessage
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Action
name|action
parameter_list|)
block|{
name|String
name|request
init|=
literal|""
decl_stmt|;
name|int
name|notAlt
init|=
literal|0
decl_stmt|,
name|lastFT
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Request
name|r
range|:
name|action
operator|.
name|getRequestList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|getAlternative
argument_list|()
condition|)
name|notAlt
operator|=
name|r
operator|.
name|getPriority
argument_list|()
operator|+
literal|1
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Time
name|f
range|:
name|r
operator|.
name|getFreeTimeList
argument_list|()
control|)
block|{
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
block|{
name|request
operator|+=
operator|(
name|lastFT
operator|==
name|r
operator|.
name|getPriority
argument_list|()
condition|?
literal|", "
else|:
operator|(
name|request
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
operator|(
name|r
operator|.
name|getAlternative
argument_list|()
condition|?
literal|"A"
operator|+
operator|(
literal|1
operator|+
name|r
operator|.
name|getPriority
argument_list|()
operator|-
name|notAlt
operator|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|r
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|)
operator|+
literal|". "
operator|+
name|CONST
operator|.
name|freePrefix
argument_list|()
operator|+
literal|" "
operator|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|+=
literal|", "
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
name|request
operator|+=
name|DayCode
operator|.
name|toString
argument_list|(
name|f
operator|.
name|getDays
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|time
argument_list|(
name|f
operator|.
name|getStart
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|time
argument_list|(
name|f
operator|.
name|getStart
argument_list|()
operator|+
name|f
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|lastFT
operator|=
name|r
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|getFreeTimeList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|e
range|:
name|r
operator|.
name|getCourseList
argument_list|()
control|)
block|{
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
block|{
name|request
operator|+=
operator|(
name|request
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
operator|(
name|r
operator|.
name|getAlternative
argument_list|()
condition|?
literal|"A"
operator|+
operator|(
literal|1
operator|+
name|r
operator|.
name|getPriority
argument_list|()
operator|-
name|notAlt
operator|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|r
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|)
operator|+
literal|". "
expr_stmt|;
block|}
else|else
block|{
name|request
operator|+=
literal|", "
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
name|request
operator|+=
name|e
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|request
return|;
block|}
specifier|protected
specifier|static
name|String
name|getSelectedMessage
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Action
name|action
parameter_list|)
block|{
name|String
name|selected
init|=
literal|""
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Request
name|r
range|:
name|action
operator|.
name|getRequestList
argument_list|()
control|)
block|{
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Section
name|s
range|:
name|r
operator|.
name|getSectionList
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getPreference
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Preference
operator|.
name|SELECTED
condition|)
block|{
if|if
condition|(
operator|!
name|selected
operator|.
name|isEmpty
argument_list|()
condition|)
name|selected
operator|+=
literal|"\n"
expr_stmt|;
name|String
name|loc
init|=
literal|""
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|e
range|:
name|s
operator|.
name|getLocationList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|loc
operator|.
name|isEmpty
argument_list|()
condition|)
name|loc
operator|+=
literal|", "
expr_stmt|;
name|loc
operator|+=
name|e
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|String
name|instr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|e
range|:
name|s
operator|.
name|getInstructorList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|instr
operator|.
name|isEmpty
argument_list|()
condition|)
name|instr
operator|+=
literal|", "
expr_stmt|;
name|instr
operator|+=
name|e
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|selected
operator|+=
name|s
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|s
operator|.
name|hasTime
argument_list|()
condition|?
name|DayCode
operator|.
name|toString
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|time
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|time
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getStart
argument_list|()
operator|+
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|" "
operator|+
name|loc
expr_stmt|;
block|}
block|}
block|}
return|return
name|selected
return|;
block|}
specifier|protected
specifier|static
name|String
name|getEnrollmentMessage
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Action
name|action
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Enrollment
name|enrl
init|=
literal|null
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Enrollment
name|e
range|:
name|action
operator|.
name|getEnrollmentList
argument_list|()
control|)
block|{
name|enrl
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|REQUESTED
condition|)
break|break;
block|}
name|String
name|enrollment
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|enrl
operator|!=
literal|null
condition|)
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Section
name|s
range|:
name|enrl
operator|.
name|getSectionList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|hasCourse
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|enrollment
operator|.
name|isEmpty
argument_list|()
condition|)
name|enrollment
operator|+=
literal|"\n"
expr_stmt|;
name|String
name|loc
init|=
literal|""
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|r
range|:
name|s
operator|.
name|getLocationList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|loc
operator|.
name|isEmpty
argument_list|()
condition|)
name|loc
operator|+=
literal|", "
expr_stmt|;
name|loc
operator|+=
name|r
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|String
name|instr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|r
range|:
name|s
operator|.
name|getInstructorList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|instr
operator|.
name|isEmpty
argument_list|()
condition|)
name|instr
operator|+=
literal|", "
expr_stmt|;
name|instr
operator|+=
name|r
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|enrollment
operator|+=
name|s
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|s
operator|.
name|hasTime
argument_list|()
condition|?
name|DayCode
operator|.
name|toString
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|time
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|" "
operator|+
name|loc
expr_stmt|;
block|}
return|return
name|enrollment
return|;
block|}
specifier|public
specifier|static
name|String
name|getMessage
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Action
name|action
parameter_list|)
block|{
name|String
name|message
init|=
literal|""
decl_stmt|;
name|int
name|level
init|=
literal|1
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Message
name|m
range|:
name|action
operator|.
name|getMessageList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|m
operator|.
name|hasLevel
argument_list|()
condition|)
continue|continue;
comment|// skip messages with no level
if|if
condition|(
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
operator|&&
name|level
operator|>
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|getNumber
argument_list|()
condition|)
continue|continue;
comment|// if we have a message, ignore messages with lower level
if|if
condition|(
name|m
operator|.
name|hasText
argument_list|()
condition|)
block|{
name|message
operator|=
operator|(
name|level
operator|!=
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|getNumber
argument_list|()
condition|?
literal|""
else|:
name|message
operator|+
literal|"\n"
operator|)
operator|+
name|m
operator|.
name|getText
argument_list|()
expr_stmt|;
name|level
operator|=
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|m
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|message
operator|=
operator|(
name|level
operator|!=
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|getNumber
argument_list|()
condition|?
literal|""
else|:
name|message
operator|+
literal|"\n"
operator|)
operator|+
name|m
operator|.
name|getException
argument_list|()
expr_stmt|;
name|level
operator|=
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|action
operator|.
name|hasResult
argument_list|()
operator|&&
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FAILURE
operator|.
name|equals
argument_list|(
name|action
operator|.
name|getResult
argument_list|()
argument_list|)
operator|&&
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|message
return|;
block|}
if|else if
condition|(
literal|"suggestions"
operator|.
name|equals
argument_list|(
name|action
operator|.
name|getOperation
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|selected
init|=
name|getSelectedMessage
argument_list|(
name|action
argument_list|)
decl_stmt|;
return|return
operator|(
name|selected
operator|.
name|isEmpty
argument_list|()
condition|?
name|message
else|:
name|selected
operator|)
return|;
block|}
if|if
condition|(
literal|"section"
operator|.
name|equals
argument_list|(
name|action
operator|.
name|getOperation
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|request
init|=
name|getRequestMessage
argument_list|(
name|action
argument_list|)
decl_stmt|;
return|return
operator|(
name|request
operator|.
name|isEmpty
argument_list|()
condition|?
name|message
else|:
name|request
operator|)
return|;
block|}
else|else
block|{
name|String
name|enrollment
init|=
name|getEnrollmentMessage
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|enrollment
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|enrollment
return|;
name|String
name|request
init|=
name|getRequestMessage
argument_list|(
name|action
argument_list|)
decl_stmt|;
return|return
operator|(
name|request
operator|.
name|isEmpty
argument_list|()
condition|?
name|message
else|:
name|request
operator|)
return|;
block|}
block|}
specifier|protected
specifier|static
name|String
name|time
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|int
name|h
init|=
name|slot
operator|/
literal|12
decl_stmt|;
name|int
name|m
init|=
literal|5
operator|*
operator|(
name|slot
operator|%
literal|12
operator|)
decl_stmt|;
if|if
condition|(
name|CONST
operator|.
name|useAmPm
argument_list|()
condition|)
return|return
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|h
operator|==
literal|24
condition|?
literal|"a"
else|:
name|h
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
else|else
return|return
name|h
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
return|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Online Sectioning Logger is up."
argument_list|)
expr_stmt|;
try|try
block|{
name|iActive
operator|=
literal|true
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|sleep
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
name|List
argument_list|<
name|OnlineSectioningLog
operator|.
name|Action
argument_list|>
name|actionsToSave
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|iActions
init|)
block|{
if|if
condition|(
operator|!
name|iActions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|actionsToSave
operator|=
operator|new
name|ArrayList
argument_list|<
name|OnlineSectioningLog
operator|.
name|Action
argument_list|>
argument_list|(
name|iActions
argument_list|)
expr_stmt|;
name|iActions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|actionsToSave
operator|!=
literal|null
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"Persisting "
operator|+
name|actionsToSave
operator|.
name|size
argument_list|()
operator|+
literal|" actions..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLogLimit
operator|>
literal|0
operator|&&
name|actionsToSave
operator|.
name|size
argument_list|()
operator|>=
name|iLogLimit
condition|)
name|sLog
operator|.
name|warn
argument_list|(
literal|"The limit of "
operator|+
name|iLogLimit
operator|+
literal|" unpersisted log messages was reached, some messages have been dropped."
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|OnlineSectioningLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|setCacheMode
argument_list|(
name|CacheMode
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
try|try
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Session
argument_list|>
name|sessions
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Session
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Action
name|q
range|:
name|actionsToSave
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OnlineSectioningLog
name|log
init|=
operator|new
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OnlineSectioningLog
argument_list|()
decl_stmt|;
name|log
operator|.
name|setAction
argument_list|(
name|q
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|setOperation
argument_list|(
name|q
operator|.
name|getOperation
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|studentExternalId
init|=
operator|(
name|q
operator|.
name|getStudent
argument_list|()
operator|.
name|hasExternalId
argument_list|()
condition|?
name|q
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalId
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|studentExternalId
operator|==
literal|null
operator|||
name|studentExternalId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|q
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
name|studentExternalId
operator|=
name|student
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|setStudent
argument_list|(
name|studentExternalId
argument_list|)
expr_stmt|;
name|log
operator|.
name|setTimeStamp
argument_list|(
operator|new
name|Date
argument_list|(
name|q
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|hasResult
argument_list|()
condition|)
name|log
operator|.
name|setResult
argument_list|(
name|q
operator|.
name|getResult
argument_list|()
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|hasUser
argument_list|()
operator|&&
name|q
operator|.
name|getUser
argument_list|()
operator|.
name|hasExternalId
argument_list|()
condition|)
name|log
operator|.
name|setUser
argument_list|(
name|q
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|hasCpuTime
argument_list|()
condition|)
name|log
operator|.
name|setCpuTime
argument_list|(
name|q
operator|.
name|getCpuTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|hasStartTime
argument_list|()
operator|&&
name|q
operator|.
name|hasEndTime
argument_list|()
condition|)
name|log
operator|.
name|setWallTime
argument_list|(
name|q
operator|.
name|getEndTime
argument_list|()
operator|-
name|q
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|hasApiGetTime
argument_list|()
condition|)
name|log
operator|.
name|setApiGetTime
argument_list|(
name|q
operator|.
name|getApiGetTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|hasApiPostTime
argument_list|()
condition|)
name|log
operator|.
name|setApiPostTime
argument_list|(
name|q
operator|.
name|getApiPostTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|hasApiException
argument_list|()
condition|)
name|log
operator|.
name|setApiException
argument_list|(
name|q
operator|.
name|getApiException
argument_list|()
operator|!=
literal|null
operator|&&
name|q
operator|.
name|getApiException
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|255
condition|?
name|q
operator|.
name|getApiException
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|)
else|:
name|q
operator|.
name|getApiException
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|message
init|=
name|getMessage
argument_list|(
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
name|log
operator|.
name|setMessage
argument_list|(
name|message
operator|.
name|length
argument_list|()
operator|>
literal|255
condition|?
name|message
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|252
argument_list|)
operator|+
literal|"..."
else|:
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|q
operator|.
name|getMessageList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|null
decl_stmt|;
name|int
name|level
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Message
name|m
range|:
name|q
operator|.
name|getMessageList
argument_list|()
control|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|!
name|m
operator|.
name|hasLevel
argument_list|()
operator|||
name|level
operator|>
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|getNumber
argument_list|()
operator|)
condition|)
continue|continue;
if|if
condition|(
name|m
operator|.
name|hasText
argument_list|()
condition|)
block|{
name|message
operator|=
name|m
operator|.
name|getText
argument_list|()
expr_stmt|;
name|level
operator|=
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|m
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|message
operator|=
name|m
operator|.
name|getException
argument_list|()
expr_stmt|;
name|level
operator|=
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
name|log
operator|.
name|setMessage
argument_list|(
name|message
operator|.
name|length
argument_list|()
operator|>
literal|255
condition|?
name|message
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|252
argument_list|)
operator|+
literal|"..."
else|:
name|message
argument_list|)
expr_stmt|;
block|}
block|}
name|Long
name|sessionId
init|=
name|q
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|sessions
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|session
operator|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|sessions
operator|.
name|put
argument_list|(
name|sessionId
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to save "
operator|+
name|actionsToSave
operator|.
name|size
argument_list|()
operator|+
literal|" log actions: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iActive
condition|)
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Online Sectioning Logger failed: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|iActive
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|iOut
operator|!=
literal|null
condition|)
block|{
name|iOut
operator|.
name|flush
argument_list|()
expr_stmt|;
name|iOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Online Sectioning Logger is down."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

