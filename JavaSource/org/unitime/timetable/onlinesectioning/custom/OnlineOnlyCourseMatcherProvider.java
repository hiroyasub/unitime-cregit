begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseMatcherProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|CourseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|DatabaseServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|StatusPageSuggestionsAction
operator|.
name|StudentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|db
operator|.
name|DbFindEnrollmentInfoAction
operator|.
name|DbStudentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|OnlineOnlyCourseMatcherProvider
implements|implements
name|CourseMatcherProvider
block|{
annotation|@
name|Override
specifier|public
name|CourseMatcher
name|getCourseMatcher
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Long
name|studentId
parameter_list|)
block|{
name|String
name|filter
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingParameter
operator|.
name|value
argument_list|(
literal|"Load.OnlineOnlyStudentFilter"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|server
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|server
operator|instanceof
name|DatabaseServer
operator|)
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|hasPermissionAnySession
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingParameter
operator|.
name|value
argument_list|(
literal|"OnlineOnlyAdminOverride"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
return|return
literal|null
return|;
block|}
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|new
name|Query
argument_list|(
name|filter
argument_list|)
operator|.
name|match
argument_list|(
operator|new
name|StudentMatcher
argument_list|(
name|student
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
argument_list|,
name|server
argument_list|,
literal|false
argument_list|)
argument_list|)
condition|)
return|return
operator|new
name|OnlineOnlyCourseMatcher
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingParameter
operator|.
name|value
argument_list|(
literal|"Load.OnlineOnlyInstructionalModeRegExp"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|context
operator|.
name|hasPermissionAnySession
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingParameter
operator|.
name|value
argument_list|(
literal|"OnlineOnlyAdminOverride"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|new
name|Query
argument_list|(
name|filter
argument_list|)
operator|.
name|match
argument_list|(
operator|new
name|DbStudentMatcher
argument_list|(
name|student
argument_list|)
argument_list|)
condition|)
return|return
operator|new
name|OnlineOnlyCourseMatcher
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingParameter
operator|.
name|value
argument_list|(
literal|"Load.OnlineOnlyInstructionalModeRegExp"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|OnlineOnlyCourseMatcher
implements|implements
name|CourseMatcher
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|transient
name|OnlineSectioningServer
name|iServer
decl_stmt|;
specifier|private
name|String
name|iInstructionalMode
decl_stmt|;
specifier|public
name|OnlineOnlyCourseMatcher
parameter_list|(
name|String
name|im
parameter_list|)
block|{
name|iInstructionalMode
operator|=
name|im
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setServer
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|)
block|{
name|iServer
operator|=
name|server
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|OnlineSectioningServer
name|getServer
parameter_list|()
block|{
return|return
name|iServer
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|XCourseId
name|course
parameter_list|)
block|{
if|if
condition|(
name|getServer
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|getServer
argument_list|()
operator|instanceof
name|DatabaseServer
operator|)
condition|)
block|{
name|XOffering
name|offering
init|=
name|getServer
argument_list|()
operator|.
name|getOffering
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XConfig
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|iInstructionalMode
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
name|iInstructionalMode
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
else|else
block|{
name|InstructionalOffering
name|offering
init|=
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|iInstructionalMode
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
name|iInstructionalMode
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

