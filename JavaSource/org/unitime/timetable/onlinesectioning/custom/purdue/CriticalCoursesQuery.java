begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CriticalCoursesProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomCourseLookupHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XAreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudentId
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CriticalCoursesQuery
implements|implements
name|CriticalCoursesProvider
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|CriticalCoursesFile
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|public
name|CriticalCoursesQuery
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
block|{
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getCatalogYear
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|+
literal|"10"
return|;
block|}
specifier|protected
name|String
name|getCriticalCoursesSQL
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.criticalCoursesSQL"
argument_list|,
literal|"select (course_discipline || ' ' || course_number) as course from timetable.tmpl_course_view where "
operator|+
literal|"is_critical='Y' and tmpl_description not like '%Statewide%' and tmpl_college=:area and tmpl_major=:major and tmpl_catyear=:catyear"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getCriticalPlaceholdersSQL
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.criticalPlaceholdersSQL"
argument_list|,
literal|"select placeholder_value from timetable.tmpl_placeholder_view where "
operator|+
literal|"placeholder_value like '%*' and placeholder_type = 'UNIV-CORE' and tmpl_description not like '%Statewide%' and tmpl_college=:area and tmpl_major=:major and tmpl_catyear=:catyear"
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|getCriticalPlaceHolderAllowPartialMatch
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.placeHolderPartialMatch"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CriticalCourses
name|getCriticalCourses
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudentId
name|student
parameter_list|)
block|{
return|return
name|getCriticalCourses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|helper
operator|.
name|getAction
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CriticalCourses
name|getCriticalCourses
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudentId
name|studentId
parameter_list|,
name|Builder
name|action
parameter_list|)
block|{
name|XStudent
name|student
init|=
operator|(
name|studentId
operator|instanceof
name|XStudent
condition|?
operator|(
name|XStudent
operator|)
name|studentId
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|studentId
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|catyear
init|=
name|getCatalogYear
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|String
name|sqlCourses
init|=
name|getCriticalCoursesSQL
argument_list|()
decl_stmt|;
name|String
name|sqlPlaceholders
init|=
name|getCriticalPlaceholdersSQL
argument_list|()
decl_stmt|;
name|CriticalCoursesImpl
name|cc
init|=
operator|new
name|CriticalCoursesImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|XAreaClassificationMajor
name|acm
range|:
name|student
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createSQLQuery
argument_list|(
name|sqlCourses
argument_list|)
decl_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"area"
argument_list|,
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"area"
argument_list|)
operator|.
name|setValue
argument_list|(
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"major"
argument_list|,
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"major"
argument_list|)
operator|.
name|setValue
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlCourses
operator|.
name|contains
argument_list|(
literal|":catyear"
argument_list|)
condition|)
block|{
name|query
operator|.
name|setString
argument_list|(
literal|"catyear"
argument_list|,
name|catyear
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"catyear"
argument_list|)
operator|.
name|setValue
argument_list|(
name|catyear
argument_list|)
expr_stmt|;
block|}
name|cc
operator|.
name|addCourses
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|query
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"courses"
argument_list|)
operator|.
name|setValue
argument_list|(
name|cc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlPlaceholders
operator|!=
literal|null
operator|&&
operator|!
name|sqlPlaceholders
operator|.
name|isEmpty
argument_list|()
operator|&&
name|CustomCourseLookupHolder
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
name|query
operator|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createSQLQuery
argument_list|(
name|sqlPlaceholders
argument_list|)
expr_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"area"
argument_list|,
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"major"
argument_list|,
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlPlaceholders
operator|.
name|contains
argument_list|(
literal|":catyear"
argument_list|)
condition|)
name|query
operator|.
name|setString
argument_list|(
literal|"catyear"
argument_list|,
name|catyear
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|placeholders
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|query
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|placeholders
operator|!=
literal|null
operator|&&
operator|!
name|placeholders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|ph
range|:
name|placeholders
control|)
block|{
name|cc
operator|.
name|addCourseIds
argument_list|(
name|CustomCourseLookupHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|getCourseIds
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|,
name|ph
argument_list|,
name|getCriticalPlaceHolderAllowPartialMatch
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"placeholders"
argument_list|)
operator|.
name|setValue
argument_list|(
name|placeholders
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cc
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
block|}
specifier|protected
specifier|static
class|class
name|CriticalCoursesImpl
implements|implements
name|CriticalCourses
block|{
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|iCriticalCourses
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|iCourseIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addCourses
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|courses
parameter_list|)
block|{
if|if
condition|(
name|courses
operator|!=
literal|null
operator|&&
operator|!
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
name|iCriticalCourses
operator|.
name|addAll
argument_list|(
name|courses
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addCourseIds
parameter_list|(
name|Collection
argument_list|<
name|Long
argument_list|>
name|courseIds
parameter_list|)
block|{
if|if
condition|(
name|courseIds
operator|!=
literal|null
operator|&&
operator|!
name|courseIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|iCourseIds
operator|.
name|addAll
argument_list|(
name|courseIds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|iCriticalCourses
operator|.
name|isEmpty
argument_list|()
operator|&&
name|iCourseIds
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCritical
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
if|if
condition|(
name|iCourseIds
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|String
name|c
range|:
name|iCriticalCourses
control|)
if|if
condition|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|c
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iCriticalCourses
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

