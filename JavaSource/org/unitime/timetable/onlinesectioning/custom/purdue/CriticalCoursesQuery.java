begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DegreePlanInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DegreePlanInterface
operator|.
name|DegreeCourseInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DegreePlanInterface
operator|.
name|DegreeGroupInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DegreePlanInterface
operator|.
name|DegreePlaceHolderInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CriticalCoursesProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomCourseLookupHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|DegreePlansProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XAreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudentId
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CriticalCoursesQuery
implements|implements
name|CriticalCoursesProvider
implements|,
name|DegreePlansProvider
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|CriticalCoursesFile
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|public
name|CriticalCoursesQuery
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
block|{
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getCatalogYear
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|)
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.catalogYear."
operator|+
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getTerm
argument_list|()
operator|+
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getYear
argument_list|()
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.catalogYear"
argument_list|,
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|+
literal|"10"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getCriticalCoursesSQL
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.criticalCoursesSQL"
argument_list|,
literal|"select (course_discipline || ' ' || course_number) as course from timetable.tmpl_course_view where "
operator|+
literal|"is_critical='Y' and tmpl_description not like '%Statewide%' and tmpl_college=:area and tmpl_major=:major and tmpl_catyear=:catyear"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getCriticalPlaceholdersSQL
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.criticalPlaceholdersSQL"
argument_list|,
literal|"select placeholder_value from timetable.tmpl_placeholder_view where "
operator|+
literal|"placeholder_value like '%*' and placeholder_type = '"
operator|+
name|getUccPlaceHolderType
argument_list|()
operator|+
literal|"' and tmpl_description not like '%Statewide%' and tmpl_college=:area and tmpl_major=:major and tmpl_catyear=:catyear"
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|getCriticalPlaceHolderAllowPartialMatch
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.placeHolderPartialMatch"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getUccPlaceHolderType
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.uccPlaceHolderCodeRegExp"
argument_list|,
literal|"UNIV-CORE"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getCriticalPlaceHolderRegExp
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.criticalPlaceHolderRegExp"
argument_list|,
literal|".* ?\\* ?"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CriticalCourses
name|getCriticalCourses
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudentId
name|student
parameter_list|)
block|{
return|return
name|getCriticalCourses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|helper
operator|.
name|getAction
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CriticalCourses
name|getCriticalCourses
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudentId
name|studentId
parameter_list|,
name|Builder
name|action
parameter_list|)
block|{
name|XStudent
name|student
init|=
operator|(
name|studentId
operator|instanceof
name|XStudent
condition|?
operator|(
name|XStudent
operator|)
name|studentId
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|studentId
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|catyear
init|=
name|getCatalogYear
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|String
name|sqlCourses
init|=
name|getCriticalCoursesSQL
argument_list|()
decl_stmt|;
name|String
name|sqlPlaceholders
init|=
name|getCriticalPlaceholdersSQL
argument_list|()
decl_stmt|;
name|CriticalCoursesImpl
name|cc
init|=
operator|new
name|CriticalCoursesImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|XAreaClassificationMajor
name|acm
range|:
name|getAreaClasfMajors
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|)
control|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createSQLQuery
argument_list|(
name|sqlCourses
argument_list|)
decl_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"area"
argument_list|,
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"area"
argument_list|)
operator|.
name|setValue
argument_list|(
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"major"
argument_list|,
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"major"
argument_list|)
operator|.
name|setValue
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlCourses
operator|.
name|contains
argument_list|(
literal|":catyear"
argument_list|)
condition|)
block|{
name|query
operator|.
name|setString
argument_list|(
literal|"catyear"
argument_list|,
name|catyear
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"catyear"
argument_list|)
operator|.
name|setValue
argument_list|(
name|catyear
argument_list|)
expr_stmt|;
block|}
name|cc
operator|.
name|addCourses
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|query
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"critical"
argument_list|)
operator|.
name|setValue
argument_list|(
name|cc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlPlaceholders
operator|!=
literal|null
operator|&&
operator|!
name|sqlPlaceholders
operator|.
name|isEmpty
argument_list|()
operator|&&
name|CustomCourseLookupHolder
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
name|query
operator|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createSQLQuery
argument_list|(
name|sqlPlaceholders
argument_list|)
expr_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"area"
argument_list|,
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"major"
argument_list|,
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlPlaceholders
operator|.
name|contains
argument_list|(
literal|":catyear"
argument_list|)
condition|)
name|query
operator|.
name|setString
argument_list|(
literal|"catyear"
argument_list|,
name|catyear
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|placeholders
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|query
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|placeholders
operator|!=
literal|null
operator|&&
operator|!
name|placeholders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|ph
range|:
name|placeholders
control|)
block|{
name|cc
operator|.
name|addCourseIds
argument_list|(
name|CustomCourseLookupHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|getCourseIds
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|,
name|ph
argument_list|,
name|getCriticalPlaceHolderAllowPartialMatch
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"placeholders"
argument_list|)
operator|.
name|setValue
argument_list|(
name|placeholders
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cc
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
block|}
specifier|protected
specifier|static
class|class
name|CriticalCoursesImpl
implements|implements
name|CriticalCourses
block|{
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|iCriticalCourses
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|iCourseIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addCourses
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|courses
parameter_list|)
block|{
if|if
condition|(
name|courses
operator|!=
literal|null
operator|&&
operator|!
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
name|iCriticalCourses
operator|.
name|addAll
argument_list|(
name|courses
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addCourseIds
parameter_list|(
name|Collection
argument_list|<
name|Long
argument_list|>
name|courseIds
parameter_list|)
block|{
if|if
condition|(
name|courseIds
operator|!=
literal|null
operator|&&
operator|!
name|courseIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|iCourseIds
operator|.
name|addAll
argument_list|(
name|courseIds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|iCriticalCourses
operator|.
name|isEmpty
argument_list|()
operator|&&
name|iCourseIds
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|isCritical
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
if|if
condition|(
name|iCourseIds
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
name|CourseDemand
operator|.
name|Critical
operator|.
name|IMPORTANT
operator|.
name|ordinal
argument_list|()
return|;
for|for
control|(
name|String
name|c
range|:
name|iCriticalCourses
control|)
if|if
condition|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|c
argument_list|)
condition|)
return|return
name|CourseDemand
operator|.
name|Critical
operator|.
name|IMPORTANT
operator|.
name|ordinal
argument_list|()
return|;
return|return
name|CourseDemand
operator|.
name|Critical
operator|.
name|NORMAL
operator|.
name|ordinal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|isCritical
parameter_list|(
name|XCourseId
name|course
parameter_list|)
block|{
if|if
condition|(
name|iCourseIds
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
return|return
name|CourseDemand
operator|.
name|Critical
operator|.
name|IMPORTANT
operator|.
name|ordinal
argument_list|()
return|;
for|for
control|(
name|String
name|c
range|:
name|iCriticalCourses
control|)
if|if
condition|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|c
argument_list|)
condition|)
return|return
name|CourseDemand
operator|.
name|Critical
operator|.
name|IMPORTANT
operator|.
name|ordinal
argument_list|()
return|;
return|return
name|CourseDemand
operator|.
name|Critical
operator|.
name|NORMAL
operator|.
name|ordinal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iCriticalCourses
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
name|CatalogYearTerm
index|[]
name|getCatalogYearTermSequence
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|XAreaClassificationMajor
name|acm
parameter_list|)
block|{
name|int
name|firstYear
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|getCatalogYear
argument_list|(
name|server
argument_list|)
argument_list|)
operator|/
literal|100
decl_stmt|;
name|int
name|year
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|seq
init|=
operator|(
name|term
operator|.
name|endsWith
argument_list|(
literal|"20"
argument_list|)
condition|?
literal|1
else|:
name|term
operator|.
name|endsWith
argument_list|(
literal|"30"
argument_list|)
condition|?
literal|2
else|:
literal|0
operator|)
decl_stmt|;
if|if
condition|(
literal|"01"
operator|.
name|equals
argument_list|(
name|acm
operator|.
name|getClassification
argument_list|()
argument_list|)
operator|||
literal|"02"
operator|.
name|equals
argument_list|(
name|acm
operator|.
name|getClassification
argument_list|()
argument_list|)
condition|)
return|return
operator|new
name|CatalogYearTerm
index|[]
block|{
operator|new
name|CatalogYearTerm
argument_list|(
name|year
argument_list|,
name|firstYear
argument_list|,
name|seq
argument_list|,
literal|true
argument_list|)
block|,
comment|// new CatalogYearTerm((year - 1), firstYear, seq + 3, false),
block|}
return|;
if|if
condition|(
literal|"03"
operator|.
name|equals
argument_list|(
name|acm
operator|.
name|getClassification
argument_list|()
argument_list|)
operator|||
literal|"04"
operator|.
name|equals
argument_list|(
name|acm
operator|.
name|getClassification
argument_list|()
argument_list|)
condition|)
return|return
operator|new
name|CatalogYearTerm
index|[]
block|{
operator|new
name|CatalogYearTerm
argument_list|(
name|year
argument_list|,
name|firstYear
argument_list|,
name|seq
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CatalogYearTerm
argument_list|(
operator|(
name|year
operator|-
literal|1
operator|)
argument_list|,
name|firstYear
argument_list|,
name|seq
operator|+
literal|3
argument_list|,
literal|true
argument_list|)
block|,
comment|// new CatalogYearTerm((year - 2), firstYear, seq + 6, false),
block|}
return|;
if|if
condition|(
literal|"05"
operator|.
name|equals
argument_list|(
name|acm
operator|.
name|getClassification
argument_list|()
argument_list|)
operator|||
literal|"06"
operator|.
name|equals
argument_list|(
name|acm
operator|.
name|getClassification
argument_list|()
argument_list|)
condition|)
return|return
operator|new
name|CatalogYearTerm
index|[]
block|{
operator|new
name|CatalogYearTerm
argument_list|(
operator|(
name|year
operator|-
literal|0
operator|)
argument_list|,
name|firstYear
argument_list|,
name|seq
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CatalogYearTerm
argument_list|(
operator|(
name|year
operator|-
literal|1
operator|)
argument_list|,
name|firstYear
argument_list|,
name|seq
operator|+
literal|3
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CatalogYearTerm
argument_list|(
operator|(
name|year
operator|-
literal|2
operator|)
argument_list|,
name|firstYear
argument_list|,
name|seq
operator|+
literal|6
argument_list|,
literal|true
argument_list|)
block|,
comment|// new CatalogYearTerm((year - 3), firstYear, seq + 9, false),
block|}
return|;
if|if
condition|(
literal|"07"
operator|.
name|equals
argument_list|(
name|acm
operator|.
name|getClassification
argument_list|()
argument_list|)
operator|||
literal|"08"
operator|.
name|equals
argument_list|(
name|acm
operator|.
name|getClassification
argument_list|()
argument_list|)
condition|)
return|return
operator|new
name|CatalogYearTerm
index|[]
block|{
operator|new
name|CatalogYearTerm
argument_list|(
operator|(
name|year
operator|-
literal|1
operator|)
argument_list|,
name|firstYear
argument_list|,
name|seq
operator|+
literal|3
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CatalogYearTerm
argument_list|(
operator|(
name|year
operator|-
literal|2
operator|)
argument_list|,
name|firstYear
argument_list|,
name|seq
operator|+
literal|6
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CatalogYearTerm
argument_list|(
operator|(
name|year
operator|-
literal|3
operator|)
argument_list|,
name|firstYear
argument_list|,
name|seq
operator|+
literal|9
argument_list|,
literal|true
argument_list|)
block|,
comment|// new CatalogYearTerm((year - 4), firstYear, seq + 9, false),
block|}
return|;
if|if
condition|(
literal|"09"
operator|.
name|equals
argument_list|(
name|acm
operator|.
name|getClassification
argument_list|()
argument_list|)
operator|||
literal|"10"
operator|.
name|equals
argument_list|(
name|acm
operator|.
name|getClassification
argument_list|()
argument_list|)
condition|)
return|return
operator|new
name|CatalogYearTerm
index|[]
block|{
operator|new
name|CatalogYearTerm
argument_list|(
operator|(
name|year
operator|-
literal|2
operator|)
argument_list|,
name|firstYear
argument_list|,
name|seq
operator|+
literal|6
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CatalogYearTerm
argument_list|(
operator|(
name|year
operator|-
literal|3
operator|)
argument_list|,
name|firstYear
argument_list|,
name|seq
operator|+
literal|9
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CatalogYearTerm
argument_list|(
operator|(
name|year
operator|-
literal|4
operator|)
argument_list|,
name|firstYear
argument_list|,
name|seq
operator|+
literal|9
argument_list|,
literal|true
argument_list|)
block|,
comment|// new CatalogYearTerm((year - 5), firstYear, seq + 9, false),
block|}
return|;
return|return
operator|new
name|CatalogYearTerm
index|[]
block|{
operator|new
name|CatalogYearTerm
argument_list|(
name|year
argument_list|,
name|firstYear
argument_list|,
name|seq
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|CatalogYearTerm
argument_list|(
operator|(
name|year
operator|-
literal|1
operator|)
argument_list|,
name|firstYear
argument_list|,
name|seq
operator|+
literal|3
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CatalogYearTerm
argument_list|(
operator|(
name|year
operator|-
literal|2
operator|)
argument_list|,
name|firstYear
argument_list|,
name|seq
operator|+
literal|6
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CatalogYearTerm
argument_list|(
operator|(
name|year
operator|-
literal|3
operator|)
argument_list|,
name|firstYear
argument_list|,
name|seq
operator|+
literal|9
argument_list|,
literal|false
argument_list|)
block|}
return|;
block|}
specifier|protected
name|String
name|getPlannedCoursesSQL
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.plannedCoursesSQL"
argument_list|,
literal|"select tmpl_id, tmpl_description, tmpl_conc, course_discipline, course_number, choice_group_id, trim(is_critical) from timetable.tmpl_course_view where "
operator|+
literal|"tmpl_description not like '%Statewide%' and tmpl_college=:area and tmpl_major=:major and tmpl_catyear=:catyear and term_seq=:term "
operator|+
literal|"order by tmpl_conc, choice_group_id desc, course_discipline, course_number"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getPlannedPlaceholdersSQL
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.criticalPlaceholdersSQL"
argument_list|,
literal|"select tmpl_id, tmpl_description, tmpl_conc, placeholder_type, placeholder_value from timetable.tmpl_placeholder_view where "
operator|+
literal|"tmpl_description not like '%Statewide%' and tmpl_college=:area and tmpl_major=:major and tmpl_catyear=:catyear and term_seq=:term "
operator|+
literal|"order by tmpl_conc, placeholder_value"
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|XAreaClassificationMajor
argument_list|>
name|getAreaClasfMajors
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|)
block|{
return|return
name|student
operator|.
name|getMajors
argument_list|()
return|;
block|}
specifier|protected
name|DegreeCourseInterface
name|getCourse
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|String
name|subjectArea
parameter_list|,
name|String
name|courseNbr
parameter_list|,
name|boolean
name|critical
parameter_list|)
block|{
name|DegreeCourseInterface
name|course
init|=
operator|new
name|DegreeCourseInterface
argument_list|()
decl_stmt|;
name|course
operator|.
name|setSubject
argument_list|(
name|subjectArea
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourse
argument_list|(
name|courseNbr
argument_list|)
expr_stmt|;
name|course
operator|.
name|setId
argument_list|(
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNbr
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCritical
argument_list|(
name|critical
argument_list|)
expr_stmt|;
name|course
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|?
extends|extends
name|XCourseId
argument_list|>
name|ids
init|=
name|server
operator|.
name|findCourses
argument_list|(
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNbr
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XCourseId
name|id
range|:
name|ids
control|)
block|{
name|XCourse
name|xc
init|=
operator|(
name|id
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|id
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|id
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|xc
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|id
operator|.
name|getCourseName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNbr
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
operator|||
name|id
operator|.
name|getCourseName
argument_list|()
operator|.
name|equals
argument_list|(
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNbr
argument_list|)
condition|)
name|course
operator|.
name|setTitle
argument_list|(
name|xc
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|CourseAssignment
name|ca
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|xc
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|xc
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|xc
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|xc
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setNote
argument_list|(
name|xc
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCreditAbbv
argument_list|(
name|xc
operator|.
name|getCreditAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCreditText
argument_list|(
name|xc
operator|.
name|getCreditText
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|xc
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setHasUniqueName
argument_list|(
name|xc
operator|.
name|hasUniqueName
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setLimit
argument_list|(
name|xc
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|firstChoiceReqs
init|=
literal|0
decl_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|;
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|server
operator|.
name|getRequests
argument_list|(
name|id
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
for|for
control|(
name|XCourseRequest
name|r
range|:
name|requests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
name|enrl
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
operator|&&
name|r
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
operator|&&
name|r
operator|.
name|getCourseIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
name|firstChoiceReqs
operator|++
expr_stmt|;
block|}
name|ca
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setProjected
argument_list|(
name|firstChoiceReqs
argument_list|)
expr_stmt|;
name|course
operator|.
name|addCourse
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|course
operator|.
name|hasCourses
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseAssignment
name|ca
range|:
name|course
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|ca
operator|.
name|getSubject
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|&&
name|ca
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
name|course
operator|.
name|setCourseId
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|course
return|;
block|}
specifier|protected
name|List
argument_list|<
name|XCourse
argument_list|>
name|getPlaceHolderCourses
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|String
name|phType
parameter_list|,
name|String
name|phName
parameter_list|)
block|{
comment|// check provider
if|if
condition|(
operator|!
name|CustomCourseLookupHolder
operator|.
name|hasProvider
argument_list|()
condition|)
return|return
literal|null
return|;
comment|// check placeholder type code
if|if
condition|(
name|phType
operator|==
literal|null
operator|||
operator|!
name|phType
operator|.
name|matches
argument_list|(
name|getUccPlaceHolderType
argument_list|()
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
name|CustomCourseLookupHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|getCourses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|phName
argument_list|,
name|getCriticalPlaceHolderAllowPartialMatch
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isCriticalPlaceholder
parameter_list|(
name|String
name|phValue
parameter_list|)
block|{
return|return
name|phValue
operator|!=
literal|null
operator|&&
name|phValue
operator|.
name|matches
argument_list|(
name|getCriticalPlaceHolderRegExp
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|getDegreePlans
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|)
throws|throws
name|SectioningException
block|{
name|String
name|sqlCourses
init|=
name|getPlannedCoursesSQL
argument_list|()
decl_stmt|;
name|String
name|sqlPlaceholders
init|=
name|getPlannedPlaceholdersSQL
argument_list|()
decl_stmt|;
name|Builder
name|action
init|=
name|helper
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DegreePlanInterface
argument_list|>
name|plans
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DegreePlanInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XAreaClassificationMajor
name|acm
range|:
name|getAreaClasfMajors
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|)
control|)
block|{
for|for
control|(
name|CatalogYearTerm
name|cyt
range|:
name|getCatalogYearTermSequence
argument_list|(
name|server
argument_list|,
name|student
argument_list|,
name|acm
argument_list|)
control|)
block|{
if|if
condition|(
name|cyt
operator|==
literal|null
condition|)
continue|continue;
name|String
name|catyear
init|=
name|cyt
operator|.
name|getCatalogYear
argument_list|()
decl_stmt|;
name|int
name|term
init|=
name|cyt
operator|.
name|getTermSequence
argument_list|()
decl_stmt|;
if|if
condition|(
name|catyear
operator|==
literal|null
condition|)
continue|continue;
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createSQLQuery
argument_list|(
name|sqlCourses
argument_list|)
decl_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"area"
argument_list|,
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"area"
argument_list|)
operator|.
name|setValue
argument_list|(
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"major"
argument_list|,
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"major"
argument_list|)
operator|.
name|setValue
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlCourses
operator|.
name|contains
argument_list|(
literal|":catyear"
argument_list|)
condition|)
block|{
name|query
operator|.
name|setString
argument_list|(
literal|"catyear"
argument_list|,
name|catyear
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"catyear"
argument_list|)
operator|.
name|setValue
argument_list|(
name|catyear
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sqlCourses
operator|.
name|contains
argument_list|(
literal|":term"
argument_list|)
condition|)
block|{
name|query
operator|.
name|setInteger
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|progCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
operator|+
literal|":"
operator|+
name|cyt
operator|.
name|getCatalogYear
argument_list|()
operator|+
literal|":"
operator|+
name|cyt
operator|.
name|getTermSequence
argument_list|()
decl_stmt|;
name|String
name|progName
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|String
name|progConc
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|String
name|subject
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|String
name|courseNbr
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|4
index|]
decl_stmt|;
name|String
name|choiceGroupId
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|5
index|]
decl_stmt|;
name|boolean
name|isCritical
init|=
literal|"Y"
operator|.
name|equals
argument_list|(
name|o
index|[
literal|6
index|]
argument_list|)
decl_stmt|;
name|DegreePlanInterface
name|plan
init|=
name|plans
operator|.
name|get
argument_list|(
name|progCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|plan
operator|==
literal|null
condition|)
block|{
name|plan
operator|=
operator|new
name|DegreePlanInterface
argument_list|()
expr_stmt|;
name|plan
operator|.
name|setId
argument_list|(
name|progCode
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setName
argument_list|(
name|progName
operator|+
literal|" ("
operator|+
name|cyt
operator|.
name|getYear
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setSchool
argument_list|(
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setDegree
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setGroup
argument_list|(
operator|new
name|DegreeGroupInterface
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|.
name|getGroup
argument_list|()
operator|.
name|setChoice
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|progConc
operator|!=
literal|null
operator|&&
operator|!
name|progConc
operator|.
name|isEmpty
argument_list|()
condition|)
name|plan
operator|.
name|setDegree
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
operator|+
literal|"/"
operator|+
name|progConc
argument_list|)
expr_stmt|;
else|else
name|plan
operator|.
name|setActive
argument_list|(
name|cyt
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|plans
operator|.
name|put
argument_list|(
name|progCode
argument_list|,
name|plan
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|choiceGroupId
operator|==
literal|null
operator|||
name|choiceGroupId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|plan
operator|.
name|getGroup
argument_list|()
operator|.
name|addCourse
argument_list|(
name|getCourse
argument_list|(
name|server
argument_list|,
name|subject
argument_list|,
name|courseNbr
argument_list|,
name|isCritical
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DegreeGroupInterface
name|group
init|=
name|plan
operator|.
name|getGroup
argument_list|()
operator|.
name|getGroup
argument_list|(
name|choiceGroupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|group
operator|=
operator|new
name|DegreeGroupInterface
argument_list|()
expr_stmt|;
name|group
operator|.
name|setChoice
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|group
operator|.
name|setId
argument_list|(
name|choiceGroupId
argument_list|)
expr_stmt|;
name|group
operator|.
name|setCritical
argument_list|(
name|isCritical
argument_list|)
expr_stmt|;
name|plan
operator|.
name|getGroup
argument_list|()
operator|.
name|addGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|addCourse
argument_list|(
name|getCourse
argument_list|(
name|server
argument_list|,
name|subject
argument_list|,
name|courseNbr
argument_list|,
name|isCritical
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sqlPlaceholders
operator|!=
literal|null
operator|&&
operator|!
name|sqlPlaceholders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|query
operator|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createSQLQuery
argument_list|(
name|sqlPlaceholders
argument_list|)
expr_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"area"
argument_list|,
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"major"
argument_list|,
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlCourses
operator|.
name|contains
argument_list|(
literal|":catyear"
argument_list|)
condition|)
name|query
operator|.
name|setString
argument_list|(
literal|"catyear"
argument_list|,
name|catyear
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlPlaceholders
operator|.
name|contains
argument_list|(
literal|":term"
argument_list|)
condition|)
name|query
operator|.
name|setInteger
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|progCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
operator|+
literal|":"
operator|+
name|cyt
operator|.
name|getCatalogYear
argument_list|()
operator|+
literal|":"
operator|+
name|cyt
operator|.
name|getTermSequence
argument_list|()
decl_stmt|;
name|String
name|progName
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|String
name|progConc
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|String
name|placType
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|String
name|placName
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|4
index|]
decl_stmt|;
name|DegreePlanInterface
name|plan
init|=
name|plans
operator|.
name|get
argument_list|(
name|progCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|plan
operator|==
literal|null
condition|)
block|{
name|plan
operator|=
operator|new
name|DegreePlanInterface
argument_list|()
expr_stmt|;
name|plan
operator|.
name|setId
argument_list|(
name|progCode
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setName
argument_list|(
name|progName
operator|+
literal|" ("
operator|+
name|cyt
operator|.
name|getYear
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setSchool
argument_list|(
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setDegree
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setGroup
argument_list|(
operator|new
name|DegreeGroupInterface
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|.
name|getGroup
argument_list|()
operator|.
name|setChoice
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|progConc
operator|!=
literal|null
operator|&&
operator|!
name|progConc
operator|.
name|isEmpty
argument_list|()
condition|)
name|plan
operator|.
name|setDegree
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
operator|+
literal|"/"
operator|+
name|progConc
argument_list|)
expr_stmt|;
else|else
name|plan
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|plans
operator|.
name|put
argument_list|(
name|progCode
argument_list|,
name|plan
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|XCourse
argument_list|>
name|phc
init|=
name|getPlaceHolderCourses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|placType
argument_list|,
name|placName
argument_list|)
decl_stmt|;
if|if
condition|(
name|phc
operator|!=
literal|null
operator|&&
operator|!
name|phc
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DegreePlanInterface
operator|.
name|DegreeGroupInterface
name|phg
init|=
operator|new
name|DegreePlanInterface
operator|.
name|DegreeGroupInterface
argument_list|()
decl_stmt|;
name|phg
operator|.
name|setChoice
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|phg
operator|.
name|setPlaceHolder
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|phg
operator|.
name|setDescription
argument_list|(
name|placName
argument_list|)
expr_stmt|;
name|phg
operator|.
name|setId
argument_list|(
name|placName
argument_list|)
expr_stmt|;
name|phg
operator|.
name|setCritical
argument_list|(
name|isCriticalPlaceholder
argument_list|(
name|placName
argument_list|)
argument_list|)
expr_stmt|;
name|DegreePlanInterface
operator|.
name|DegreeCourseInterface
name|course
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XCourse
name|xc
range|:
name|phc
control|)
block|{
if|if
condition|(
name|course
operator|==
literal|null
operator|||
operator|!
name|course
operator|.
name|getSubject
argument_list|()
operator|.
name|equals
argument_list|(
name|xc
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
operator|||
operator|!
name|xc
operator|.
name|getCourseNumber
argument_list|()
operator|.
name|startsWith
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
name|course
operator|=
operator|new
name|DegreePlanInterface
operator|.
name|DegreeCourseInterface
argument_list|()
expr_stmt|;
name|course
operator|.
name|setSubject
argument_list|(
name|iExternalTermProvider
operator|.
name|getExternalSubject
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|xc
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|xc
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourse
argument_list|(
name|iExternalTermProvider
operator|.
name|getExternalCourseNumber
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|xc
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|xc
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|course
operator|.
name|setTitle
argument_list|(
name|xc
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setId
argument_list|(
name|placName
operator|+
literal|"-"
operator|+
name|xc
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseId
argument_list|(
name|xc
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|phg
operator|.
name|addCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
name|CourseAssignment
name|ca
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|xc
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|xc
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|xc
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|xc
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setNote
argument_list|(
name|xc
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCreditAbbv
argument_list|(
name|xc
operator|.
name|getCreditAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCreditText
argument_list|(
name|xc
operator|.
name|getCreditText
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|xc
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setHasUniqueName
argument_list|(
name|xc
operator|.
name|hasUniqueName
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setLimit
argument_list|(
name|xc
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|firstChoiceReqs
init|=
literal|0
decl_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|;
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|server
operator|.
name|getRequests
argument_list|(
name|xc
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
for|for
control|(
name|XCourseRequest
name|r
range|:
name|requests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|xc
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
name|enrl
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
operator|&&
name|r
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
operator|&&
name|r
operator|.
name|getCourseIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|xc
argument_list|)
condition|)
name|firstChoiceReqs
operator|++
expr_stmt|;
block|}
name|ca
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setProjected
argument_list|(
name|firstChoiceReqs
argument_list|)
expr_stmt|;
name|course
operator|.
name|addCourse
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
name|plan
operator|.
name|getGroup
argument_list|()
operator|.
name|addGroup
argument_list|(
name|phg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DegreePlaceHolderInterface
name|placeholder
init|=
operator|new
name|DegreePlaceHolderInterface
argument_list|()
decl_stmt|;
name|placeholder
operator|.
name|setType
argument_list|(
name|placType
argument_list|)
expr_stmt|;
name|placeholder
operator|.
name|setName
argument_list|(
name|placName
argument_list|)
expr_stmt|;
name|plan
operator|.
name|getGroup
argument_list|()
operator|.
name|addPlaceHolder
argument_list|(
name|placeholder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|DegreePlanInterface
argument_list|>
argument_list|(
name|plans
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|,
operator|new
name|Comparator
argument_list|<
name|DegreePlanInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|DegreePlanInterface
name|p1
parameter_list|,
name|DegreePlanInterface
name|p2
parameter_list|)
block|{
return|return
name|p1
operator|.
name|getName
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|p2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
for|for
control|(
name|DegreePlanInterface
name|plan
range|:
name|ret
control|)
block|{
name|String
name|value
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|plan
operator|.
name|getGroup
argument_list|()
operator|.
name|hasCourses
argument_list|()
condition|)
for|for
control|(
name|DegreeCourseInterface
name|c
range|:
name|plan
operator|.
name|getGroup
argument_list|()
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|value
operator|+=
operator|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|c
operator|.
name|getCourseName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|plan
operator|.
name|getGroup
argument_list|()
operator|.
name|hasGroups
argument_list|()
condition|)
for|for
control|(
name|DegreeGroupInterface
name|g
range|:
name|plan
operator|.
name|getGroup
argument_list|()
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|value
operator|+=
operator|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|g
expr_stmt|;
block|}
if|if
condition|(
name|plan
operator|.
name|getGroup
argument_list|()
operator|.
name|hasPlaceHolders
argument_list|()
condition|)
for|for
control|(
name|DegreePlaceHolderInterface
name|p
range|:
name|plan
operator|.
name|getGroup
argument_list|()
operator|.
name|getPlaceHolders
argument_list|()
control|)
block|{
name|value
operator|+=
operator|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|p
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|plan
operator|.
name|isActive
argument_list|()
condition|)
name|helper
operator|.
name|info
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|plan
operator|.
name|getDegree
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|static
class|class
name|CatalogYearTerm
block|{
specifier|private
name|String
name|iCatalogYear
decl_stmt|;
specifier|private
name|int
name|iTermSequence
decl_stmt|;
specifier|private
name|boolean
name|iActive
decl_stmt|;
name|CatalogYearTerm
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|firstYear
parameter_list|,
name|int
name|term
parameter_list|,
name|boolean
name|active
parameter_list|)
block|{
name|iCatalogYear
operator|=
name|Math
operator|.
name|min
argument_list|(
name|year
argument_list|,
name|firstYear
argument_list|)
operator|+
literal|"10"
expr_stmt|;
name|iTermSequence
operator|=
name|term
expr_stmt|;
name|iActive
operator|=
name|active
expr_stmt|;
block|}
specifier|public
name|String
name|getCatalogYear
parameter_list|()
block|{
return|return
name|iCatalogYear
return|;
block|}
specifier|public
name|int
name|getTermSequence
parameter_list|()
block|{
return|return
name|iTermSequence
return|;
block|}
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|iActive
return|;
block|}
specifier|public
name|String
name|getYear
parameter_list|()
block|{
name|int
name|year
init|=
literal|1
operator|+
operator|(
name|iTermSequence
operator|/
literal|3
operator|)
decl_stmt|;
switch|switch
condition|(
name|iTermSequence
operator|%
literal|3
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|(
name|year
operator|==
literal|1
condition|?
literal|"1st"
else|:
name|year
operator|==
literal|2
condition|?
literal|"2nd"
else|:
name|year
operator|==
literal|3
condition|?
literal|"3rd"
else|:
name|year
operator|+
literal|"th"
operator|)
operator|+
literal|" Fall"
return|;
case|case
literal|1
case|:
return|return
operator|(
name|year
operator|==
literal|1
condition|?
literal|"1st"
else|:
name|year
operator|==
literal|2
condition|?
literal|"2nd"
else|:
name|year
operator|==
literal|3
condition|?
literal|"3rd"
else|:
name|year
operator|+
literal|"th"
operator|)
operator|+
literal|" Spring"
return|;
case|case
literal|2
case|:
return|return
operator|(
name|year
operator|==
literal|1
condition|?
literal|"1st"
else|:
name|year
operator|==
literal|2
condition|?
literal|"2nd"
else|:
name|year
operator|==
literal|3
condition|?
literal|"3rd"
else|:
name|year
operator|+
literal|"th"
operator|)
operator|+
literal|" Summer"
return|;
default|default:
return|return
operator|(
name|year
operator|==
literal|1
condition|?
literal|"1st"
else|:
name|year
operator|==
literal|2
condition|?
literal|"2nd"
else|:
name|year
operator|==
literal|3
condition|?
literal|"3rd"
else|:
name|year
operator|+
literal|"th"
operator|)
operator|+
literal|" Year"
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

