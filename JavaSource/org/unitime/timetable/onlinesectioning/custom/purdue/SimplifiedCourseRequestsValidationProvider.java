begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|ChallengeScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|CheckCoursesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|FreeTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|AdvisingStudentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PageAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|AdvisorCourseRequestsValidationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseRequestsValidationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|StudentHoldsCheckProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ApiMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|CheckEligibilityResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|EligibilityProblem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XAdvisorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XFreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|DatabaseServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|StatusPageSuggestionsAction
operator|.
name|StudentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SimplifiedCourseRequestsValidationProvider
implements|implements
name|CourseRequestsValidationProvider
implements|,
name|StudentHoldsCheckProvider
implements|,
name|AdvisorCourseRequestsValidationProvider
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SimplifiedCourseRequestsValidationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Format
argument_list|<
name|Number
argument_list|>
name|sCreditFormat
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.##"
argument_list|)
decl_stmt|;
specifier|private
name|Client
name|iClient
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|public
name|SimplifiedCourseRequestsValidationProvider
parameter_list|()
block|{
name|List
argument_list|<
name|Protocol
argument_list|>
name|protocols
init|=
operator|new
name|ArrayList
argument_list|<
name|Protocol
argument_list|>
argument_list|()
decl_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
expr_stmt|;
name|iClient
operator|=
operator|new
name|Client
argument_list|(
name|protocols
argument_list|)
expr_stmt|;
name|Context
name|cx
init|=
operator|new
name|Context
argument_list|()
decl_stmt|;
name|cx
operator|.
name|getParameters
argument_list|()
operator|.
name|add
argument_list|(
literal|"readTimeout"
argument_list|,
name|getSpecialRegistrationApiReadTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|iClient
operator|.
name|setContext
argument_list|(
name|cx
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiReadTimeout
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.readTimeout"
argument_list|,
literal|"60000"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCheckEligibility
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.checkEligibility"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkEligibility"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiKey
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.apiKey"
argument_list|)
return|;
block|}
specifier|protected
name|ApiMode
name|getSpecialRegistrationApiMode
parameter_list|()
block|{
return|return
name|ApiMode
operator|.
name|valueOf
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.mode.validation"
argument_list|,
literal|"PREREG"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.site"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerUser
parameter_list|(
name|boolean
name|admin
parameter_list|)
block|{
if|if
condition|(
name|admin
condition|)
block|{
name|String
name|user
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.admin.user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
return|return
name|user
return|;
block|}
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.user"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerPassword
parameter_list|(
name|boolean
name|admin
parameter_list|)
block|{
if|if
condition|(
name|admin
condition|)
block|{
name|String
name|pwd
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.admin.password"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pwd
operator|!=
literal|null
condition|)
return|return
name|pwd
return|;
block|}
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.password"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getAdminParameter
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.adminParameter"
argument_list|,
literal|"systemIn"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerErrors
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.prereg.errors"
argument_list|,
literal|"(Holds prevent registration\\.|Student Status prevents registration\\.)"
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isValidationEnabled
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|StudentSectioningStatus
name|status
init|=
name|student
operator|.
name|getEffectiveStatus
argument_list|()
decl_stmt|;
return|return
name|status
operator|==
literal|null
operator|||
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|reqval
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isValidationEnabled
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|)
block|{
name|String
name|status
init|=
name|student
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
name|status
operator|=
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
literal|true
return|;
name|StudentSectioningStatus
name|dbStatus
init|=
name|StudentSectioningStatus
operator|.
name|getPresentStatus
argument_list|(
name|status
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|dbStatus
operator|!=
literal|null
operator|&&
name|dbStatus
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|reqval
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerTerm
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerCampus
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalCampus
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isBannerAdmin
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.admin"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isPreregAdmin
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.prereg.admin"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isUseXE
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specReg.XEeligibility"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isCheckForPin
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specReg.checkForPin"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isWaitListNoAlts
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.waitListNoAlts"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isAdvisedNoAlts
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.advisedNoAlts"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalUniqueId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|XStudentId
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|Gson
name|getGson
parameter_list|(
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|GsonBuilder
name|builder
init|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|DateTime
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|toString
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DateTime
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|builder
operator|.
name|setPrettyPrinting
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|create
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDisableRegistrationWhenNotEligible
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.disableRegistrationWhenNotEligible"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkEligibility
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|EligibilityCheck
name|check
parameter_list|,
name|Student
name|student
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|student
operator|==
literal|null
operator|||
operator|!
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|)
condition|)
return|return;
comment|// Do not check eligibility when validation is disabled
if|if
condition|(
operator|!
name|isValidationEnabled
argument_list|(
name|student
argument_list|)
condition|)
return|return;
if|if
condition|(
name|isUseXE
argument_list|()
condition|)
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|pin
init|=
name|helper
operator|.
name|getPin
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|pin
operator|==
literal|null
operator|||
name|pin
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|student
operator|.
name|hasReleasedPin
argument_list|()
condition|)
name|pin
operator|=
name|student
operator|.
name|getPin
argument_list|()
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|boolean
name|manager
init|=
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
decl_stmt|;
name|boolean
name|admin
init|=
name|manager
operator|&&
name|isBannerAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Checking eligility for "
operator|+
name|student
operator|.
name|getName
argument_list|(
literal|"last-first-middle"
argument_list|)
operator|+
literal|" (term: "
operator|+
name|term
operator|+
literal|", id:"
operator|+
name|getBannerId
argument_list|(
name|student
argument_list|)
operator|+
operator|(
name|admin
condition|?
literal|", admin"
else|:
name|pin
operator|!=
literal|null
condition|?
literal|", pin:"
operator|+
name|pin
else|:
literal|""
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
comment|// First, check student registration status
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getBannerSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setChallengeResponse
argument_list|(
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
name|getBannerUser
argument_list|(
name|manager
argument_list|)
argument_list|,
name|getBannerPassword
argument_list|(
name|manager
argument_list|)
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|XEInterface
operator|.
name|RegisterResponse
name|original
init|=
literal|null
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"bannerId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"bannerId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|admin
operator|||
name|isPreregAdmin
argument_list|()
condition|)
block|{
name|String
name|param
init|=
name|getAdminParameter
argument_list|()
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
name|param
argument_list|,
literal|"SB"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|param
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"SB"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pin
operator|!=
literal|null
operator|&&
operator|!
name|pin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"altPin"
argument_list|,
name|pin
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|setValue
argument_list|(
name|pin
argument_list|)
expr_stmt|;
block|}
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|XEInterface
operator|.
name|ErrorResponse
name|response
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|ErrorResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|ErrorResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"exception"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|XEInterface
operator|.
name|Error
name|error
init|=
name|response
operator|.
name|getError
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|message
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|message
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|description
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|description
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|errorMessage
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|errorMessage
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|exception
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
finally|finally
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
name|current
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|TYPE_LIST
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
operator|!
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
name|original
operator|=
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Check status, memorize enrolled sections
if|if
condition|(
name|original
operator|!=
literal|null
operator|&&
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Current registration: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
operator|&&
name|original
operator|.
name|maxHours
operator|!=
literal|null
condition|)
name|check
operator|.
name|setMaxCredit
argument_list|(
name|original
operator|.
name|maxHours
argument_list|)
expr_stmt|;
name|String
name|bannerErrors
init|=
name|getBannerErrors
argument_list|()
decl_stmt|;
name|String
name|error
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
operator|&&
name|original
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|m
range|:
name|original
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
name|bannerErrors
operator|==
literal|null
operator|||
name|m
operator|.
name|matches
argument_list|(
name|bannerErrors
argument_list|)
condition|)
block|{
if|if
condition|(
name|error
operator|==
literal|null
condition|)
name|error
operator|=
name|m
expr_stmt|;
else|else
name|error
operator|+=
operator|(
name|error
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|?
literal|" "
else|:
literal|", "
operator|)
operator|+
name|m
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isDisableRegistrationWhenNotEligible
argument_list|()
condition|)
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|,
name|helper
operator|.
name|isAdmin
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|exceptionFailedEligibilityCheck
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|original
operator|!=
literal|null
operator|&&
name|original
operator|.
name|maxHours
operator|!=
literal|null
operator|&&
name|original
operator|.
name|maxHours
operator|>
literal|0
operator|&&
name|original
operator|.
name|maxHours
operator|!=
name|student
operator|.
name|getMaxCredit
argument_list|()
condition|)
block|{
name|Student
name|dbStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
name|dbStudent
operator|.
name|setMaxCredit
argument_list|(
name|original
operator|.
name|maxHours
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbStudent
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|server
operator|instanceof
name|DatabaseServer
operator|)
condition|)
block|{
name|XStudent
name|xs
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|xs
operator|!=
literal|null
condition|)
block|{
name|xs
operator|.
name|setMaxCredit
argument_list|(
name|original
operator|.
name|maxHours
argument_list|)
expr_stmt|;
name|server
operator|.
name|update
argument_list|(
name|xs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|info
argument_list|(
literal|"Banner eligibility failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"Banner eligibility failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckEligibility
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
name|CheckEligibilityResponse
name|eligibility
init|=
operator|(
name|CheckEligibilityResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|CheckEligibilityResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|CheckEligibilityResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Eligibility: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|eligibility
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|eligibility
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|eligibility
operator|.
name|status
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|eligibility
operator|.
name|message
operator|==
literal|null
operator|||
name|eligibility
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to check student eligibility ("
operator|+
name|eligibility
operator|.
name|status
operator|+
literal|")."
else|:
name|eligibility
operator|.
name|message
argument_list|)
throw|;
if|if
condition|(
name|eligibility
operator|.
name|data
operator|!=
literal|null
operator|&&
name|eligibility
operator|.
name|data
operator|.
name|eligibilityProblems
operator|!=
literal|null
condition|)
block|{
name|String
name|m
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EligibilityProblem
name|p
range|:
name|eligibility
operator|.
name|data
operator|.
name|eligibilityProblems
control|)
if|if
condition|(
name|m
operator|==
literal|null
condition|)
name|m
operator|=
name|p
operator|.
name|message
expr_stmt|;
else|else
name|m
operator|+=
literal|"\n"
operator|+
name|p
operator|.
name|message
expr_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isDisableRegistrationWhenNotEligible
argument_list|()
condition|)
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|,
name|helper
operator|.
name|isAdmin
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|exceptionFailedEligibilityCheck
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|pin
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|eligibility
operator|.
name|data
operator|!=
literal|null
operator|&&
name|eligibility
operator|.
name|data
operator|.
name|PIN
operator|!=
literal|null
operator|&&
operator|!
name|eligibility
operator|.
name|data
operator|.
name|PIN
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
literal|"NA"
operator|.
name|equals
argument_list|(
name|eligibility
operator|.
name|data
operator|.
name|PIN
argument_list|)
condition|)
name|pin
operator|=
name|eligibility
operator|.
name|data
operator|.
name|PIN
expr_stmt|;
name|Float
name|maxCredit
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|eligibility
operator|.
name|maxCredit
operator|!=
literal|null
operator|&&
name|eligibility
operator|.
name|maxCredit
operator|>
literal|0
condition|)
block|{
name|maxCredit
operator|=
name|eligibility
operator|.
name|maxCredit
expr_stmt|;
name|check
operator|.
name|setMaxCredit
argument_list|(
name|eligibility
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|maxCredit
operator|!=
literal|null
operator|&&
operator|!
name|maxCredit
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|pin
operator|!=
literal|null
operator|&&
operator|!
name|pin
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getPin
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|Student
name|dbStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCredit
operator|!=
literal|null
condition|)
name|dbStudent
operator|.
name|setMaxCredit
argument_list|(
name|maxCredit
argument_list|)
expr_stmt|;
if|if
condition|(
name|pin
operator|!=
literal|null
condition|)
name|dbStudent
operator|.
name|setPin
argument_list|(
name|pin
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbStudent
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|server
operator|instanceof
name|DatabaseServer
operator|)
condition|)
block|{
name|XStudent
name|xs
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|xs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|maxCredit
operator|!=
literal|null
condition|)
name|xs
operator|.
name|setMaxCredit
argument_list|(
name|maxCredit
argument_list|)
expr_stmt|;
if|if
condition|(
name|pin
operator|!=
literal|null
condition|)
name|xs
operator|.
name|setPin
argument_list|(
name|pin
argument_list|)
expr_stmt|;
name|server
operator|.
name|update
argument_list|(
name|xs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"Null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|List
argument_list|<
name|RequestedCourse
argument_list|>
name|getOverCreditRequests
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|,
name|float
name|maxCredit
parameter_list|)
block|{
name|List
argument_list|<
name|RequestedCourse
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|RequestedCourse
argument_list|>
argument_list|()
decl_stmt|;
comment|// Step 1, only check primary courses
name|float
name|primary
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
name|primary
operator|+=
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
if|if
condition|(
name|primary
operator|>
name|maxCredit
condition|)
name|ret
operator|.
name|add
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ret
return|;
comment|// Step 2, check alternatives
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|float
name|credit
init|=
operator|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|hasCredit
argument_list|()
condition|?
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getCreditMin
argument_list|()
else|:
literal|0f
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|float
name|alt
init|=
operator|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
name|i
argument_list|)
operator|.
name|hasCredit
argument_list|()
condition|?
name|r
operator|.
name|getRequestedCourse
argument_list|(
name|i
argument_list|)
operator|.
name|getCreditMin
argument_list|()
else|:
literal|0f
operator|)
decl_stmt|;
if|if
condition|(
name|primary
operator|-
name|credit
operator|+
name|alt
operator|>
name|maxCredit
condition|)
name|ret
operator|.
name|add
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ret
return|;
comment|// Step 3, check alternatives
name|List
argument_list|<
name|Float
argument_list|>
name|credits
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|float
name|total
init|=
literal|0f
decl_stmt|;
name|RequestedCourse
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|Float
name|credit
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
if|if
condition|(
name|credit
operator|==
literal|null
operator|||
name|credit
operator|<
name|rc
operator|.
name|getCreditMin
argument_list|()
condition|)
block|{
name|credit
operator|=
name|rc
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
if|if
condition|(
name|total
operator|+
name|credit
operator|>
name|maxCredit
condition|)
name|ret
operator|.
name|add
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
name|credits
operator|.
name|add
argument_list|(
name|credit
argument_list|)
expr_stmt|;
name|total
operator|+=
name|credit
expr_stmt|;
block|}
name|last
operator|=
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ret
return|;
comment|// Step 4, check alternate courses
name|Collections
operator|.
name|sort
argument_list|(
name|credits
argument_list|)
expr_stmt|;
name|float
name|low
init|=
operator|(
name|credits
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0f
else|:
name|credits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
name|RequestedCourse
name|first
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
if|if
condition|(
name|total
operator|+
name|rc
operator|.
name|getCreditMin
argument_list|()
operator|-
name|low
operator|>
name|maxCredit
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|rc
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
name|first
operator|=
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ret
return|;
comment|// Fall back: return first alternate course or the last requested course
name|ret
operator|.
name|add
argument_list|(
name|first
operator|!=
literal|null
condition|?
name|first
else|:
name|last
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|)
throws|throws
name|SectioningException
block|{
name|XStudent
name|original
init|=
operator|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return;
comment|// Do not check when validation is disabled
if|if
condition|(
operator|!
name|isValidationEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|original
argument_list|)
condition|)
return|return;
name|Integer
name|ORD_UNITIME
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|advisorCoursesNoAlt
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|hasAdvisorRequests
argument_list|()
operator|&&
name|isAdvisedNoAlts
argument_list|()
condition|)
for|for
control|(
name|XAdvisorRequest
name|ar
range|:
name|original
operator|.
name|getAdvisorRequests
argument_list|()
control|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XAdvisorRequest
name|x
range|:
name|original
operator|.
name|getAdvisorRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getPriority
argument_list|()
operator|==
name|ar
operator|.
name|getPriority
argument_list|()
condition|)
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
literal|1
operator|&&
name|ar
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
condition|)
name|advisorCoursesNoAlt
operator|.
name|add
argument_list|(
name|ar
operator|.
name|getCourseId
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|original
operator|.
name|hasAdvisorRequests
argument_list|()
operator|&&
name|isWaitListNoAlts
argument_list|()
condition|)
for|for
control|(
name|XAdvisorRequest
name|ar
range|:
name|original
operator|.
name|getAdvisorRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|ar
operator|.
name|isWaitList
argument_list|()
operator|&&
operator|!
name|ar
operator|.
name|isSubstitute
argument_list|()
condition|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XAdvisorRequest
name|x
range|:
name|original
operator|.
name|getAdvisorRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getPriority
argument_list|()
operator|==
name|ar
operator|.
name|getPriority
argument_list|()
operator|&&
operator|!
name|x
operator|.
name|isSubstitute
argument_list|()
condition|)
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
literal|1
operator|&&
name|ar
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
condition|)
name|advisorCoursesNoAlt
operator|.
name|add
argument_list|(
name|ar
operator|.
name|getCourseId
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|RequestedCourse
name|rc
init|=
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|rc
operator|.
name|isReadOnly
argument_list|()
operator|&&
operator|!
name|advisorCoursesNoAlt
operator|.
name|contains
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NO_ALT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.courseHasNoAlt"
argument_list|,
literal|"No alternative course provided."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|ORD_UNITIME
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
name|request
operator|.
name|getCourse
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|boolean
name|hasCourse
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|q
init|=
name|request
operator|.
name|getCourse
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|q
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|isCourse
argument_list|()
condition|)
block|{
name|hasCourse
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|hasCourse
condition|)
block|{
name|String
name|free
init|=
literal|""
decl_stmt|;
for|for
control|(
name|FreeTime
name|ft
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getFreeTime
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|free
operator|.
name|isEmpty
argument_list|()
condition|)
name|free
operator|+=
literal|", "
expr_stmt|;
name|free
operator|+=
name|ft
operator|.
name|toString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|addConfirmationMessage
argument_list|(
literal|0l
argument_list|,
name|CONSTANTS
operator|.
name|freePrefix
argument_list|()
operator|+
name|free
argument_list|,
literal|"FREE-TIME"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.freeTimeHighPriority"
argument_list|,
literal|"High priority free time"
argument_list|)
argument_list|,
name|ORD_UNITIME
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|minCreditLimit
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.minCreditCheck"
argument_list|)
decl_stmt|;
name|float
name|minCredit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
name|minCredit
operator|+=
name|rc
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|request
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|SAVED
argument_list|)
expr_stmt|;
if|if
condition|(
name|minCreditLimit
operator|!=
literal|null
operator|&&
name|minCredit
operator|>
literal|0
operator|&&
name|minCredit
operator|<
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCreditLimit
argument_list|)
operator|&&
operator|(
name|original
operator|.
name|getMaxCredit
argument_list|()
operator|==
literal|null
operator|||
name|original
operator|.
name|getMaxCredit
argument_list|()
operator|>
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCreditLimit
argument_list|)
operator|)
condition|)
block|{
name|request
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.minCredit"
argument_list|,
literal|"Less than {min} credit hours requested."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{min}"
argument_list|,
name|minCreditLimit
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|minCredit
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|CREDIT_LOW
argument_list|)
expr_stmt|;
block|}
name|Float
name|maxCredit
init|=
name|original
operator|.
name|getMaxCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxCredit
operator|==
literal|null
condition|)
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxCredit
operator|<
name|request
operator|.
name|getCredit
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|getOverCreditRequests
argument_list|(
name|request
argument_list|,
name|maxCredit
argument_list|)
control|)
block|{
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"CREDIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|ORD_UNITIME
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|CREDIT_HIGH
argument_list|)
expr_stmt|;
block|}
name|String
name|filter
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.OnlineOnlyStudentFilter"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|new
name|Query
argument_list|(
name|filter
argument_list|)
operator|.
name|match
argument_list|(
operator|new
name|StudentMatcher
argument_list|(
name|original
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
argument_list|,
name|server
argument_list|,
literal|false
argument_list|)
argument_list|)
condition|)
block|{
comment|// online only
name|String
name|cn
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.OnlineOnlyCourseNameRegExp"
argument_list|)
decl_stmt|;
name|String
name|im
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.OnlineOnlyInstructionalModeRegExp"
argument_list|)
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|XCourseId
name|course
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
if|if
condition|(
name|cn
operator|!=
literal|null
operator|&&
operator|!
name|cn
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|matches
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-ONLINE"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.onlineStudentReqResidentialCourse"
argument_list|,
literal|"No online-only option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|ORD_UNITIME
argument_list|)
expr_stmt|;
name|RequestPriority
name|rp
init|=
name|request
operator|.
name|getRequestPriority
argument_list|(
operator|new
name|RequestedCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rp
operator|!=
literal|null
condition|)
name|rp
operator|.
name|getRequest
argument_list|()
operator|.
name|getRequestedCourse
argument_list|(
name|rp
operator|.
name|getChoice
argument_list|()
argument_list|)
operator|.
name|setInactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|im
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasMatchingConfig
init|=
literal|false
decl_stmt|;
name|InstructionalOffering
name|offering
init|=
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
name|InstructionalMethod
name|configIm
init|=
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|im
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|configIm
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|configIm
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
name|im
argument_list|)
condition|)
block|{
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasMatchingConfig
condition|)
block|{
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-ONLINE"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.onlineStudentReqResidentialCourse"
argument_list|,
literal|"No online-only option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|ORD_UNITIME
argument_list|)
expr_stmt|;
name|RequestPriority
name|rp
init|=
name|request
operator|.
name|getRequestPriority
argument_list|(
operator|new
name|RequestedCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rp
operator|!=
literal|null
condition|)
name|rp
operator|.
name|getRequest
argument_list|()
operator|.
name|getRequestedCourse
argument_list|(
name|rp
operator|.
name|getChoice
argument_list|()
argument_list|)
operator|.
name|setInactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|else if
condition|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.OnlineOnlyExclusiveCourses"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// exclusive
name|String
name|cn
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.OnlineOnlyCourseNameRegExp"
argument_list|)
decl_stmt|;
name|String
name|im
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.ResidentialInstructionalModeRegExp"
argument_list|)
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|XCourseId
name|course
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
if|if
condition|(
name|cn
operator|!=
literal|null
operator|&&
operator|!
name|cn
operator|.
name|isEmpty
argument_list|()
operator|&&
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|matches
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-RESIDENTIAL"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.residentialStudentReqOnlineCourse"
argument_list|,
literal|"No residential option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|ORD_UNITIME
argument_list|)
expr_stmt|;
name|RequestPriority
name|rp
init|=
name|request
operator|.
name|getRequestPriority
argument_list|(
operator|new
name|RequestedCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rp
operator|!=
literal|null
condition|)
name|rp
operator|.
name|getRequest
argument_list|()
operator|.
name|getRequestedCourse
argument_list|(
name|rp
operator|.
name|getChoice
argument_list|()
argument_list|)
operator|.
name|setInactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|im
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasMatchingConfig
init|=
literal|false
decl_stmt|;
name|InstructionalOffering
name|offering
init|=
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
name|InstructionalMethod
name|configIm
init|=
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|im
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|configIm
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|configIm
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
name|im
argument_list|)
condition|)
block|{
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasMatchingConfig
condition|)
block|{
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-RESIDENTIAL"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.residentialStudentReqOnlineCourse"
argument_list|,
literal|"No residential option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|ORD_UNITIME
argument_list|)
expr_stmt|;
name|RequestPriority
name|rp
init|=
name|request
operator|.
name|getRequestPriority
argument_list|(
operator|new
name|RequestedCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rp
operator|!=
literal|null
condition|)
name|rp
operator|.
name|getRequest
argument_list|()
operator|.
name|getRequestedCourse
argument_list|(
name|rp
operator|.
name|getChoice
argument_list|()
argument_list|)
operator|.
name|setInactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateStudent
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|Student
name|student
parameter_list|,
name|Builder
name|action
parameter_list|)
throws|throws
name|SectioningException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revalidateStudent
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|Student
name|student
parameter_list|,
name|Builder
name|action
parameter_list|)
throws|throws
name|SectioningException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|,
name|CheckCoursesResponse
name|response
parameter_list|)
throws|throws
name|SectioningException
block|{
name|XStudent
name|original
init|=
operator|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|MESSAGES
operator|.
name|exceptionEnrollNotStudent
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
comment|// Do not validate when validation is disabled
if|if
condition|(
operator|!
name|isValidationEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|original
argument_list|)
condition|)
return|return;
name|Integer
name|CONF_NONE
init|=
literal|null
decl_stmt|;
name|Integer
name|CONF_UNITIME
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|coursesWithNotAlt
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getCourseIds
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|cr
operator|.
name|isAlternative
argument_list|()
condition|)
name|coursesWithNotAlt
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getCourseIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|advisorCoursesNoAlt
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|hasAdvisorRequests
argument_list|()
operator|&&
name|isAdvisedNoAlts
argument_list|()
condition|)
for|for
control|(
name|XAdvisorRequest
name|ar
range|:
name|original
operator|.
name|getAdvisorRequests
argument_list|()
control|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XAdvisorRequest
name|x
range|:
name|original
operator|.
name|getAdvisorRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getPriority
argument_list|()
operator|==
name|ar
operator|.
name|getPriority
argument_list|()
condition|)
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
literal|1
operator|&&
name|ar
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
condition|)
name|advisorCoursesNoAlt
operator|.
name|add
argument_list|(
name|ar
operator|.
name|getCourseId
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|original
operator|.
name|hasAdvisorRequests
argument_list|()
operator|&&
name|isWaitListNoAlts
argument_list|()
condition|)
for|for
control|(
name|XAdvisorRequest
name|ar
range|:
name|original
operator|.
name|getAdvisorRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|ar
operator|.
name|isWaitList
argument_list|()
operator|&&
operator|!
name|ar
operator|.
name|isSubstitute
argument_list|()
condition|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XAdvisorRequest
name|x
range|:
name|original
operator|.
name|getAdvisorRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getPriority
argument_list|()
operator|==
name|ar
operator|.
name|getPriority
argument_list|()
operator|&&
operator|!
name|x
operator|.
name|isSubstitute
argument_list|()
condition|)
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
literal|1
operator|&&
name|ar
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
condition|)
name|advisorCoursesNoAlt
operator|.
name|add
argument_list|(
name|ar
operator|.
name|getCourseId
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|questionNoAlt
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|RequestedCourse
name|rc
init|=
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|rc
operator|.
name|isReadOnly
argument_list|()
operator|&&
operator|!
name|advisorCoursesNoAlt
operator|.
name|contains
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NO_ALT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.courseHasNoAlt"
argument_list|,
literal|"No alternative course provided."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
operator|!
name|coursesWithNotAlt
operator|.
name|contains
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|?
name|CONF_UNITIME
else|:
name|CONF_NONE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|coursesWithNotAlt
operator|.
name|contains
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|questionNoAlt
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Check for critical course removals
name|boolean
name|questionDropCritical
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|isCritical
argument_list|()
operator|&&
operator|!
name|cr
operator|.
name|isAlternative
argument_list|()
operator|&&
operator|!
name|cr
operator|.
name|getCourseIds
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|hasCourse
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XCourseId
name|course
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getRequestPriority
argument_list|(
operator|new
name|RequestedCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hasCourse
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasCourse
condition|)
block|{
name|XCourseId
name|course
init|=
name|cr
operator|.
name|getCourseIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"DROP_CRIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.courseDropCrit"
argument_list|,
literal|"Critical course has been removed."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|)
expr_stmt|;
name|questionDropCritical
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Check for missing critical courses that have been recommended by the advisor
name|boolean
name|questionMissingAdvisorCritical
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|hasAdvisorRequests
argument_list|()
condition|)
block|{
for|for
control|(
name|XAdvisorRequest
name|ar
range|:
name|original
operator|.
name|getAdvisorRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|ar
operator|.
name|getAlternative
argument_list|()
operator|==
literal|0
operator|&&
operator|!
name|ar
operator|.
name|isSubstitute
argument_list|()
operator|&&
name|ar
operator|.
name|isCritical
argument_list|()
operator|&&
name|ar
operator|.
name|hasCourseId
argument_list|()
condition|)
block|{
name|RequestPriority
name|arp
init|=
name|request
operator|.
name|getRequestPriority
argument_list|(
operator|new
name|RequestedCourse
argument_list|(
name|ar
operator|.
name|getCourseId
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|ar
operator|.
name|getCourseId
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|arp
operator|==
literal|null
operator|||
name|arp
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
name|boolean
name|hasAlt
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XAdvisorRequest
name|alt
range|:
name|original
operator|.
name|getAdvisorRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|alt
operator|.
name|getPriority
argument_list|()
operator|!=
name|ar
operator|.
name|getPriority
argument_list|()
operator|||
operator|!
name|alt
operator|.
name|hasCourseId
argument_list|()
operator|||
name|alt
operator|.
name|isSubstitute
argument_list|()
operator|||
operator|!
name|alt
operator|.
name|isCritical
argument_list|()
operator|||
name|ar
operator|.
name|getAlternative
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|RequestPriority
name|altrp
init|=
name|request
operator|.
name|getRequestPriority
argument_list|(
operator|new
name|RequestedCourse
argument_list|(
name|alt
operator|.
name|getCourseId
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|alt
operator|.
name|getCourseId
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|altrp
operator|!=
literal|null
operator|&&
operator|!
name|altrp
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasAlt
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|ar
operator|.
name|getCourseId
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|ar
operator|.
name|getCourseId
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"DROP_CRIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.courseMissingAdvisedCritical"
argument_list|,
literal|"Missing critical course that has been recommended by the advisor."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|ar
operator|.
name|getCourseId
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|)
expr_stmt|;
name|questionMissingAdvisorCritical
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|String
name|filter
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.OnlineOnlyStudentFilter"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|questionRestrictionsNotMet
init|=
literal|false
decl_stmt|;
name|boolean
name|onlineOnly
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|new
name|Query
argument_list|(
name|filter
argument_list|)
operator|.
name|match
argument_list|(
operator|new
name|StudentMatcher
argument_list|(
name|original
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
argument_list|,
name|server
argument_list|,
literal|false
argument_list|)
argument_list|)
condition|)
block|{
comment|// online only
name|onlineOnly
operator|=
literal|true
expr_stmt|;
name|String
name|cn
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.OnlineOnlyCourseNameRegExp"
argument_list|)
decl_stmt|;
name|String
name|im
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.OnlineOnlyInstructionalModeRegExp"
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|course
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|cn
operator|!=
literal|null
operator|&&
operator|!
name|cn
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|matches
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|boolean
name|confirm
init|=
operator|(
name|original
operator|.
name|getRequestForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|==
literal|null
operator|)
decl_stmt|;
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-ONLINE"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.onlineStudentReqResidentialCourse"
argument_list|,
literal|"No online-only option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|confirm
condition|?
name|CONF_UNITIME
else|:
name|CONF_NONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|confirm
condition|)
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|im
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasMatchingConfig
init|=
literal|false
decl_stmt|;
name|CourseOffering
name|co
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|!=
literal|null
condition|)
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
name|InstructionalMethod
name|configIm
init|=
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|im
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|configIm
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
name|im
argument_list|)
condition|)
block|{
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasMatchingConfig
condition|)
block|{
name|boolean
name|confirm
init|=
operator|(
name|original
operator|.
name|getRequestForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|==
literal|null
operator|)
decl_stmt|;
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-ONLINE"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.onlineStudentReqResidentialCourse"
argument_list|,
literal|"No online-only option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|confirm
condition|?
name|CONF_UNITIME
else|:
name|CONF_NONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|confirm
condition|)
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|course
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|cn
operator|!=
literal|null
operator|&&
operator|!
name|cn
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|matches
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|boolean
name|confirm
init|=
operator|(
name|original
operator|.
name|getRequestForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|==
literal|null
operator|)
decl_stmt|;
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-ONLINE"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.onlineStudentReqResidentialCourse"
argument_list|,
literal|"No online-only option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|confirm
condition|?
name|CONF_UNITIME
else|:
name|CONF_NONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|confirm
condition|)
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|im
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasMatchingConfig
init|=
literal|false
decl_stmt|;
name|CourseOffering
name|co
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|!=
literal|null
condition|)
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
name|InstructionalMethod
name|configIm
init|=
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|im
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|configIm
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|configIm
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
name|im
argument_list|)
condition|)
block|{
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasMatchingConfig
condition|)
block|{
name|boolean
name|confirm
init|=
operator|(
name|original
operator|.
name|getRequestForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|==
literal|null
operator|)
decl_stmt|;
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-ONLINE"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.onlineStudentReqResidentialCourse"
argument_list|,
literal|"No online-only option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|confirm
condition|?
name|CONF_UNITIME
else|:
name|CONF_NONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|confirm
condition|)
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|else if
condition|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.OnlineOnlyExclusiveCourses"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// exclusive
name|String
name|cn
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.OnlineOnlyCourseNameRegExp"
argument_list|)
decl_stmt|;
name|String
name|im
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.ResidentialInstructionalModeRegExp"
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|course
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|cn
operator|!=
literal|null
operator|&&
operator|!
name|cn
operator|.
name|isEmpty
argument_list|()
operator|&&
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|matches
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|boolean
name|confirm
init|=
operator|(
name|original
operator|.
name|getRequestForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|==
literal|null
operator|)
decl_stmt|;
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-RESIDENTIAL"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.residentialStudentReqOnlineCourse"
argument_list|,
literal|"No residential option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|confirm
condition|?
name|CONF_UNITIME
else|:
name|CONF_NONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|confirm
condition|)
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|im
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasMatchingConfig
init|=
literal|false
decl_stmt|;
name|CourseOffering
name|co
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|!=
literal|null
condition|)
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
name|InstructionalMethod
name|configIm
init|=
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|im
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|configIm
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|configIm
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
name|im
argument_list|)
condition|)
block|{
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasMatchingConfig
condition|)
block|{
name|boolean
name|confirm
init|=
operator|(
name|original
operator|.
name|getRequestForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|==
literal|null
operator|)
decl_stmt|;
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-RESIDENTIAL"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.residentialStudentReqOnlineCourse"
argument_list|,
literal|"No residential option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|confirm
condition|?
name|CONF_UNITIME
else|:
name|CONF_NONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|confirm
condition|)
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|course
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|cn
operator|!=
literal|null
operator|&&
operator|!
name|cn
operator|.
name|isEmpty
argument_list|()
operator|&&
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|matches
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|boolean
name|confirm
init|=
operator|(
name|original
operator|.
name|getRequestForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|==
literal|null
operator|)
decl_stmt|;
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-RESIDENTIAL"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.residentialStudentReqOnlineCourse"
argument_list|,
literal|"No residential option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|confirm
condition|?
name|CONF_UNITIME
else|:
name|CONF_NONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|confirm
condition|)
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|im
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasMatchingConfig
init|=
literal|false
decl_stmt|;
name|CourseOffering
name|co
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|!=
literal|null
condition|)
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
name|InstructionalMethod
name|configIm
init|=
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|im
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|configIm
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|configIm
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
name|im
argument_list|)
condition|)
block|{
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasMatchingConfig
condition|)
block|{
name|boolean
name|confirm
init|=
operator|(
name|original
operator|.
name|getRequestForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|==
literal|null
operator|)
decl_stmt|;
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-RESIDENTIAL"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.residentialStudentReqOnlineCourse"
argument_list|,
literal|"No residential option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|confirm
condition|?
name|CONF_UNITIME
else|:
name|CONF_NONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|confirm
condition|)
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|boolean
name|questionFreeTime
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
name|request
operator|.
name|getCourse
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|boolean
name|hasCourse
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|q
init|=
name|request
operator|.
name|getCourse
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|q
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|isCourse
argument_list|()
condition|)
block|{
name|hasCourse
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|String
name|free
init|=
literal|""
decl_stmt|;
name|boolean
name|confirm
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FreeTime
name|ft
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getFreeTime
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|free
operator|.
name|isEmpty
argument_list|()
condition|)
name|free
operator|+=
literal|", "
expr_stmt|;
name|free
operator|+=
name|ft
operator|.
name|toString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|confirm
condition|)
block|{
name|XFreeTimeRequest
name|ftr
init|=
name|original
operator|.
name|getRequestForFreeTime
argument_list|(
name|ft
argument_list|)
decl_stmt|;
if|if
condition|(
name|ftr
operator|==
literal|null
condition|)
block|{
name|confirm
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|hasCourse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|q
init|=
name|request
operator|.
name|getCourse
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|q
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|isCourse
argument_list|()
condition|)
block|{
name|XCourseRequest
name|cr
init|=
name|original
operator|.
name|getRequestForCourse
argument_list|(
name|q
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cr
operator|==
literal|null
operator|||
name|cr
operator|.
name|getPriority
argument_list|()
operator|<
name|ftr
operator|.
name|getPriority
argument_list|()
condition|)
block|{
name|confirm
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|hasCourse
condition|)
name|response
operator|.
name|addMessage
argument_list|(
literal|0l
argument_list|,
name|CONSTANTS
operator|.
name|freePrefix
argument_list|()
operator|+
name|free
argument_list|,
literal|"FREE-TIME"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.freeTimeHighPriority"
argument_list|,
literal|"High priority free time"
argument_list|)
argument_list|,
name|confirm
condition|?
name|CONF_UNITIME
else|:
name|CONF_NONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|confirm
condition|)
name|questionFreeTime
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|String
name|creditError
init|=
literal|null
decl_stmt|;
name|Float
name|maxCredit
init|=
name|original
operator|.
name|getMaxCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxCredit
operator|==
literal|null
condition|)
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxCredit
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getCredit
argument_list|()
operator|>
name|maxCredit
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|getOverCreditRequests
argument_list|(
name|request
argument_list|,
name|maxCredit
argument_list|)
control|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"CREDIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|CONF_NONE
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|CREDIT_HIGH
argument_list|)
expr_stmt|;
name|creditError
operator|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCreditError"
argument_list|,
literal|"Maximum of {max} credit hours exceeded.\nYou may not be able to get a full schedule."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|minCreditLimit
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.minCreditCheck"
argument_list|)
decl_stmt|;
name|float
name|minCredit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
name|minCredit
operator|+=
name|rc
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|creditError
operator|==
literal|null
operator|&&
name|minCreditLimit
operator|!=
literal|null
operator|&&
name|minCredit
operator|<
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCreditLimit
argument_list|)
operator|&&
operator|(
name|maxCredit
operator|==
literal|null
operator|||
name|maxCredit
operator|>
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCreditLimit
argument_list|)
operator|)
condition|)
block|{
name|creditError
operator|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.minCredit"
argument_list|,
literal|"Less than {min} credit hours requested."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{min}"
argument_list|,
name|minCreditLimit
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|minCredit
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.minCredit"
argument_list|,
literal|"Less than {min} credit hours requested."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{min}"
argument_list|,
name|minCreditLimit
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|minCredit
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|CREDIT_LOW
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|getConfirms
argument_list|()
operator|.
name|contains
argument_list|(
name|CONF_UNITIME
argument_list|)
condition|)
block|{
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.unitimeProblemsFound"
argument_list|,
literal|"The following issues have been detected:"
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|response
operator|.
name|addConfirmation
argument_list|(
literal|""
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|creditError
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|addConfirmation
argument_list|(
name|creditError
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|questionNoAlt
condition|)
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.noAlternatives"
argument_list|,
operator|(
name|creditError
operator|!=
literal|null
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
literal|"One or more of the newly requested courses have no alternatives provided. You may not be able to get a full schedule because you did not provide an alternative course."
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|questionDropCritical
condition|)
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.dropCritical"
argument_list|,
operator|(
name|creditError
operator|!=
literal|null
operator|||
name|questionNoAlt
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
literal|"One or more courses that are marked as critical in your degree plan have been removed. This may prohibit progress towards degree. Please consult with your academic advisor."
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|questionMissingAdvisorCritical
condition|)
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.missingAdvisedCritical"
argument_list|,
operator|(
name|creditError
operator|!=
literal|null
operator|||
name|questionNoAlt
operator|||
name|questionDropCritical
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
literal|"One or more courses that are marked as critical in your degree plan and that have been listed by your advisor have not been requested. This may prohibit progress towards degree. Please see you advisor course requests and/or consult with your academic advisor."
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|questionRestrictionsNotMet
condition|)
block|{
if|if
condition|(
name|onlineOnly
condition|)
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.onlineOnlyNotMet"
argument_list|,
operator|(
name|creditError
operator|!=
literal|null
operator|||
name|questionNoAlt
operator|||
name|questionDropCritical
operator|||
name|questionMissingAdvisorCritical
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
literal|"One or more of the newly requested courses have no online-only option at the moment. You may not be able to get a full schedule because becasue you are not allowed to take these courses."
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|6
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.residentialNotMet"
argument_list|,
operator|(
name|creditError
operator|!=
literal|null
operator|||
name|questionNoAlt
operator|||
name|questionDropCritical
operator|||
name|questionMissingAdvisorCritical
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
literal|"One or more of the newly requested courses have no residential option at the moment. You may not be able to get a full schedule because becasue you are not allowed to take these courses."
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|questionFreeTime
condition|)
block|{
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.freeTimeRequested"
argument_list|,
operator|(
name|creditError
operator|!=
literal|null
operator|||
name|questionNoAlt
operator|||
name|questionDropCritical
operator|||
name|questionMissingAdvisorCritical
operator|||
name|questionRestrictionsNotMet
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
literal|"Free time requests will be considered as time blocks during the pre-registration process. When possible, classes should be avoided during free time. However, if a free time request is placed higher than a course, the course cannot be attended during free time and you may not receive a full schedule."
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|creditError
operator|!=
literal|null
operator|||
name|questionNoAlt
operator|||
name|questionDropCritical
operator|||
name|questionMissingAdvisorCritical
operator|||
name|questionRestrictionsNotMet
operator|||
name|questionFreeTime
condition|)
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.confirmation"
argument_list|,
literal|"\nDo you want to proceed?"
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|conf
init|=
name|response
operator|.
name|getConfirms
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|contains
argument_list|(
name|CONF_UNITIME
argument_list|)
condition|)
block|{
name|response
operator|.
name|setConfirmation
argument_list|(
name|CONF_UNITIME
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.unitimeDialogName"
argument_list|,
literal|"Warning Confirmations"
argument_list|)
argument_list|,
operator|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.unitimeYesButton"
argument_list|,
literal|"Accept& Submit"
argument_list|)
operator|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.unitimeNoButton"
argument_list|,
literal|"Cancel Submit"
argument_list|)
argument_list|,
operator|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.unitimeYesButtonTitle"
argument_list|,
literal|"Accept the above warning(s) and submit the Course Requests"
argument_list|)
operator|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.unitimeNoButtonTitle"
argument_list|,
literal|"Go back to editing your Course Requests"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|submit
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|)
throws|throws
name|SectioningException
block|{
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|updateStudents
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|List
argument_list|<
name|Student
argument_list|>
name|students
parameter_list|)
throws|throws
name|SectioningException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
try|try
block|{
name|iClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStudentHoldError
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudentId
name|student
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|isUseXE
argument_list|()
condition|)
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|pin
init|=
name|helper
operator|.
name|getPin
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|pin
operator|==
literal|null
operator|||
name|pin
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|student
operator|instanceof
name|XStudent
operator|&&
operator|(
operator|(
name|XStudent
operator|)
name|student
operator|)
operator|.
name|hasReleasedPin
argument_list|()
condition|)
name|pin
operator|=
operator|(
operator|(
name|XStudent
operator|)
name|student
operator|)
operator|.
name|getPin
argument_list|()
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|boolean
name|manager
init|=
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
decl_stmt|;
name|boolean
name|admin
init|=
name|manager
operator|&&
name|isBannerAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Checking eligility for "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" (term: "
operator|+
name|term
operator|+
literal|", id:"
operator|+
name|getBannerId
argument_list|(
name|student
argument_list|)
operator|+
operator|(
name|admin
condition|?
literal|", admin"
else|:
name|pin
operator|!=
literal|null
condition|?
literal|", pin:"
operator|+
name|pin
else|:
literal|""
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
comment|// First, check student registration status
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getBannerSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setChallengeResponse
argument_list|(
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
name|getBannerUser
argument_list|(
name|manager
argument_list|)
argument_list|,
name|getBannerPassword
argument_list|(
name|manager
argument_list|)
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|XEInterface
operator|.
name|RegisterResponse
name|original
init|=
literal|null
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"bannerId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"bannerId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|admin
operator|||
name|isPreregAdmin
argument_list|()
condition|)
block|{
name|String
name|param
init|=
name|getAdminParameter
argument_list|()
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
name|param
argument_list|,
literal|"SB"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|param
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"SB"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pin
operator|!=
literal|null
operator|&&
operator|!
name|pin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"altPin"
argument_list|,
name|pin
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|setValue
argument_list|(
name|pin
argument_list|)
expr_stmt|;
block|}
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|XEInterface
operator|.
name|ErrorResponse
name|response
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|ErrorResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|ErrorResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"exception"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|XEInterface
operator|.
name|Error
name|error
init|=
name|response
operator|.
name|getError
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|message
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|message
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|description
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|description
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|errorMessage
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|errorMessage
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|exception
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|hasApiGetTime
argument_list|()
condition|)
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
name|current
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|TYPE_LIST
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"holds-response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
operator|!
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
name|original
operator|=
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Check status, memorize enrolled sections
if|if
condition|(
name|original
operator|!=
literal|null
operator|&&
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Current registration: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|bannerErrors
init|=
name|getBannerErrors
argument_list|()
decl_stmt|;
name|String
name|error
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
operator|&&
name|original
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|m
range|:
name|original
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
name|bannerErrors
operator|==
literal|null
operator|||
name|m
operator|.
name|matches
argument_list|(
name|bannerErrors
argument_list|)
condition|)
block|{
if|if
condition|(
name|error
operator|==
literal|null
condition|)
name|error
operator|=
name|m
expr_stmt|;
else|else
name|error
operator|+=
operator|(
name|error
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|?
literal|" "
else|:
literal|", "
operator|)
operator|+
name|m
expr_stmt|;
block|}
block|}
block|}
return|return
name|error
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|info
argument_list|(
literal|"Banner eligibility failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"Banner eligibility failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckEligibility
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|hasApiGetTime
argument_list|()
condition|)
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
name|CheckEligibilityResponse
name|eligibility
init|=
operator|(
name|CheckEligibilityResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|CheckEligibilityResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|CheckEligibilityResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Eligibility: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|eligibility
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"holds-response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|eligibility
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|eligibility
operator|.
name|status
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|eligibility
operator|.
name|message
operator|==
literal|null
operator|||
name|eligibility
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to check student eligibility ("
operator|+
name|eligibility
operator|.
name|status
operator|+
literal|")."
else|:
name|eligibility
operator|.
name|message
argument_list|)
throw|;
if|if
condition|(
name|isCheckForPin
argument_list|()
operator|&&
name|eligibility
operator|.
name|data
operator|!=
literal|null
operator|&&
name|eligibility
operator|.
name|data
operator|.
name|PIN
operator|!=
literal|null
operator|&&
operator|!
name|eligibility
operator|.
name|data
operator|.
name|PIN
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
literal|"NA"
operator|.
name|equals
argument_list|(
name|eligibility
operator|.
name|data
operator|.
name|PIN
argument_list|)
condition|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"PIN"
argument_list|)
operator|.
name|setValue
argument_list|(
name|eligibility
operator|.
name|data
operator|.
name|PIN
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|eligibility
operator|.
name|data
operator|!=
literal|null
operator|&&
name|eligibility
operator|.
name|data
operator|.
name|eligibilityProblems
operator|!=
literal|null
condition|)
block|{
name|String
name|m
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EligibilityProblem
name|p
range|:
name|eligibility
operator|.
name|data
operator|.
name|eligibilityProblems
control|)
if|if
condition|(
name|m
operator|==
literal|null
condition|)
name|m
operator|=
name|p
operator|.
name|message
expr_stmt|;
else|else
name|m
operator|+=
literal|"\n"
operator|+
name|p
operator|.
name|message
expr_stmt|;
return|return
name|m
return|;
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"Null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|boolean
name|isAdvisorValidationEnabled
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|String
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
name|status
operator|=
name|student
operator|.
name|getStatus
argument_list|()
expr_stmt|;
if|else if
condition|(
name|status
operator|.
name|isEmpty
argument_list|()
condition|)
name|status
operator|=
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
name|status
operator|=
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
literal|true
return|;
name|StudentSectioningStatus
name|dbStatus
init|=
name|StudentSectioningStatus
operator|.
name|getPresentStatus
argument_list|(
name|status
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|dbStatus
operator|!=
literal|null
operator|&&
name|dbStatus
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|reqval
argument_list|)
operator|||
name|dbStatus
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|specreg
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validateAdvisorRecommendations
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|AdvisingStudentDetails
name|details
parameter_list|,
name|CheckCoursesResponse
name|response
parameter_list|)
throws|throws
name|SectioningException
block|{
name|XStudent
name|original
init|=
operator|(
name|details
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|details
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|MESSAGES
operator|.
name|exceptionEnrollNotStudent
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
comment|// Do not validate when validation is disabled
if|if
condition|(
operator|!
name|isAdvisorValidationEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|original
argument_list|,
name|details
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|details
operator|.
name|getStatus
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
return|return;
name|CourseRequestInterface
name|request
init|=
name|details
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Integer
name|CONF_UNITIME
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
operator|&&
operator|!
name|courseIds
operator|.
name|add
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|addError
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"DUPL"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.duplicateCourse"
argument_list|,
literal|"Course {course} used multiple times."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|hasErrorMessage
argument_list|()
condition|)
name|response
operator|.
name|setErrorMessage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.duplicateCourse"
argument_list|,
literal|"Course {course} used multiple times."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|questionNoAlt
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|isAdvisedNoAlts
argument_list|()
condition|)
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|isWaitList
argument_list|()
operator|&&
name|isWaitListNoAlts
argument_list|()
condition|)
continue|continue;
name|RequestedCourse
name|rc
init|=
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|rc
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NO_ALT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.courseHasNoAlt"
argument_list|,
literal|"No alternative course provided."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|)
expr_stmt|;
name|questionNoAlt
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|String
name|filter
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.OnlineOnlyStudentFilter"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|questionRestrictionsNotMet
init|=
literal|false
decl_stmt|;
name|boolean
name|onlineOnly
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|new
name|Query
argument_list|(
name|filter
argument_list|)
operator|.
name|match
argument_list|(
operator|new
name|StudentMatcher
argument_list|(
name|original
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
argument_list|,
name|server
argument_list|,
literal|false
argument_list|)
argument_list|)
condition|)
block|{
comment|// online only
name|onlineOnly
operator|=
literal|true
expr_stmt|;
name|String
name|cn
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.OnlineOnlyCourseNameRegExp"
argument_list|)
decl_stmt|;
name|String
name|im
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.OnlineOnlyInstructionalModeRegExp"
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|course
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|cn
operator|!=
literal|null
operator|&&
operator|!
name|cn
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|matches
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-ONLINE"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.onlineStudentReqResidentialCourse"
argument_list|,
literal|"No online-only option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|)
expr_stmt|;
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|im
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasMatchingConfig
init|=
literal|false
decl_stmt|;
name|CourseOffering
name|co
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|!=
literal|null
condition|)
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
name|InstructionalMethod
name|configIm
init|=
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|im
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|configIm
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
name|im
argument_list|)
condition|)
block|{
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasMatchingConfig
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-ONLINE"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.onlineStudentReqResidentialCourse"
argument_list|,
literal|"No online-only option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|)
expr_stmt|;
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|course
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|cn
operator|!=
literal|null
operator|&&
operator|!
name|cn
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|matches
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-ONLINE"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.onlineStudentReqResidentialCourse"
argument_list|,
literal|"No online-only option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|)
expr_stmt|;
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|im
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasMatchingConfig
init|=
literal|false
decl_stmt|;
name|CourseOffering
name|co
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|!=
literal|null
condition|)
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
name|InstructionalMethod
name|configIm
init|=
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|im
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|configIm
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|configIm
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
name|im
argument_list|)
condition|)
block|{
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasMatchingConfig
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-ONLINE"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.onlineStudentReqResidentialCourse"
argument_list|,
literal|"No online-only option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|)
expr_stmt|;
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|else if
condition|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.OnlineOnlyExclusiveCourses"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// exclusive
name|String
name|cn
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.OnlineOnlyCourseNameRegExp"
argument_list|)
decl_stmt|;
name|String
name|im
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.ResidentialInstructionalModeRegExp"
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|course
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|cn
operator|!=
literal|null
operator|&&
operator|!
name|cn
operator|.
name|isEmpty
argument_list|()
operator|&&
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|matches
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-RESIDENTIAL"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.residentialStudentReqOnlineCourse"
argument_list|,
literal|"No residential option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|)
expr_stmt|;
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|im
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasMatchingConfig
init|=
literal|false
decl_stmt|;
name|CourseOffering
name|co
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|!=
literal|null
condition|)
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
name|InstructionalMethod
name|configIm
init|=
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|im
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|configIm
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|configIm
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
name|im
argument_list|)
condition|)
block|{
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasMatchingConfig
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-RESIDENTIAL"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.residentialStudentReqOnlineCourse"
argument_list|,
literal|"No residential option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|)
expr_stmt|;
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|course
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|cn
operator|!=
literal|null
operator|&&
operator|!
name|cn
operator|.
name|isEmpty
argument_list|()
operator|&&
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|matches
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-RESIDENTIAL"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.residentialStudentReqOnlineCourse"
argument_list|,
literal|"No residential option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|)
expr_stmt|;
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|im
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasMatchingConfig
init|=
literal|false
decl_stmt|;
name|CourseOffering
name|co
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|!=
literal|null
condition|)
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
name|InstructionalMethod
name|configIm
init|=
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|im
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|configIm
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|==
literal|null
operator|||
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|configIm
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|!=
literal|null
operator|&&
name|configIm
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
name|im
argument_list|)
condition|)
block|{
name|hasMatchingConfig
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasMatchingConfig
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT-RESIDENTIAL"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.residentialStudentReqOnlineCourse"
argument_list|,
literal|"No residential option."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|)
expr_stmt|;
name|questionRestrictionsNotMet
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|boolean
name|questionFreeTime
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
name|request
operator|.
name|getCourse
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|boolean
name|hasCourse
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|q
init|=
name|request
operator|.
name|getCourse
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|q
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|hasCourseId
argument_list|()
condition|)
block|{
name|hasCourse
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|String
name|free
init|=
literal|""
decl_stmt|;
for|for
control|(
name|FreeTime
name|ft
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getFreeTime
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|free
operator|.
name|isEmpty
argument_list|()
condition|)
name|free
operator|+=
literal|", "
expr_stmt|;
name|free
operator|+=
name|ft
operator|.
name|toString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasCourse
condition|)
name|response
operator|.
name|addMessage
argument_list|(
literal|0l
argument_list|,
name|CONSTANTS
operator|.
name|freePrefix
argument_list|()
operator|+
name|free
argument_list|,
literal|"FREE-TIME"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.freeTimeHighPriority"
argument_list|,
literal|"High priority free time"
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|)
expr_stmt|;
name|questionFreeTime
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|String
name|creditError
init|=
literal|null
decl_stmt|;
name|Float
name|maxCredit
init|=
name|original
operator|.
name|getMaxCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxCredit
operator|==
literal|null
condition|)
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxCredit
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getCredit
argument_list|()
operator|>
name|maxCredit
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|getOverCreditRequests
argument_list|(
name|request
argument_list|,
name|maxCredit
argument_list|)
control|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"CREDIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|CREDIT_HIGH
argument_list|)
expr_stmt|;
name|creditError
operator|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.acr.maxCreditError"
argument_list|,
literal|"Maximum of {max} credit hours exceeded.\nThe student may not be able to get a full schedule."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|minCreditLimit
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.minCreditCheck"
argument_list|)
decl_stmt|;
name|float
name|minCredit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasAdvisorCredit
argument_list|()
condition|)
block|{
name|minCredit
operator|+=
name|r
operator|.
name|getAdvisorCreditMin
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
name|minCredit
operator|+=
name|rc
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|creditError
operator|==
literal|null
operator|&&
name|minCreditLimit
operator|!=
literal|null
operator|&&
name|minCredit
operator|<
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCreditLimit
argument_list|)
operator|&&
operator|(
name|maxCredit
operator|==
literal|null
operator|||
name|maxCredit
operator|>
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCreditLimit
argument_list|)
operator|)
condition|)
block|{
name|creditError
operator|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.minCredit"
argument_list|,
literal|"Less than {min} credit hours requested."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{min}"
argument_list|,
name|minCreditLimit
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|minCredit
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.minCredit"
argument_list|,
literal|"Less than {min} credit hours requested."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{min}"
argument_list|,
name|minCreditLimit
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|minCredit
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|CREDIT_LOW
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|getConfirms
argument_list|()
operator|.
name|contains
argument_list|(
name|CONF_UNITIME
argument_list|)
condition|)
block|{
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.unitimeProblemsFound"
argument_list|,
literal|"The following issues have been detected:"
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|response
operator|.
name|addConfirmation
argument_list|(
literal|""
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|creditError
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|addConfirmation
argument_list|(
name|creditError
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|questionNoAlt
condition|)
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.acr.noAlternatives"
argument_list|,
operator|(
name|creditError
operator|!=
literal|null
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
literal|"One or more of the recommended courses have no alternatives provided. The student may not be able to get a full schedule."
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|questionRestrictionsNotMet
condition|)
block|{
if|if
condition|(
name|onlineOnly
condition|)
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.acr.onlineOnlyNotMet"
argument_list|,
operator|(
name|creditError
operator|!=
literal|null
operator|||
name|questionNoAlt
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
literal|"One or more of the recommended courses have no online-only option at the moment. The student may not be able to get a full schedule."
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|5
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.acr.residentialNotMet"
argument_list|,
operator|(
name|creditError
operator|!=
literal|null
operator|||
name|questionNoAlt
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
literal|"One or more of the recommended courses have no residential option at the moment. The student may not be able to get a full schedule."
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|questionFreeTime
condition|)
block|{
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.acr.freeTimeRequested"
argument_list|,
operator|(
name|creditError
operator|!=
literal|null
operator|||
name|questionNoAlt
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
literal|"Free time requests will be considered as time blocks during the pre-registration process. When possible, classes should be avoided during free time. However, if a free time request is placed higher than a course, the course cannot be attended during free time and the student may not receive a full schedule."
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|creditError
operator|!=
literal|null
operator|||
name|questionNoAlt
operator|||
name|questionRestrictionsNotMet
operator|||
name|questionFreeTime
condition|)
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.confirmation"
argument_list|,
literal|"\nDo you want to proceed?"
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|conf
init|=
name|response
operator|.
name|getConfirms
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|contains
argument_list|(
name|CONF_UNITIME
argument_list|)
condition|)
block|{
name|response
operator|.
name|setConfirmation
argument_list|(
name|CONF_UNITIME
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.acr.unitimeDialogName"
argument_list|,
literal|"Warning Confirmations"
argument_list|)
argument_list|,
operator|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.acr.unitimeYesButton"
argument_list|,
literal|"Accept& Submit"
argument_list|)
operator|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.acr.unitimeNoButton"
argument_list|,
literal|"Cancel Submit"
argument_list|)
argument_list|,
operator|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.acr.unitimeYesButtonTitle"
argument_list|,
literal|"Accept the above warning(s) and submit the Advisor Course Recommendations"
argument_list|)
operator|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.acr.unitimeNoButtonTitle"
argument_list|,
literal|"Go back to editing your Advisor Course Recommendations"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

