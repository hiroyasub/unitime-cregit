begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|ChallengeScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningTestFwk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XAcademicAreaCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|DatabaseServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|DegreeWorksPlanScraper
extends|extends
name|OnlineSectioningTestFwk
block|{
specifier|private
name|Client
name|iClient
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|iFilter
decl_stmt|;
specifier|public
name|DegreeWorksPlanScraper
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
name|List
argument_list|<
name|Protocol
argument_list|>
name|protocols
init|=
operator|new
name|ArrayList
argument_list|<
name|Protocol
argument_list|>
argument_list|()
decl_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
expr_stmt|;
name|iClient
operator|=
operator|new
name|Client
argument_list|(
name|protocols
argument_list|)
expr_stmt|;
name|iFilter
operator|=
name|filter
expr_stmt|;
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|startServer
parameter_list|()
block|{
specifier|final
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"initiative"
argument_list|,
literal|"PWL"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2015"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Fall"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Academic session not found, use properties initiative, year, and term to set academic session."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
name|iSessionId
operator|=
name|session
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|OnlineSectioningLogger
operator|.
name|getInstance
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iServer
operator|=
operator|new
name|DatabaseServer
argument_list|(
operator|new
name|AcademicSessionInfo
argument_list|(
name|session
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getDegreeWorksApiSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.site"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getDegreeWorksApiUser
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.user"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getDegreeWorksApiPassword
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.password"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getDegreeWorksApiEffectiveOnly
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.effectiveOnly"
argument_list|,
literal|"false"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getDegreeWorksErrorPattern
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.errorPattern"
argument_list|,
literal|"<div class=\"exceptionMessage\">\n(.*)\n\n</div>"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|public
name|String
name|getBannerTerm
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|Gson
name|getGson
parameter_list|()
block|{
return|return
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|DateTime
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|toString
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DateTime
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|Date
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
operator|.
name|format
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Date
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
try|try
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
operator|.
name|parse
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JsonParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
operator|.
name|setPrettyPrinting
argument_list|()
operator|.
name|create
argument_list|()
return|;
block|}
specifier|public
name|String
name|getDegreePlans
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|XStudent
name|student
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getDegreeWorksApiSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"setTerms"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"terms"
argument_list|,
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|effectiveOnly
init|=
name|getDegreeWorksApiEffectiveOnly
argument_list|()
decl_stmt|;
if|if
condition|(
name|effectiveOnly
operator|!=
literal|null
condition|)
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"effectiveOnly"
argument_list|,
name|effectiveOnly
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setChallengeResponse
argument_list|(
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
name|getDegreeWorksApiUser
argument_list|()
argument_list|,
name|getDegreeWorksApiPassword
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|exception
parameter_list|)
block|{
try|try
block|{
name|String
name|response
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|getDegreeWorksErrorPattern
argument_list|()
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
operator||
name|Pattern
operator|.
name|MULTILINE
operator||
name|Pattern
operator|.
name|UNIX_LINES
argument_list|)
decl_stmt|;
name|Matcher
name|match
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|response
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|.
name|find
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|match
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|exception
throw|;
block|}
throw|throw
name|exception
throw|;
block|}
return|return
name|IOUtils
operator|.
name|toString
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
operator|.
name|getReader
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|List
argument_list|<
name|Operation
argument_list|>
name|operations
parameter_list|()
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
name|OnlineSectioningHelper
name|helper
init|=
operator|new
name|OnlineSectioningHelper
argument_list|(
name|user
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|students
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from Student s "
operator|+
literal|"left join fetch s.courseDemands as cd "
operator|+
literal|"left join fetch cd.courseRequests as cr "
operator|+
literal|"left join fetch cr.classWaitLists as cwl "
operator|+
literal|"left join fetch s.classEnrollments as e "
operator|+
literal|"left join fetch s.academicAreaClassifications as a "
operator|+
literal|"left join fetch s.posMajors as mj "
operator|+
literal|"left join fetch s.waitlists as w "
operator|+
literal|"left join fetch s.groups as g "
operator|+
literal|"where s.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getServer
argument_list|()
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Student
name|s
range|:
name|students
control|)
block|{
if|if
condition|(
name|iFilter
operator|!=
literal|null
operator|&&
operator|!
name|iFilter
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
specifier|final
name|XStudent
name|student
init|=
operator|new
name|XStudent
argument_list|(
name|s
argument_list|,
name|helper
argument_list|,
name|getServer
argument_list|()
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
name|operations
operator|.
name|add
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|execute
parameter_list|(
name|OnlineSectioningServer
name|s
parameter_list|)
block|{
try|try
block|{
name|String
name|plans
init|=
literal|null
decl_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|plans
operator|=
name|getDegreePlans
argument_list|(
name|s
argument_list|,
name|student
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"Request Succeeded [s]"
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|/
literal|1000.0
argument_list|)
expr_stmt|;
if|if
condition|(
name|plans
operator|==
literal|null
operator|||
name|plans
operator|.
name|isEmpty
argument_list|()
operator|||
literal|"[]"
operator|.
name|equals
argument_list|(
name|plans
argument_list|)
condition|)
block|{
name|inc
argument_list|(
literal|"Request Succeeded with no plans"
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|/
literal|1000.0
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"students-noplans"
argument_list|,
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|,
literal|"Time [s]"
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|/
literal|1000.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inc
argument_list|(
literal|"Request Succeeded with plans"
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|/
literal|1000.0
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"students-withplans"
argument_list|,
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|,
literal|"Time [s]"
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|/
literal|1000.0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|inc
argument_list|(
literal|"Request Failed [s]"
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|/
literal|1000.0
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"Request Failed with  "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" [s]"
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|/
literal|1000.0
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"students-failed"
argument_list|,
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|inc
argument_list|(
literal|"Request Time [s]"
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|/
literal|1000.0
argument_list|)
expr_stmt|;
block|}
name|int
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|plans
operator|!=
literal|null
operator|&&
operator|!
name|plans
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
literal|"[]"
operator|.
name|equals
argument_list|(
name|plans
argument_list|)
condition|)
block|{
try|try
block|{
name|Writer
name|out
init|=
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
literal|"plans"
argument_list|)
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
operator|+
literal|".json"
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|plans
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
name|inc
argument_list|(
literal|"Request Succeeded [response length in chars]"
argument_list|,
name|plans
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XEInterface
operator|.
name|DegreePlan
argument_list|>
name|current
init|=
name|getGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|plans
argument_list|,
name|XEInterface
operator|.
name|DegreePlan
operator|.
name|TYPE_LIST
argument_list|)
decl_stmt|;
name|int
name|nrActive
init|=
literal|0
decl_stmt|;
name|int
name|nrLocked
init|=
literal|0
decl_stmt|;
name|int
name|nrMatching
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|DegreePlan
name|p
range|:
name|current
control|)
block|{
if|if
condition|(
name|p
operator|.
name|isActive
operator|.
name|value
condition|)
name|nrActive
operator|++
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|isLocked
operator|.
name|value
condition|)
name|nrLocked
operator|++
expr_stmt|;
name|inc
argument_list|(
literal|"plans-by-degree"
argument_list|,
name|p
operator|.
name|school
operator|.
name|code
argument_list|,
name|p
operator|.
name|degree
operator|.
name|code
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"plans-by-stattus"
argument_list|,
name|p
operator|.
name|officialTrackingStatus
operator|.
name|code
argument_list|,
literal|"All"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|isActive
operator|.
name|value
condition|)
name|inc
argument_list|(
literal|"plans-by-stattus"
argument_list|,
name|p
operator|.
name|officialTrackingStatus
operator|.
name|code
argument_list|,
literal|"Active"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|isLocked
operator|.
name|value
condition|)
name|inc
argument_list|(
literal|"plans-by-stattus"
argument_list|,
name|p
operator|.
name|officialTrackingStatus
operator|.
name|code
argument_list|,
literal|"Locked"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|s
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|Year
name|y
range|:
name|p
operator|.
name|years
control|)
block|{
for|for
control|(
name|XEInterface
operator|.
name|Term
name|t
range|:
name|y
operator|.
name|terms
control|)
block|{
if|if
condition|(
name|term
operator|.
name|equals
argument_list|(
name|t
operator|.
name|term
operator|.
name|code
argument_list|)
condition|)
name|nrMatching
operator|++
expr_stmt|;
block|}
block|}
block|}
name|inc
argument_list|(
literal|"Request Succeeded [All]"
argument_list|,
name|current
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nrActive
operator|>
literal|0
condition|)
name|inc
argument_list|(
literal|"Request Succeeded [Active]"
argument_list|,
name|nrActive
argument_list|)
expr_stmt|;
if|if
condition|(
name|nrLocked
operator|>
literal|0
condition|)
name|inc
argument_list|(
literal|"Request Succeeded [Locked]"
argument_list|,
name|nrLocked
argument_list|)
expr_stmt|;
if|if
condition|(
name|nrMatching
operator|>
literal|0
condition|)
name|inc
argument_list|(
literal|"Request Succeeded [Matching Term]"
argument_list|,
name|nrMatching
argument_list|)
expr_stmt|;
name|ret
operator|=
name|nrActive
expr_stmt|;
for|for
control|(
name|XAcademicAreaCode
name|aac
range|:
name|student
operator|.
name|getAcademicAreaClasiffications
argument_list|()
control|)
for|for
control|(
name|XAcademicAreaCode
name|m
range|:
name|student
operator|.
name|getMajors
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|getArea
argument_list|()
operator|.
name|equals
argument_list|(
name|aac
operator|.
name|getArea
argument_list|()
argument_list|)
condition|)
block|{
name|inc
argument_list|(
literal|"students-curricula"
argument_list|,
name|aac
operator|.
name|getArea
argument_list|()
operator|+
literal|"/"
operator|+
name|m
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|aac
operator|.
name|getCode
argument_list|()
argument_list|,
literal|"Students"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"students-curricula"
argument_list|,
name|aac
operator|.
name|getArea
argument_list|()
operator|+
literal|"/"
operator|+
name|m
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|aac
operator|.
name|getCode
argument_list|()
argument_list|,
literal|"Plans"
argument_list|,
name|current
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"students-curricula"
argument_list|,
name|aac
operator|.
name|getArea
argument_list|()
operator|+
literal|"/"
operator|+
name|m
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|aac
operator|.
name|getCode
argument_list|()
argument_list|,
literal|"Active"
argument_list|,
name|nrActive
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"students-curricula"
argument_list|,
name|aac
operator|.
name|getArea
argument_list|()
operator|+
literal|"/"
operator|+
name|m
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|aac
operator|.
name|getCode
argument_list|()
argument_list|,
literal|"Locked"
argument_list|,
name|nrLocked
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"students-curricula"
argument_list|,
name|aac
operator|.
name|getArea
argument_list|()
operator|+
literal|"/"
operator|+
name|m
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|aac
operator|.
name|getCode
argument_list|()
argument_list|,
literal|"Matching"
argument_list|,
name|nrMatching
argument_list|)
expr_stmt|;
block|}
name|inc
argument_list|(
literal|"students-withplans"
argument_list|,
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|,
literal|"Total"
argument_list|,
name|current
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"students-withplans"
argument_list|,
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|,
literal|"Active"
argument_list|,
name|nrActive
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"students-withplans"
argument_list|,
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|,
literal|"Locked"
argument_list|,
name|nrLocked
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"students-withplans"
argument_list|,
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|,
literal|"Matching"
argument_list|,
name|nrMatching
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|inc
argument_list|(
literal|"Uncaught: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|operations
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
literal|"plans"
argument_list|)
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|String
index|[]
name|nc
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"nrConcurrent"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
index|[]
name|nrConcurrent
init|=
operator|new
name|int
index|[
name|nc
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nc
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|nrConcurrent
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|nc
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|filter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"studentFilter"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|filter
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"studentFilter"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|filter
operator|.
name|add
argument_list|(
name|line
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
operator|new
name|DegreeWorksPlanScraper
argument_list|(
name|filter
argument_list|)
operator|.
name|test
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"nrTasks"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
argument_list|,
name|nrConcurrent
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

