begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Encoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|engine
operator|.
name|application
operator|.
name|DecodeRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|engine
operator|.
name|header
operator|.
name|HeaderConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|util
operator|.
name|Series
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DegreePlanInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|DegreePlansProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|EduNavInterface
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|EduNavInterface
operator|.
name|Major
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|EduNavInterface
operator|.
name|Plan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|EduNavInterface
operator|.
name|Program
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|EduNavInterface
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|EduNavInterface
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|EduNavInterface
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|CourseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|DatabaseServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_class
specifier|public
class|class
name|EduNavPlansProvider
implements|implements
name|DegreePlansProvider
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|EduNavPlansProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Client
name|iClient
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|private
name|DegreePlansProvider
name|iFallback
decl_stmt|;
specifier|public
name|EduNavPlansProvider
parameter_list|()
block|{
name|List
argument_list|<
name|Protocol
argument_list|>
name|protocols
init|=
operator|new
name|ArrayList
argument_list|<
name|Protocol
argument_list|>
argument_list|()
decl_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
expr_stmt|;
name|iClient
operator|=
operator|new
name|Client
argument_list|(
name|protocols
argument_list|)
expr_stmt|;
name|Context
name|cx
init|=
operator|new
name|Context
argument_list|()
decl_stmt|;
name|cx
operator|.
name|getParameters
argument_list|()
operator|.
name|add
argument_list|(
literal|"readTimeout"
argument_list|,
name|getEduNavApiReadTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|iClient
operator|.
name|setContext
argument_list|(
name|cx
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|String
name|clazz
init|=
name|getEduNavFallbackProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iFallback
operator|=
operator|(
name|CriticalCoursesExplorers
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create fallback degree plan provider."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getEduNavApiReadTimeout
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"edunav.readTimeout"
argument_list|,
literal|"60000"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getEduNavApiSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"edunav.site"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getEduNavApiAuthenticationKey
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"edunav.key.name"
argument_list|,
literal|"edunav-api-key"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getEduNavApiAuthenticationKeyValue
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"edunav.key.value"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getEduNavFallbackProvider
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"edunav.fallbackProvider"
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|getEduNavFallbackCombine
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"edunav.fallbackCombine"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getEduNavIncludePlanContent
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"edunav.includePlanContent"
argument_list|,
literal|"true"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getDegreeWorksNoPlansMessage
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"edunav.noPlansMessage"
argument_list|,
literal|"No EduNav plan is available."
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|XStudentId
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getBannerTerm
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|Gson
name|getGson
parameter_list|(
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|GsonBuilder
name|builder
init|=
operator|new
name|GsonBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|==
literal|null
operator|||
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|builder
operator|.
name|setPrettyPrinting
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|create
argument_list|()
return|;
block|}
specifier|protected
name|String
name|toString
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|8192
index|]
decl_stmt|;
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|reader
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|boolean
name|isCourse
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
return|return
name|element
operator|.
name|id
operator|!=
literal|null
operator|&&
name|element
operator|.
name|id
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
operator|&&
name|element
operator|.
name|name
operator|!=
literal|null
operator|&&
operator|!
name|element
operator|.
name|name
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getSubject
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|String
name|courseName
init|=
name|element
operator|.
name|id
decl_stmt|;
if|if
condition|(
name|courseName
operator|==
literal|null
operator|||
name|courseName
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|courseName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|courseName
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getCourseNbr
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|String
name|courseName
init|=
name|element
operator|.
name|id
decl_stmt|;
if|if
condition|(
name|courseName
operator|==
literal|null
operator|||
name|courseName
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|courseName
operator|.
name|substring
argument_list|(
name|courseName
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getTitle
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|rules
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|rules
operator|!=
literal|null
condition|)
for|for
control|(
name|Rule
name|rule
range|:
name|element
operator|.
name|rules
control|)
if|if
condition|(
name|rule
operator|.
name|label
operator|!=
literal|null
operator|&&
name|rule
operator|.
name|label
operator|.
name|text
operator|!=
literal|null
operator|&&
operator|!
name|rule
operator|.
name|label
operator|.
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|rules
operator|.
name|add
argument_list|(
name|rule
operator|.
name|label
operator|.
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|rules
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|element
operator|.
name|name
return|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|rules
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|rule
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|other
range|:
name|rules
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|equals
argument_list|(
name|rule
argument_list|)
operator|&&
name|other
operator|.
name|contains
argument_list|(
name|rule
argument_list|)
condition|)
name|contain
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|contain
condition|)
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|rule
range|:
name|rules
control|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|rule
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|protected
name|String
name|getDegree
parameter_list|(
name|Plan
name|plan
parameter_list|)
block|{
if|if
condition|(
name|plan
operator|==
literal|null
operator|||
name|plan
operator|.
name|goal
operator|==
literal|null
operator|||
name|plan
operator|.
name|goal
operator|.
name|programs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|String
argument_list|>
name|majors
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Program
name|program
range|:
name|plan
operator|.
name|goal
operator|.
name|programs
control|)
block|{
if|if
condition|(
name|program
operator|.
name|majors
operator|!=
literal|null
condition|)
for|for
control|(
name|Major
name|major
range|:
name|program
operator|.
name|majors
control|)
block|{
if|if
condition|(
name|major
operator|.
name|name
operator|!=
literal|null
condition|)
name|majors
operator|.
name|add
argument_list|(
name|major
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|major
range|:
name|majors
control|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|major
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|protected
name|String
name|getDegreeShort
parameter_list|(
name|Plan
name|plan
parameter_list|)
block|{
if|if
condition|(
name|plan
operator|==
literal|null
operator|||
name|plan
operator|.
name|goal
operator|==
literal|null
operator|||
name|plan
operator|.
name|goal
operator|.
name|programs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|String
argument_list|>
name|majors
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Program
name|program
range|:
name|plan
operator|.
name|goal
operator|.
name|programs
control|)
block|{
if|if
condition|(
name|program
operator|.
name|majors
operator|!=
literal|null
condition|)
for|for
control|(
name|Major
name|major
range|:
name|program
operator|.
name|majors
control|)
block|{
if|if
condition|(
name|major
operator|.
name|id
operator|!=
literal|null
operator|&&
name|major
operator|.
name|degree
operator|!=
literal|null
condition|)
name|majors
operator|.
name|add
argument_list|(
name|major
operator|.
name|id
operator|+
literal|"-"
operator|+
name|major
operator|.
name|degree
argument_list|)
expr_stmt|;
if|else if
condition|(
name|major
operator|.
name|id
operator|!=
literal|null
condition|)
name|majors
operator|.
name|add
argument_list|(
name|major
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|major
range|:
name|majors
control|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|major
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|protected
name|String
name|getSchool
parameter_list|(
name|Plan
name|plan
parameter_list|)
block|{
if|if
condition|(
name|plan
operator|==
literal|null
operator|||
name|plan
operator|.
name|goal
operator|==
literal|null
operator|||
name|plan
operator|.
name|goal
operator|.
name|programs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|String
argument_list|>
name|schools
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Program
name|program
range|:
name|plan
operator|.
name|goal
operator|.
name|programs
control|)
block|{
if|if
condition|(
name|program
operator|.
name|collegeName
operator|!=
literal|null
condition|)
name|schools
operator|.
name|add
argument_list|(
name|program
operator|.
name|collegeName
argument_list|)
expr_stmt|;
block|}
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|school
range|:
name|schools
control|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|school
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|getDegreePlans
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|CourseMatcher
name|matcher
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|iFallback
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|ret
init|=
name|_getDegreePlans
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|matcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
operator|||
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|getDegreeWorksNoPlansMessage
argument_list|()
argument_list|)
operator|.
name|withTypeInfo
argument_list|()
throw|;
return|return
name|ret
return|;
block|}
if|if
condition|(
name|getEduNavFallbackCombine
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|ret1
init|=
literal|null
decl_stmt|,
name|ret2
init|=
literal|null
decl_stmt|;
name|SectioningException
name|e1
init|=
literal|null
decl_stmt|,
name|e2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret1
operator|=
name|iFallback
operator|.
name|getDegreePlans
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|e1
operator|=
name|e
expr_stmt|;
block|}
try|try
block|{
name|ret2
operator|=
name|_getDegreePlans
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|e2
operator|=
name|e
expr_stmt|;
block|}
name|boolean
name|has1
init|=
operator|(
name|ret1
operator|!=
literal|null
operator|&&
operator|!
name|ret1
operator|.
name|isEmpty
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|has2
init|=
operator|(
name|ret2
operator|!=
literal|null
operator|&&
operator|!
name|ret2
operator|.
name|isEmpty
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|has2
condition|)
for|for
control|(
name|DegreePlanInterface
name|p
range|:
name|ret2
control|)
name|p
operator|.
name|setName
argument_list|(
literal|"EduNav: "
operator|+
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|has1
operator|&&
operator|!
name|has2
condition|)
return|return
name|ret1
return|;
if|if
condition|(
name|has2
operator|&&
operator|!
name|has1
condition|)
return|return
name|ret2
return|;
if|if
condition|(
operator|!
name|has1
operator|&&
operator|!
name|has2
condition|)
block|{
if|if
condition|(
name|e2
operator|!=
literal|null
condition|)
throw|throw
name|e2
throw|;
if|if
condition|(
name|e1
operator|!=
literal|null
condition|)
throw|throw
name|e1
throw|;
return|return
literal|null
return|;
block|}
else|else
block|{
for|for
control|(
name|DegreePlanInterface
name|p
range|:
name|ret2
control|)
name|ret1
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|ret1
return|;
block|}
block|}
try|try
block|{
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|ret
init|=
name|_getDegreePlans
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|matcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"EduNav has failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|iFallback
operator|.
name|getDegreePlans
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|matcher
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|_getDegreePlans
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|CourseMatcher
name|matcher
parameter_list|)
throws|throws
name|SectioningException
block|{
try|try
block|{
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|bannerTerm
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|studentId
init|=
name|getBannerId
argument_list|(
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Retrieving degree plans for "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" (term: "
operator|+
name|bannerTerm
operator|+
literal|", id:"
operator|+
name|studentId
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|bannerTerm
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getEduNavApiSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|studentId
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"includePlanContent"
argument_list|,
name|getEduNavIncludePlanContent
argument_list|()
argument_list|)
expr_stmt|;
name|Series
argument_list|<
name|Header
argument_list|>
name|headers
init|=
operator|(
name|Series
argument_list|<
name|Header
argument_list|>
operator|)
name|resource
operator|.
name|getRequestAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|HeaderConstants
operator|.
name|ATTRIBUTE_HEADERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|headers
operator|==
literal|null
condition|)
block|{
name|headers
operator|=
operator|new
name|Series
argument_list|<>
argument_list|(
name|Header
operator|.
name|class
argument_list|)
expr_stmt|;
name|resource
operator|.
name|getRequestAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|HeaderConstants
operator|.
name|ATTRIBUTE_HEADERS
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
name|headers
operator|.
name|set
argument_list|(
name|getEduNavApiAuthenticationKey
argument_list|()
argument_list|,
name|getEduNavApiAuthenticationKeyValue
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|accept
argument_list|(
name|Encoding
operator|.
name|GZIP
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
try|try
block|{
name|resource
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|exception
parameter_list|)
block|{
name|String
name|message
init|=
literal|null
decl_stmt|;
try|try
block|{
name|message
operator|=
name|toString
argument_list|(
operator|new
name|DecodeRepresentation
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|)
operator|.
name|getReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
block|}
throw|throw
operator|new
name|SectioningException
argument_list|(
name|message
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
name|message
else|:
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|EduNavInterface
operator|.
name|Result
argument_list|>
name|results
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|List
argument_list|<
name|EduNavInterface
operator|.
name|Result
argument_list|>
argument_list|>
argument_list|(
operator|new
name|DecodeRepresentation
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|)
argument_list|,
name|EduNavInterface
operator|.
name|Result
operator|.
name|TYPE_LIST
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"edunav-response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Current degree plans: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|DegreePlanInterface
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
for|for
control|(
name|Result
name|result
range|:
name|results
control|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|plan
operator|==
literal|null
operator|||
name|result
operator|.
name|plan
operator|.
name|terms
operator|==
literal|null
condition|)
continue|continue;
name|DegreePlanInterface
name|p
init|=
operator|new
name|DegreePlanInterface
argument_list|()
decl_stmt|;
name|p
operator|.
name|setId
argument_list|(
name|result
operator|.
name|id
argument_list|)
expr_stmt|;
name|p
operator|.
name|setName
argument_list|(
name|result
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|p
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|p
operator|.
name|setName
argument_list|(
name|getDegree
argument_list|(
name|result
operator|.
name|plan
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|p
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|p
operator|.
name|setName
argument_list|(
literal|"Unnamed-"
operator|+
operator|(
name|ret
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setDegree
argument_list|(
name|getDegreeShort
argument_list|(
name|result
operator|.
name|plan
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setSchool
argument_list|(
name|getSchool
argument_list|(
name|result
operator|.
name|plan
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setLastModified
argument_list|(
name|result
operator|.
name|updateDate
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Date
argument_list|(
name|result
operator|.
name|updateDate
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setModifiedWho
argument_list|(
name|result
operator|.
name|owner
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
for|for
control|(
name|Term
name|term
range|:
name|result
operator|.
name|plan
operator|.
name|terms
control|)
block|{
if|if
condition|(
name|bannerTerm
operator|.
name|equals
argument_list|(
name|term
operator|.
name|id
argument_list|)
condition|)
block|{
name|DegreePlanInterface
operator|.
name|DegreeGroupInterface
name|root
init|=
operator|new
name|DegreePlanInterface
operator|.
name|DegreeGroupInterface
argument_list|()
decl_stmt|;
name|root
operator|.
name|setChoice
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|root
operator|.
name|setDescription
argument_list|(
name|term
operator|.
name|name
argument_list|)
expr_stmt|;
name|root
operator|.
name|setId
argument_list|(
name|term
operator|.
name|id
argument_list|)
expr_stmt|;
name|p
operator|.
name|setGroup
argument_list|(
name|root
argument_list|)
expr_stmt|;
if|if
condition|(
name|term
operator|.
name|elements
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Element
name|element
range|:
name|term
operator|.
name|elements
control|)
block|{
if|if
condition|(
name|isCourse
argument_list|(
name|element
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|?
extends|extends
name|XCourseId
argument_list|>
name|ids
init|=
name|server
operator|.
name|findCourses
argument_list|(
name|element
operator|.
name|id
argument_list|,
operator|-
literal|1
argument_list|,
name|matcher
argument_list|)
decl_stmt|;
name|DegreePlanInterface
operator|.
name|DegreeCourseInterface
name|course
init|=
operator|new
name|DegreePlanInterface
operator|.
name|DegreeCourseInterface
argument_list|()
decl_stmt|;
name|course
operator|.
name|setSubject
argument_list|(
name|getSubject
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourse
argument_list|(
name|getCourseNbr
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
name|course
operator|.
name|setTitle
argument_list|(
name|element
operator|.
name|name
argument_list|)
expr_stmt|;
comment|// getTitle(element);
name|course
operator|.
name|setId
argument_list|(
name|element
operator|.
name|id
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCritical
argument_list|(
literal|"mandatory"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|type
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XCourseId
name|id
range|:
name|ids
control|)
block|{
name|XCourse
name|xc
init|=
operator|(
name|id
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|id
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|id
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|xc
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|id
operator|.
name|getCourseName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|element
operator|.
name|id
argument_list|)
condition|)
continue|continue;
name|CourseAssignment
name|ca
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|xc
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|xc
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|xc
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|xc
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setNote
argument_list|(
name|xc
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
comment|/* 													if (ids.size() == 1) { 														String title = getTitle(element); 														if (title != null&& !title.equals(element.name)) 															ca.setNote(getTitle(element) + (ca.hasNote() ? "\n" + ca.getNote() : "")); 													}*/
name|ca
operator|.
name|setCreditAbbv
argument_list|(
name|xc
operator|.
name|getCreditAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCreditText
argument_list|(
name|xc
operator|.
name|getCreditText
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|xc
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setHasUniqueName
argument_list|(
name|xc
operator|.
name|hasUniqueName
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setLimit
argument_list|(
name|xc
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|instanceof
name|DatabaseServer
condition|)
block|{
name|InstructionalOffering
name|io
init|=
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|id
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|io
operator|!=
literal|null
condition|)
block|{
name|ca
operator|.
name|setEnrollment
argument_list|(
name|io
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setProjected
argument_list|(
name|io
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCanWaitList
argument_list|(
name|io
operator|.
name|effectiveWaitList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|firstChoiceReqs
init|=
literal|0
decl_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|;
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|server
operator|.
name|getRequests
argument_list|(
name|id
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
for|for
control|(
name|XCourseRequest
name|r
range|:
name|requests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
name|enrl
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
operator|&&
name|r
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
operator|&&
name|r
operator|.
name|getCourseIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
name|firstChoiceReqs
operator|++
expr_stmt|;
block|}
name|ca
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setProjected
argument_list|(
name|firstChoiceReqs
argument_list|)
expr_stmt|;
name|XOffering
name|io
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|id
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|ca
operator|.
name|setCanWaitList
argument_list|(
name|io
operator|!=
literal|null
operator|&&
name|io
operator|.
name|isWaitList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|course
operator|.
name|addCourse
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|course
operator|.
name|hasCourses
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseAssignment
name|ca
range|:
name|course
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|ca
operator|.
name|getSubject
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|&&
name|ca
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
name|course
operator|.
name|setCourseId
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|addCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DegreePlanInterface
operator|.
name|DegreePlaceHolderInterface
name|placeHolder
init|=
operator|new
name|DegreePlanInterface
operator|.
name|DegreePlaceHolderInterface
argument_list|()
decl_stmt|;
name|placeHolder
operator|.
name|setType
argument_list|(
name|element
operator|.
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|name
operator|!=
literal|null
operator|&&
operator|!
name|element
operator|.
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|placeHolder
operator|.
name|setName
argument_list|(
name|element
operator|.
name|name
argument_list|)
expr_stmt|;
else|else
name|placeHolder
operator|.
name|setName
argument_list|(
name|element
operator|.
name|id
argument_list|)
expr_stmt|;
name|placeHolder
operator|.
name|setId
argument_list|(
name|element
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Additional Credits"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|id
argument_list|)
operator|&&
name|element
operator|.
name|hours
operator|!=
literal|null
operator|&&
name|element
operator|.
name|hours
operator|>
literal|0
condition|)
name|placeHolder
operator|.
name|setName
argument_list|(
literal|"Additional "
operator|+
operator|new
name|DecimalFormat
argument_list|(
literal|"0.#"
argument_list|)
operator|.
name|format
argument_list|(
name|element
operator|.
name|hours
argument_list|)
operator|+
literal|" Credit(s)"
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPlaceHolder
argument_list|(
name|placeHolder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
try|try
block|{
name|iClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iFallback
operator|!=
literal|null
condition|)
block|{
name|iFallback
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|iFallback
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

