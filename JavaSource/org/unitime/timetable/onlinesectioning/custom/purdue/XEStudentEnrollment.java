begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2014, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|ChallengeScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|ext
operator|.
name|json
operator|.
name|JsonRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|StudentEnrollmentProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|stream
operator|.
name|JsonReader
import|;
end_import

begin_class
specifier|public
class|class
name|XEStudentEnrollment
implements|implements
name|StudentEnrollmentProvider
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|XEStudentEnrollment
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|iBannerApiUrl
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.site"
argument_list|)
decl_stmt|;
specifier|private
name|String
name|iBannerApiUser
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.user"
argument_list|)
decl_stmt|;
specifier|private
name|String
name|iBannerApiPassword
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.password"
argument_list|)
decl_stmt|;
specifier|private
name|Client
name|iClient
decl_stmt|;
specifier|public
name|XEStudentEnrollment
parameter_list|()
block|{
name|List
argument_list|<
name|Protocol
argument_list|>
name|protocols
init|=
operator|new
name|ArrayList
argument_list|<
name|Protocol
argument_list|>
argument_list|()
decl_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
expr_stmt|;
name|iClient
operator|=
operator|new
name|Client
argument_list|(
name|protocols
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getBannerTerm
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
if|if
condition|(
name|session
operator|.
name|getTerm
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"spr"
argument_list|)
condition|)
return|return
name|session
operator|.
name|getYear
argument_list|()
operator|+
literal|"20"
return|;
if|if
condition|(
name|session
operator|.
name|getTerm
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"sum"
argument_list|)
condition|)
return|return
name|session
operator|.
name|getYear
argument_list|()
operator|+
literal|"30"
return|;
if|if
condition|(
name|session
operator|.
name|getTerm
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"fal"
argument_list|)
condition|)
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|session
operator|.
name|getYear
argument_list|()
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
literal|"10"
return|;
return|return
name|session
operator|.
name|getYear
argument_list|()
operator|+
name|session
operator|.
name|getTerm
argument_list|()
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
specifier|private
name|Gson
name|getGson
parameter_list|()
block|{
return|return
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|DateTime
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|toString
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DateTime
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
block|}
argument_list|)
comment|// .setPrettyPrinting()
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkEligibility
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|EligibilityCheck
name|check
parameter_list|,
name|XStudent
name|student
parameter_list|)
throws|throws
name|SectioningException
block|{
comment|// Cannot enroll -> no additional check is needed
if|if
condition|(
operator|!
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
condition|)
return|return;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|pin
init|=
name|helper
operator|.
name|getPin
argument_list|()
decl_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|helper
operator|.
name|debug
argument_list|(
literal|"Checking eligility for "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" (term: "
operator|+
name|getBannerTerm
argument_list|(
name|session
argument_list|)
operator|+
literal|", id:"
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|", pin:"
operator|+
name|pin
operator|+
literal|")"
argument_list|)
expr_stmt|;
comment|// First, check student registration status
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|iBannerApiUrl
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|getBannerTerm
argument_list|(
name|session
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"bannerId"
argument_list|,
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerTerm
argument_list|(
name|session
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pin
operator|!=
literal|null
operator|&&
operator|!
name|pin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"altPin"
argument_list|,
name|pin
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|setValue
argument_list|(
name|pin
argument_list|)
expr_stmt|;
block|}
name|resource
operator|.
name|setChallengeResponse
argument_list|(
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
name|iBannerApiUser
argument_list|,
name|iBannerApiPassword
argument_list|)
expr_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
comment|// Check status, memorize enrolled sections
name|Gson
name|gson
init|=
name|getGson
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
name|current
init|=
name|gson
operator|.
name|fromJson
argument_list|(
operator|new
name|JsonReader
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
operator|.
name|getReader
argument_list|()
argument_list|)
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|TYPE_LIST
argument_list|)
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|debug
argument_list|(
literal|"Current registration: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
operator|||
name|current
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|validStudent
condition|)
block|{
name|String
name|reason
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
name|current
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|m
range|:
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
literal|"Your PIN is invalid."
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|PIN_REQUIRED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|pin
operator|==
literal|null
operator|||
name|pin
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
block|}
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
name|reason
operator|=
name|m
expr_stmt|;
else|else
name|reason
operator|+=
literal|"<br>"
operator|+
name|m
expr_stmt|;
block|}
block|}
name|check
operator|.
name|setMessage
argument_list|(
name|reason
operator|==
literal|null
condition|?
literal|"Failed to check student registration eligility."
else|:
name|reason
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Check enrollments
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|stored
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|stored
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|STORED
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|sectionExternalIds
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addRequest
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|r
init|=
operator|(
name|XCourseRequest
operator|)
name|request
decl_stmt|;
name|XEnrollment
name|e
init|=
name|r
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
continue|continue;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|e
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
name|e
argument_list|)
control|)
block|{
name|stored
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|extId
init|=
name|section
operator|.
name|getExternalId
argument_list|(
name|e
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|!=
literal|null
condition|)
name|sectionExternalIds
operator|.
name|add
argument_list|(
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addEnrollment
argument_list|(
name|stored
argument_list|)
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|external
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|external
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
name|String
name|added
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|registrations
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|registrations
control|)
block|{
if|if
condition|(
literal|"R"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusIndicator
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|sectionExternalIds
operator|.
name|remove
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
condition|)
name|added
operator|+=
operator|(
name|added
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|reg
operator|.
name|courseReferenceNumber
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|section
init|=
name|external
operator|.
name|addSectionBuilder
argument_list|()
operator|.
name|setClazz
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
argument_list|)
operator|.
name|setCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|subject
operator|+
literal|" "
operator|+
name|reg
operator|.
name|courseNumber
argument_list|)
argument_list|)
operator|.
name|setSubpart
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|scheduleType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|reg
operator|.
name|registrationStatusDate
operator|!=
literal|null
condition|)
name|section
operator|.
name|setTimeStamp
argument_list|(
name|reg
operator|.
name|registrationStatusDate
operator|.
name|getMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addEnrollment
argument_list|(
name|external
argument_list|)
expr_stmt|;
name|String
name|removed
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|sectionExternalIds
control|)
name|removed
operator|+=
operator|(
name|removed
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|s
expr_stmt|;
if|if
condition|(
operator|!
name|added
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|removed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|check
operator|.
name|setMessage
argument_list|(
literal|"UniTime enrollment data are not synchronized with Banner enrollment data, please try again later"
operator|+
literal|" ("
operator|+
operator|(
name|removed
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"added "
operator|+
name|added
else|:
name|added
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"dropped "
operator|+
name|removed
else|:
literal|"added "
operator|+
name|added
operator|+
literal|", dropped "
operator|+
name|removed
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|info
argument_list|(
literal|"Banner eligibility failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"Banner eligibility failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|EnrollmentFailure
argument_list|>
name|enroll
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|Map
argument_list|<
name|XCourse
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|enrollments
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|enrollments
operator|==
literal|null
operator|||
name|enrollments
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|ArrayList
argument_list|<
name|StudentEnrollmentProvider
operator|.
name|EnrollmentFailure
argument_list|>
argument_list|()
return|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|pin
init|=
name|helper
operator|.
name|getPin
argument_list|()
decl_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|helper
operator|.
name|debug
argument_list|(
literal|"Enrolling "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|enrollments
operator|+
literal|" (term: "
operator|+
name|getBannerTerm
argument_list|(
name|session
argument_list|)
operator|+
literal|", id:"
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|", pin:"
operator|+
name|pin
operator|+
literal|")"
argument_list|)
expr_stmt|;
comment|// First, check student registration status
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|iBannerApiUrl
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|getBannerTerm
argument_list|(
name|session
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"bannerId"
argument_list|,
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerTerm
argument_list|(
name|session
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pin
operator|!=
literal|null
operator|&&
operator|!
name|pin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"altPin"
argument_list|,
name|pin
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|setValue
argument_list|(
name|pin
argument_list|)
expr_stmt|;
block|}
name|resource
operator|.
name|setChallengeResponse
argument_list|(
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
name|iBannerApiUser
argument_list|,
name|iBannerApiPassword
argument_list|)
expr_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
comment|// Check status, memorize enrolled sections
name|Gson
name|gson
init|=
name|getGson
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
name|current
init|=
name|gson
operator|.
name|fromJson
argument_list|(
operator|new
name|JsonReader
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
operator|.
name|getReader
argument_list|()
argument_list|)
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|TYPE_LIST
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
operator|||
name|current
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|validStudent
condition|)
block|{
name|String
name|reason
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
name|current
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|m
range|:
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
name|reason
operator|=
name|m
expr_stmt|;
else|else
name|reason
operator|+=
literal|"\n"
operator|+
name|m
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SectioningException
argument_list|(
name|reason
operator|==
literal|null
condition|?
literal|"Failed to check student registration status."
else|:
name|reason
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|registered
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"original"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|debug
argument_list|(
literal|"Current registration: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|registrations
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|registrations
control|)
block|{
if|if
condition|(
literal|"R"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusIndicator
argument_list|)
condition|)
name|registered
operator|.
name|add
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
expr_stmt|;
block|}
comment|// Next, try to enroll student into the given courses
name|Map
argument_list|<
name|String
argument_list|,
name|XSection
argument_list|>
name|id2section
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|XSection
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|XCourse
argument_list|>
name|id2course
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|XCourse
argument_list|>
argument_list|()
decl_stmt|;
name|XEInterface
operator|.
name|RegisterRequest
name|req
init|=
operator|new
name|XEInterface
operator|.
name|RegisterRequest
argument_list|(
name|getBannerTerm
argument_list|(
name|session
argument_list|)
argument_list|,
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|pin
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|XCourse
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|entry
range|:
name|enrollments
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|XCourse
name|course
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|String
name|id
init|=
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|registered
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|id2section
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|section
argument_list|)
expr_stmt|;
name|id2course
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|id
range|:
name|registered
control|)
name|req
operator|.
name|drop
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|JsonRepresentation
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Finally, check the response
name|XEInterface
operator|.
name|RegisterResponse
name|response
init|=
name|gson
operator|.
name|fromJson
argument_list|(
operator|new
name|JsonReader
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
operator|.
name|getReader
argument_list|()
argument_list|)
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|==
literal|null
operator|||
operator|!
name|response
operator|.
name|validStudent
condition|)
block|{
name|String
name|reason
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
name|current
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|m
range|:
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
name|reason
operator|=
name|m
expr_stmt|;
else|else
name|reason
operator|+=
literal|"\n"
operator|+
name|m
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SectioningException
argument_list|(
name|reason
operator|==
literal|null
condition|?
literal|"Failed to enroll student."
else|:
name|reason
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|EnrollmentFailure
argument_list|>
name|fails
init|=
operator|new
name|ArrayList
argument_list|<
name|EnrollmentFailure
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|checked
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|registrations
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|external
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|external
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|response
operator|.
name|registrations
control|)
block|{
name|String
name|id
init|=
name|reg
operator|.
name|courseReferenceNumber
decl_stmt|;
name|checked
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"R"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusIndicator
argument_list|)
condition|)
block|{
comment|// skip successfully registered enrollments
name|external
operator|.
name|addSection
argument_list|(
name|external
operator|.
name|addSectionBuilder
argument_list|()
operator|.
name|setClazz
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
argument_list|)
operator|.
name|setCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|subject
operator|+
literal|" "
operator|+
name|reg
operator|.
name|courseNumber
argument_list|)
argument_list|)
operator|.
name|setSubpart
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|scheduleType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
literal|"D"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusIndicator
argument_list|)
condition|)
block|{
comment|// skip deleted enrollments
continue|continue;
block|}
name|XCourse
name|course
init|=
name|id2course
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|XSection
name|section
init|=
name|id2section
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|error
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reg
operator|.
name|crnErrors
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|CrnError
name|e
range|:
name|reg
operator|.
name|crnErrors
control|)
block|{
if|if
condition|(
name|error
operator|==
literal|null
condition|)
name|error
operator|=
name|e
operator|.
name|message
expr_stmt|;
else|else
name|error
operator|+=
literal|"\n"
operator|+
name|e
operator|.
name|message
expr_stmt|;
block|}
name|fails
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|course
argument_list|,
name|section
argument_list|,
name|error
operator|==
literal|null
condition|?
literal|"Enrollment failed."
else|:
name|error
argument_list|,
name|reg
operator|.
name|courseRegistrationStatus
operator|!=
literal|null
operator|&&
name|reg
operator|.
name|courseRegistrationStatus
operator|.
name|startsWith
argument_list|(
literal|"R"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|reg
operator|.
name|courseRegistrationStatus
operator|!=
literal|null
operator|&&
name|reg
operator|.
name|courseRegistrationStatus
operator|.
name|startsWith
argument_list|(
literal|"R"
argument_list|)
condition|)
name|external
operator|.
name|addSection
argument_list|(
name|external
operator|.
name|addSectionBuilder
argument_list|()
operator|.
name|setClazz
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
argument_list|)
operator|.
name|setCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|subject
operator|+
literal|" "
operator|+
name|reg
operator|.
name|courseNumber
argument_list|)
argument_list|)
operator|.
name|setSubpart
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|scheduleType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addEnrollment
argument_list|(
name|external
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|failedRegistrations
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|error
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|FailedRegistration
name|reg
range|:
name|response
operator|.
name|failedRegistrations
control|)
block|{
if|if
condition|(
name|reg
operator|.
name|failedCRN
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|reg
operator|.
name|failedCRN
decl_stmt|;
name|XCourse
name|course
init|=
name|id2course
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|XSection
name|section
init|=
name|id2section
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|fails
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|course
argument_list|,
name|section
argument_list|,
name|reg
operator|.
name|failure
operator|==
literal|null
condition|?
literal|"Enrollment failed."
else|:
name|reg
operator|.
name|failure
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|checked
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|reg
operator|.
name|failure
operator|!=
literal|null
condition|)
name|error
operator|.
name|add
argument_list|(
name|reg
operator|.
name|failure
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|em
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|m
range|:
name|error
control|)
block|{
if|if
condition|(
name|em
operator|==
literal|null
condition|)
name|em
operator|=
name|m
expr_stmt|;
else|else
name|em
operator|+=
literal|", "
operator|+
name|m
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|XCourse
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|entry
range|:
name|enrollments
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|XCourse
name|course
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|String
name|id
init|=
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checked
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
name|fails
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|course
argument_list|,
name|section
argument_list|,
name|em
operator|==
literal|null
condition|?
literal|"Enrollment failed."
else|:
name|em
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|helper
operator|.
name|debug
argument_list|(
literal|"Return: "
operator|+
name|fails
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fails
operator|.
name|isEmpty
argument_list|()
condition|)
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"message"
argument_list|)
operator|.
name|setValue
argument_list|(
name|fails
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fails
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|info
argument_list|(
literal|"Banner enrollment failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"Banner enrollment failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
try|try
block|{
name|iClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAllowWaitListing
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

