begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|ChallengeScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|GradeMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|GradeModes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|StudentEnrollmentProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|XEInterface
operator|.
name|CourseReferenceNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|XEInterface
operator|.
name|RegisterAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|SectioningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_class
specifier|public
class|class
name|XEStudentEnrollment
implements|implements
name|StudentEnrollmentProvider
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|XEStudentEnrollment
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Format
argument_list|<
name|Number
argument_list|>
name|sCreditFormat
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.##"
argument_list|)
decl_stmt|;
specifier|private
name|Client
name|iClient
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|public
name|XEStudentEnrollment
parameter_list|()
block|{
name|List
argument_list|<
name|Protocol
argument_list|>
name|protocols
init|=
operator|new
name|ArrayList
argument_list|<
name|Protocol
argument_list|>
argument_list|()
decl_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
expr_stmt|;
name|iClient
operator|=
operator|new
name|Client
argument_list|(
name|protocols
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|ConditionalDropType
block|{
comment|/** do not use conditional add drop */
name|NEVER
block|,
comment|/** only use conditional add drop when there is a drop action */
name|HAS_DROP
block|,
comment|/** use conditional add drop when the student is already registered in at least one section */
name|IS_REGISTERED
block|,
comment|/** only use conditional add drop during re-sectioning (automated wait-listing) */
name|RESECTION
block|,
comment|/** always use conditional add drop */
name|ALWAYS
block|, 		;
specifier|public
specifier|static
name|ConditionalDropType
name|parseType
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
name|ConditionalDropType
operator|.
name|NEVER
return|;
try|try
block|{
return|return
name|ConditionalDropType
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|?
name|ConditionalDropType
operator|.
name|HAS_DROP
else|:
name|ConditionalDropType
operator|.
name|NEVER
operator|)
return|;
block|}
block|}
block|}
specifier|protected
name|String
name|getBannerSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.site"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerUser
parameter_list|(
name|boolean
name|admin
parameter_list|)
block|{
if|if
condition|(
name|admin
condition|)
block|{
name|String
name|user
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.admin.user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
return|return
name|user
return|;
block|}
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.user"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerPassword
parameter_list|(
name|boolean
name|admin
parameter_list|)
block|{
if|if
condition|(
name|admin
condition|)
block|{
name|String
name|pwd
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.admin.password"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pwd
operator|!=
literal|null
condition|)
return|return
name|pwd
return|;
block|}
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.password"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerRecheck
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.recheck"
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isBannerAdmin
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.admin"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isBannerWaitlist
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.waitlist"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|float
name|getMaxCredit
parameter_list|(
name|boolean
name|admin
parameter_list|)
block|{
if|if
condition|(
name|admin
condition|)
block|{
name|String
name|maxCredit
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.admin.maxCredit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCredit
operator|!=
literal|null
condition|)
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|maxCredit
argument_list|)
return|;
block|}
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.maxCredit"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isCheckMaxHours
parameter_list|(
name|boolean
name|admin
parameter_list|)
block|{
if|if
condition|(
name|admin
condition|)
block|{
name|String
name|checkMaxHours
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.admin.checkMaxHours"
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkMaxHours
operator|!=
literal|null
condition|)
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|checkMaxHours
argument_list|)
return|;
block|}
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.checkMaxHours"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|ConditionalDropType
name|getConditionalAddDrop
parameter_list|(
name|boolean
name|admin
parameter_list|)
block|{
if|if
condition|(
name|admin
condition|)
block|{
name|String
name|conditionalAddDrop
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.admin.conditionalAddDrop"
argument_list|)
decl_stmt|;
if|if
condition|(
name|conditionalAddDrop
operator|!=
literal|null
condition|)
return|return
name|ConditionalDropType
operator|.
name|parseType
argument_list|(
name|conditionalAddDrop
argument_list|)
return|;
block|}
return|return
name|ConditionalDropType
operator|.
name|parseType
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.conditionalAddDrop"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|throwExceptionWhenNoChange
parameter_list|(
name|boolean
name|admin
parameter_list|)
block|{
if|if
condition|(
name|admin
condition|)
block|{
name|String
name|conditionalAddDrop
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.admin.errorWhenNoChange"
argument_list|)
decl_stmt|;
if|if
condition|(
name|conditionalAddDrop
operator|!=
literal|null
condition|)
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|conditionalAddDrop
argument_list|)
return|;
block|}
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.errorWhenNoChange"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|float
name|getMaxHoursDefault
parameter_list|()
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.maxHoursDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getAdminParameter
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.adminParameter"
argument_list|,
literal|"persona"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getBannerTerm
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerCampus
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalCampus
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isPreserveGradeMode
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.keepGradeMode"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getResetGradeModesRegExp
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.resetGradeModes"
argument_list|,
literal|"H|Q|R"
argument_list|)
return|;
block|}
specifier|protected
name|Gson
name|getGson
parameter_list|(
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|GsonBuilder
name|builder
init|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|DateTime
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|toString
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DateTime
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|builder
operator|.
name|setPrettyPrinting
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkEligibility
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|EligibilityCheck
name|check
parameter_list|,
name|XStudent
name|student
parameter_list|)
throws|throws
name|SectioningException
block|{
comment|// Cannot enroll -> no additional check is needed (unless it is the case when UniTime does not know about the student)
if|if
condition|(
operator|!
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
operator|&&
name|student
operator|.
name|getStudentId
argument_list|()
operator|!=
literal|null
condition|)
return|return;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|pin
init|=
name|helper
operator|.
name|getPin
argument_list|()
decl_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|boolean
name|manager
init|=
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
decl_stmt|;
name|boolean
name|admin
init|=
name|manager
operator|&
name|isBannerAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Checking eligility for "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" (term: "
operator|+
name|term
operator|+
literal|", id:"
operator|+
name|getBannerId
argument_list|(
name|student
argument_list|)
operator|+
operator|(
name|admin
condition|?
literal|", admin"
else|:
name|pin
operator|!=
literal|null
condition|?
literal|", pin:"
operator|+
name|pin
else|:
literal|""
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
comment|// First, check student registration status
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getBannerSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setChallengeResponse
argument_list|(
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
name|getBannerUser
argument_list|(
name|manager
argument_list|)
argument_list|,
name|getBannerPassword
argument_list|(
name|manager
argument_list|)
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|XEInterface
operator|.
name|RegisterResponse
name|original
init|=
literal|null
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"bannerId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"bannerId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|admin
condition|)
block|{
name|String
name|param
init|=
name|getAdminParameter
argument_list|()
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
name|param
argument_list|,
literal|"SB"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|param
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"SB"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pin
operator|!=
literal|null
operator|&&
operator|!
name|pin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"altPin"
argument_list|,
name|pin
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|setValue
argument_list|(
name|pin
argument_list|)
expr_stmt|;
block|}
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|XEInterface
operator|.
name|ErrorResponse
name|response
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|ErrorResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|ErrorResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"exception"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|XEInterface
operator|.
name|Error
name|error
init|=
name|response
operator|.
name|getError
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|message
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|message
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|description
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|description
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|errorMessage
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|errorMessage
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|exception
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
finally|finally
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
name|current
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|TYPE_LIST
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
operator|!
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
name|original
operator|=
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Check status, memorize enrolled sections
if|if
condition|(
name|original
operator|!=
literal|null
operator|&&
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Current registration: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
operator|||
operator|!
name|original
operator|.
name|validStudent
condition|)
block|{
name|String
name|bannerRecheck
init|=
name|getBannerRecheck
argument_list|()
decl_stmt|;
name|String
name|reason
init|=
literal|null
decl_stmt|;
name|boolean
name|noreason
init|=
literal|true
decl_stmt|;
name|boolean
name|recheck
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
operator|&&
name|original
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|m
range|:
name|original
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
name|bannerRecheck
operator|==
literal|null
operator|||
operator|!
name|m
operator|.
name|matches
argument_list|(
name|bannerRecheck
argument_list|)
condition|)
name|recheck
operator|=
literal|false
expr_stmt|;
name|noreason
operator|=
literal|false
expr_stmt|;
if|if
condition|(
literal|"Your PIN is invalid."
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|PIN_REQUIRED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|pin
operator|==
literal|null
operator|||
name|pin
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
block|}
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
name|reason
operator|=
name|m
expr_stmt|;
else|else
name|reason
operator|+=
literal|"<br>"
operator|+
name|m
expr_stmt|;
block|}
block|}
if|if
condition|(
name|noreason
condition|)
block|{
name|reason
operator|=
literal|"Failed to check student registration eligility."
expr_stmt|;
if|if
condition|(
name|bannerRecheck
operator|==
literal|null
operator|||
operator|!
name|reason
operator|.
name|matches
argument_list|(
name|bannerRecheck
argument_list|)
condition|)
name|recheck
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|recheck
condition|)
block|{
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|RECHECK_BEFORE_ENROLLMENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|check
operator|.
name|setMessage
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|student
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|check
operator|.
name|setMessage
argument_list|(
literal|"UniTime enrollment data are not synchronized with Banner enrollment data, please try again later."
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCanRequestUpdates
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|XStudent
argument_list|>
name|students
init|=
operator|new
name|ArrayList
argument_list|<
name|XStudent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|students
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|requestUpdate
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Check enrollments
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|stored
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|stored
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|STORED
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|sectionExternalIds
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addRequest
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|r
init|=
operator|(
name|XCourseRequest
operator|)
name|request
decl_stmt|;
name|XEnrollment
name|e
init|=
name|r
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
continue|continue;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|e
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
name|e
argument_list|)
control|)
block|{
name|stored
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|extId
init|=
name|section
operator|.
name|getExternalId
argument_list|(
name|e
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|!=
literal|null
condition|)
name|sectionExternalIds
operator|.
name|add
argument_list|(
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addEnrollment
argument_list|(
name|stored
argument_list|)
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|external
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|external
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
name|String
name|added
init|=
literal|""
decl_stmt|;
name|String
name|resetGradeModes
init|=
name|getResetGradeModesRegExp
argument_list|()
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|registrations
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|original
operator|.
name|registrations
control|)
block|{
if|if
condition|(
name|reg
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|sectionExternalIds
operator|.
name|remove
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
operator|&&
name|campus
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|campus
argument_list|)
operator|&&
operator|!
name|eligibilityIgnoreBannerRegistration
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|reg
argument_list|)
condition|)
name|added
operator|+=
operator|(
name|added
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|reg
operator|.
name|courseReferenceNumber
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|section
init|=
name|external
operator|.
name|addSectionBuilder
argument_list|()
operator|.
name|setClazz
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
argument_list|)
operator|.
name|setCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|subject
operator|+
literal|" "
operator|+
name|reg
operator|.
name|courseNumber
argument_list|)
argument_list|)
operator|.
name|setSubpart
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|scheduleType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|reg
operator|.
name|registrationStatusDate
operator|!=
literal|null
condition|)
name|section
operator|.
name|setTimeStamp
argument_list|(
name|reg
operator|.
name|registrationStatusDate
operator|.
name|getMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reg
operator|.
name|gradingMode
operator|!=
literal|null
operator|&&
operator|!
name|reg
operator|.
name|gradingMode
operator|.
name|isEmpty
argument_list|()
condition|)
name|check
operator|.
name|addGradeMode
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|,
name|reg
operator|.
name|gradingMode
argument_list|,
name|reg
operator|.
name|gradingModeDescription
argument_list|,
name|resetGradeModes
operator|!=
literal|null
operator|&&
operator|!
name|resetGradeModes
operator|.
name|isEmpty
argument_list|()
operator|&&
name|reg
operator|.
name|gradingMode
operator|.
name|matches
argument_list|(
name|resetGradeModes
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|reg
operator|.
name|creditHour
operator|!=
literal|null
condition|)
name|check
operator|.
name|addCreditHour
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|,
name|reg
operator|.
name|creditHour
argument_list|)
expr_stmt|;
block|}
block|}
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addEnrollment
argument_list|(
name|external
argument_list|)
expr_stmt|;
name|String
name|removed
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|sectionExternalIds
control|)
name|removed
operator|+=
operator|(
name|removed
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|s
expr_stmt|;
if|if
condition|(
operator|!
name|added
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|removed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|updateStudentRegistration
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|original
operator|.
name|registrations
argument_list|)
condition|)
return|return;
name|check
operator|.
name|setMessage
argument_list|(
literal|"UniTime enrollment data are not synchronized with Banner enrollment data, please try again later"
operator|+
literal|" ("
operator|+
operator|(
name|removed
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"added "
operator|+
name|added
else|:
name|added
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"dropped "
operator|+
name|removed
else|:
literal|"added "
operator|+
name|added
operator|+
literal|", dropped "
operator|+
name|removed
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCanRequestUpdates
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|XStudent
argument_list|>
name|students
init|=
operator|new
name|ArrayList
argument_list|<
name|XStudent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|students
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|requestUpdate
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|info
argument_list|(
literal|"Banner eligibility failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"Banner eligibility failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|eligibilityIgnoreBannerRegistration
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|XEInterface
operator|.
name|Registration
name|reg
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|EnrollmentFailure
argument_list|>
name|enroll
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|List
argument_list|<
name|EnrollmentRequest
argument_list|>
name|enrollments
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|lockedCourses
parameter_list|,
name|GradeModes
name|gradeModes
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|pin
init|=
name|helper
operator|.
name|getPin
argument_list|()
decl_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|boolean
name|manager
init|=
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
decl_stmt|;
name|boolean
name|admin
init|=
name|manager
operator|&
name|isBannerAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Enrolling "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|enrollments
operator|+
literal|" (term: "
operator|+
name|term
operator|+
literal|", id:"
operator|+
name|getBannerId
argument_list|(
name|student
argument_list|)
operator|+
operator|(
name|admin
condition|?
literal|", admin"
else|:
name|pin
operator|!=
literal|null
condition|?
literal|", pin:"
operator|+
name|pin
else|:
literal|""
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|float
name|maxCredit
init|=
name|getMaxCredit
argument_list|(
name|admin
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCredit
operator|>
literal|0f
condition|)
block|{
name|float
name|enrolled
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
name|enrolled
operator|+=
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCredit
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
comment|// Check credits
name|float
name|credit
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|EnrollmentRequest
name|req
range|:
name|enrollments
control|)
block|{
name|credit
operator|+=
name|req
operator|.
name|getCredit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|credit
operator|>
name|maxCredit
operator|&&
name|credit
operator|>
name|enrolled
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
operator|>
name|enrolled
condition|?
name|maxCredit
else|:
name|enrolled
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|credit
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setCanRequestOverride
argument_list|(
literal|true
argument_list|)
throw|;
block|}
block|}
comment|// First, check student registration status
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getBannerSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setChallengeResponse
argument_list|(
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
name|getBannerUser
argument_list|(
name|manager
argument_list|)
argument_list|,
name|getBannerPassword
argument_list|(
name|manager
argument_list|)
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|XEInterface
operator|.
name|RegisterResponse
name|original
init|=
literal|null
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"bannerId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"bannerId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|admin
condition|)
block|{
name|String
name|param
init|=
name|getAdminParameter
argument_list|()
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
name|param
argument_list|,
literal|"SB"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|param
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"SB"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pin
operator|!=
literal|null
operator|&&
operator|!
name|pin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"altPin"
argument_list|,
name|pin
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|setValue
argument_list|(
name|pin
argument_list|)
expr_stmt|;
block|}
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|XEInterface
operator|.
name|ErrorResponse
name|response
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|ErrorResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|ErrorResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"exception"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|XEInterface
operator|.
name|Error
name|error
init|=
name|response
operator|.
name|getError
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|message
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|message
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|description
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|description
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|errorMessage
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|errorMessage
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|exception
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
finally|finally
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
name|current
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|TYPE_LIST
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"original"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
operator|!
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
name|original
operator|=
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Check status, memorize enrolled sections
if|if
condition|(
name|original
operator|==
literal|null
operator|||
operator|!
name|original
operator|.
name|validStudent
condition|)
block|{
name|String
name|reason
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
operator|&&
name|original
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|m
range|:
name|original
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
name|reason
operator|=
name|m
expr_stmt|;
else|else
name|reason
operator|+=
literal|"\n"
operator|+
name|m
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SectioningException
argument_list|(
name|reason
operator|==
literal|null
condition|?
literal|"Failed to check student registration status."
else|:
name|reason
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|XEInterface
operator|.
name|Registration
argument_list|>
name|registered
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|XEInterface
operator|.
name|Registration
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|noadd
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodrop
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|actions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|notregistered
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Current registration: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|code2desc
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|registrations
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|original
operator|.
name|registrations
control|)
block|{
if|if
condition|(
name|reg
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
name|registered
operator|.
name|put
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|,
name|reg
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reg
operator|.
name|canDrop
argument_list|(
name|admin
argument_list|,
name|actions
argument_list|)
condition|)
name|nodrop
operator|.
name|add
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|reg
operator|.
name|gradingMode
operator|!=
literal|null
condition|)
name|code2desc
operator|.
name|put
argument_list|(
name|reg
operator|.
name|gradingMode
argument_list|,
name|reg
operator|.
name|gradingModeDescription
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|notregistered
operator|.
name|add
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reg
operator|.
name|canAdd
argument_list|(
name|admin
argument_list|)
condition|)
name|noadd
operator|.
name|add
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check max hours
if|if
condition|(
name|isCheckMaxHours
argument_list|(
name|admin
argument_list|)
condition|)
block|{
name|Float
name|maxHours
init|=
name|original
operator|.
name|maxHours
decl_stmt|;
if|if
condition|(
name|maxHours
operator|==
literal|null
operator|||
name|maxHours
operator|<=
literal|0
condition|)
name|maxHours
operator|=
name|getMaxHoursDefault
argument_list|()
expr_stmt|;
name|float
name|credit
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|EnrollmentRequest
name|req
range|:
name|enrollments
control|)
block|{
name|credit
operator|+=
name|req
operator|.
name|getCredit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|credit
operator|>
name|maxHours
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.messages.maxHours"
argument_list|,
literal|"Maximum of {max} hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxHours
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|credit
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setCanRequestOverride
argument_list|(
literal|true
argument_list|)
throw|;
block|}
block|}
comment|// Next, try to enroll student into the given courses
name|boolean
name|changed
init|=
literal|false
decl_stmt|,
name|hasDrop
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|id2section
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|XCourse
argument_list|>
name|id2course
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|XCourse
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|XEInterface
operator|.
name|RegisterRequest
name|req
init|=
operator|new
name|XEInterface
operator|.
name|RegisterRequest
argument_list|(
name|term
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|,
name|pin
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|EnrollmentFailure
argument_list|>
name|fails
init|=
operator|new
name|ArrayList
argument_list|<
name|EnrollmentFailure
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|checked
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|lockedCoursesWithChanges
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|EnrollmentRequest
name|request
range|:
name|enrollments
control|)
block|{
name|XCourse
name|course
init|=
name|request
operator|.
name|getCourse
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockedCourses
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|&&
operator|!
name|request
operator|.
name|getSections
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// offering is locked, make no changes
for|for
control|(
name|XSection
name|section
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|String
name|id
init|=
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|XEInterface
operator|.
name|Registration
name|r
init|=
name|registered
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
comment|// no change to this section: keep the enrollment
if|if
condition|(
name|added
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
name|req
operator|.
name|keep
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|id2section
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
block|{
name|sections
operator|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
expr_stmt|;
name|id2section
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|id2course
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|course
argument_list|)
expr_stmt|;
name|request
operator|.
name|setGradeMode
argument_list|(
name|r
operator|.
name|gradingMode
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCreditHour
argument_list|(
name|id
argument_list|,
name|r
operator|.
name|creditHour
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// student had a different section: just put warning on the new enrollment
name|fails
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|course
argument_list|,
name|section
argument_list|,
name|MESSAGES
operator|.
name|courseLocked
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
operator|new
name|EnrollmentError
argument_list|(
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_LOCKED
operator|.
name|name
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|courseLocked
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checked
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|failed
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|id2section
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
block|{
name|sections
operator|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
expr_stmt|;
name|id2section
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|id2course
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|course
argument_list|)
expr_stmt|;
name|lockedCoursesWithChanges
operator|.
name|add
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// offering is not locked: propose the changes
for|for
control|(
name|XSection
name|section
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|String
name|id
init|=
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|XEInterface
operator|.
name|Registration
name|r
init|=
name|registered
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|&&
operator|(
operator|!
name|section
operator|.
name|isEnabledForScheduling
argument_list|()
operator|||
name|noadd
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|)
condition|)
block|{
name|fails
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|course
argument_list|,
name|section
argument_list|,
literal|"Section not available for student scheduling."
argument_list|,
literal|false
argument_list|,
operator|new
name|EnrollmentError
argument_list|(
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_DISABLED
operator|.
name|name
argument_list|()
argument_list|,
literal|"Section not available for student scheduling."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checked
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|failed
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|added
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
name|req
operator|.
name|keep
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|request
operator|.
name|setGradeMode
argument_list|(
name|r
operator|.
name|gradingMode
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCreditHour
argument_list|(
name|id
argument_list|,
name|r
operator|.
name|creditHour
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|added
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
name|req
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|notregistered
operator|.
name|contains
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|id2section
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
block|{
name|sections
operator|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
expr_stmt|;
name|id2section
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|id2course
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// drop old sections
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|XEInterface
operator|.
name|Registration
argument_list|>
name|entry
range|:
name|registered
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|id
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|added
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
continue|continue;
name|boolean
name|drop
init|=
literal|true
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
for|for
control|(
name|XCourseId
name|c
range|:
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|XConfig
name|f
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
for|for
control|(
name|XSubpart
name|s
range|:
name|f
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|XSection
name|x
range|:
name|s
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getExternalId
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|id2section
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
block|{
name|sections
operator|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
expr_stmt|;
name|id2section
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|id2course
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|offering
operator|.
name|getCourse
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|x
operator|.
name|isEnabledForScheduling
argument_list|()
operator|||
name|nodrop
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|fails
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|offering
operator|.
name|getCourse
argument_list|(
name|c
argument_list|)
argument_list|,
name|x
argument_list|,
literal|"Section not available for student scheduling."
argument_list|,
literal|true
argument_list|,
operator|new
name|EnrollmentError
argument_list|(
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_DISABLED
operator|.
name|name
argument_list|()
argument_list|,
literal|"Section not available for student scheduling."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checked
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|failed
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|drop
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|lockedCoursesWithChanges
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|fails
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|offering
operator|.
name|getCourse
argument_list|(
name|c
argument_list|)
argument_list|,
name|x
argument_list|,
name|MESSAGES
operator|.
name|courseLocked
argument_list|(
name|c
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|new
name|EnrollmentError
argument_list|(
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_LOCKED
operator|.
name|name
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|courseLocked
argument_list|(
name|c
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checked
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|failed
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|drop
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|EnrollmentRequest
name|request
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|request
operator|.
name|setGradeMode
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|gradingMode
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCreditHour
argument_list|(
name|id
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|creditHour
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
operator|&&
operator|!
name|campus
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|campus
argument_list|)
condition|)
block|{
if|if
condition|(
name|added
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
name|req
operator|.
name|keep
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|else  if
condition|(
name|drop
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|req
operator|.
name|drop
argument_list|(
name|id
argument_list|,
name|actions
argument_list|)
expr_stmt|;
name|hasDrop
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|added
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
name|req
operator|.
name|keep
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|getConditionalAddDrop
argument_list|(
name|admin
argument_list|)
condition|)
block|{
case|case
name|ALWAYS
case|:
name|req
operator|.
name|setConditionalAddDrop
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|HAS_DROP
case|:
if|if
condition|(
name|hasDrop
condition|)
name|req
operator|.
name|setConditionalAddDrop
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|IS_REGISTERED
case|:
if|if
condition|(
operator|!
name|registered
operator|.
name|isEmpty
argument_list|()
condition|)
name|req
operator|.
name|setConditionalAddDrop
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|changed
condition|)
block|{
comment|// no classes to add or drop -> return no failures
if|if
condition|(
operator|!
name|fails
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|EnrollmentFailure
name|f
range|:
name|fails
control|)
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addMessageBuilder
argument_list|()
operator|.
name|setText
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
return|return
name|fails
return|;
block|}
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|RegisterRequest
argument_list|>
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|XEInterface
operator|.
name|ErrorResponse
name|response
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|ErrorResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|ErrorResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"exception"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|XEInterface
operator|.
name|Error
name|error
init|=
name|response
operator|.
name|getError
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|message
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|message
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|description
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|description
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|errorMessage
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|errorMessage
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|exception
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
finally|finally
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
block|}
comment|// Finally, check the response
name|XEInterface
operator|.
name|RegisterResponse
name|response
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|==
literal|null
operator|||
operator|!
name|response
operator|.
name|validStudent
condition|)
block|{
name|String
name|reason
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|m
range|:
name|response
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
name|reason
operator|=
name|m
expr_stmt|;
else|else
name|reason
operator|+=
literal|"\n"
operator|+
name|m
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SectioningException
argument_list|(
name|reason
operator|==
literal|null
condition|?
literal|"Failed to enroll student."
else|:
name|reason
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|outcome
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|resetGradeModes
init|=
name|getResetGradeModesRegExp
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|registrations
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|external
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|external
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|response
operator|.
name|registrations
control|)
block|{
name|String
name|id
init|=
name|reg
operator|.
name|courseReferenceNumber
decl_stmt|;
name|checked
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EnrollmentError
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<
name|EnrollmentError
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|error
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reg
operator|.
name|crnErrors
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|CrnError
name|e
range|:
name|reg
operator|.
name|crnErrors
control|)
block|{
if|if
condition|(
name|error
operator|==
literal|null
condition|)
name|error
operator|=
name|e
operator|.
name|message
expr_stmt|;
else|else
name|error
operator|+=
literal|"\n"
operator|+
name|e
operator|.
name|message
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentError
argument_list|(
name|e
operator|.
name|messageType
argument_list|,
name|e
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Registered"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusDescription
argument_list|)
condition|)
block|{
name|external
operator|.
name|addSectionBuilder
argument_list|()
operator|.
name|setClazz
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
argument_list|)
operator|.
name|setCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|subject
operator|+
literal|" "
operator|+
name|reg
operator|.
name|courseNumber
argument_list|)
argument_list|)
operator|.
name|setSubpart
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|scheduleType
argument_list|)
argument_list|)
expr_stmt|;
name|outcome
operator|.
name|add
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|gradeModes
operator|!=
literal|null
operator|&&
name|reg
operator|.
name|gradingMode
operator|!=
literal|null
condition|)
block|{
name|gradeModes
operator|.
name|addGradeMode
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|,
operator|new
name|GradeMode
argument_list|(
name|reg
operator|.
name|gradingMode
argument_list|,
name|reg
operator|.
name|gradingModeDescription
argument_list|,
name|resetGradeModes
operator|!=
literal|null
operator|&&
operator|!
name|resetGradeModes
operator|.
name|isEmpty
argument_list|()
operator|&&
name|reg
operator|.
name|gradingMode
operator|.
name|matches
argument_list|(
name|resetGradeModes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gradeModes
operator|!=
literal|null
operator|&&
name|reg
operator|.
name|creditHour
operator|!=
literal|null
condition|)
block|{
name|gradeModes
operator|.
name|addCreditHour
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|,
name|reg
operator|.
name|creditHour
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|added
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
comment|// skip successfully registered enrollments
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|XCourse
name|course
init|=
name|id2course
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|id2section
operator|.
name|get
argument_list|(
name|id
argument_list|)
control|)
block|{
name|fails
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|course
argument_list|,
name|section
argument_list|,
name|error
argument_list|,
literal|true
argument_list|,
name|errors
argument_list|)
argument_list|)
expr_stmt|;
name|failed
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue;
block|}
block|}
if|if
condition|(
literal|"Deleted"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusDescription
argument_list|)
operator|||
literal|"Dropped"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusDescription
argument_list|)
condition|)
block|{
comment|// skip deleted enrollments
continue|continue;
block|}
if|if
condition|(
name|error
operator|==
literal|null
operator|&&
name|response
operator|.
name|registrationException
operator|!=
literal|null
condition|)
block|{
name|error
operator|=
name|response
operator|.
name|registrationException
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentError
argument_list|(
literal|"Unable to make requested changes so your schedule was not changed."
operator|.
name|equals
argument_list|(
name|response
operator|.
name|registrationException
argument_list|)
condition|?
literal|"IGNORE"
else|:
literal|"UNKNOWN"
argument_list|,
name|response
operator|.
name|registrationException
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XCourse
name|course
init|=
name|id2course
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|id2section
operator|.
name|get
argument_list|(
name|id
argument_list|)
control|)
block|{
if|if
condition|(
name|error
operator|==
literal|null
operator|&&
operator|!
name|failed
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|error
operator|==
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentError
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|added
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|?
literal|"Enrollment failed."
else|:
literal|"Drop failed."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fails
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|course
argument_list|,
name|section
argument_list|,
name|error
operator|==
literal|null
condition|?
name|added
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|?
literal|"Enrollment failed."
else|:
literal|"Drop failed."
else|:
name|error
argument_list|,
literal|"Registered"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusDescription
argument_list|)
argument_list|,
name|errors
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addEnrollment
argument_list|(
name|external
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|failedRegistrations
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|EnrollmentError
argument_list|>
name|error
init|=
operator|new
name|TreeSet
argument_list|<
name|EnrollmentError
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|FailedRegistration
name|reg
range|:
name|response
operator|.
name|failedRegistrations
control|)
block|{
if|if
condition|(
name|reg
operator|.
name|failedCRN
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|reg
operator|.
name|failedCRN
decl_stmt|;
name|XCourse
name|course
init|=
name|id2course
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|id2section
operator|.
name|get
argument_list|(
name|id
argument_list|)
control|)
block|{
if|if
condition|(
name|reg
operator|.
name|failure
operator|==
literal|null
operator|&&
operator|!
name|failed
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
continue|continue;
name|fails
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|course
argument_list|,
name|section
argument_list|,
name|reg
operator|.
name|failure
operator|==
literal|null
condition|?
literal|"Enrollment failed."
else|:
name|reg
operator|.
name|failure
argument_list|,
literal|false
argument_list|,
operator|new
name|EnrollmentError
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|reg
operator|.
name|failure
operator|==
literal|null
condition|?
literal|"Enrollment failed."
else|:
name|reg
operator|.
name|failure
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|checked
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|reg
operator|.
name|failure
operator|!=
literal|null
condition|)
name|error
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentError
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|reg
operator|.
name|failure
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|em
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EnrollmentError
name|m
range|:
name|error
control|)
block|{
if|if
condition|(
name|em
operator|==
literal|null
condition|)
name|em
operator|=
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
else|else
name|em
operator|+=
literal|"\n"
operator|+
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|registrationException
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|em
operator|==
literal|null
condition|)
name|em
operator|=
name|response
operator|.
name|registrationException
expr_stmt|;
else|else
name|em
operator|+=
literal|"\n"
operator|+
name|response
operator|.
name|registrationException
expr_stmt|;
name|error
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentError
argument_list|(
literal|"Unable to make requested changes so your schedule was not changed."
operator|.
name|equals
argument_list|(
name|response
operator|.
name|registrationException
argument_list|)
condition|?
literal|"IGNORE"
else|:
literal|"UNKNOWN"
argument_list|,
name|response
operator|.
name|registrationException
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EnrollmentRequest
name|request
range|:
name|enrollments
control|)
block|{
name|XCourse
name|course
init|=
name|request
operator|.
name|getCourse
argument_list|()
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|String
name|id
init|=
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checked
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|&&
operator|(
name|em
operator|!=
literal|null
operator|||
name|failed
operator|.
name|add
argument_list|(
name|id
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|em
operator|==
literal|null
condition|)
name|fails
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|course
argument_list|,
name|section
argument_list|,
literal|"Enrollment failed."
argument_list|,
literal|false
argument_list|,
operator|new
name|EnrollmentError
argument_list|(
literal|"UNKNOWN"
argument_list|,
literal|"Enrollment failed."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|fails
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|course
argument_list|,
name|section
argument_list|,
name|em
argument_list|,
literal|false
argument_list|,
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|outcome
operator|.
name|equals
argument_list|(
name|registered
operator|.
name|keySet
argument_list|()
argument_list|)
operator|&&
operator|!
name|fails
operator|.
name|isEmpty
argument_list|()
operator|&&
name|throwExceptionWhenNoChange
argument_list|(
name|admin
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|""
decl_stmt|;
for|for
control|(
name|EnrollmentFailure
name|f
range|:
name|fails
control|)
block|{
if|if
condition|(
operator|!
literal|"Unable to make requested changes so your schedule was not changed."
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
name|message
operator|+=
operator|(
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
name|f
expr_stmt|;
block|}
name|SectioningException
name|e
init|=
operator|new
name|SectioningException
argument_list|(
name|message
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|" "
argument_list|)
argument_list|)
operator|.
name|setCanRequestOverride
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|EnrollmentFailure
name|f
range|:
name|fails
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getSection
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"Unable to make requested changes so your schedule was not changed."
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
name|e
operator|.
name|setSectionMessage
argument_list|(
name|f
operator|.
name|getSection
argument_list|()
operator|.
name|getSectionId
argument_list|()
argument_list|,
name|f
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|hasErrors
argument_list|()
condition|)
for|for
control|(
name|EnrollmentError
name|err
range|:
name|f
operator|.
name|getErrors
argument_list|()
control|)
if|if
condition|(
operator|!
literal|"IGNORE"
operator|.
name|equals
argument_list|(
name|err
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
name|e
operator|.
name|addError
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|f
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|f
operator|.
name|getSection
argument_list|()
operator|.
name|getExternalId
argument_list|(
name|f
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|err
operator|.
name|getCode
argument_list|()
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|isPreserveGradeMode
argument_list|()
operator|&&
name|response
operator|.
name|registrations
operator|!=
literal|null
condition|)
block|{
name|XEInterface
operator|.
name|RegisterRequest
name|reqGM
init|=
operator|new
name|XEInterface
operator|.
name|RegisterRequest
argument_list|(
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|resetGradeModes
operator|!=
literal|null
operator|&&
operator|!
name|resetGradeModes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
label|:
for|for
control|(
name|EnrollmentRequest
name|request
range|:
name|enrollments
control|)
block|{
name|String
name|gm
init|=
name|request
operator|.
name|getGradeMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|gm
operator|!=
literal|null
operator|&&
name|gm
operator|.
name|matches
argument_list|(
name|resetGradeModes
argument_list|)
condition|)
block|{
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|response
operator|.
name|registrations
control|)
block|{
if|if
condition|(
literal|"Registered"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusDescription
argument_list|)
operator|&&
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|id2course
operator|.
name|get
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|reg
operator|.
name|gradingMode
operator|!=
literal|null
operator|&&
operator|!
name|gm
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|gradingMode
argument_list|)
condition|)
block|{
name|request
operator|.
name|resetGradeMode
argument_list|(
name|reg
operator|.
name|gradingMode
argument_list|)
expr_stmt|;
name|helper
operator|.
name|info
argument_list|(
literal|"Resetting grade mode for "
operator|+
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" from "
operator|+
name|gm
operator|+
literal|" to "
operator|+
name|reg
operator|.
name|gradingMode
argument_list|)
expr_stmt|;
continue|continue
name|request
continue|;
block|}
block|}
block|}
block|}
block|}
block|}
name|reqGM
operator|.
name|courseReferenceNumbers
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseReferenceNumber
argument_list|>
argument_list|()
expr_stmt|;
name|reqGM
operator|.
name|actionsAndOptions
operator|=
operator|new
name|ArrayList
argument_list|<
name|RegisterAction
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|response
operator|.
name|registrations
control|)
block|{
if|if
condition|(
literal|"Registered"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusDescription
argument_list|)
condition|)
block|{
name|reqGM
operator|.
name|courseReferenceNumbers
operator|.
name|add
argument_list|(
operator|new
name|CourseReferenceNumber
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
argument_list|)
expr_stmt|;
name|XCourse
name|course
init|=
name|id2course
operator|.
name|get
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
for|for
control|(
name|EnrollmentRequest
name|request
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
block|{
name|String
name|gm
init|=
name|request
operator|.
name|getGradeMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|gm
operator|!=
literal|null
operator|&&
operator|!
name|gm
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|gradingMode
argument_list|)
condition|)
block|{
name|helper
operator|.
name|info
argument_list|(
literal|"Changing grade mode for "
operator|+
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|reg
operator|.
name|courseReferenceNumber
operator|+
literal|" from "
operator|+
name|reg
operator|.
name|gradingMode
operator|+
literal|" to "
operator|+
name|gm
argument_list|)
expr_stmt|;
name|RegisterAction
name|action
init|=
operator|new
name|RegisterAction
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
decl_stmt|;
name|action
operator|.
name|selectedGradingMode
operator|=
name|gm
expr_stmt|;
name|reqGM
operator|.
name|actionsAndOptions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|reqGM
operator|.
name|actionsAndOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"gm_request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|reqGM
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|RegisterRequest
argument_list|>
argument_list|(
name|reqGM
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|XEInterface
operator|.
name|ErrorResponse
name|responseGM
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|ErrorResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|ErrorResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"exception"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|responseGM
argument_list|)
argument_list|)
expr_stmt|;
name|XEInterface
operator|.
name|Error
name|error
init|=
name|responseGM
operator|.
name|getError
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|message
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|message
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|description
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|description
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|errorMessage
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|errorMessage
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|exception
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
finally|finally
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|getApiPostTime
argument_list|()
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t2
operator|)
argument_list|)
expr_stmt|;
block|}
name|XEInterface
operator|.
name|RegisterResponse
name|responseGM
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"gm_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|responseGM
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|responseGM
operator|==
literal|null
operator|||
operator|!
name|responseGM
operator|.
name|validStudent
condition|)
block|{
name|String
name|reason
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|responseGM
operator|!=
literal|null
operator|&&
name|responseGM
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|m
range|:
name|responseGM
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
name|reason
operator|=
name|m
expr_stmt|;
else|else
name|reason
operator|+=
literal|"\n"
operator|+
name|m
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SectioningException
argument_list|(
name|reason
operator|==
literal|null
condition|?
literal|"Failed to change grade modes."
else|:
name|reason
argument_list|)
throw|;
block|}
if|if
condition|(
name|responseGM
operator|.
name|registrations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|responseGM
operator|.
name|registrations
control|)
block|{
if|if
condition|(
literal|"Registered"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusDescription
argument_list|)
condition|)
block|{
if|if
condition|(
name|reg
operator|.
name|gradingMode
operator|!=
literal|null
condition|)
block|{
name|String
name|desc
init|=
name|code2desc
operator|.
name|get
argument_list|(
name|reg
operator|.
name|gradingMode
argument_list|)
decl_stmt|;
name|gradeModes
operator|.
name|addGradeMode
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|,
operator|new
name|GradeMode
argument_list|(
name|reg
operator|.
name|gradingMode
argument_list|,
name|desc
operator|!=
literal|null
condition|?
name|desc
else|:
name|reg
operator|.
name|gradingModeDescription
argument_list|,
name|resetGradeModes
operator|!=
literal|null
operator|&&
operator|!
name|resetGradeModes
operator|.
name|isEmpty
argument_list|()
operator|&&
name|reg
operator|.
name|gradingMode
operator|.
name|matches
argument_list|(
name|resetGradeModes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reg
operator|.
name|creditHour
operator|!=
literal|null
condition|)
block|{
name|gradeModes
operator|.
name|addCreditHour
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|,
name|reg
operator|.
name|creditHour
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|action
label|:
for|for
control|(
name|RegisterAction
name|action
range|:
name|reqGM
operator|.
name|actionsAndOptions
control|)
block|{
name|XCourse
name|course
init|=
name|id2course
operator|.
name|get
argument_list|(
name|action
operator|.
name|courseReferenceNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|XSection
name|section
range|:
name|id2section
operator|.
name|get
argument_list|(
name|action
operator|.
name|courseReferenceNumber
argument_list|)
control|)
block|{
for|for
control|(
name|EnrollmentFailure
name|ef
range|:
name|fails
control|)
if|if
condition|(
name|section
operator|.
name|equals
argument_list|(
name|ef
operator|.
name|getSection
argument_list|()
argument_list|)
condition|)
block|{
name|ef
operator|.
name|addError
argument_list|(
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_GRADE_MODE
operator|.
name|name
argument_list|()
argument_list|,
literal|"Failed to change grade mode for "
operator|+
name|action
operator|.
name|courseReferenceNumber
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ef
operator|.
name|setMessage
argument_list|(
name|ef
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\nFailed to change grade mode for "
operator|+
name|action
operator|.
name|courseReferenceNumber
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue
name|action
continue|;
block|}
block|}
for|for
control|(
name|XSection
name|section
range|:
name|id2section
operator|.
name|get
argument_list|(
name|action
operator|.
name|courseReferenceNumber
argument_list|)
control|)
block|{
name|fails
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|course
argument_list|,
name|section
argument_list|,
literal|"Failed to change grade mode for "
operator|+
name|action
operator|.
name|courseReferenceNumber
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|new
name|EnrollmentError
argument_list|(
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_GRADE_MODE
operator|.
name|name
argument_list|()
argument_list|,
literal|"Failed to change grade mode for "
operator|+
name|action
operator|.
name|courseReferenceNumber
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.gradeModeWarnings"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|EnrollmentRequest
name|request
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|request
operator|.
name|hasGradeMode
argument_list|()
condition|)
block|{
name|String
name|originalGradeMode
init|=
name|request
operator|.
name|getGradeMode
argument_list|()
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|GradeMode
name|gm
init|=
name|gradeModes
operator|.
name|getGradeMode
argument_list|(
name|section
operator|.
name|getExternalId
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|gm
operator|!=
literal|null
operator|&&
operator|!
name|originalGradeMode
operator|.
name|equals
argument_list|(
name|gm
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
block|{
name|fails
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
argument_list|,
name|section
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.warn.gradeModeChanged"
argument_list|,
literal|"Grade mode changed back to {label}."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{label}"
argument_list|,
name|gm
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{code}"
argument_list|,
name|gm
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|setInfo
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.creditWarnings"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|EnrollmentRequest
name|request
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|request
operator|.
name|hasCreditHour
argument_list|()
condition|)
block|{
name|float
name|originalCreditHour
init|=
name|request
operator|.
name|getCreditHour
argument_list|()
decl_stmt|;
name|float
name|creditHour
init|=
literal|0f
decl_stmt|;
name|XSection
name|creditSection
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Float
name|credit
init|=
name|gradeModes
operator|.
name|getCreditHour
argument_list|(
name|section
operator|.
name|getExternalId
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
name|creditHour
operator|+=
name|credit
expr_stmt|;
if|if
condition|(
name|creditSection
operator|==
literal|null
operator|||
name|credit
operator|>
literal|0f
condition|)
name|creditSection
operator|=
name|section
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|creditHour
operator|-
name|originalCreditHour
argument_list|)
operator|>
literal|0.01
operator|&&
name|creditSection
operator|!=
literal|null
condition|)
block|{
name|fails
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
argument_list|,
name|creditSection
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.warn.creditChanged"
argument_list|,
literal|"Variable credit changed back to {credit} credit hour(s)."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.#"
argument_list|)
operator|.
name|format
argument_list|(
name|creditHour
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|setInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Return: "
operator|+
name|fails
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fails
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|EnrollmentFailure
name|f
range|:
name|fails
control|)
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addMessageBuilder
argument_list|()
operator|.
name|setText
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
return|return
name|fails
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|info
argument_list|(
literal|"Banner enrollment failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"Banner enrollment failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
try|try
block|{
name|iClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAllowWaitListing
parameter_list|()
block|{
return|return
name|isBannerAdmin
argument_list|()
operator|&&
name|isBannerWaitlist
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|requestUpdate
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|Collection
argument_list|<
name|XStudent
argument_list|>
name|students
parameter_list|)
throws|throws
name|SectioningException
block|{
return|return
literal|false
return|;
block|}
specifier|protected
name|boolean
name|updateStudentRegistration
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|List
argument_list|<
name|XEInterface
operator|.
name|Registration
argument_list|>
name|registration
parameter_list|)
throws|throws
name|SectioningException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCanRequestUpdates
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|XEnrollment
name|resection
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|SectioningRequest
name|sectioningRequest
parameter_list|,
name|XEnrollment
name|enrollment
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Start with a few lookups
name|XStudent
name|student
init|=
name|sectioningRequest
operator|.
name|getStudent
argument_list|()
decl_stmt|;
name|XCourseId
name|course
init|=
name|sectioningRequest
operator|.
name|getRequest
argument_list|()
operator|.
name|getCourseIdByOfferingId
argument_list|(
name|sectioningRequest
operator|.
name|getOffering
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Remove sections that are to be kept (they are included in both enrollments)
name|Set
argument_list|<
name|String
argument_list|>
name|idsToAdd
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|,
name|idsToDrop
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|sectioningRequest
operator|.
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|sectioningRequest
operator|.
name|getOldOffering
argument_list|()
operator|.
name|getSections
argument_list|(
name|sectioningRequest
operator|.
name|getLastEnrollment
argument_list|()
argument_list|)
control|)
name|idsToDrop
operator|.
name|add
argument_list|(
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XSection
name|section
range|:
name|sectioningRequest
operator|.
name|getOffering
argument_list|()
operator|.
name|getSections
argument_list|(
name|enrollment
argument_list|)
control|)
name|idsToAdd
operator|.
name|add
argument_list|(
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|idsToDrop
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
name|idsToAdd
operator|.
name|remove
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// Return the new enrollment when there is no change detected
if|if
condition|(
name|idsToAdd
operator|.
name|isEmpty
argument_list|()
operator|&&
name|idsToDrop
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|enrollment
return|;
comment|// Retrieve academic session, banner term etc.
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|idsToAdd
operator|.
name|isEmpty
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Enrolling "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" (term: "
operator|+
name|term
operator|+
literal|", id:"
operator|+
name|getBannerId
argument_list|(
name|student
argument_list|)
operator|+
operator|(
name|idsToDrop
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", drop: "
operator|+
name|idsToDrop
operator|)
operator|+
literal|", add: "
operator|+
name|idsToAdd
operator|+
literal|")"
argument_list|)
expr_stmt|;
else|else
name|helper
operator|.
name|debug
argument_list|(
literal|"Dropping "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" from "
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" (term: "
operator|+
name|term
operator|+
literal|", id:"
operator|+
name|getBannerId
argument_list|(
name|student
argument_list|)
operator|+
literal|", drop: "
operator|+
name|idsToDrop
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
comment|// First, check student registration status
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getBannerSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setChallengeResponse
argument_list|(
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
name|getBannerUser
argument_list|(
literal|true
argument_list|)
argument_list|,
name|getBannerPassword
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"bannerId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
name|getAdminParameter
argument_list|()
argument_list|,
literal|"SB"
argument_list|)
expr_stmt|;
name|sectioningRequest
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|sectioningRequest
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"bannerId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|XEInterface
operator|.
name|ErrorResponse
name|response
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|ErrorResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|ErrorResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|sectioningRequest
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"exception"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|XEInterface
operator|.
name|Error
name|error
init|=
name|response
operator|.
name|getError
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|message
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|message
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|description
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|description
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|errorMessage
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|errorMessage
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|exception
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
finally|finally
block|{
name|sectioningRequest
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
name|current
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|TYPE_LIST
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|sectioningRequest
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"original"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
name|XEInterface
operator|.
name|RegisterResponse
name|original
init|=
operator|(
name|current
operator|!=
literal|null
operator|&&
operator|!
name|current
operator|.
name|isEmpty
argument_list|()
condition|?
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
comment|// Check status, memorize enrolled sections
if|if
condition|(
name|original
operator|!=
literal|null
operator|&&
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Current registration: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
operator|||
operator|!
name|original
operator|.
name|validStudent
condition|)
block|{
name|String
name|reason
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
operator|&&
name|original
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|m
range|:
name|original
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
name|reason
operator|=
name|m
expr_stmt|;
else|else
name|reason
operator|+=
literal|"\n"
operator|+
name|m
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SectioningException
argument_list|(
name|reason
operator|==
literal|null
condition|?
literal|"Failed to check student registration status."
else|:
name|reason
argument_list|)
throw|;
block|}
name|XEInterface
operator|.
name|RegisterRequest
name|req
init|=
operator|new
name|XEInterface
operator|.
name|RegisterRequest
argument_list|(
name|term
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|getConditionalAddDrop
argument_list|(
literal|true
argument_list|)
operator|!=
name|ConditionalDropType
operator|.
name|NEVER
condition|)
name|req
operator|.
name|setConditionalAddDrop
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|actions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|registrations
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|original
operator|.
name|registrations
control|)
block|{
if|if
condition|(
name|reg
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
if|if
condition|(
name|idsToDrop
operator|.
name|contains
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|reg
operator|.
name|canDrop
argument_list|(
literal|true
argument_list|,
name|actions
argument_list|)
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Section "
operator|+
name|reg
operator|.
name|courseReferenceNumber
operator|+
literal|" is not available for student scheduling."
argument_list|)
throw|;
name|req
operator|.
name|drop
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|,
name|actions
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|req
operator|.
name|keep
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|idsToAdd
operator|.
name|remove
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|reg
operator|.
name|canAdd
argument_list|(
literal|true
argument_list|)
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Section "
operator|+
name|reg
operator|.
name|courseReferenceNumber
operator|+
literal|" is not available for student scheduling."
argument_list|)
throw|;
name|req
operator|.
name|add
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|id
range|:
name|idsToAdd
control|)
block|{
name|req
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|sectioningRequest
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|changed
condition|)
block|{
comment|// no classes to add or drop -> return no failures
return|return
name|enrollment
return|;
block|}
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|RegisterRequest
argument_list|>
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|XEInterface
operator|.
name|ErrorResponse
name|response
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|ErrorResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|ErrorResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|sectioningRequest
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"exception"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|XEInterface
operator|.
name|Error
name|error
init|=
name|response
operator|.
name|getError
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|message
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|message
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|description
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|description
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|errorMessage
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|errorMessage
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|exception
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
finally|finally
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
block|}
comment|// Finally, check the response
name|XEInterface
operator|.
name|RegisterResponse
name|response
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|sectioningRequest
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|==
literal|null
operator|||
operator|!
name|response
operator|.
name|validStudent
condition|)
block|{
name|String
name|reason
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|m
range|:
name|response
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
name|reason
operator|=
name|m
expr_stmt|;
else|else
name|reason
operator|+=
literal|"\n"
operator|+
name|m
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SectioningException
argument_list|(
name|reason
operator|==
literal|null
condition|?
literal|"Failed to enroll student."
else|:
name|reason
argument_list|)
throw|;
block|}
name|XEnrollment
name|ret
init|=
operator|new
name|XEnrollment
argument_list|(
name|enrollment
operator|==
literal|null
condition|?
name|sectioningRequest
operator|.
name|getLastEnrollment
argument_list|()
else|:
name|enrollment
argument_list|)
decl_stmt|;
name|ret
operator|.
name|getSectionIds
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|registered
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|registrations
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|external
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|external
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|response
operator|.
name|registrations
control|)
block|{
name|String
name|id
init|=
name|reg
operator|.
name|courseReferenceNumber
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|sectioningRequest
operator|.
name|getOffering
argument_list|()
operator|.
name|getSections
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sections
operator|.
name|isEmpty
argument_list|()
operator|&&
literal|"Registered"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusDescription
argument_list|)
condition|)
block|{
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
name|ret
operator|.
name|getSectionIds
argument_list|()
operator|.
name|add
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
expr_stmt|;
name|registered
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Registered"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusDescription
argument_list|)
condition|)
block|{
name|external
operator|.
name|addSectionBuilder
argument_list|()
operator|.
name|setClazz
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
argument_list|)
operator|.
name|setCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|subject
operator|+
literal|" "
operator|+
name|reg
operator|.
name|courseNumber
argument_list|)
argument_list|)
operator|.
name|setSubpart
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|scheduleType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sectioningRequest
operator|.
name|getAction
argument_list|()
operator|.
name|addEnrollment
argument_list|(
name|external
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Return: "
operator|+
name|registered
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|.
name|getSectionIds
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|ret
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|info
argument_list|(
literal|"Banner enrollment failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"Banner enrollment failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

