begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
operator|.
name|CSVField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningSaver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|FlushMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|ChallengeScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingConsentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomStudentEnrollmentHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|InMemoryReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|XEBatchSolverSaver
extends|extends
name|StudentSectioningSaver
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|XEBatchSolverSaver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|iInitiative
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iTerm
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iYear
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iOwnerId
init|=
literal|null
decl_stmt|;
specifier|private
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|private
name|Client
name|iClient
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|private
name|AcademicSessionInfo
name|iSession
decl_stmt|;
specifier|private
name|String
name|iHoldPassword
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iRegistrationDate
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iActionAdd
init|=
literal|null
decl_stmt|,
name|iActionDrop
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iConditionalAddDrop
init|=
literal|true
decl_stmt|;
specifier|private
name|InMemoryReport
name|iCSV
decl_stmt|;
specifier|private
name|boolean
name|iAutoOverrides
init|=
literal|false
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|iAllowedOverrides
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iNrThreads
init|=
literal|1
decl_stmt|;
specifier|private
name|boolean
name|iCanContinue
init|=
literal|true
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseOffering
argument_list|>
name|iCourses
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Class_
argument_list|>
name|iClasses
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XStudent
argument_list|>
name|iUpdatedStudents
init|=
operator|new
name|ArrayList
argument_list|<
name|XStudent
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|XEBatchSolverSaver
parameter_list|(
name|Solver
name|solver
parameter_list|)
block|{
name|super
argument_list|(
name|solver
argument_list|)
expr_stmt|;
name|iInitiative
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Initiative"
argument_list|)
expr_stmt|;
name|iYear
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Year"
argument_list|)
expr_stmt|;
name|iTerm
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Term"
argument_list|)
expr_stmt|;
name|iOwnerId
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
expr_stmt|;
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
name|iHoldPassword
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Save.XE.HoldPassword"
argument_list|)
expr_stmt|;
name|iRegistrationDate
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Save.XE.RegistrationDate"
argument_list|)
expr_stmt|;
name|iActionAdd
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Save.XE.ActionAdd"
argument_list|,
literal|"RE"
argument_list|)
expr_stmt|;
name|iActionDrop
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Save.XE.ActionDrop"
argument_list|,
literal|"DDD"
argument_list|)
expr_stmt|;
name|iConditionalAddDrop
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Save.XE.ConditionalAddDrop"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iAutoOverrides
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Save.XE.AutoOverrides"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|allowedOverrides
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Save.XE.AllowedOverrides"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowedOverrides
operator|!=
literal|null
operator|&&
operator|!
name|allowedOverrides
operator|.
name|isEmpty
argument_list|()
condition|)
name|iAllowedOverrides
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|allowedOverrides
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iNrThreads
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyInt
argument_list|(
literal|"Save.XE.NrSaveThreads"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|iCSV
operator|=
operator|new
name|InMemoryReport
argument_list|(
literal|"XE"
argument_list|,
literal|"Last XE Enrollment Results ("
operator|+
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_TIME_STAMP_SHORT
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StudentSolver
operator|)
name|solver
operator|)
operator|.
name|setReport
argument_list|(
name|iCSV
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|()
throws|throws
name|Exception
block|{
name|iProgress
operator|.
name|setStatus
argument_list|(
literal|"Saving solution ..."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Protocol
argument_list|>
name|protocols
init|=
operator|new
name|ArrayList
argument_list|<
name|Protocol
argument_list|>
argument_list|()
decl_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
expr_stmt|;
name|iClient
operator|=
operator|new
name|Client
argument_list|(
name|protocols
argument_list|)
expr_stmt|;
name|iCSV
operator|.
name|setHeader
argument_list|(
operator|new
name|CSVField
index|[]
block|{
operator|new
name|CSVField
argument_list|(
literal|"PUID"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Name"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Course"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"CRN"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Request"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Status"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Message"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Used Override"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hibSession
operator|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|setCacheMode
argument_list|(
name|CacheMode
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
expr_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|iInitiative
argument_list|,
name|iYear
argument_list|,
name|iTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Session "
operator|+
name|iInitiative
operator|+
literal|" "
operator|+
name|iTerm
operator|+
name|iYear
operator|+
literal|" not found!"
argument_list|)
throw|;
name|ApplicationProperties
operator|.
name|setSessionId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|iSession
operator|=
operator|new
name|AcademicSessionInfo
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|save
argument_list|(
name|session
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iUpdatedStudents
operator|.
name|isEmpty
argument_list|()
operator|&&
name|CustomStudentEnrollmentHolder
operator|.
name|isCanRequestUpdates
argument_list|()
condition|)
block|{
name|CustomStudentEnrollmentHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|requestUpdate
argument_list|(
operator|(
name|OnlineSectioningServer
operator|)
name|getSolver
argument_list|()
argument_list|,
operator|new
name|OnlineSectioningHelper
argument_list|(
name|hibSession
argument_list|,
name|getUser
argument_list|()
argument_list|)
argument_list|,
name|iUpdatedStudents
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|fatal
argument_list|(
literal|"Unable to save , reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hibSession
operator|!=
literal|null
operator|&&
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|iClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Session
name|session
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|setPhase
argument_list|(
literal|"Loading classes..."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iClasses
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
operator|(
name|List
argument_list|<
name|Class_
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ c where "
operator|+
literal|"c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|iClasses
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
name|incProgress
argument_list|()
expr_stmt|;
name|iCourses
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseOffering
argument_list|>
argument_list|()
expr_stmt|;
name|setPhase
argument_list|(
literal|"Loading courses..."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from CourseOffering c where c.subjectArea.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|iCourses
operator|.
name|put
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
name|incProgress
argument_list|()
expr_stmt|;
name|setPhase
argument_list|(
literal|"Enrolling students..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iNrThreads
operator|<=
literal|1
condition|)
block|{
for|for
control|(
name|Student
name|student
range|:
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|isDummy
argument_list|()
condition|)
continue|continue;
name|saveStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Worker
argument_list|>
name|workers
init|=
operator|new
name|ArrayList
argument_list|<
name|Worker
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Student
argument_list|>
name|students
init|=
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iNrThreads
condition|;
name|i
operator|++
control|)
name|workers
operator|.
name|add
argument_list|(
operator|new
name|Worker
argument_list|(
name|i
argument_list|,
name|students
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Worker
name|worker
range|:
name|workers
control|)
name|worker
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|Worker
name|worker
range|:
name|workers
control|)
block|{
try|try
block|{
name|worker
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|iCanContinue
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|worker
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|x
parameter_list|)
block|{
block|}
block|}
block|}
if|if
condition|(
operator|!
name|iCanContinue
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The save was interrupted."
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|saveStudent
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|long
name|c0
init|=
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
decl_stmt|;
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|action
operator|.
name|setOperation
argument_list|(
literal|"batch-enroll"
argument_list|)
expr_stmt|;
name|action
operator|.
name|setSession
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|iSession
operator|.
name|toCompactString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|setStartTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|setUser
argument_list|(
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|STUDENT
argument_list|)
argument_list|)
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|requested
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|requested
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|REQUESTED
argument_list|)
expr_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|action
operator|.
name|addRequest
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
name|Enrollment
name|e
init|=
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
for|for
control|(
name|Section
name|section
range|:
name|e
operator|.
name|getSections
argument_list|()
control|)
name|requested
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|requested
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CSVField
index|[]
argument_list|>
name|csv
init|=
operator|new
name|ArrayList
argument_list|<
name|CSVField
index|[]
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|enroll
argument_list|(
name|student
argument_list|,
name|getCrns
argument_list|(
name|student
argument_list|)
argument_list|,
name|action
argument_list|,
name|csv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"Enrollment failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Enrollment failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Enrollment failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|String
name|puid
init|=
name|getBannerId
argument_list|(
name|student
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|getCrns
argument_list|(
name|student
argument_list|)
control|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
continue|continue;
name|csv
operator|.
name|add
argument_list|(
operator|new
name|CSVField
index|[]
block|{
operator|new
name|CSVField
argument_list|(
name|puid
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|getCourseNameForCrn
argument_list|(
name|student
argument_list|,
name|id
argument_list|)
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|id
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Add"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Failed"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FAILURE
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|instanceof
name|SectioningException
condition|)
name|action
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|action
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|action
operator|.
name|setEndTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|setCpuTime
argument_list|(
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
operator|-
name|c0
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|table
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|iCSV
init|)
block|{
for|for
control|(
name|CSVField
index|[]
name|line
range|:
name|csv
control|)
block|{
if|if
condition|(
name|table
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|table
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|table
operator|.
name|append
argument_list|(
name|iCSV
operator|.
name|addLine
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"table"
argument_list|)
operator|.
name|setValue
argument_list|(
name|table
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iUpdatedStudents
operator|.
name|add
argument_list|(
operator|new
name|XStudent
argument_list|(
name|student
argument_list|,
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|OnlineSectioningLogger
operator|.
name|getInstance
argument_list|()
operator|.
name|record
argument_list|(
name|OnlineSectioningLog
operator|.
name|Log
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAction
argument_list|(
name|action
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getCrns
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|crns
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|CourseOffering
name|course
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
name|iClasses
operator|.
name|get
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|course
operator|!=
literal|null
condition|)
name|crns
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|crns
return|;
block|}
specifier|protected
name|Gson
name|getGson
parameter_list|()
block|{
name|GsonBuilder
name|builder
init|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|DateTime
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|toString
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DateTime
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|create
argument_list|()
return|;
block|}
specifier|protected
name|void
name|enroll
parameter_list|(
name|Student
name|student
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|crns
parameter_list|,
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
parameter_list|,
name|List
argument_list|<
name|CSVField
index|[]
argument_list|>
name|csv
parameter_list|)
throws|throws
name|IOException
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"["
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|"] "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|crns
argument_list|)
expr_stmt|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.site"
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setChallengeResponse
argument_list|(
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.admin.user"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.admin.password"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|term
init|=
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|iSession
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|iExternalTermProvider
operator|.
name|getExternalCampus
argument_list|(
name|iSession
argument_list|)
decl_stmt|;
name|String
name|puid
init|=
name|getBannerId
argument_list|(
name|student
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"bannerId"
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"systemIn"
argument_list|,
literal|"SB"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"persona"
argument_list|,
literal|"SB"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iHoldPassword
operator|!=
literal|null
operator|&&
operator|!
name|iHoldPassword
operator|.
name|isEmpty
argument_list|()
condition|)
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"holdPassword"
argument_list|,
name|iHoldPassword
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"bannerId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|()
decl_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|XEInterface
operator|.
name|RegisterResponse
name|original
init|=
literal|null
decl_stmt|;
try|try
block|{
name|original
operator|=
name|getSchedule
argument_list|(
name|student
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|action
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"original"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|noadd
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodrop
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|notregistered
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|XEInterface
operator|.
name|Registration
argument_list|>
name|registered
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|XEInterface
operator|.
name|Registration
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|registrations
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|previous
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|previous
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|PREVIOUS
argument_list|)
expr_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|original
operator|.
name|registrations
control|)
block|{
if|if
condition|(
name|reg
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
name|registered
operator|.
name|put
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|,
name|reg
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reg
operator|.
name|can
argument_list|(
name|iActionDrop
argument_list|)
condition|)
name|nodrop
operator|.
name|add
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
expr_stmt|;
name|previous
operator|.
name|addSectionBuilder
argument_list|()
operator|.
name|setClazz
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
argument_list|)
operator|.
name|setCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|subject
operator|+
literal|" "
operator|+
name|reg
operator|.
name|courseNumber
argument_list|)
argument_list|)
operator|.
name|setSubpart
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|scheduleType
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|notregistered
operator|.
name|add
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reg
operator|.
name|can
argument_list|(
name|iActionAdd
argument_list|)
condition|)
name|noadd
operator|.
name|add
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
expr_stmt|;
block|}
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|previous
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|XEInterface
operator|.
name|RegisterRequest
name|req
init|=
operator|new
name|XEInterface
operator|.
name|RegisterRequest
argument_list|(
name|term
argument_list|,
name|puid
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|iHoldPassword
operator|!=
literal|null
operator|&&
operator|!
name|iHoldPassword
operator|.
name|isEmpty
argument_list|()
condition|)
name|req
operator|.
name|holdPassword
operator|=
name|iHoldPassword
expr_stmt|;
if|if
condition|(
name|iRegistrationDate
operator|!=
literal|null
operator|&&
operator|!
name|iRegistrationDate
operator|.
name|isEmpty
argument_list|()
condition|)
name|req
operator|.
name|registrationDate
operator|=
name|iRegistrationDate
expr_stmt|;
if|if
condition|(
name|iConditionalAddDrop
condition|)
name|req
operator|.
name|conditionalAddDrop
operator|=
literal|"Y"
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|crns
control|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|registered
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
operator|&&
name|noadd
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|csv
operator|.
name|add
argument_list|(
operator|new
name|CSVField
index|[]
block|{
operator|new
name|CSVField
argument_list|(
name|puid
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|getCourseNameForCrn
argument_list|(
name|student
argument_list|,
name|id
argument_list|)
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|id
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Add"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Failed"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Action "
operator|+
name|iActionAdd
operator|+
literal|" is not allowed."
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|warn
argument_list|(
literal|"["
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|"] "
operator|+
name|id
operator|+
literal|": Action "
operator|+
name|iActionAdd
operator|+
literal|" is not allowed."
argument_list|)
expr_stmt|;
name|action
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|action
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|WARN
argument_list|)
operator|.
name|setText
argument_list|(
name|id
operator|+
literal|": Action "
operator|+
name|iActionAdd
operator|+
literal|" is not allowed."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|registered
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
if|if
condition|(
name|added
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
name|keep
argument_list|(
name|req
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|added
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
name|add
argument_list|(
name|req
argument_list|,
name|id
argument_list|,
name|notregistered
operator|.
name|contains
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|dropped
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|registered
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|added
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
continue|continue;
name|XEInterface
operator|.
name|Registration
name|reg
init|=
name|registered
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|campus
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|campus
argument_list|)
condition|)
block|{
if|if
condition|(
name|added
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
name|keep
argument_list|(
name|req
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|nodrop
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|csv
operator|.
name|add
argument_list|(
operator|new
name|CSVField
index|[]
block|{
operator|new
name|CSVField
argument_list|(
name|puid
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|reg
operator|.
name|subject
operator|+
literal|" "
operator|+
name|reg
operator|.
name|courseNumber
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|id
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Drop"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Failed"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Action "
operator|+
name|iActionDrop
operator|+
literal|" is not allowed."
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|warn
argument_list|(
literal|"["
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|"] "
operator|+
name|id
operator|+
literal|": Action "
operator|+
name|iActionDrop
operator|+
literal|" is not allowed."
argument_list|)
expr_stmt|;
name|action
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|action
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|WARN
argument_list|)
operator|.
name|setText
argument_list|(
name|id
operator|+
literal|": Action "
operator|+
name|iActionDrop
operator|+
literal|" is not allowed."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|added
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
name|keep
argument_list|(
name|req
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|drop
argument_list|(
name|req
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|dropped
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|appliedOverrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|XEInterface
operator|.
name|RegisterResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|postChanges
argument_list|(
name|resource
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|action
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|iAutoOverrides
operator|&&
name|response
operator|.
name|registrations
operator|!=
literal|null
condition|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|response
operator|.
name|registrations
control|)
block|{
name|String
name|id
init|=
name|reg
operator|.
name|courseReferenceNumber
decl_stmt|;
if|if
condition|(
name|reg
operator|.
name|crnErrors
operator|!=
literal|null
operator|&&
literal|"F"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusIndicator
argument_list|)
condition|)
block|{
for|for
control|(
name|XEInterface
operator|.
name|CrnError
name|e
range|:
name|reg
operator|.
name|crnErrors
control|)
block|{
name|String
name|override
init|=
name|getDefaultOverride
argument_list|(
name|student
argument_list|,
name|id
argument_list|,
name|e
operator|.
name|messageType
argument_list|)
decl_stmt|;
if|if
condition|(
name|override
operator|!=
literal|null
operator|&&
name|iAllowedOverrides
operator|.
name|contains
argument_list|(
name|override
argument_list|)
condition|)
block|{
if|if
condition|(
name|addOverride
argument_list|(
name|student
argument_list|,
name|req
argument_list|,
name|id
argument_list|,
name|override
argument_list|,
name|appliedOverrides
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|iConditionalAddDrop
operator|&&
name|dropped
operator|.
name|contains
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
operator|&&
operator|(
literal|"Deleted"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusDescription
argument_list|)
operator|||
literal|"Dropped"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusDescription
argument_list|)
operator|)
condition|)
block|{
name|removeAction
argument_list|(
name|req
argument_list|,
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|changed
condition|)
break|break;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"request-override-"
operator|+
name|index
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|response
operator|=
name|postChanges
argument_list|(
name|resource
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|action
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t2
operator|+
name|action
operator|.
name|getApiPostTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response-override-"
operator|+
name|index
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|checked
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|registrations
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|stored
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|stored
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|STORED
argument_list|)
expr_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|response
operator|.
name|registrations
control|)
block|{
if|if
condition|(
literal|"Registered"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusDescription
argument_list|)
condition|)
block|{
name|stored
operator|.
name|addSectionBuilder
argument_list|()
operator|.
name|setClazz
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
argument_list|)
operator|.
name|setCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|subject
operator|+
literal|" "
operator|+
name|reg
operator|.
name|courseNumber
argument_list|)
argument_list|)
operator|.
name|setSubpart
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|reg
operator|.
name|scheduleType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|id
init|=
name|reg
operator|.
name|courseReferenceNumber
decl_stmt|;
name|checked
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|String
name|op
init|=
operator|(
name|added
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|?
literal|"Add"
else|:
literal|"Drop"
operator|)
decl_stmt|;
if|if
condition|(
name|notregistered
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
continue|continue;
name|String
name|error
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reg
operator|.
name|crnErrors
operator|!=
literal|null
operator|&&
operator|!
name|reg
operator|.
name|crnErrors
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|XEInterface
operator|.
name|CrnError
name|e
range|:
name|reg
operator|.
name|crnErrors
control|)
block|{
if|if
condition|(
name|error
operator|==
literal|null
condition|)
name|error
operator|=
name|e
operator|.
name|messageType
operator|+
literal|": "
operator|+
name|e
operator|.
name|message
expr_stmt|;
else|else
name|error
operator|+=
literal|"\n"
operator|+
name|e
operator|.
name|messageType
operator|+
literal|": "
operator|+
name|e
operator|.
name|message
expr_stmt|;
empty_stmt|;
block|}
name|csv
operator|.
name|add
argument_list|(
operator|new
name|CSVField
index|[]
block|{
operator|new
name|CSVField
argument_list|(
name|puid
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|reg
operator|.
name|subject
operator|+
literal|" "
operator|+
name|reg
operator|.
name|courseNumber
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|id
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|op
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|reg
operator|.
name|statusDescription
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|error
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|getOverride
argument_list|(
name|req
argument_list|,
name|id
argument_list|,
name|appliedOverrides
argument_list|)
argument_list|)
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"F"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusIndicator
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"["
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|"] "
operator|+
name|id
operator|+
literal|": "
operator|+
name|error
argument_list|)
expr_stmt|;
name|action
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|action
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|WARN
argument_list|)
operator|.
name|setText
argument_list|(
name|id
operator|+
literal|": "
operator|+
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"["
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|"] "
operator|+
name|id
operator|+
literal|": "
operator|+
name|error
argument_list|)
expr_stmt|;
name|action
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|INFO
argument_list|)
operator|.
name|setText
argument_list|(
name|id
operator|+
literal|": "
operator|+
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|stored
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|failedRegistrations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XEInterface
operator|.
name|FailedRegistration
name|reg
range|:
name|response
operator|.
name|failedRegistrations
control|)
block|{
if|if
condition|(
name|reg
operator|.
name|failedCRN
operator|==
literal|null
operator|||
name|reg
operator|.
name|failure
operator|==
literal|null
condition|)
continue|continue;
name|String
name|id
init|=
name|reg
operator|.
name|failedCRN
decl_stmt|;
name|checked
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|String
name|op
init|=
operator|(
name|added
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|?
literal|"Add"
else|:
literal|"Drop"
operator|)
decl_stmt|;
name|String
name|error
init|=
name|reg
operator|.
name|failure
decl_stmt|;
name|csv
operator|.
name|add
argument_list|(
operator|new
name|CSVField
index|[]
block|{
operator|new
name|CSVField
argument_list|(
name|puid
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|getCourseNameForCrn
argument_list|(
name|student
argument_list|,
name|id
argument_list|)
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|id
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|op
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Failed"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|error
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|getOverride
argument_list|(
name|req
argument_list|,
name|id
argument_list|,
name|appliedOverrides
argument_list|)
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|warn
argument_list|(
literal|"["
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|"] "
operator|+
name|id
operator|+
literal|": "
operator|+
name|error
argument_list|)
expr_stmt|;
name|action
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|action
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|WARN
argument_list|)
operator|.
name|setText
argument_list|(
name|id
operator|+
literal|": "
operator|+
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|ex
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|crns
control|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|checked
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
continue|continue;
name|String
name|op
init|=
operator|(
name|added
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|?
literal|"Add"
else|:
literal|"Drop"
operator|)
decl_stmt|;
name|ex
operator|=
literal|true
expr_stmt|;
name|csv
operator|.
name|add
argument_list|(
operator|new
name|CSVField
index|[]
block|{
operator|new
name|CSVField
argument_list|(
name|puid
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|getCourseNameForCrn
argument_list|(
name|student
argument_list|,
name|id
argument_list|)
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|id
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|op
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Exception"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|response
operator|.
name|registrationException
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|registrationException
operator|!=
literal|null
operator|&&
operator|!
name|ex
condition|)
block|{
name|csv
operator|.
name|add
argument_list|(
operator|new
name|CSVField
index|[]
block|{
operator|new
name|CSVField
argument_list|(
name|puid
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|null
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|null
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|null
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"Exception"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|response
operator|.
name|registrationException
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|registrationException
operator|!=
literal|null
condition|)
block|{
name|action
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FAILURE
argument_list|)
expr_stmt|;
name|action
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|ERROR
argument_list|)
operator|.
name|setText
argument_list|(
name|response
operator|.
name|registrationException
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|registrationException
operator|!=
literal|null
condition|)
name|iProgress
operator|.
name|warn
argument_list|(
literal|"["
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|"] "
operator|+
name|response
operator|.
name|registrationException
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|addOverride
parameter_list|(
name|Student
name|student
parameter_list|,
name|XEInterface
operator|.
name|RegisterRequest
name|req
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|override
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|overrides
parameter_list|)
block|{
if|if
condition|(
name|req
operator|.
name|courseReferenceNumbers
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|XEInterface
operator|.
name|CourseReferenceNumber
name|crn
range|:
name|req
operator|.
name|courseReferenceNumbers
control|)
block|{
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|crn
operator|.
name|courseReferenceNumber
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|"] "
operator|+
literal|"Adding override "
operator|+
name|override
operator|+
literal|" for "
operator|+
name|id
argument_list|)
expr_stmt|;
name|crn
operator|.
name|courseOverride
operator|=
name|override
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|list
init|=
name|overrides
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|override
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|iProgress
operator|.
name|warn
argument_list|(
literal|"["
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|"] "
operator|+
literal|"Failed to add override "
operator|+
name|override
operator|+
literal|" for "
operator|+
name|id
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|protected
name|String
name|getOverride
parameter_list|(
name|XEInterface
operator|.
name|RegisterRequest
name|req
parameter_list|,
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|overrides
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|list
init|=
name|overrides
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|override
range|:
name|list
control|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|override
expr_stmt|;
return|return
name|ret
return|;
block|}
if|if
condition|(
name|req
operator|.
name|courseReferenceNumbers
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|CourseReferenceNumber
name|crn
range|:
name|req
operator|.
name|courseReferenceNumbers
control|)
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|crn
operator|.
name|courseReferenceNumber
argument_list|)
condition|)
return|return
name|crn
operator|.
name|courseOverride
return|;
return|return
literal|null
return|;
block|}
specifier|protected
name|XEInterface
operator|.
name|RegisterResponse
name|getSchedule
parameter_list|(
name|Student
name|student
parameter_list|,
name|ClientResource
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|e
parameter_list|)
block|{
name|handleError
argument_list|(
name|resource
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
name|current
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|TYPE_LIST
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|XEInterface
operator|.
name|RegisterResponse
name|original
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
operator|!
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
name|original
operator|=
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
operator|||
operator|!
name|original
operator|.
name|validStudent
condition|)
block|{
name|String
name|reason
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
operator|&&
name|original
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|m
range|:
name|original
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
literal|"Holds prevent registration."
operator|.
name|equals
argument_list|(
name|m
argument_list|)
operator|&&
name|iHoldPassword
operator|!=
literal|null
operator|&&
operator|!
name|iHoldPassword
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|getHoldSchedule
argument_list|(
name|student
argument_list|,
name|resource
argument_list|)
return|;
if|if
condition|(
literal|"Invalid or undefined Enrollment Status or date range invalid."
operator|.
name|equals
argument_list|(
name|m
argument_list|)
operator|&&
name|iRegistrationDate
operator|!=
literal|null
operator|&&
operator|!
name|iRegistrationDate
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|getHoldSchedule
argument_list|(
name|student
argument_list|,
name|resource
argument_list|)
return|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
name|reason
operator|=
name|m
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|reason
argument_list|)
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Failed to check student registration status."
argument_list|)
throw|;
block|}
return|return
name|original
return|;
block|}
specifier|protected
name|XEInterface
operator|.
name|RegisterResponse
name|getHoldSchedule
parameter_list|(
name|Student
name|student
parameter_list|,
name|ClientResource
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|iHoldPassword
operator|!=
literal|null
operator|&&
operator|!
name|iHoldPassword
operator|.
name|isEmpty
argument_list|()
condition|)
name|iProgress
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|"] "
operator|+
literal|"Using hold password..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRegistrationDate
operator|!=
literal|null
operator|&&
operator|!
name|iRegistrationDate
operator|.
name|isEmpty
argument_list|()
condition|)
name|iProgress
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|"] "
operator|+
literal|"Using registration date..."
argument_list|)
expr_stmt|;
name|XEInterface
operator|.
name|RegisterRequest
name|req
init|=
operator|new
name|XEInterface
operator|.
name|RegisterRequest
argument_list|(
name|resource
operator|.
name|getQueryValue
argument_list|(
literal|"term"
argument_list|)
argument_list|,
name|resource
operator|.
name|getQueryValue
argument_list|(
literal|"bannerId"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|req
operator|.
name|empty
argument_list|()
expr_stmt|;
if|if
condition|(
name|iHoldPassword
operator|!=
literal|null
operator|&&
operator|!
name|iHoldPassword
operator|.
name|isEmpty
argument_list|()
condition|)
name|req
operator|.
name|holdPassword
operator|=
name|iHoldPassword
expr_stmt|;
if|if
condition|(
name|iRegistrationDate
operator|!=
literal|null
operator|&&
operator|!
name|iRegistrationDate
operator|.
name|isEmpty
argument_list|()
condition|)
name|req
operator|.
name|registrationDate
operator|=
name|iRegistrationDate
expr_stmt|;
try|try
block|{
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|RegisterRequest
argument_list|>
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|e
parameter_list|)
block|{
name|handleError
argument_list|(
name|resource
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|XEInterface
operator|.
name|RegisterResponse
name|response
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Failed to check student registration status."
argument_list|)
throw|;
if|else if
condition|(
operator|!
name|response
operator|.
name|validStudent
condition|)
block|{
name|String
name|reason
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|m
range|:
name|response
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
name|reason
operator|=
name|m
expr_stmt|;
else|else
name|reason
operator|+=
literal|"\n"
operator|+
name|m
expr_stmt|;
block|}
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|reason
argument_list|)
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Failed to check student registration status."
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
specifier|protected
name|XEInterface
operator|.
name|RegisterResponse
name|postChanges
parameter_list|(
name|ClientResource
name|resource
parameter_list|,
name|XEInterface
operator|.
name|RegisterRequest
name|req
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|req
operator|.
name|isEmpty
argument_list|()
condition|)
name|req
operator|.
name|empty
argument_list|()
expr_stmt|;
try|try
block|{
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|RegisterRequest
argument_list|>
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|e
parameter_list|)
block|{
name|handleError
argument_list|(
name|resource
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|XEInterface
operator|.
name|RegisterResponse
name|response
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Failed to enroll student."
argument_list|)
throw|;
if|else if
condition|(
operator|!
name|response
operator|.
name|validStudent
condition|)
block|{
name|String
name|reason
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|m
range|:
name|response
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
name|reason
operator|=
name|m
expr_stmt|;
else|else
name|reason
operator|+=
literal|"\n"
operator|+
name|m
expr_stmt|;
block|}
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|reason
argument_list|)
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Failed to enroll student."
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
specifier|protected
name|void
name|handleError
parameter_list|(
name|ClientResource
name|resource
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
try|try
block|{
name|XEInterface
operator|.
name|ErrorResponse
name|response
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|ErrorResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|ErrorResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|XEInterface
operator|.
name|Error
name|error
init|=
name|response
operator|.
name|getError
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|message
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|message
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|description
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|description
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|errorMessage
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|errorMessage
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|exception
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|public
name|String
name|getCourseNameForCrn
parameter_list|(
name|Student
name|student
parameter_list|,
name|String
name|crn
parameter_list|)
block|{
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|CourseOffering
name|course
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
name|iClasses
operator|.
name|get
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|course
operator|!=
literal|null
operator|&&
name|crn
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
argument_list|)
condition|)
return|return
name|course
operator|.
name|getCourseName
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|OfferingConsentType
name|getConsent
parameter_list|(
name|Student
name|student
parameter_list|,
name|String
name|crn
parameter_list|)
block|{
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|CourseOffering
name|course
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
name|iClasses
operator|.
name|get
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|course
operator|!=
literal|null
operator|&&
name|crn
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
argument_list|)
condition|)
name|course
operator|.
name|getConsentType
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Entity
name|getUser
parameter_list|()
block|{
return|return
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|iOwnerId
argument_list|)
operator|.
name|setType
argument_list|(
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|protected
name|void
name|add
parameter_list|(
name|XEInterface
operator|.
name|RegisterRequest
name|req
parameter_list|,
name|String
name|id
parameter_list|,
name|boolean
name|changeStatus
parameter_list|)
block|{
if|if
condition|(
name|iActionAdd
operator|==
literal|null
condition|)
name|req
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|changeStatus
argument_list|)
expr_stmt|;
if|else if
condition|(
name|changeStatus
condition|)
block|{
if|if
condition|(
name|req
operator|.
name|actionsAndOptions
operator|==
literal|null
condition|)
name|req
operator|.
name|actionsAndOptions
operator|=
operator|new
name|ArrayList
argument_list|<
name|XEInterface
operator|.
name|RegisterAction
argument_list|>
argument_list|()
expr_stmt|;
name|req
operator|.
name|actionsAndOptions
operator|.
name|add
argument_list|(
operator|new
name|XEInterface
operator|.
name|RegisterAction
argument_list|(
name|iActionAdd
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|req
operator|.
name|courseReferenceNumbers
operator|==
literal|null
condition|)
name|req
operator|.
name|courseReferenceNumbers
operator|=
operator|new
name|ArrayList
argument_list|<
name|XEInterface
operator|.
name|CourseReferenceNumber
argument_list|>
argument_list|()
expr_stmt|;
name|req
operator|.
name|courseReferenceNumbers
operator|.
name|add
argument_list|(
operator|new
name|XEInterface
operator|.
name|CourseReferenceNumber
argument_list|(
name|id
argument_list|,
name|iActionAdd
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|keep
parameter_list|(
name|XEInterface
operator|.
name|RegisterRequest
name|req
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|req
operator|.
name|keep
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|drop
parameter_list|(
name|XEInterface
operator|.
name|RegisterRequest
name|req
parameter_list|,
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|iActionDrop
operator|==
literal|null
condition|)
name|req
operator|.
name|drop
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
name|req
operator|.
name|actionsAndOptions
operator|==
literal|null
condition|)
name|req
operator|.
name|actionsAndOptions
operator|=
operator|new
name|ArrayList
argument_list|<
name|XEInterface
operator|.
name|RegisterAction
argument_list|>
argument_list|()
expr_stmt|;
name|req
operator|.
name|actionsAndOptions
operator|.
name|add
argument_list|(
operator|new
name|XEInterface
operator|.
name|RegisterAction
argument_list|(
name|iActionDrop
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|removeAction
parameter_list|(
name|XEInterface
operator|.
name|RegisterRequest
name|req
parameter_list|,
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|req
operator|.
name|actionsAndOptions
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Iterator
argument_list|<
name|XEInterface
operator|.
name|RegisterAction
argument_list|>
name|i
init|=
name|req
operator|.
name|actionsAndOptions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|XEInterface
operator|.
name|RegisterAction
name|action
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|action
operator|.
name|courseReferenceNumber
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
specifier|static
name|String
name|defaultOverrides
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"CAMP"
block|,
literal|"CAMPUS"
block|,
literal|"CLAS"
block|,
literal|"CLASS"
block|,
literal|"CLOS"
block|,
literal|"CLOSED"
block|,
literal|"COLL"
block|,
literal|"COLLEGE"
block|,
literal|"CORQ"
block|,
literal|"CO-REQ"
block|,
literal|"DEGR"
block|,
literal|"DEGREE"
block|,
literal|"DEPT"
block|,
literal|"DPT-PERMIT"
block|,
literal|"DUPL"
block|,
literal|"DUP-CRSE"
block|,
literal|"LEVL"
block|,
literal|"LEVEL"
block|,
literal|"MAJR"
block|,
literal|"MAJOR"
block|,
literal|"PREQ"
block|,
literal|"PRE-REQ"
block|,
literal|"PROG"
block|,
literal|"PROGRAM"
block|,
literal|"TIME"
block|,
literal|"TIME-CNFLT"
block|, 		    }
decl_stmt|;
specifier|protected
name|String
name|getDefaultOverride
parameter_list|(
name|Student
name|student
parameter_list|,
name|String
name|crn
parameter_list|,
name|String
name|messageType
parameter_list|)
block|{
if|if
condition|(
literal|"DEPT"
operator|.
name|equals
argument_list|(
name|messageType
argument_list|)
operator|||
literal|"SAPR"
operator|.
name|equals
argument_list|(
name|messageType
argument_list|)
condition|)
block|{
name|OfferingConsentType
name|consent
init|=
name|getConsent
argument_list|(
name|student
argument_list|,
name|crn
argument_list|)
decl_stmt|;
if|if
condition|(
name|consent
operator|!=
literal|null
operator|&&
literal|"IN"
operator|.
name|equals
argument_list|(
name|consent
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
return|return
literal|"INST-PERMT"
return|;
if|else if
condition|(
name|consent
operator|!=
literal|null
operator|&&
literal|"DP"
operator|.
name|equals
argument_list|(
name|consent
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
return|return
literal|"DPT-PERMIT"
return|;
else|else
return|return
literal|"HONORS"
return|;
block|}
name|String
name|override
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|defaultOverrides
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|messageType
operator|.
name|equals
argument_list|(
name|defaultOverrides
index|[
name|i
index|]
argument_list|)
condition|)
name|override
operator|=
name|defaultOverrides
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
block|}
return|return
name|getSolver
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Save.XE.Override."
operator|+
name|messageType
argument_list|,
name|override
argument_list|)
return|;
block|}
specifier|protected
name|void
name|checkTermination
parameter_list|()
block|{
if|if
condition|(
name|getTerminationCondition
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getTerminationCondition
argument_list|()
operator|.
name|canContinue
argument_list|(
name|getSolution
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The save was interrupted."
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|setPhase
parameter_list|(
name|String
name|phase
parameter_list|,
name|long
name|progressMax
parameter_list|)
block|{
name|checkTermination
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
name|phase
argument_list|,
name|progressMax
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|incProgress
parameter_list|()
block|{
name|checkTermination
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
specifier|protected
class|class
name|Worker
extends|extends
name|Thread
block|{
specifier|private
name|Iterator
argument_list|<
name|Student
argument_list|>
name|iStudents
decl_stmt|;
specifier|public
name|Worker
parameter_list|(
name|int
name|index
parameter_list|,
name|Iterator
argument_list|<
name|Student
argument_list|>
name|students
parameter_list|)
block|{
name|setName
argument_list|(
literal|"XESaver-"
operator|+
operator|(
literal|1
operator|+
name|index
operator|)
argument_list|)
expr_stmt|;
name|iStudents
operator|=
name|students
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|iProgress
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" has started."
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Student
name|student
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|iStudents
init|)
block|{
if|if
condition|(
operator|!
name|iCanContinue
condition|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" has stopped."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|iStudents
operator|.
name|hasNext
argument_list|()
condition|)
break|break;
name|student
operator|=
name|iStudents
operator|.
name|next
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|student
operator|.
name|isDummy
argument_list|()
condition|)
name|saveStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" has finished."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

