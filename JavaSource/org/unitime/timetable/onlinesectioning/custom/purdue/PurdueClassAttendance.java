begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|NoteInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomClassAttendanceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|CalendarUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PurdueClassAttendance
implements|implements
name|CustomClassAttendanceProvider
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PurdueClassAttendance
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|GwtConstants
name|CONST
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Client
name|iClient
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|public
name|PurdueClassAttendance
parameter_list|()
block|{
name|List
argument_list|<
name|Protocol
argument_list|>
name|protocols
init|=
operator|new
name|ArrayList
argument_list|<
name|Protocol
argument_list|>
argument_list|()
decl_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
expr_stmt|;
name|iClient
operator|=
operator|new
name|Client
argument_list|(
name|protocols
argument_list|)
expr_stmt|;
name|Context
name|cx
init|=
operator|new
name|Context
argument_list|()
decl_stmt|;
name|cx
operator|.
name|getParameters
argument_list|()
operator|.
name|add
argument_list|(
literal|"readTimeout"
argument_list|,
name|getClassAttendanceApiReadTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|iClient
operator|.
name|setContext
argument_list|(
name|cx
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getClassAttendanceApiReadTimeout
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.classAttendance.readTimeout"
argument_list|,
literal|"60000"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getClassAttendanceApiSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.classAttendance.site"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getClassAttendanceApiKey
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.classAttendance.apiKey"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getStudentClassAttendanceApiSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.classAttendance.getStudentMeetPlan"
argument_list|,
name|getClassAttendanceApiSite
argument_list|()
operator|+
literal|"/getStudentMeetPlan"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalUniqueId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getBannerTerm
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerCampus
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalCampus
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|Gson
name|getGson
parameter_list|(
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|GsonBuilder
name|builder
init|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|Date
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
operator|.
name|format
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Date
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
try|try
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
operator|.
name|parse
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JsonParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|builder
operator|.
name|setPrettyPrinting
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|StudentClassAttendance
name|getCustomClassAttendanceForStudent
parameter_list|(
name|Student
name|student
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|boolean
name|logHelper
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|helper
operator|==
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|user
init|=
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|"System"
else|:
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|)
name|user
operator|.
name|setName
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
name|user
operator|.
name|setType
argument_list|(
name|Entity
operator|.
name|EntityType
operator|.
name|STUDENT
argument_list|)
expr_stmt|;
name|helper
operator|=
operator|new
name|OnlineSectioningHelper
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|user
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|logHelper
operator|=
literal|true
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|helper
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|action
operator|.
name|setOperation
argument_list|(
literal|"check-attendance"
argument_list|)
expr_stmt|;
name|action
operator|.
name|setSession
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|setStartTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|action
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|NameFormat
operator|.
name|LAST_FIRST_MIDDLE
operator|.
name|format
argument_list|(
name|student
argument_list|)
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|STUDENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|c0
init|=
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
decl_stmt|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getStudentClassAttendanceApiSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
operator|new
name|AcademicSessionInfo
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getClassAttendanceApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|long
name|t2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|StudentAttendancePlanResponse
name|response
init|=
operator|(
name|StudentAttendancePlanResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|StudentAttendancePlanResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|StudentAttendancePlanResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Response for "
operator|+
name|getBannerId
argument_list|(
name|student
argument_list|)
operator|+
literal|" ["
operator|+
operator|(
name|t2
operator|-
name|t1
operator|)
operator|+
literal|" ms]: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|data
operator|!=
literal|null
operator|&&
literal|"success"
operator|.
name|equals
argument_list|(
name|response
operator|.
name|status
argument_list|)
condition|)
block|{
return|return
operator|new
name|PurdueStudentClassAttendance
argument_list|(
name|response
operator|.
name|data
argument_list|,
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|response
operator|.
name|message
operator|!=
literal|null
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
name|response
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
name|helper
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|logHelper
condition|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setCpuTime
argument_list|(
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
operator|-
name|c0
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setEndTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|OnlineSectioningLogger
operator|.
name|getInstance
argument_list|()
operator|.
name|record
argument_list|(
name|OnlineSectioningLog
operator|.
name|Log
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAction
argument_list|(
name|helper
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
enum|enum
name|DayOfWeek
block|{
name|M
argument_list|(
name|Calendar
operator|.
name|MONDAY
argument_list|)
block|,
name|T
argument_list|(
name|Calendar
operator|.
name|TUESDAY
argument_list|)
block|,
name|W
argument_list|(
name|Calendar
operator|.
name|WEDNESDAY
argument_list|)
block|,
name|R
argument_list|(
name|Calendar
operator|.
name|THURSDAY
argument_list|)
block|,
name|F
argument_list|(
name|Calendar
operator|.
name|FRIDAY
argument_list|)
block|,
name|S
argument_list|(
name|Calendar
operator|.
name|SATURDAY
argument_list|)
block|,
name|U
argument_list|(
name|Calendar
operator|.
name|SUNDAY
argument_list|)
block|, 		;
specifier|private
name|int
name|iDayOfWeek
decl_stmt|;
specifier|private
name|DayOfWeek
parameter_list|(
name|int
name|dow
parameter_list|)
block|{
name|iDayOfWeek
operator|=
name|dow
expr_stmt|;
block|}
specifier|public
name|int
name|getDayOfWeek
parameter_list|()
block|{
return|return
name|iDayOfWeek
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StudentAttendancePlanResponse
block|{
name|StudentMeetings
name|data
decl_stmt|;
name|String
name|message
decl_stmt|;
name|String
name|status
decl_stmt|;
block|}
specifier|public
specifier|static
class|class
name|StudentMeetings
block|{
name|String
name|puid
decl_stmt|;
name|List
argument_list|<
name|StudentSectionMeetings
argument_list|>
name|sectionMeetings
decl_stmt|;
block|}
specifier|public
specifier|static
class|class
name|StudentSectionMeetings
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|crns
decl_stmt|;
name|List
argument_list|<
name|MeetingDetail
argument_list|>
name|meetings
decl_stmt|;
block|}
specifier|public
specifier|static
class|class
name|MeetingDetail
block|{
name|Date
name|startDate
decl_stmt|;
name|Date
name|endDate
decl_stmt|;
name|String
name|groupName
decl_stmt|;
name|DayOfWeek
name|meetDay
decl_stmt|;
name|String
name|bldg
decl_stmt|;
name|String
name|room
decl_stmt|;
name|Integer
name|startTime
decl_stmt|;
name|Integer
name|endTime
decl_stmt|;
name|String
name|occurance
decl_stmt|;
block|}
specifier|public
specifier|static
class|class
name|PurdueStudentClassAttendance
implements|implements
name|StudentClassAttendance
block|{
specifier|private
name|StudentMeetings
name|iMeetings
decl_stmt|;
specifier|private
name|int
name|iStartYear
decl_stmt|;
specifier|private
name|int
name|iStartMonth
decl_stmt|;
specifier|private
name|String
name|iHolidays
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iSkipBreaks
decl_stmt|;
name|PurdueStudentClassAttendance
parameter_list|(
name|StudentMeetings
name|meetings
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|iMeetings
operator|=
name|meetings
expr_stmt|;
name|iStartYear
operator|=
name|session
operator|.
name|getSessionStartYear
argument_list|()
expr_stmt|;
name|iStartMonth
operator|=
name|session
operator|.
name|getStartMonth
argument_list|()
expr_stmt|;
name|iHolidays
operator|=
name|session
operator|.
name|getHolidays
argument_list|()
expr_stmt|;
name|iSkipBreaks
operator|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.classAttendance.skipBreaks"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isHoliday
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
operator|!
name|iSkipBreaks
condition|)
return|return
literal|false
return|;
try|try
block|{
if|if
condition|(
name|iHolidays
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|int
name|idx
init|=
name|CalendarUtils
operator|.
name|date2dayOfYear
argument_list|(
name|iStartYear
argument_list|,
name|date
argument_list|)
operator|-
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|iStartMonth
argument_list|,
name|iStartYear
argument_list|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
operator|||
name|idx
operator|>=
name|iHolidays
operator|.
name|length
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
operator|(
operator|(
name|int
operator|)
operator|(
name|iHolidays
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|-
literal|'0'
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|StudentSectionMeetings
name|getMeetings
parameter_list|(
name|String
name|externalId
parameter_list|)
block|{
if|if
condition|(
name|externalId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|externalId
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
operator|>
literal|0
condition|)
name|externalId
operator|=
name|externalId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|externalId
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iMeetings
operator|==
literal|null
operator|||
name|iMeetings
operator|.
name|sectionMeetings
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|StudentSectionMeetings
name|ssm
range|:
name|iMeetings
operator|.
name|sectionMeetings
control|)
block|{
if|if
condition|(
name|ssm
operator|.
name|crns
operator|!=
literal|null
operator|&&
name|ssm
operator|.
name|crns
operator|.
name|contains
argument_list|(
name|externalId
argument_list|)
operator|&&
name|ssm
operator|.
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|ssm
operator|.
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ssm
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|StudentSectionMeetings
name|getMeetings
parameter_list|(
name|EventInterface
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|hasExternalIds
argument_list|()
condition|)
for|for
control|(
name|String
name|externalId
range|:
name|event
operator|.
name|getExternalIds
argument_list|()
control|)
block|{
name|StudentSectionMeetings
name|ssm
init|=
name|getMeetings
argument_list|(
name|externalId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ssm
operator|!=
literal|null
condition|)
return|return
name|ssm
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getTime
parameter_list|(
name|int
name|time
parameter_list|)
block|{
name|int
name|min
init|=
literal|60
operator|*
operator|(
name|time
operator|/
literal|100
operator|)
operator|+
operator|(
name|time
operator|%
literal|100
operator|)
decl_stmt|;
name|int
name|h
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|m
init|=
name|min
operator|%
literal|60
decl_stmt|;
if|if
condition|(
name|min
operator|==
literal|0
condition|)
return|return
name|CONST
operator|.
name|timeMidnight
argument_list|()
return|;
if|if
condition|(
name|min
operator|==
literal|720
condition|)
return|return
name|CONST
operator|.
name|timeNoon
argument_list|()
return|;
if|if
condition|(
name|CONST
operator|.
name|useAmPm
argument_list|()
condition|)
block|{
return|return
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|h
operator|==
literal|24
condition|?
name|CONST
operator|.
name|timeShortAm
argument_list|()
else|:
name|h
operator|>=
literal|12
condition|?
name|CONST
operator|.
name|timeShortPm
argument_list|()
else|:
name|CONST
operator|.
name|timeShortAm
argument_list|()
operator|)
return|;
block|}
else|else
block|{
return|return
name|h
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
return|;
block|}
block|}
specifier|protected
name|Date
name|getFirstMeetingDate
parameter_list|(
name|MeetingDetail
name|m
parameter_list|,
name|EventInterface
name|event
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|m
operator|.
name|startDate
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|int
name|startSlot
init|=
literal|12
operator|*
operator|(
name|m
operator|.
name|startTime
operator|/
literal|100
operator|)
operator|+
operator|(
name|m
operator|.
name|startTime
operator|%
literal|100
operator|)
operator|/
literal|5
decl_stmt|;
name|int
name|endSlot
init|=
literal|12
operator|*
operator|(
name|m
operator|.
name|endTime
operator|/
literal|100
operator|)
operator|+
operator|(
name|m
operator|.
name|endTime
operator|%
literal|100
operator|)
operator|/
literal|5
decl_stmt|;
while|while
condition|(
operator|!
name|c
operator|.
name|getTime
argument_list|()
operator|.
name|after
argument_list|(
name|m
operator|.
name|endDate
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
operator|==
name|m
operator|.
name|meetDay
operator|.
name|getDayOfWeek
argument_list|()
condition|)
block|{
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|meeting
operator|.
name|getDayOfYear
argument_list|()
operator|==
name|CalendarUtils
operator|.
name|date2dayOfYear
argument_list|(
name|iStartYear
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|&&
name|startSlot
operator|<
name|meeting
operator|.
name|getEndSlot
argument_list|()
operator|&&
name|meeting
operator|.
name|getStartSlot
argument_list|()
operator|<
name|endSlot
operator|&&
name|meeting
operator|.
name|getLocationName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
literal|"OFFCAMP"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|bldg
argument_list|)
condition|?
literal|""
else|:
name|m
operator|.
name|bldg
operator|+
literal|" "
operator|)
operator|+
name|m
operator|.
name|room
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isHoliday
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|index
operator|++
expr_stmt|;
name|boolean
name|meet
init|=
literal|true
decl_stmt|;
if|if
condition|(
literal|"Every Other Week"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|occurance
argument_list|)
condition|)
block|{
name|meet
operator|=
operator|(
operator|(
name|index
operator|%
literal|2
operator|)
operator|==
literal|1
operator|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"One Time"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|occurance
argument_list|)
condition|)
block|{
name|meet
operator|=
operator|(
name|index
operator|<=
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|meet
condition|)
return|return
name|c
operator|.
name|getTime
argument_list|()
return|;
block|}
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Date
name|getLastMeetingDate
parameter_list|(
name|MeetingDetail
name|m
parameter_list|,
name|EventInterface
name|event
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|m
operator|.
name|startDate
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|Date
name|last
init|=
literal|null
decl_stmt|;
name|int
name|startSlot
init|=
literal|12
operator|*
operator|(
name|m
operator|.
name|startTime
operator|/
literal|100
operator|)
operator|+
operator|(
name|m
operator|.
name|startTime
operator|%
literal|100
operator|)
operator|/
literal|5
decl_stmt|;
name|int
name|endSlot
init|=
literal|12
operator|*
operator|(
name|m
operator|.
name|endTime
operator|/
literal|100
operator|)
operator|+
operator|(
name|m
operator|.
name|endTime
operator|%
literal|100
operator|)
operator|/
literal|5
decl_stmt|;
while|while
condition|(
operator|!
name|c
operator|.
name|getTime
argument_list|()
operator|.
name|after
argument_list|(
name|m
operator|.
name|endDate
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
operator|==
name|m
operator|.
name|meetDay
operator|.
name|getDayOfWeek
argument_list|()
condition|)
block|{
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|meeting
operator|.
name|getDayOfYear
argument_list|()
operator|==
name|CalendarUtils
operator|.
name|date2dayOfYear
argument_list|(
name|iStartYear
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|&&
name|startSlot
operator|<
name|meeting
operator|.
name|getEndSlot
argument_list|()
operator|&&
name|meeting
operator|.
name|getStartSlot
argument_list|()
operator|<
name|endSlot
operator|&&
name|meeting
operator|.
name|getLocationName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
literal|"OFFCAMP"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|bldg
argument_list|)
condition|?
literal|""
else|:
name|m
operator|.
name|bldg
operator|+
literal|" "
operator|)
operator|+
name|m
operator|.
name|room
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isHoliday
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|index
operator|++
expr_stmt|;
name|boolean
name|meet
init|=
literal|true
decl_stmt|;
if|if
condition|(
literal|"Every Other Week"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|occurance
argument_list|)
condition|)
block|{
name|meet
operator|=
operator|(
operator|(
name|index
operator|%
literal|2
operator|)
operator|==
literal|1
operator|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"One Time"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|occurance
argument_list|)
condition|)
block|{
name|meet
operator|=
operator|(
name|index
operator|<=
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|meet
condition|)
name|last
operator|=
name|c
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|last
return|;
block|}
specifier|protected
name|String
name|toString
parameter_list|(
name|MeetingDetail
name|m
parameter_list|,
name|EventInterface
name|classEvent
parameter_list|)
block|{
name|Date
name|first
init|=
name|getFirstMeetingDate
argument_list|(
name|m
argument_list|,
name|classEvent
argument_list|)
decl_stmt|;
name|Date
name|last
init|=
name|getLastMeetingDate
argument_list|(
name|m
argument_list|,
name|classEvent
argument_list|)
decl_stmt|;
if|if
condition|(
name|classEvent
operator|!=
literal|null
operator|&&
name|first
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Format
argument_list|<
name|Date
argument_list|>
name|f
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT_SHORT
argument_list|)
decl_stmt|;
return|return
name|m
operator|.
name|occurance
operator|+
literal|" "
operator|+
name|CONST
operator|.
name|days
argument_list|()
index|[
name|m
operator|.
name|meetDay
operator|.
name|ordinal
argument_list|()
index|]
operator|+
literal|" "
operator|+
name|getTime
argument_list|(
name|m
operator|.
name|startTime
argument_list|)
operator|+
literal|" - "
operator|+
name|getTime
argument_list|(
name|m
operator|.
name|endTime
argument_list|)
operator|+
literal|"\n    "
operator|+
operator|(
name|first
operator|==
literal|null
condition|?
literal|""
else|:
name|first
operator|.
name|equals
argument_list|(
name|last
argument_list|)
condition|?
name|f
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
literal|" "
else|:
name|f
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
literal|" - "
operator|+
name|f
operator|.
name|format
argument_list|(
name|last
argument_list|)
operator|+
literal|" "
operator|)
operator|+
operator|(
literal|"OFFCAMP"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|bldg
argument_list|)
condition|?
literal|""
else|:
name|m
operator|.
name|bldg
operator|+
literal|" "
operator|)
operator|+
name|m
operator|.
name|room
return|;
block|}
specifier|protected
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|toMeetings
parameter_list|(
name|StudentSectionMeetings
name|ssm
parameter_list|,
name|EventInterface
name|event
parameter_list|)
block|{
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
operator|new
name|ArrayList
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MeetingDetail
name|m
range|:
name|ssm
operator|.
name|meetings
control|)
block|{
name|int
name|startSlot
init|=
literal|12
operator|*
operator|(
name|m
operator|.
name|startTime
operator|/
literal|100
operator|)
operator|+
operator|(
name|m
operator|.
name|startTime
operator|%
literal|100
operator|)
operator|/
literal|5
decl_stmt|;
name|int
name|endSlot
init|=
literal|12
operator|*
operator|(
name|m
operator|.
name|endTime
operator|/
literal|100
operator|)
operator|+
operator|(
name|m
operator|.
name|endTime
operator|%
literal|100
operator|)
operator|/
literal|5
decl_stmt|;
name|int
name|startOffset
init|=
operator|(
name|m
operator|.
name|startTime
operator|%
literal|5
operator|)
decl_stmt|;
name|int
name|endOffset
init|=
operator|(
name|m
operator|.
name|endTime
operator|%
literal|5
operator|)
decl_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|m
operator|.
name|startDate
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|c
operator|.
name|getTime
argument_list|()
operator|.
name|after
argument_list|(
name|m
operator|.
name|endDate
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
operator|==
name|m
operator|.
name|meetDay
operator|.
name|getDayOfWeek
argument_list|()
condition|)
block|{
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|meeting
operator|.
name|getDayOfYear
argument_list|()
operator|==
name|CalendarUtils
operator|.
name|date2dayOfYear
argument_list|(
name|iStartYear
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|&&
name|startSlot
operator|<
name|meeting
operator|.
name|getEndSlot
argument_list|()
operator|&&
name|meeting
operator|.
name|getStartSlot
argument_list|()
operator|<
name|endSlot
operator|&&
name|meeting
operator|.
name|getLocationName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
literal|"OFFCAMP"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|bldg
argument_list|)
condition|?
literal|""
else|:
name|m
operator|.
name|bldg
operator|+
literal|" "
operator|)
operator|+
name|m
operator|.
name|room
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|index
operator|++
expr_stmt|;
name|boolean
name|meet
init|=
literal|true
decl_stmt|;
if|if
condition|(
literal|"Every Other Week"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|occurance
argument_list|)
condition|)
block|{
name|meet
operator|=
operator|(
operator|(
name|index
operator|%
literal|2
operator|)
operator|==
literal|1
operator|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"One Time"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|occurance
argument_list|)
condition|)
block|{
name|meet
operator|=
operator|(
name|index
operator|<=
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|meet
condition|)
block|{
name|MeetingInterface
name|meeting
init|=
operator|new
name|MeetingInterface
argument_list|()
decl_stmt|;
name|meeting
operator|.
name|setDayOfWeek
argument_list|(
name|m
operator|.
name|meetDay
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setMeetingDate
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartSlot
argument_list|(
name|startSlot
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setEndSlot
argument_list|(
name|endSlot
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartOffset
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setEndOffset
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setDayOfYear
argument_list|(
name|CalendarUtils
operator|.
name|date2dayOfYear
argument_list|(
name|iStartYear
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceInterface
name|room
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|room
operator|.
name|setName
argument_list|(
operator|(
literal|"OFFCAMP"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|bldg
argument_list|)
condition|?
literal|""
else|:
name|m
operator|.
name|bldg
operator|+
literal|" "
operator|)
operator|+
name|m
operator|.
name|room
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setLocation
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|meetings
return|;
block|}
specifier|protected
name|String
name|getMessage
parameter_list|(
name|StudentSectionMeetings
name|ssm
parameter_list|,
name|EventInterface
name|classEvent
parameter_list|)
block|{
name|String
name|message
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.classAttendance.messageFace2FacePlan"
argument_list|,
literal|"In-person course meetings ({group}):"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{group}"
argument_list|,
name|ssm
operator|.
name|meetings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|groupName
argument_list|)
decl_stmt|;
name|boolean
name|hasMessage
init|=
literal|false
decl_stmt|;
for|for
control|(
name|MeetingDetail
name|m
range|:
name|ssm
operator|.
name|meetings
control|)
block|{
name|String
name|msg
init|=
name|toString
argument_list|(
name|m
argument_list|,
name|classEvent
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|message
operator|+=
literal|"\n  "
operator|+
name|msg
expr_stmt|;
name|hasMessage
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasMessage
condition|)
block|{
if|if
condition|(
name|classEvent
operator|==
literal|null
condition|)
name|message
operator|+=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.classAttendance.footerMessage"
argument_list|,
literal|"\nFor more details, see your<a href='gwt.jsp?page=personal' target='_blank'>Personal Schedule</a>."
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClassNote
parameter_list|(
name|String
name|externalId
parameter_list|)
block|{
name|StudentSectionMeetings
name|ssm
init|=
name|getMeetings
argument_list|(
name|externalId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ssm
operator|!=
literal|null
condition|)
return|return
name|getMessage
argument_list|(
name|ssm
argument_list|,
literal|null
argument_list|)
return|;
return|return
literal|null
return|;
block|}
specifier|protected
name|MeetingInterface
name|match
parameter_list|(
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|)
block|{
for|for
control|(
name|MeetingInterface
name|m
range|:
name|meetings
control|)
block|{
if|if
condition|(
name|m
operator|.
name|overlapsWith
argument_list|(
name|meeting
argument_list|)
operator|&&
name|m
operator|.
name|getLocationName
argument_list|()
operator|.
name|equals
argument_list|(
name|meeting
operator|.
name|getLocationName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|m
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateAttendance
parameter_list|(
name|EventInterface
name|classEvent
parameter_list|)
block|{
name|StudentSectionMeetings
name|ssm
init|=
name|getMeetings
argument_list|(
name|classEvent
argument_list|)
decl_stmt|;
if|if
condition|(
name|ssm
operator|!=
literal|null
condition|)
block|{
name|ResourceInterface
name|onl
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|onl
operator|.
name|setName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.classAttendance.onlineRoom"
argument_list|,
literal|"Remote"
argument_list|)
argument_list|)
expr_stmt|;
name|onl
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|Location
name|online
init|=
name|Location
operator|.
name|findByName
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|classEvent
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|onl
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|online
operator|!=
literal|null
condition|)
block|{
name|onl
operator|.
name|setId
argument_list|(
name|online
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|onl
operator|.
name|setName
argument_list|(
name|online
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|onl
operator|.
name|setSize
argument_list|(
name|online
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|onl
operator|.
name|setRoomType
argument_list|(
name|online
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|onl
operator|.
name|setBreakTime
argument_list|(
name|online
operator|.
name|getEffectiveBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|onl
operator|.
name|setMessage
argument_list|(
name|online
operator|.
name|getEventMessage
argument_list|()
argument_list|)
expr_stmt|;
name|onl
operator|.
name|setIgnoreRoomCheck
argument_list|(
name|online
operator|.
name|isIgnoreRoomCheck
argument_list|()
argument_list|)
expr_stmt|;
name|onl
operator|.
name|setDisplayName
argument_list|(
name|online
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|onl
operator|.
name|setPartitionParentId
argument_list|(
name|online
operator|.
name|getPartitionParentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|note
init|=
name|getMessage
argument_list|(
name|ssm
argument_list|,
name|iSkipBreaks
condition|?
name|classEvent
else|:
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|note
operator|!=
literal|null
condition|)
block|{
name|NoteInterface
name|n
init|=
operator|new
name|NoteInterface
argument_list|()
decl_stmt|;
name|n
operator|.
name|setDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|classEvent
operator|.
name|addNote
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|long
name|id
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
name|toMeetings
argument_list|(
name|ssm
argument_list|,
name|iSkipBreaks
condition|?
name|classEvent
else|:
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|MeetingInterface
name|m
range|:
operator|new
name|ArrayList
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|(
name|classEvent
operator|.
name|getMeetings
argument_list|()
argument_list|)
control|)
block|{
name|MeetingInterface
name|match
init|=
name|match
argument_list|(
name|meetings
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|==
literal|null
condition|)
block|{
name|m
operator|.
name|setLocation
argument_list|(
name|onl
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStyle
argument_list|(
literal|"online-meeting"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|match
operator|.
name|getStartSlot
argument_list|()
operator|==
name|m
operator|.
name|getStartSlot
argument_list|()
operator|&&
operator|(
literal|5
operator|*
name|m
operator|.
name|getEndSlot
argument_list|()
operator|+
name|m
operator|.
name|getEndOffset
argument_list|()
operator|)
operator|==
literal|5
operator|*
name|match
operator|.
name|getEndSlot
argument_list|()
condition|)
block|{
name|m
operator|.
name|setStyle
argument_list|(
literal|"f2f-meeting"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|setStyle
argument_list|(
literal|"f2f-meeting"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getStartSlot
argument_list|()
operator|<
name|match
operator|.
name|getStartSlot
argument_list|()
condition|)
block|{
name|MeetingInterface
name|before
init|=
operator|new
name|MeetingInterface
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|before
operator|.
name|setLocation
argument_list|(
name|onl
argument_list|)
expr_stmt|;
name|before
operator|.
name|setEndSlot
argument_list|(
name|match
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|setEndOffset
argument_list|(
name|match
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|setId
argument_list|(
operator|--
name|id
argument_list|)
expr_stmt|;
name|before
operator|.
name|setStyle
argument_list|(
literal|"online-meeting"
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStartSlot
argument_list|(
name|match
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStartOffset
argument_list|(
name|match
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|classEvent
operator|.
name|addMeeting
argument_list|(
name|before
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
literal|5
operator|*
name|m
operator|.
name|getEndSlot
argument_list|()
operator|+
name|m
operator|.
name|getEndOffset
argument_list|()
operator|)
operator|>
literal|5
operator|*
name|match
operator|.
name|getEndSlot
argument_list|()
condition|)
block|{
name|MeetingInterface
name|after
init|=
operator|new
name|MeetingInterface
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|after
operator|.
name|setLocation
argument_list|(
name|onl
argument_list|)
expr_stmt|;
name|after
operator|.
name|setStartSlot
argument_list|(
name|match
operator|.
name|getEndSlot
argument_list|()
argument_list|)
expr_stmt|;
name|after
operator|.
name|setStartOffset
argument_list|(
name|match
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|after
operator|.
name|setId
argument_list|(
operator|--
name|id
argument_list|)
expr_stmt|;
name|after
operator|.
name|setStyle
argument_list|(
literal|"online-meeting"
argument_list|)
expr_stmt|;
name|m
operator|.
name|setEndSlot
argument_list|(
name|match
operator|.
name|getEndSlot
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setEndOffset
argument_list|(
name|match
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|classEvent
operator|.
name|addMeeting
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

