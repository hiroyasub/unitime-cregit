begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|AssignmentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|DistanceConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|TimeOverlapsCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|heuristics
operator|.
name|selection
operator|.
name|BranchBoundSelection
operator|.
name|BranchBoundNeighbour
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|SctAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|OnlineReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|OnlineSectioningModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|selection
operator|.
name|MultiCriteriaBranchAndBoundSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|selection
operator|.
name|OnlineSectioningSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|selection
operator|.
name|SuggestionSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|CheckCoursesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|CourseMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseRequestsValidationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|Problem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|RequestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|Schedule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ValidationCheckRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ValidationCheckResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XDistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XReservationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|FindAssignmentAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PurdueCourseRequestsValidationProvider
implements|implements
name|CourseRequestsValidationProvider
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|PurdueCourseRequestsValidationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Format
argument_list|<
name|Number
argument_list|>
name|sCreditFormat
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.##"
argument_list|)
decl_stmt|;
specifier|private
name|Client
name|iClient
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|public
name|PurdueCourseRequestsValidationProvider
parameter_list|()
block|{
name|List
argument_list|<
name|Protocol
argument_list|>
name|protocols
init|=
operator|new
name|ArrayList
argument_list|<
name|Protocol
argument_list|>
argument_list|()
decl_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
expr_stmt|;
name|iClient
operator|=
operator|new
name|Client
argument_list|(
name|protocols
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiValidationSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.validation"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkRestrictionsForSTAR"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.checkSpecialRegistrationStatus"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkSpecialRegistrationStatus"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteSubmitRegistration
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.submitRegistration"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/submitRegistration"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiKey
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.apiKey"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiMode
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.mode.validation"
argument_list|,
literal|"STAR"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalUniqueId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getRequestorId
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|id
init|=
name|user
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getRequestorType
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|,
name|XStudent
name|student
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|user
operator|.
name|hasType
argument_list|()
condition|)
return|return
name|user
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
return|;
return|return
operator|(
name|user
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|?
literal|"STUDENT"
else|:
literal|"MANAGER"
operator|)
return|;
block|}
specifier|protected
name|String
name|getBannerTerm
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerCampus
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalCampus
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getExternalSubject
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|,
name|String
name|subjectArea
parameter_list|,
name|String
name|courseNumber
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalSubject
argument_list|(
name|session
argument_list|,
name|subjectArea
argument_list|,
name|courseNumber
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getExternalCourseNumber
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|,
name|String
name|subjectArea
parameter_list|,
name|String
name|courseNumber
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalCourseNumber
argument_list|(
name|session
argument_list|,
name|subjectArea
argument_list|,
name|courseNumber
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getCRN
parameter_list|(
name|Section
name|section
parameter_list|,
name|Course
name|course
parameter_list|)
block|{
name|String
name|name
init|=
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
operator|>=
literal|0
condition|)
return|return
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
return|;
return|return
name|name
return|;
block|}
specifier|protected
name|Enrollment
name|firstEnrollment
parameter_list|(
name|CourseRequest
name|request
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Course
name|course
parameter_list|,
name|Config
name|config
parameter_list|,
name|HashSet
argument_list|<
name|Section
argument_list|>
name|sections
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|idx
condition|)
block|{
return|return
operator|new
name|Enrollment
argument_list|(
name|request
argument_list|,
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|indexOf
argument_list|(
name|course
argument_list|)
argument_list|,
literal|null
argument_list|,
name|config
argument_list|,
operator|new
name|HashSet
argument_list|<
name|SctAssignment
argument_list|>
argument_list|(
name|sections
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
name|Subpart
name|subpart
init|=
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Section
argument_list|>
name|sectionsThisSubpart
init|=
name|subpart
operator|.
name|getSections
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Section
argument_list|>
name|matchingSectionsThisSubpart
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|sectionsThisSubpart
control|)
block|{
if|if
condition|(
name|section
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|sections
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|isOverlapping
argument_list|(
name|sections
argument_list|)
condition|)
continue|continue;
name|matchingSectionsThisSubpart
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Section
name|section
range|:
name|matchingSectionsThisSubpart
control|)
block|{
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|Enrollment
name|e
init|=
name|firstEnrollment
argument_list|(
name|request
argument_list|,
name|assignment
argument_list|,
name|course
argument_list|,
name|config
argument_list|,
name|sections
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
return|return
name|e
return|;
name|sections
operator|.
name|remove
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Gson
name|getGson
parameter_list|(
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|GsonBuilder
name|builder
init|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|DateTime
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|toString
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DateTime
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|Date
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
operator|.
name|format
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Date
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
try|try
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
operator|.
name|parse
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JsonParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|builder
operator|.
name|setPrettyPrinting
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|,
name|CheckCoursesResponse
name|response
parameter_list|)
throws|throws
name|SectioningException
block|{
name|XStudent
name|original
init|=
operator|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MESSAGES
operator|.
name|exceptionEnrollNotStudent
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|overrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|deniedOverrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatusResponse
name|status
init|=
operator|(
name|SpecialRegistrationStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Status: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"status_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|Float
name|maxCredit
init|=
literal|null
decl_stmt|,
name|maxCreditOverride
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|!=
literal|null
condition|)
name|maxCredit
operator|=
name|status
operator|.
name|data
operator|.
name|maxCredit
expr_stmt|;
if|if
condition|(
name|maxCredit
operator|==
literal|null
condition|)
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|.
name|requests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SpecialRegistrationRequest
name|r
range|:
name|status
operator|.
name|data
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|RequestStatus
operator|.
name|denied
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|status
argument_list|)
condition|)
block|{
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
name|String
name|course
init|=
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|problems
init|=
name|deniedOverrides
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|problems
operator|==
literal|null
condition|)
block|{
name|problems
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|deniedOverrides
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|problems
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|err
range|:
name|ch
operator|.
name|errors
control|)
block|{
if|if
condition|(
name|err
operator|.
name|code
operator|!=
literal|null
condition|)
name|problems
operator|.
name|add
argument_list|(
name|err
operator|.
name|code
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue;
block|}
if|if
condition|(
name|RequestStatus
operator|.
name|cancelled
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|status
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
name|String
name|course
init|=
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|problems
init|=
name|overrides
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|problems
operator|==
literal|null
condition|)
block|{
name|problems
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|problems
argument_list|)
expr_stmt|;
block|}
comment|// Set<String> dp = deniedOverrides.get(course);
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|err
range|:
name|ch
operator|.
name|errors
control|)
block|{
if|if
condition|(
name|err
operator|.
name|code
operator|!=
literal|null
condition|)
block|{
name|problems
operator|.
name|add
argument_list|(
name|err
operator|.
name|code
argument_list|)
expr_stmt|;
comment|// if (dp != null) dp.remove(err.code);
block|}
block|}
block|}
if|if
condition|(
name|r
operator|.
name|maxCredit
operator|!=
literal|null
operator|&&
operator|(
name|maxCreditOverride
operator|==
literal|null
operator|||
name|maxCreditOverride
operator|<
name|r
operator|.
name|maxCredit
operator|)
condition|)
name|maxCreditOverride
operator|=
name|r
operator|.
name|maxCredit
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxCredit
operator|<
name|request
operator|.
name|getCredit
argument_list|()
condition|)
block|{
name|boolean
name|error
init|=
literal|false
decl_stmt|;
name|float
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|Float
name|credit
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
if|if
condition|(
name|credit
operator|==
literal|null
operator|||
name|credit
operator|<
name|rc
operator|.
name|getCreditMin
argument_list|()
condition|)
name|credit
operator|=
name|rc
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
name|total
operator|+=
name|credit
expr_stmt|;
if|if
condition|(
name|total
operator|>
name|maxCredit
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"CREDIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
name|maxCreditOverride
operator|==
literal|null
operator|||
name|maxCreditOverride
operator|<
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|error
condition|)
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"CREDIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
name|maxCreditOverride
operator|==
literal|null
operator|||
name|maxCreditOverride
operator|<
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"Null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
name|OnlineSectioningModel
name|model
init|=
operator|new
name|OnlineSectioningModel
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|,
name|server
operator|.
name|getOverExpectedCriterion
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|linkedClassesMustBeUsed
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"LinkedClasses.mustBeUsed"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
init|=
operator|new
name|AssignmentMap
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|Student
name|student
init|=
operator|new
name|Student
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|XDistribution
argument_list|>
name|distributions
init|=
operator|new
name|HashSet
argument_list|<
name|XDistribution
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
name|FindAssignmentAction
operator|.
name|addRequest
argument_list|(
name|server
argument_list|,
name|model
argument_list|,
name|assignment
argument_list|,
name|student
argument_list|,
name|original
argument_list|,
name|c
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|classTable
argument_list|,
name|distributions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
name|FindAssignmentAction
operator|.
name|addRequest
argument_list|(
name|server
argument_list|,
name|model
argument_list|,
name|assignment
argument_list|,
name|student
argument_list|,
name|original
argument_list|,
name|c
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|classTable
argument_list|,
name|distributions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|model
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|model
operator|.
name|setDistanceConflict
argument_list|(
operator|new
name|DistanceConflict
argument_list|(
name|server
operator|.
name|getDistanceMetric
argument_list|()
argument_list|,
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setTimeOverlaps
argument_list|(
operator|new
name|TimeOverlapsCounter
argument_list|(
literal|null
argument_list|,
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|XDistribution
name|link
range|:
name|distributions
control|)
block|{
if|if
condition|(
name|link
operator|.
name|getDistributionType
argument_list|()
operator|==
name|XDistributionType
operator|.
name|LinkedSections
condition|)
block|{
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|sectionId
range|:
name|link
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
name|Section
name|x
init|=
name|classTable
operator|.
name|get
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
name|sections
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sections
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
name|model
operator|.
name|addLinkedSections
argument_list|(
name|linkedClassesMustBeUsed
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|r
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|cr
operator|.
name|getCourses
argument_list|()
control|)
block|{
operator|new
name|OnlineReservation
argument_list|(
name|XReservationType
operator|.
name|Dummy
operator|.
name|ordinal
argument_list|()
argument_list|,
operator|-
literal|3l
argument_list|,
name|course
operator|.
name|getOffering
argument_list|()
argument_list|,
operator|-
literal|100
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|mustBeUsed
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
expr_stmt|;
continue|continue;
block|}
block|}
block|}
name|OnlineSectioningSelection
name|selection
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|selection
operator|=
operator|new
name|MultiCriteriaBranchAndBoundSelection
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|selection
operator|=
operator|new
name|SuggestionSelection
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|selection
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setPreferredSections
argument_list|(
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setRequiredSections
argument_list|(
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setRequiredFreeTimes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setRequiredUnassinged
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|BranchBoundNeighbour
name|neighbour
init|=
name|selection
operator|.
name|select
argument_list|(
name|assignment
argument_list|,
name|student
argument_list|)
decl_stmt|;
name|neighbour
operator|.
name|assign
argument_list|(
name|assignment
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ValidationCheckRequest
name|req
init|=
operator|new
name|ValidationCheckRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|req
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|schedule
operator|=
operator|new
name|ArrayList
argument_list|<
name|Schedule
argument_list|>
argument_list|()
expr_stmt|;
name|req
operator|.
name|alternatives
operator|=
operator|new
name|ArrayList
argument_list|<
name|Schedule
argument_list|>
argument_list|()
expr_stmt|;
name|req
operator|.
name|mode
operator|=
name|getSpecialRegistrationApiMode
argument_list|()
expr_stmt|;
name|req
operator|.
name|includeReg
operator|=
literal|"N"
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|XCourseId
argument_list|>
name|crn2course
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|XCourseId
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|XCourseId
argument_list|,
name|String
argument_list|>
name|course2banner
init|=
operator|new
name|HashMap
argument_list|<
name|XCourseId
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|model
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
name|Enrollment
name|e
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|cr
argument_list|)
decl_stmt|;
name|courses
label|:
for|for
control|(
name|Course
name|course
range|:
name|cr
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|Schedule
name|s
init|=
operator|new
name|Schedule
argument_list|()
decl_stmt|;
name|s
operator|.
name|subject
operator|=
name|getExternalSubject
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|courseNbr
operator|=
name|getExternalCourseNumber
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|crns
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|XCourseId
name|cid
init|=
operator|new
name|XCourseId
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|course2banner
operator|.
name|put
argument_list|(
name|cid
argument_list|,
name|s
operator|.
name|subject
operator|+
literal|" "
operator|+
name|s
operator|.
name|courseNbr
argument_list|)
expr_stmt|;
comment|// 1. is enrolled
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|course
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|e
operator|.
name|getSections
argument_list|()
control|)
block|{
name|String
name|crn
init|=
name|getCRN
argument_list|(
name|section
argument_list|,
name|course
argument_list|)
decl_stmt|;
name|crn2course
operator|.
name|put
argument_list|(
name|crn
argument_list|,
name|cid
argument_list|)
expr_stmt|;
name|s
operator|.
name|crns
operator|.
name|add
argument_list|(
name|crn
argument_list|)
expr_stmt|;
block|}
name|req
operator|.
name|schedule
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
continue|continue
name|courses
continue|;
block|}
comment|// 2. has value
for|for
control|(
name|Enrollment
name|x
range|:
name|cr
operator|.
name|values
argument_list|(
name|assignment
argument_list|)
control|)
block|{
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|x
operator|.
name|getSections
argument_list|()
control|)
block|{
name|String
name|crn
init|=
name|getCRN
argument_list|(
name|section
argument_list|,
name|course
argument_list|)
decl_stmt|;
name|crn2course
operator|.
name|put
argument_list|(
name|crn
argument_list|,
name|cid
argument_list|)
expr_stmt|;
name|s
operator|.
name|crns
operator|.
name|add
argument_list|(
name|crn
argument_list|)
expr_stmt|;
block|}
name|req
operator|.
name|alternatives
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
continue|continue
name|courses
continue|;
block|}
block|}
comment|// 3. makup a value
for|for
control|(
name|Config
name|config
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
name|Enrollment
name|x
init|=
name|firstEnrollment
argument_list|(
name|cr
argument_list|,
name|assignment
argument_list|,
name|course
argument_list|,
name|config
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|x
operator|.
name|getSections
argument_list|()
control|)
block|{
name|String
name|crn
init|=
name|getCRN
argument_list|(
name|section
argument_list|,
name|course
argument_list|)
decl_stmt|;
name|crn2course
operator|.
name|put
argument_list|(
name|crn
argument_list|,
name|cid
argument_list|)
expr_stmt|;
name|s
operator|.
name|crns
operator|.
name|add
argument_list|(
name|crn
argument_list|)
expr_stmt|;
block|}
name|req
operator|.
name|alternatives
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
continue|continue
name|courses
continue|;
block|}
block|}
block|}
block|}
block|}
name|ValidationCheckResponse
name|resp
init|=
literal|null
decl_stmt|;
name|resource
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiValidationSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"validation_request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|ValidationCheckRequest
argument_list|>
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|resp
operator|=
operator|(
name|ValidationCheckResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|ValidationCheckResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|ValidationCheckResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"validation_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resp
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|resp
operator|.
name|scheduleRestrictions
operator|!=
literal|null
operator|&&
name|resp
operator|.
name|scheduleRestrictions
operator|.
name|problems
operator|!=
literal|null
condition|)
for|for
control|(
name|Problem
name|problem
range|:
name|resp
operator|.
name|scheduleRestrictions
operator|.
name|problems
control|)
block|{
if|if
condition|(
literal|"HOLD"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|problem
operator|.
name|message
argument_list|)
throw|;
name|XCourseId
name|course
init|=
name|crn2course
operator|.
name|get
argument_list|(
name|problem
operator|.
name|crn
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|String
name|bc
init|=
name|course2banner
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"DUPL"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
name|Set
argument_list|<
name|String
argument_list|>
name|problems
init|=
operator|(
name|bc
operator|==
literal|null
condition|?
literal|null
else|:
name|overrides
operator|.
name|get
argument_list|(
name|bc
argument_list|)
operator|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|denied
init|=
operator|(
name|bc
operator|==
literal|null
condition|?
literal|null
else|:
name|deniedOverrides
operator|.
name|get
argument_list|(
name|bc
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|denied
operator|!=
literal|null
operator|&&
name|denied
operator|.
name|contains
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|problem
operator|.
name|code
argument_list|,
literal|"Denied "
operator|+
name|problem
operator|.
name|message
argument_list|,
literal|true
argument_list|,
name|problems
operator|==
literal|null
operator|||
operator|!
name|problems
operator|.
name|contains
argument_list|(
name|problem
operator|.
name|code
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|problem
operator|.
name|code
argument_list|,
name|problem
operator|.
name|message
argument_list|,
literal|false
argument_list|,
name|problems
operator|==
literal|null
operator|||
operator|!
name|problems
operator|.
name|contains
argument_list|(
name|problem
operator|.
name|code
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resp
operator|.
name|alternativesRestrictions
operator|!=
literal|null
operator|&&
name|resp
operator|.
name|alternativesRestrictions
operator|.
name|problems
operator|!=
literal|null
condition|)
for|for
control|(
name|Problem
name|problem
range|:
name|resp
operator|.
name|alternativesRestrictions
operator|.
name|problems
control|)
block|{
if|if
condition|(
literal|"HOLD"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|problem
operator|.
name|message
argument_list|)
throw|;
name|XCourseId
name|course
init|=
name|crn2course
operator|.
name|get
argument_list|(
name|problem
operator|.
name|crn
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|String
name|bc
init|=
name|course2banner
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|problems
init|=
operator|(
name|bc
operator|==
literal|null
condition|?
literal|null
else|:
name|overrides
operator|.
name|get
argument_list|(
name|bc
argument_list|)
operator|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|denied
init|=
operator|(
name|bc
operator|==
literal|null
condition|?
literal|null
else|:
name|deniedOverrides
operator|.
name|get
argument_list|(
name|bc
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|denied
operator|!=
literal|null
operator|&&
name|denied
operator|.
name|contains
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|problem
operator|.
name|code
argument_list|,
literal|"Denied "
operator|+
name|problem
operator|.
name|message
argument_list|,
literal|true
argument_list|,
name|problems
operator|==
literal|null
operator|||
operator|!
name|problems
operator|.
name|contains
argument_list|(
name|problem
operator|.
name|code
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|problem
operator|.
name|code
argument_list|,
name|problem
operator|.
name|message
argument_list|,
literal|false
argument_list|,
name|problems
operator|==
literal|null
operator|||
operator|!
name|problems
operator|.
name|contains
argument_list|(
name|problem
operator|.
name|code
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|hasMessages
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|response
operator|.
name|getMessages
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getCourse
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"this section"
argument_list|)
operator|>=
literal|0
condition|)
name|m
operator|.
name|setMessage
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
operator|.
name|replace
argument_list|(
literal|"this section"
argument_list|,
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getCourse
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|" (CRN "
argument_list|)
operator|>=
literal|0
condition|)
name|m
operator|.
name|setMessage
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|" \\(CRN [0-9][0-9][0-9][0-9][0-9]\\) "
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
try|try
block|{
name|iClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|submit
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|)
throws|throws
name|SectioningException
block|{
name|XStudent
name|original
init|=
operator|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|overrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Float
name|maxCredit
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatusResponse
name|status
init|=
operator|(
name|SpecialRegistrationStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Status: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"status_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|!=
literal|null
condition|)
name|maxCredit
operator|=
name|status
operator|.
name|data
operator|.
name|maxCredit
expr_stmt|;
if|if
condition|(
name|maxCredit
operator|==
literal|null
condition|)
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|.
name|requests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SpecialRegistrationRequest
name|r
range|:
name|status
operator|.
name|data
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|RequestStatus
operator|.
name|inProgress
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|status
argument_list|)
operator|&&
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
name|String
name|course
init|=
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|problems
init|=
name|overrides
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|problems
operator|==
literal|null
condition|)
block|{
name|problems
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|problems
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|err
range|:
name|ch
operator|.
name|errors
control|)
block|{
if|if
condition|(
name|err
operator|.
name|code
operator|!=
literal|null
condition|)
name|problems
operator|.
name|add
argument_list|(
name|err
operator|.
name|code
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
name|SpecialRegistrationRequest
name|req
init|=
operator|new
name|SpecialRegistrationRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|req
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|mode
operator|=
name|getSpecialRegistrationApiMode
argument_list|()
expr_stmt|;
name|req
operator|.
name|changes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|requestorId
operator|=
name|getRequestorId
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|requestorRole
operator|=
name|getRequestorType
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasConfirmations
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|c
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
name|XCourseId
name|cid
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|String
name|subject
init|=
name|iExternalTermProvider
operator|.
name|getExternalSubject
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|courseNbr
init|=
name|iExternalTermProvider
operator|.
name|getExternalCourseNumber
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
decl_stmt|;
name|overrides
operator|.
name|remove
argument_list|(
name|subject
operator|+
literal|" "
operator|+
name|courseNbr
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeError
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<
name|ChangeError
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseMessage
name|m
range|:
name|request
operator|.
name|getConfirmations
argument_list|()
control|)
block|{
if|if
condition|(
literal|"CREDIT"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|m
operator|.
name|isError
argument_list|()
operator|&&
operator|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|||
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|ChangeError
name|e
init|=
operator|new
name|ChangeError
argument_list|()
decl_stmt|;
name|e
operator|.
name|code
operator|=
name|m
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|e
operator|.
name|message
operator|=
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|courseNbr
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
literal|""
expr_stmt|;
name|ch
operator|.
name|errors
operator|=
name|errors
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
literal|"ADD"
expr_stmt|;
name|req
operator|.
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|c
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
name|XCourseId
name|cid
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|String
name|subject
init|=
name|iExternalTermProvider
operator|.
name|getExternalSubject
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|courseNbr
init|=
name|iExternalTermProvider
operator|.
name|getExternalCourseNumber
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
decl_stmt|;
name|overrides
operator|.
name|remove
argument_list|(
name|subject
operator|+
literal|" "
operator|+
name|courseNbr
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeError
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<
name|ChangeError
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseMessage
name|m
range|:
name|request
operator|.
name|getConfirmations
argument_list|()
control|)
block|{
if|if
condition|(
literal|"CREDIT"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|m
operator|.
name|isError
argument_list|()
operator|&&
operator|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|||
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|ChangeError
name|e
init|=
operator|new
name|ChangeError
argument_list|()
decl_stmt|;
name|e
operator|.
name|code
operator|=
name|m
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|e
operator|.
name|message
operator|=
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|courseNbr
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
literal|""
expr_stmt|;
name|ch
operator|.
name|errors
operator|=
name|errors
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
literal|"ADD"
expr_stmt|;
name|req
operator|.
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|maxCredit
operator|<
name|request
operator|.
name|getCredit
argument_list|()
condition|)
name|req
operator|.
name|maxCredit
operator|=
name|request
operator|.
name|getCredit
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|req
operator|.
name|changes
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|overrides
operator|.
name|isEmpty
argument_list|()
operator|||
name|req
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
block|{
name|resource
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteSubmitRegistration
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationRequest
argument_list|>
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationResponseList
name|response
init|=
operator|(
name|SpecialRegistrationResponseList
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationResponseList
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationResponseList
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ResponseStatus
operator|.
name|success
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|status
argument_list|)
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|response
operator|.
name|message
operator|==
literal|null
operator|||
name|response
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to request overrides ("
operator|+
name|response
operator|.
name|status
operator|+
literal|")."
else|:
name|response
operator|.
name|message
argument_list|)
throw|;
if|if
condition|(
name|response
operator|.
name|data
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|c
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
name|XCourseId
name|cid
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|String
name|subject
init|=
name|iExternalTermProvider
operator|.
name|getExternalSubject
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|courseNbr
init|=
name|iExternalTermProvider
operator|.
name|getExternalCourseNumber
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SpecialRegistrationRequest
name|r
range|:
name|response
operator|.
name|data
control|)
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|subject
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|subject
argument_list|)
operator|&&
name|courseNbr
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|courseNbr
argument_list|)
condition|)
block|{
name|rc
operator|.
name|setOverrideTimeStamp
argument_list|(
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideExternalId
argument_list|(
name|r
operator|.
name|requestId
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestStatus
operator|.
name|approved
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|status
argument_list|)
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
else|:
name|RequestStatus
operator|.
name|denied
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|status
argument_list|)
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
else|:
name|RequestStatus
operator|.
name|cancelled
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|status
argument_list|)
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
else|:
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|c
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
name|XCourseId
name|cid
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|String
name|subject
init|=
name|iExternalTermProvider
operator|.
name|getExternalSubject
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|courseNbr
init|=
name|iExternalTermProvider
operator|.
name|getExternalCourseNumber
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SpecialRegistrationRequest
name|r
range|:
name|response
operator|.
name|data
control|)
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|subject
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|subject
argument_list|)
operator|&&
name|courseNbr
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|courseNbr
argument_list|)
condition|)
block|{
name|rc
operator|.
name|setOverrideTimeStamp
argument_list|(
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideExternalId
argument_list|(
name|r
operator|.
name|requestId
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestStatus
operator|.
name|approved
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|status
argument_list|)
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
else|:
name|RequestStatus
operator|.
name|denied
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|status
argument_list|)
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
else|:
name|RequestStatus
operator|.
name|cancelled
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|status
argument_list|)
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
else|:
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|)
throws|throws
name|SectioningException
block|{
name|XStudent
name|original
init|=
operator|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return;
name|Map
argument_list|<
name|String
argument_list|,
name|RequestedCourse
argument_list|>
name|rcs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RequestedCourse
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|rc
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
condition|)
name|rcs
operator|.
name|put
argument_list|(
name|rc
operator|.
name|getOverrideExternalId
argument_list|()
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|rc
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
condition|)
name|rcs
operator|.
name|put
argument_list|(
name|rc
operator|.
name|getOverrideExternalId
argument_list|()
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rcs
operator|.
name|isEmpty
argument_list|()
operator|&&
name|request
operator|.
name|getCredit
argument_list|()
operator|<=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
condition|)
return|return;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatusResponse
name|status
init|=
operator|(
name|SpecialRegistrationStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Status: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"status_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|Float
name|maxCredit
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|!=
literal|null
condition|)
name|maxCredit
operator|=
name|status
operator|.
name|data
operator|.
name|maxCredit
expr_stmt|;
if|if
condition|(
name|maxCredit
operator|==
literal|null
condition|)
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|.
name|requests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SpecialRegistrationRequest
name|r
range|:
name|status
operator|.
name|data
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|requestId
operator|==
literal|null
condition|)
continue|continue;
name|RequestedCourse
name|rc
init|=
name|rcs
operator|.
name|get
argument_list|(
name|r
operator|.
name|requestId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
name|RequestedCourseStatus
operator|.
name|ENROLLED
condition|)
block|{
if|if
condition|(
name|RequestStatus
operator|.
name|denied
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|status
argument_list|)
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|RequestStatus
operator|.
name|approved
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|status
argument_list|)
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|RequestStatus
operator|.
name|cancelled
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|status
argument_list|)
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
argument_list|)
expr_stmt|;
else|else
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
operator|&&
operator|!
name|RequestStatus
operator|.
name|approved
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|status
argument_list|)
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|er
range|:
name|ch
operator|.
name|errors
control|)
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|er
operator|.
name|code
argument_list|,
operator|(
name|RequestStatus
operator|.
name|denied
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|status
argument_list|)
condition|?
literal|"Denied "
else|:
literal|""
operator|)
operator|+
name|er
operator|.
name|message
argument_list|,
name|RequestStatus
operator|.
name|denied
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|status
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxCredit
operator|<
name|request
operator|.
name|getCredit
argument_list|()
condition|)
block|{
name|boolean
name|error
init|=
literal|false
decl_stmt|;
name|float
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|Float
name|credit
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
if|if
condition|(
name|credit
operator|==
literal|null
operator|||
name|credit
operator|<
name|rc
operator|.
name|getCreditMin
argument_list|()
condition|)
name|credit
operator|=
name|rc
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
name|total
operator|+=
name|credit
expr_stmt|;
if|if
condition|(
name|total
operator|>
name|maxCredit
condition|)
block|{
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"CREDIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|error
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|error
condition|)
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"CREDIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"Null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|updateStudent
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|,
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|action
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatusResponse
name|status
init|=
operator|(
name|SpecialRegistrationStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Status: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"status_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SpecialRegistrationRequest
name|req
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SpecialRegistrationRequest
name|r
range|:
name|status
operator|.
name|data
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|requestId
argument_list|)
condition|)
block|{
name|req
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|req
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|cr
operator|.
name|getCourseRequestOverrideStatus
argument_list|()
operator|!=
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
condition|)
block|{
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|Integer
name|oldStatus
init|=
name|cr
operator|.
name|getOverrideStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|RequestStatus
operator|.
name|denied
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|req
operator|.
name|status
argument_list|)
condition|)
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|RequestStatus
operator|.
name|approved
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|req
operator|.
name|status
argument_list|)
condition|)
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|RequestStatus
operator|.
name|cancelled
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|req
operator|.
name|status
argument_list|)
condition|)
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
else|else
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|PENDING
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldStatus
operator|==
literal|null
operator|||
operator|!
name|oldStatus
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|getOverrideStatus
argument_list|()
argument_list|)
condition|)
block|{
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|String
name|subject
init|=
name|iExternalTermProvider
operator|.
name|getExternalSubject
argument_list|(
name|session
argument_list|,
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|courseNbr
init|=
name|iExternalTermProvider
operator|.
name|getExternalCourseNumber
argument_list|(
name|session
argument_list|,
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
name|SpecialRegistrationRequest
name|req
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SpecialRegistrationRequest
name|r
range|:
name|status
operator|.
name|data
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|requestId
operator|==
literal|null
condition|)
continue|continue;
name|Change
name|match
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
if|if
condition|(
name|subject
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|subject
argument_list|)
operator|&&
name|courseNbr
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|courseNbr
argument_list|)
condition|)
block|{
name|match
operator|=
name|ch
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|match
operator|!=
literal|null
operator|&&
operator|(
name|req
operator|==
literal|null
operator|||
name|r
operator|.
name|dateCreated
operator|.
name|isAfter
argument_list|(
name|req
operator|.
name|dateCreated
argument_list|)
operator|)
condition|)
name|req
operator|=
name|r
expr_stmt|;
block|}
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
block|{
name|cr
operator|.
name|setOverrideExternalId
argument_list|(
name|req
operator|.
name|requestId
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideTimeStamp
argument_list|(
name|req
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|RequestStatus
operator|.
name|denied
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|req
operator|.
name|status
argument_list|)
condition|)
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|RequestStatus
operator|.
name|approved
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|req
operator|.
name|status
argument_list|)
condition|)
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|RequestStatus
operator|.
name|cancelled
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|req
operator|.
name|status
argument_list|)
condition|)
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
else|else
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|PENDING
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|changed
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|changed
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"Null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

