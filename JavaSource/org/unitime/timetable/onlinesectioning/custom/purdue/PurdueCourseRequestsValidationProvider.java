begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|AssignmentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|StudentQuality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|heuristics
operator|.
name|selection
operator|.
name|BranchBoundSelection
operator|.
name|BranchBoundNeighbour
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Choice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|SctAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|OnlineReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|OnlineSectioningModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|selection
operator|.
name|MultiCriteriaBranchAndBoundSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|selection
operator|.
name|OnlineSectioningSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|selection
operator|.
name|SuggestionSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|CheckCoursesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|CourseMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseRequestsValidationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ApiMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|CheckEligibilityResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|CheckRestrictionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|CheckRestrictionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|CourseCredit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|DeniedMaxCredit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|DeniedRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|EligibilityProblem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|Problem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|RequestorRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationMultipleStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XDistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XFreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XReservationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|DatabaseServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|FindAssignmentAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|ReloadStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PurdueCourseRequestsValidationProvider
implements|implements
name|CourseRequestsValidationProvider
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|PurdueCourseRequestsValidationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Format
argument_list|<
name|Number
argument_list|>
name|sCreditFormat
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.##"
argument_list|)
decl_stmt|;
specifier|private
name|Client
name|iClient
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|public
name|PurdueCourseRequestsValidationProvider
parameter_list|()
block|{
name|List
argument_list|<
name|Protocol
argument_list|>
name|protocols
init|=
operator|new
name|ArrayList
argument_list|<
name|Protocol
argument_list|>
argument_list|()
decl_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
expr_stmt|;
name|iClient
operator|=
operator|new
name|Client
argument_list|(
name|protocols
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiValidationSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.validation"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkRestrictions"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.checkSpecialRegistrationStatus"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkSpecialRegistrationStatus"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteSubmitRegistration
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.submitRegistration"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/submitRegistration"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCheckEligibility
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.checkEligibility"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkEligibility"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCheckAllSpecialRegistrationStatus
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.checkAllSpecialRegistrationStatus"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkAllSpecialRegistrationStatus"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationDashboardUrl
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.dashBoard"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiKey
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.apiKey"
argument_list|)
return|;
block|}
specifier|protected
name|ApiMode
name|getSpecialRegistrationApiMode
parameter_list|()
block|{
return|return
name|ApiMode
operator|.
name|valueOf
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.mode.validation"
argument_list|,
literal|"PREREG"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalUniqueId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getRequestorId
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|id
init|=
name|user
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|RequestorRole
name|getRequestorType
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|,
name|XStudent
name|student
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
return|return
operator|(
name|user
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|?
name|RequestorRole
operator|.
name|STUDENT
else|:
name|RequestorRole
operator|.
name|MANAGER
operator|)
return|;
if|if
condition|(
name|user
operator|.
name|hasType
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|user
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|MANAGER
case|:
return|return
name|RequestorRole
operator|.
name|MANAGER
return|;
case|case
name|STUDENT
case|:
return|return
name|RequestorRole
operator|.
name|STUDENT
return|;
default|default:
return|return
name|RequestorRole
operator|.
name|MANAGER
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|String
name|getBannerTerm
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerCampus
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalCampus
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getCRN
parameter_list|(
name|Section
name|section
parameter_list|,
name|Course
name|course
parameter_list|)
block|{
name|String
name|name
init|=
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
operator|>=
literal|0
condition|)
return|return
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
return|;
return|return
name|name
return|;
block|}
specifier|protected
name|Enrollment
name|firstEnrollment
parameter_list|(
name|CourseRequest
name|request
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Course
name|course
parameter_list|,
name|Config
name|config
parameter_list|,
name|HashSet
argument_list|<
name|Section
argument_list|>
name|sections
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|idx
condition|)
block|{
return|return
operator|new
name|Enrollment
argument_list|(
name|request
argument_list|,
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|indexOf
argument_list|(
name|course
argument_list|)
argument_list|,
literal|null
argument_list|,
name|config
argument_list|,
operator|new
name|HashSet
argument_list|<
name|SctAssignment
argument_list|>
argument_list|(
name|sections
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
name|Subpart
name|subpart
init|=
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Section
argument_list|>
name|sectionsThisSubpart
init|=
name|subpart
operator|.
name|getSections
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Section
argument_list|>
name|matchingSectionsThisSubpart
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|sectionsThisSubpart
control|)
block|{
if|if
condition|(
name|section
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|sections
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|isOverlapping
argument_list|(
name|sections
argument_list|)
condition|)
continue|continue;
name|matchingSectionsThisSubpart
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Section
name|section
range|:
name|matchingSectionsThisSubpart
control|)
block|{
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|Enrollment
name|e
init|=
name|firstEnrollment
argument_list|(
name|request
argument_list|,
name|assignment
argument_list|,
name|course
argument_list|,
name|config
argument_list|,
name|sections
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
return|return
name|e
return|;
name|sections
operator|.
name|remove
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Gson
name|getGson
parameter_list|(
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|GsonBuilder
name|builder
init|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|DateTime
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|toString
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DateTime
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|Date
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
operator|.
name|format
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Date
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
try|try
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
operator|.
name|parse
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JsonParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|builder
operator|.
name|setPrettyPrinting
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|,
name|CheckCoursesResponse
name|response
parameter_list|)
throws|throws
name|SectioningException
block|{
name|XStudent
name|original
init|=
operator|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MESSAGES
operator|.
name|exceptionEnrollNotStudent
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
name|boolean
name|validationEnabled
init|=
name|isValidationEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|original
argument_list|)
decl_stmt|;
name|Integer
name|CONF_NONE
init|=
literal|null
decl_stmt|;
name|Integer
name|CONF_UNITIME
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Integer
name|CONF_BANNER
init|=
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|OnlineSectioningModel
name|model
init|=
operator|new
name|OnlineSectioningModel
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|,
name|server
operator|.
name|getOverExpectedCriterion
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|linkedClassesMustBeUsed
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"LinkedClasses.mustBeUsed"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
init|=
operator|new
name|AssignmentMap
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|Student
name|student
init|=
operator|new
name|Student
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
name|student
operator|.
name|setExternalId
argument_list|(
name|original
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setName
argument_list|(
name|original
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setNeedShortDistances
argument_list|(
name|original
operator|.
name|hasAccomodation
argument_list|(
name|server
operator|.
name|getDistanceMetric
argument_list|()
operator|.
name|getShortDistanceAccommodationReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setAllowDisabled
argument_list|(
name|original
operator|.
name|isAllowDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|XDistribution
argument_list|>
name|distributions
init|=
operator|new
name|HashSet
argument_list|<
name|XDistribution
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|preferredSections
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasAssignment
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XRequest
name|reqest
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|reqest
operator|instanceof
name|XCourseRequest
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|reqest
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hasAssignment
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
name|FindAssignmentAction
operator|.
name|addRequest
argument_list|(
name|server
argument_list|,
name|model
argument_list|,
name|assignment
argument_list|,
name|student
argument_list|,
name|original
argument_list|,
name|c
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|classTable
argument_list|,
name|distributions
argument_list|,
name|hasAssignment
argument_list|)
expr_stmt|;
comment|// if (student.getRequests().isEmpty()) return;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
name|FindAssignmentAction
operator|.
name|addRequest
argument_list|(
name|server
argument_list|,
name|model
argument_list|,
name|assignment
argument_list|,
name|student
argument_list|,
name|original
argument_list|,
name|c
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|classTable
argument_list|,
name|distributions
argument_list|,
name|hasAssignment
argument_list|)
expr_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
name|XEnrollment
name|en
init|=
name|cr
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|en
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Request
name|q
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|q
operator|instanceof
name|CourseRequest
condition|)
block|{
name|Course
name|course
init|=
operator|(
operator|(
name|CourseRequest
operator|)
name|q
operator|)
operator|.
name|getCourse
argument_list|(
name|en
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|sectionId
range|:
name|en
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sections
operator|.
name|isEmpty
argument_list|()
condition|)
name|preferredSections
operator|.
name|put
argument_list|(
operator|(
name|CourseRequest
operator|)
name|q
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|model
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|model
operator|.
name|setStudentQuality
argument_list|(
operator|new
name|StudentQuality
argument_list|(
name|server
operator|.
name|getDistanceMetric
argument_list|()
argument_list|,
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// model.setDistanceConflict(new DistanceConflict(server.getDistanceMetric(), model.getProperties()));
comment|// model.setTimeOverlaps(new TimeOverlapsCounter(null, model.getProperties()));
for|for
control|(
name|XDistribution
name|link
range|:
name|distributions
control|)
block|{
if|if
condition|(
name|link
operator|.
name|getDistributionType
argument_list|()
operator|==
name|XDistributionType
operator|.
name|LinkedSections
condition|)
block|{
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|sectionId
range|:
name|link
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
name|Section
name|x
init|=
name|classTable
operator|.
name|get
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
name|sections
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sections
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
name|model
operator|.
name|addLinkedSections
argument_list|(
name|linkedClassesMustBeUsed
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.dummyReservation"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|r
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|cr
operator|.
name|getCourses
argument_list|()
control|)
block|{
operator|new
name|OnlineReservation
argument_list|(
name|XReservationType
operator|.
name|Dummy
operator|.
name|ordinal
argument_list|()
argument_list|,
operator|-
literal|3l
argument_list|,
name|course
operator|.
name|getOffering
argument_list|()
argument_list|,
literal|5000
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
block|}
comment|// Single section time conflict check
name|boolean
name|questionTimeConflict
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|Section
argument_list|,
name|Course
argument_list|>
name|singleSections
init|=
operator|new
name|HashMap
argument_list|<
name|Section
argument_list|,
name|Course
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|r
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isAlternative
argument_list|()
condition|)
continue|continue;
comment|// no alternate course requests
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|cr
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// take only single config courses
for|for
control|(
name|Subpart
name|subpart
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// take only single section subparts
name|Section
name|section
init|=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Section
name|other
range|:
name|singleSections
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|isOverlapping
argument_list|(
name|other
argument_list|)
condition|)
block|{
name|boolean
name|confirm
init|=
operator|(
name|original
operator|.
name|getRequestForCourse
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
operator|==
literal|null
operator|||
name|original
operator|.
name|getRequestForCourse
argument_list|(
name|singleSections
operator|.
name|get
argument_list|(
name|other
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
operator|==
literal|null
operator|)
operator|&&
operator|(
name|cr
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
decl_stmt|;
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|course
operator|.
name|getName
argument_list|()
argument_list|,
literal|"OVERLAP"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.courseOverlaps"
argument_list|,
literal|"Conflicts with {other}."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{other}"
argument_list|,
name|singleSections
operator|.
name|get
argument_list|(
name|other
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|confirm
condition|?
name|CONF_UNITIME
else|:
name|CONF_NONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|confirm
condition|)
name|questionTimeConflict
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cr
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// remember section when there are no alternative courses provided
name|singleSections
operator|.
name|put
argument_list|(
name|section
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|OnlineSectioningSelection
name|selection
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|selection
operator|=
operator|new
name|MultiCriteriaBranchAndBoundSelection
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|selection
operator|=
operator|new
name|SuggestionSelection
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|selection
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.fixCurrentEnrollments"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
name|selection
operator|.
name|setPreferredSections
argument_list|(
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setRequiredSections
argument_list|(
name|preferredSections
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|selection
operator|.
name|setPreferredSections
argument_list|(
name|preferredSections
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setRequiredSections
argument_list|(
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|selection
operator|.
name|setRequiredFreeTimes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setRequiredUnassinged
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|BranchBoundNeighbour
name|neighbour
init|=
name|selection
operator|.
name|select
argument_list|(
name|assignment
argument_list|,
name|student
argument_list|)
decl_stmt|;
name|neighbour
operator|.
name|assign
argument_list|(
name|assignment
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|CheckRestrictionsRequest
name|req
init|=
operator|new
name|CheckRestrictionsRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|req
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|mode
operator|=
name|getSpecialRegistrationApiMode
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|XCourseId
argument_list|>
name|crn2course
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|XCourseId
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|XCourseId
argument_list|,
name|String
argument_list|>
name|course2banner
init|=
operator|new
name|HashMap
argument_list|<
name|XCourseId
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|model
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
name|Enrollment
name|e
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|cr
argument_list|)
decl_stmt|;
name|courses
label|:
for|for
control|(
name|Course
name|course
range|:
name|cr
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|XCourseId
name|cid
init|=
operator|new
name|XCourseId
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|course2banner
operator|.
name|put
argument_list|(
name|cid
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1. is enrolled
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|course
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|e
operator|.
name|getSections
argument_list|()
control|)
block|{
name|String
name|crn
init|=
name|getCRN
argument_list|(
name|section
argument_list|,
name|course
argument_list|)
decl_stmt|;
name|crn2course
operator|.
name|put
argument_list|(
name|crn
argument_list|,
name|cid
argument_list|)
expr_stmt|;
name|SpecialRegistrationHelper
operator|.
name|addCrn
argument_list|(
name|req
argument_list|,
name|crn
argument_list|)
expr_stmt|;
block|}
continue|continue
name|courses
continue|;
block|}
comment|// 2. has value
for|for
control|(
name|Enrollment
name|x
range|:
name|cr
operator|.
name|values
argument_list|(
name|assignment
argument_list|)
control|)
block|{
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|x
operator|.
name|getSections
argument_list|()
control|)
block|{
name|String
name|crn
init|=
name|getCRN
argument_list|(
name|section
argument_list|,
name|course
argument_list|)
decl_stmt|;
name|crn2course
operator|.
name|put
argument_list|(
name|crn
argument_list|,
name|cid
argument_list|)
expr_stmt|;
name|SpecialRegistrationHelper
operator|.
name|addAltCrn
argument_list|(
name|req
argument_list|,
name|crn
argument_list|)
expr_stmt|;
block|}
continue|continue
name|courses
continue|;
block|}
block|}
comment|// 3. makup a value
for|for
control|(
name|Config
name|config
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
name|Enrollment
name|x
init|=
name|firstEnrollment
argument_list|(
name|cr
argument_list|,
name|assignment
argument_list|,
name|course
argument_list|,
name|config
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|x
operator|.
name|getSections
argument_list|()
control|)
block|{
name|String
name|crn
init|=
name|getCRN
argument_list|(
name|section
argument_list|,
name|course
argument_list|)
decl_stmt|;
name|crn2course
operator|.
name|put
argument_list|(
name|crn
argument_list|,
name|cid
argument_list|)
expr_stmt|;
name|SpecialRegistrationHelper
operator|.
name|addAltCrn
argument_list|(
name|req
argument_list|,
name|crn
argument_list|)
expr_stmt|;
block|}
continue|continue
name|courses
continue|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|SpecialRegistrationHelper
operator|.
name|isEmpty
argument_list|(
name|req
argument_list|)
condition|)
return|return;
name|CheckRestrictionsResponse
name|resp
init|=
literal|null
decl_stmt|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiValidationSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"validation_request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|CheckRestrictionsRequest
argument_list|>
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|resp
operator|=
operator|(
name|CheckRestrictionsResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|CheckRestrictionsResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|CheckRestrictionsResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"validation_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|resp
operator|.
name|status
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|resp
operator|.
name|message
operator|==
literal|null
operator|||
name|resp
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to check student eligibility ("
operator|+
name|resp
operator|.
name|status
operator|+
literal|")."
else|:
name|resp
operator|.
name|message
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resp
operator|==
literal|null
condition|)
return|return;
name|Float
name|maxCredit
init|=
name|resp
operator|.
name|maxCredit
decl_stmt|;
if|if
condition|(
name|maxCredit
operator|==
literal|null
condition|)
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
expr_stmt|;
name|Float
name|maxCreditDenied
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|deniedMaxCreditRequests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DeniedMaxCredit
name|r
range|:
name|resp
operator|.
name|deniedMaxCreditRequests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|mode
operator|==
name|req
operator|.
name|mode
operator|&&
name|r
operator|.
name|maxCredit
operator|!=
literal|null
operator|&&
name|r
operator|.
name|maxCredit
operator|>
name|maxCredit
operator|&&
operator|(
name|maxCreditDenied
operator|==
literal|null
operator|||
name|maxCreditDenied
operator|>
name|r
operator|.
name|maxCredit
operator|)
condition|)
name|maxCreditDenied
operator|=
name|r
operator|.
name|maxCredit
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RequestedCourseStatus
argument_list|>
argument_list|>
name|overrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RequestedCourseStatus
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Float
name|maxCreditOverride
init|=
literal|null
decl_stmt|;
name|RequestedCourseStatus
name|maxCreditOverrideStatus
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|cancelRegistrationRequests
operator|!=
literal|null
condition|)
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|resp
operator|.
name|cancelRegistrationRequests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|changes
operator|==
literal|null
operator|||
name|r
operator|.
name|changes
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|status
operator|==
name|ChangeStatus
operator|.
name|cancelled
operator|||
name|ch
operator|.
name|status
operator|==
name|ChangeStatus
operator|.
name|denied
condition|)
continue|continue;
if|if
condition|(
name|ch
operator|.
name|subject
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|courseNbr
operator|!=
literal|null
condition|)
block|{
name|String
name|course
init|=
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RequestedCourseStatus
argument_list|>
name|problems
init|=
name|overrides
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|problems
operator|==
literal|null
condition|)
block|{
name|problems
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RequestedCourseStatus
argument_list|>
argument_list|()
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|problems
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|err
range|:
name|ch
operator|.
name|errors
control|)
block|{
if|if
condition|(
name|err
operator|.
name|code
operator|!=
literal|null
condition|)
name|problems
operator|.
name|put
argument_list|(
name|err
operator|.
name|code
argument_list|,
name|status
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|r
operator|.
name|maxCredit
operator|!=
literal|null
operator|&&
operator|(
name|maxCreditOverride
operator|==
literal|null
operator|||
name|maxCreditOverride
operator|<
name|r
operator|.
name|maxCredit
operator|)
condition|)
block|{
name|maxCreditOverride
operator|=
name|r
operator|.
name|maxCredit
expr_stmt|;
name|maxCreditOverrideStatus
operator|=
name|status
argument_list|(
name|ch
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|creditError
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|validationEnabled
operator|&&
name|maxCredit
operator|<
name|request
operator|.
name|getCredit
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|getOverCreditRequests
argument_list|(
name|request
argument_list|,
name|maxCredit
argument_list|)
control|)
block|{
name|response
operator|.
name|addError
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"CREDIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|CREDIT_HIGH
argument_list|)
expr_stmt|;
name|response
operator|.
name|setErrorMessage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCreditError"
argument_list|,
literal|"Maximum of {max} credit hours exceeded.\nYou must remove some course requests in order to submit your registration request."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|creditError
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|maxCreditLimitStr
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditCheck"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCreditDenied
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getCredit
argument_list|()
operator|>=
name|maxCreditDenied
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|getOverCreditRequests
argument_list|(
name|request
argument_list|,
name|maxCredit
argument_list|)
control|)
block|{
name|response
operator|.
name|addError
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"CREDIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{maxCreditDenied}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCreditDenied
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
argument_list|)
expr_stmt|;
name|response
operator|.
name|setErrorMessage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCreditDeniedError"
argument_list|,
literal|"Maximum of {max} credit hours exceeded.\nThe request to increase the maximum credit hours to {maxCreditDenied} has been denied.\nYou must remove some course requests in order to submit your registration request."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{maxCreditDenied}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCreditDenied
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|creditError
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|maxCreditLimitStr
operator|!=
literal|null
condition|)
block|{
name|float
name|maxCreditLimit
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|maxCreditLimitStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCredit
operator|!=
literal|null
operator|&&
name|maxCredit
operator|>
name|maxCreditLimit
condition|)
name|maxCreditLimit
operator|=
name|maxCredit
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getCredit
argument_list|()
operator|>
name|maxCreditLimit
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|getOverCreditRequests
argument_list|(
name|request
argument_list|,
name|maxCreditLimit
argument_list|)
control|)
block|{
name|response
operator|.
name|addError
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"CREDIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCreditLimit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCreditLimit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|CREDIT_HIGH
argument_list|)
expr_stmt|;
name|response
operator|.
name|setErrorMessage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCreditError"
argument_list|,
literal|"Maximum of {max} credit hours exceeded.\nYou must remove some course requests in order to submit your registration request."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCreditLimit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|creditError
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|creditError
operator|&&
name|maxCredit
operator|<
name|request
operator|.
name|getCredit
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|getOverCreditRequests
argument_list|(
name|request
argument_list|,
name|maxCredit
argument_list|)
control|)
name|response
operator|.
name|addMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"CREDIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|maxCreditOverride
operator|==
literal|null
operator|||
name|maxCreditOverride
operator|<
name|request
operator|.
name|getCredit
argument_list|()
condition|?
name|CONF_BANNER
else|:
name|CONF_NONE
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|maxCreditOverrideStatus
operator|==
literal|null
operator|||
name|maxCreditOverride
operator|<
name|request
operator|.
name|getCredit
argument_list|()
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
else|:
name|maxCreditOverrideStatus
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|deniedOverrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|deniedRequests
operator|!=
literal|null
condition|)
for|for
control|(
name|DeniedRequest
name|r
range|:
name|resp
operator|.
name|deniedRequests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|mode
operator|!=
name|req
operator|.
name|mode
condition|)
continue|continue;
name|String
name|course
init|=
name|r
operator|.
name|subject
operator|+
literal|" "
operator|+
name|r
operator|.
name|courseNbr
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|problems
init|=
name|deniedOverrides
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|problems
operator|==
literal|null
condition|)
block|{
name|problems
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|deniedOverrides
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|problems
argument_list|)
expr_stmt|;
block|}
name|problems
operator|.
name|add
argument_list|(
name|r
operator|.
name|code
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resp
operator|.
name|outJson
operator|!=
literal|null
operator|&&
name|resp
operator|.
name|outJson
operator|.
name|problems
operator|!=
literal|null
condition|)
for|for
control|(
name|Problem
name|problem
range|:
name|resp
operator|.
name|outJson
operator|.
name|problems
control|)
block|{
if|if
condition|(
literal|"HOLD"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
block|{
name|response
operator|.
name|addError
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|problem
operator|.
name|code
argument_list|,
name|problem
operator|.
name|message
argument_list|)
expr_stmt|;
name|response
operator|.
name|setErrorMessage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.holdError"
argument_list|,
name|problem
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
comment|//throw new SectioningException(problem.message);
block|}
if|if
condition|(
literal|"DUPL"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"CLOS"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"TIME"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
name|XCourseId
name|course
init|=
name|crn2course
operator|.
name|get
argument_list|(
name|problem
operator|.
name|crn
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|String
name|bc
init|=
name|course2banner
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RequestedCourseStatus
argument_list|>
name|problems
init|=
operator|(
name|bc
operator|==
literal|null
condition|?
literal|null
else|:
name|overrides
operator|.
name|get
argument_list|(
name|bc
argument_list|)
operator|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|denied
init|=
operator|(
name|bc
operator|==
literal|null
condition|?
literal|null
else|:
name|deniedOverrides
operator|.
name|get
argument_list|(
name|bc
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|validationEnabled
condition|)
block|{
name|RequestedCourseStatus
name|status
init|=
operator|(
name|problems
operator|==
literal|null
condition|?
literal|null
else|:
name|problems
operator|.
name|get
argument_list|(
name|problem
operator|.
name|code
argument_list|)
operator|)
decl_stmt|;
name|response
operator|.
name|addError
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|problem
operator|.
name|code
argument_list|,
name|problem
operator|.
name|message
argument_list|)
operator|.
name|setStatus
argument_list|(
name|status
operator|==
literal|null
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
else|:
name|status
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|denied
operator|!=
literal|null
operator|&&
name|denied
operator|.
name|contains
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
block|{
name|response
operator|.
name|addError
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|problem
operator|.
name|code
argument_list|,
literal|"Denied "
operator|+
name|problem
operator|.
name|message
argument_list|)
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
argument_list|)
expr_stmt|;
name|response
operator|.
name|setErrorMessage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.deniedOverrideError"
argument_list|,
literal|"One or more courses require registration overrides which have been denied.\nYou must remove or replace these courses in order to submit your registration request."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RequestedCourseStatus
name|status
init|=
operator|(
name|problems
operator|==
literal|null
condition|?
literal|null
else|:
name|problems
operator|.
name|get
argument_list|(
name|problem
operator|.
name|code
argument_list|)
operator|)
decl_stmt|;
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|problem
operator|.
name|code
argument_list|,
name|problem
operator|.
name|message
argument_list|,
name|status
operator|==
literal|null
condition|?
name|CONF_BANNER
else|:
name|CONF_NONE
argument_list|)
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
operator|.
name|setStatus
argument_list|(
name|status
operator|==
literal|null
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
else|:
name|status
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resp
operator|.
name|outJsonAlternatives
operator|!=
literal|null
operator|&&
name|resp
operator|.
name|outJsonAlternatives
operator|.
name|problems
operator|!=
literal|null
condition|)
for|for
control|(
name|Problem
name|problem
range|:
name|resp
operator|.
name|outJsonAlternatives
operator|.
name|problems
control|)
block|{
if|if
condition|(
literal|"HOLD"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
block|{
name|response
operator|.
name|addError
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|problem
operator|.
name|code
argument_list|,
name|problem
operator|.
name|message
argument_list|)
expr_stmt|;
name|response
operator|.
name|setErrorMessage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.holdError"
argument_list|,
name|problem
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
comment|// throw new SectioningException(problem.message);
block|}
if|if
condition|(
literal|"DUPL"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"CLOS"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"TIME"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
name|XCourseId
name|course
init|=
name|crn2course
operator|.
name|get
argument_list|(
name|problem
operator|.
name|crn
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|String
name|bc
init|=
name|course2banner
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RequestedCourseStatus
argument_list|>
name|problems
init|=
operator|(
name|bc
operator|==
literal|null
condition|?
literal|null
else|:
name|overrides
operator|.
name|get
argument_list|(
name|bc
argument_list|)
operator|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|denied
init|=
operator|(
name|bc
operator|==
literal|null
condition|?
literal|null
else|:
name|deniedOverrides
operator|.
name|get
argument_list|(
name|bc
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|validationEnabled
condition|)
block|{
name|RequestedCourseStatus
name|status
init|=
operator|(
name|problems
operator|==
literal|null
condition|?
literal|null
else|:
name|problems
operator|.
name|get
argument_list|(
name|problem
operator|.
name|code
argument_list|)
operator|)
decl_stmt|;
name|response
operator|.
name|addError
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|problem
operator|.
name|code
argument_list|,
name|problem
operator|.
name|message
argument_list|)
operator|.
name|setStatus
argument_list|(
name|status
operator|==
literal|null
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
else|:
name|status
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|denied
operator|!=
literal|null
operator|&&
name|denied
operator|.
name|contains
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
block|{
name|response
operator|.
name|addError
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|problem
operator|.
name|code
argument_list|,
literal|"Denied "
operator|+
name|problem
operator|.
name|message
argument_list|)
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
argument_list|)
expr_stmt|;
name|response
operator|.
name|setErrorMessage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.deniedOverrideError"
argument_list|,
literal|"One or more courses require registration overrides which have been denied.\nYou must remove or replace these courses in order to submit your registration request."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RequestedCourseStatus
name|status
init|=
operator|(
name|problems
operator|==
literal|null
condition|?
literal|null
else|:
name|problems
operator|.
name|get
argument_list|(
name|problem
operator|.
name|code
argument_list|)
operator|)
decl_stmt|;
name|response
operator|.
name|addMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|problem
operator|.
name|code
argument_list|,
name|problem
operator|.
name|message
argument_list|,
name|status
operator|==
literal|null
condition|?
name|CONF_BANNER
else|:
name|CONF_NONE
argument_list|)
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
operator|.
name|setStatus
argument_list|(
name|status
operator|==
literal|null
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
else|:
name|status
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|response
operator|.
name|hasMessages
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|response
operator|.
name|getMessages
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getCourse
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"this section"
argument_list|)
operator|>=
literal|0
condition|)
name|m
operator|.
name|setMessage
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
operator|.
name|replace
argument_list|(
literal|"this section"
argument_list|,
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getCourse
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|" (CRN "
argument_list|)
operator|>=
literal|0
condition|)
name|m
operator|.
name|setMessage
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|" \\(CRN [0-9][0-9][0-9][0-9][0-9]\\) "
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|questionMinCred
init|=
literal|false
decl_stmt|;
name|String
name|minCreditLimit
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.minCreditCheck"
argument_list|)
decl_stmt|;
name|float
name|minCredit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
name|minCredit
operator|+=
name|rc
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|minCreditLimit
operator|!=
literal|null
operator|&&
name|minCredit
operator|<
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCreditLimit
argument_list|)
operator|&&
operator|(
name|maxCredit
operator|==
literal|null
operator|||
name|maxCredit
operator|>
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCreditLimit
argument_list|)
operator|)
condition|)
block|{
name|questionMinCred
operator|=
literal|true
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|coursesWithNotAlt
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getCourseIds
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|cr
operator|.
name|isAlternative
argument_list|()
condition|)
name|coursesWithNotAlt
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getCourseIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|questionNoAlt
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|RequestedCourse
name|rc
init|=
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|rc
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NO_ALT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.courseHasNoAlt"
argument_list|,
literal|"No alternative course provided."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
operator|!
name|coursesWithNotAlt
operator|.
name|contains
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|?
name|CONF_UNITIME
else|:
name|CONF_NONE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|coursesWithNotAlt
operator|.
name|contains
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|questionNoAlt
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|response
operator|.
name|getConfirms
argument_list|()
operator|.
name|contains
argument_list|(
name|CONF_BANNER
argument_list|)
condition|)
block|{
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.bannerProblemsFound"
argument_list|,
literal|"The following registration errors have been detected:"
argument_list|)
argument_list|,
name|CONF_BANNER
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|response
operator|.
name|addConfirmation
argument_list|(
literal|""
argument_list|,
name|CONF_BANNER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.requestOverrides"
argument_list|,
literal|"If you have already discussed these courses with your advisor and were advised to request "
operator|+
literal|"registration in them please select Request Overrides& Submit. If you arenât sure, click Cancel Submit and "
operator|+
literal|"consult with your advisor before coming back to your Course Request page."
argument_list|)
argument_list|,
name|CONF_BANNER
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|getConfirms
argument_list|()
operator|.
name|contains
argument_list|(
name|CONF_UNITIME
argument_list|)
condition|)
block|{
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.unitimeProblemsFound"
argument_list|,
literal|"The following issues have been detected:"
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|response
operator|.
name|addConfirmation
argument_list|(
literal|""
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|questionMinCred
condition|)
block|{
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.minCredit"
argument_list|,
literal|"Less than {min} credit hours requested."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{min}"
argument_list|,
name|minCreditLimit
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|minCredit
argument_list|)
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.minCredit"
argument_list|,
literal|"Less than {min} credit hours requested."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{min}"
argument_list|,
name|minCreditLimit
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|minCredit
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|CREDIT_LOW
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|questionNoAlt
condition|)
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.noAlternatives"
argument_list|,
operator|(
name|questionMinCred
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
literal|"One or more of the newly requested courses have no alternatives provided. You may not be able to get a full schedule because you did not provide an alternative course."
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|questionTimeConflict
condition|)
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.timeConflicts"
argument_list|,
operator|(
name|questionMinCred
operator|||
name|questionNoAlt
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
literal|"Two or more single section courses are conflicting with each other. You will likely not be able to get the conflicting course, so please provide an alternative course if possible."
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|questionNoAlt
operator|||
name|questionMinCred
operator|||
name|questionTimeConflict
condition|)
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.confirmation"
argument_list|,
literal|"\nDo you want to proceed?"
argument_list|)
argument_list|,
name|CONF_UNITIME
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|conf
init|=
name|response
operator|.
name|getConfirms
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|contains
argument_list|(
name|CONF_UNITIME
argument_list|)
condition|)
block|{
name|response
operator|.
name|setConfirmation
argument_list|(
name|CONF_UNITIME
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.unitimeDialogName"
argument_list|,
literal|"Warning Confirmations"
argument_list|)
argument_list|,
operator|(
name|conf
operator|.
name|contains
argument_list|(
name|CONF_BANNER
argument_list|)
condition|?
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.unitimeContinueButton"
argument_list|,
literal|"Accept& Continue"
argument_list|)
else|:
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.unitimeYesButton"
argument_list|,
literal|"Accept& Submit"
argument_list|)
operator|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.unitimeNoButton"
argument_list|,
literal|"Cancel Submit"
argument_list|)
argument_list|,
operator|(
name|conf
operator|.
name|contains
argument_list|(
name|CONF_BANNER
argument_list|)
condition|?
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.unitimeContinueButtonTitle"
argument_list|,
literal|"Accept the above warning(s) and continue to submit the Course Requests"
argument_list|)
else|:
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.unitimeYesButtonTitle"
argument_list|,
literal|"Accept the above warning(s) and submit the Course Requests"
argument_list|)
operator|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.unitimeNoButtonTitle"
argument_list|,
literal|"Go back to editing your Course Requests"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|contains
argument_list|(
name|CONF_BANNER
argument_list|)
condition|)
block|{
name|response
operator|.
name|setConfirmation
argument_list|(
name|CONF_BANNER
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.bannerDialogName"
argument_list|,
literal|"Request Overrides"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.bannerYesButton"
argument_list|,
literal|"Request Overrides& Submit"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.bannerNoButton"
argument_list|,
literal|"Cancel Submit"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.bannerYesButtonTitle"
argument_list|,
literal|"Request overrides for the above registration errors and submit the Course Requests"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.bannerNoButtonTitle"
argument_list|,
literal|"Go back to editing your Course Requests"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
try|try
block|{
name|iClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|submit
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|)
throws|throws
name|SectioningException
block|{
name|XStudent
name|original
init|=
operator|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return;
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|SAVED
argument_list|)
expr_stmt|;
name|String
name|minCreditLimit
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.minCreditCheck"
argument_list|)
decl_stmt|;
name|float
name|minCredit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
name|minCredit
operator|+=
name|rc
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|minCreditLimit
operator|!=
literal|null
operator|&&
name|minCredit
operator|<
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCreditLimit
argument_list|)
operator|&&
operator|(
name|original
operator|.
name|getMaxCredit
argument_list|()
operator|==
literal|null
operator|||
name|original
operator|.
name|getMaxCredit
argument_list|()
operator|>
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCreditLimit
argument_list|)
operator|)
condition|)
block|{
name|request
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.minCredit"
argument_list|,
literal|"Less than {min} credit hours requested."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{min}"
argument_list|,
name|minCreditLimit
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|minCredit
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|CREDIT_LOW
argument_list|)
expr_stmt|;
block|}
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|overrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Float
name|maxCredit
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatusResponse
name|status
init|=
operator|(
name|SpecialRegistrationStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Status: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"status_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|!=
literal|null
condition|)
block|{
name|maxCredit
operator|=
name|status
operator|.
name|data
operator|.
name|maxCredit
expr_stmt|;
name|request
operator|.
name|setMaxCredit
argument_list|(
name|status
operator|.
name|data
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxCredit
operator|==
literal|null
condition|)
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|.
name|requests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|status
operator|.
name|data
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|status
argument_list|(
name|ch
operator|.
name|status
argument_list|)
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
operator|&&
name|ch
operator|.
name|subject
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|courseNbr
operator|!=
literal|null
condition|)
block|{
name|String
name|course
init|=
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|problems
init|=
name|overrides
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|problems
operator|==
literal|null
condition|)
block|{
name|problems
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|problems
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|err
range|:
name|ch
operator|.
name|errors
control|)
block|{
if|if
condition|(
name|err
operator|.
name|code
operator|!=
literal|null
condition|)
name|problems
operator|.
name|add
argument_list|(
name|err
operator|.
name|code
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
name|SpecialRegistrationRequest
name|req
init|=
operator|new
name|SpecialRegistrationRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|req
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|mode
operator|=
name|getSpecialRegistrationApiMode
argument_list|()
expr_stmt|;
name|req
operator|.
name|changes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|requestorId
operator|=
name|getRequestorId
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|requestorRole
operator|=
name|getRequestorType
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasConfirmations
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|c
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
name|XCourseId
name|cid
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|String
name|subject
init|=
name|course
operator|.
name|getSubjectArea
argument_list|()
decl_stmt|;
name|String
name|courseNbr
init|=
name|course
operator|.
name|getCourseNumber
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeError
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<
name|ChangeError
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseMessage
name|m
range|:
name|request
operator|.
name|getConfirmations
argument_list|()
control|)
block|{
if|if
condition|(
literal|"CREDIT"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"NO_ALT"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"OVERLAP"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|m
operator|.
name|hasCourse
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|m
operator|.
name|isError
argument_list|()
operator|&&
operator|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|||
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|ChangeError
name|e
init|=
operator|new
name|ChangeError
argument_list|()
decl_stmt|;
name|e
operator|.
name|code
operator|=
name|m
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|e
operator|.
name|message
operator|=
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|courseNbr
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
literal|""
expr_stmt|;
name|ch
operator|.
name|errors
operator|=
name|errors
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|ADD
expr_stmt|;
name|req
operator|.
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|remove
argument_list|(
name|subject
operator|+
literal|" "
operator|+
name|courseNbr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|c
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
name|XCourseId
name|cid
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|String
name|subject
init|=
name|course
operator|.
name|getSubjectArea
argument_list|()
decl_stmt|;
name|String
name|courseNbr
init|=
name|course
operator|.
name|getCourseNumber
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeError
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<
name|ChangeError
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseMessage
name|m
range|:
name|request
operator|.
name|getConfirmations
argument_list|()
control|)
block|{
if|if
condition|(
literal|"CREDIT"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"NO_ALT"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"OVERLAP"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|m
operator|.
name|hasCourse
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|m
operator|.
name|isError
argument_list|()
operator|&&
operator|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|||
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|ChangeError
name|e
init|=
operator|new
name|ChangeError
argument_list|()
decl_stmt|;
name|e
operator|.
name|code
operator|=
name|m
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|e
operator|.
name|message
operator|=
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|courseNbr
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
literal|""
expr_stmt|;
name|ch
operator|.
name|errors
operator|=
name|errors
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|ADD
expr_stmt|;
name|req
operator|.
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|remove
argument_list|(
name|subject
operator|+
literal|" "
operator|+
name|courseNbr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|maxCredit
operator|<
name|request
operator|.
name|getCredit
argument_list|()
condition|)
block|{
name|req
operator|.
name|maxCredit
operator|=
name|request
operator|.
name|getCredit
argument_list|()
expr_stmt|;
block|}
name|req
operator|.
name|courseCreditHrs
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseCredit
argument_list|>
argument_list|()
expr_stmt|;
name|req
operator|.
name|alternateCourseCreditHrs
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseCredit
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|CourseCredit
name|cc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
name|XCourseId
name|cid
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|cc
operator|==
literal|null
condition|)
block|{
name|cc
operator|=
operator|new
name|CourseCredit
argument_list|()
expr_stmt|;
name|cc
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|cc
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|cc
operator|.
name|title
operator|=
name|course
operator|.
name|getTitle
argument_list|()
expr_stmt|;
name|cc
operator|.
name|creditHrs
operator|=
operator|(
name|course
operator|.
name|hasCredit
argument_list|()
condition|?
name|course
operator|.
name|getMinCredit
argument_list|()
else|:
literal|0f
operator|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cc
operator|.
name|alternatives
operator|==
literal|null
condition|)
name|cc
operator|.
name|alternatives
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseCredit
argument_list|>
argument_list|()
expr_stmt|;
name|CourseCredit
name|acc
init|=
operator|new
name|CourseCredit
argument_list|()
decl_stmt|;
name|acc
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|acc
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|acc
operator|.
name|title
operator|=
name|course
operator|.
name|getTitle
argument_list|()
expr_stmt|;
name|acc
operator|.
name|creditHrs
operator|=
operator|(
name|course
operator|.
name|hasCredit
argument_list|()
condition|?
name|course
operator|.
name|getMinCredit
argument_list|()
else|:
literal|0f
operator|)
expr_stmt|;
name|cc
operator|.
name|alternatives
operator|.
name|add
argument_list|(
name|acc
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cc
operator|!=
literal|null
condition|)
name|req
operator|.
name|courseCreditHrs
operator|.
name|add
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|CourseCredit
name|cc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
name|XCourseId
name|cid
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|cc
operator|==
literal|null
condition|)
block|{
name|cc
operator|=
operator|new
name|CourseCredit
argument_list|()
expr_stmt|;
name|cc
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|cc
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|cc
operator|.
name|title
operator|=
name|course
operator|.
name|getTitle
argument_list|()
expr_stmt|;
name|cc
operator|.
name|creditHrs
operator|=
operator|(
name|course
operator|.
name|hasCredit
argument_list|()
condition|?
name|course
operator|.
name|getMinCredit
argument_list|()
else|:
literal|0f
operator|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cc
operator|.
name|alternatives
operator|==
literal|null
condition|)
name|cc
operator|.
name|alternatives
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseCredit
argument_list|>
argument_list|()
expr_stmt|;
name|CourseCredit
name|acc
init|=
operator|new
name|CourseCredit
argument_list|()
decl_stmt|;
name|acc
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|acc
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|acc
operator|.
name|title
operator|=
name|course
operator|.
name|getTitle
argument_list|()
expr_stmt|;
name|acc
operator|.
name|creditHrs
operator|=
operator|(
name|course
operator|.
name|hasCredit
argument_list|()
condition|?
name|course
operator|.
name|getMinCredit
argument_list|()
else|:
literal|0f
operator|)
expr_stmt|;
name|cc
operator|.
name|alternatives
operator|.
name|add
argument_list|(
name|acc
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cc
operator|!=
literal|null
condition|)
name|req
operator|.
name|alternateCourseCreditHrs
operator|.
name|add
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|req
operator|.
name|changes
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|overrides
operator|.
name|isEmpty
argument_list|()
operator|||
name|req
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
block|{
name|resource
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteSubmitRegistration
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationRequest
argument_list|>
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationResponseList
name|response
init|=
operator|(
name|SpecialRegistrationResponseList
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationResponseList
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationResponseList
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|response
operator|.
name|status
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|response
operator|.
name|message
operator|==
literal|null
operator|||
name|response
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to request overrides ("
operator|+
name|response
operator|.
name|status
operator|+
literal|")."
else|:
name|response
operator|.
name|message
argument_list|)
throw|;
if|if
condition|(
name|response
operator|.
name|data
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|c
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|XCourseId
name|cid
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|String
name|subject
init|=
name|course
operator|.
name|getSubjectArea
argument_list|()
decl_stmt|;
name|String
name|courseNbr
init|=
name|course
operator|.
name|getCourseNumber
argument_list|()
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|response
operator|.
name|data
control|)
block|{
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|subject
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|subject
argument_list|)
operator|&&
name|courseNbr
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|courseNbr
argument_list|)
condition|)
block|{
name|rc
operator|.
name|setOverrideTimeStamp
argument_list|(
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideExternalId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setStatus
argument_list|(
name|status
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setStatusNote
argument_list|(
name|SpecialRegistrationHelper
operator|.
name|note
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|c
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|XCourseId
name|cid
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|String
name|subject
init|=
name|course
operator|.
name|getSubjectArea
argument_list|()
decl_stmt|;
name|String
name|courseNbr
init|=
name|course
operator|.
name|getCourseNumber
argument_list|()
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|response
operator|.
name|data
control|)
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|subject
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|subject
argument_list|)
operator|&&
name|courseNbr
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|courseNbr
argument_list|)
condition|)
block|{
name|rc
operator|.
name|setOverrideTimeStamp
argument_list|(
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideExternalId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setStatus
argument_list|(
name|status
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setStatusNote
argument_list|(
name|SpecialRegistrationHelper
operator|.
name|note
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|req
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|response
operator|.
name|data
control|)
block|{
if|if
condition|(
name|r
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setMaxCreditOverride
argument_list|(
name|r
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideExternalId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideTimeStamp
argument_list|(
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|status
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|req
operator|.
name|maxCredit
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCreditNote
argument_list|(
name|SpecialRegistrationHelper
operator|.
name|note
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|SAVED
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasConfirmations
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseMessage
name|message
range|:
name|request
operator|.
name|getConfirmations
argument_list|()
control|)
block|{
if|if
condition|(
name|message
operator|.
name|getStatus
argument_list|()
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
condition|)
name|message
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|RequestedCourseStatus
name|status
parameter_list|(
name|ChangeStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
return|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|denied
case|:
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
return|;
case|case
name|approved
case|:
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
return|;
case|case
name|cancelled
case|:
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
return|;
default|default:
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
return|;
block|}
block|}
specifier|protected
name|RequestedCourseStatus
name|combine
parameter_list|(
name|RequestedCourseStatus
name|s1
parameter_list|,
name|RequestedCourseStatus
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|==
literal|null
condition|)
return|return
name|s2
return|;
if|if
condition|(
name|s2
operator|==
literal|null
condition|)
return|return
name|s1
return|;
if|if
condition|(
name|s1
operator|==
name|s2
condition|)
return|return
name|s1
return|;
if|if
condition|(
name|s1
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
operator|||
name|s2
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
condition|)
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
return|;
if|if
condition|(
name|s1
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
operator|||
name|s2
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
condition|)
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
return|;
if|if
condition|(
name|s1
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
operator|||
name|s2
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
condition|)
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
return|;
if|if
condition|(
name|s1
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
operator|||
name|s2
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
condition|)
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
return|;
return|return
name|s1
return|;
block|}
specifier|protected
name|RequestedCourseStatus
name|status
parameter_list|(
name|SpecialRegistration
name|request
parameter_list|,
name|boolean
name|credit
parameter_list|)
block|{
name|RequestedCourseStatus
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|request
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|credit
operator|&&
name|ch
operator|.
name|subject
operator|==
literal|null
operator|&&
name|ch
operator|.
name|courseNbr
operator|==
literal|null
condition|)
name|ret
operator|=
name|combine
argument_list|(
name|ret
argument_list|,
name|status
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|credit
operator|&&
name|ch
operator|.
name|subject
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|courseNbr
operator|!=
literal|null
condition|)
name|ret
operator|=
name|combine
argument_list|(
name|ret
argument_list|,
name|status
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
return|return
name|ret
return|;
if|if
condition|(
name|request
operator|.
name|completionStatus
operator|!=
literal|null
condition|)
switch|switch
condition|(
name|request
operator|.
name|completionStatus
condition|)
block|{
case|case
name|completed
case|:
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
return|;
case|case
name|cancelled
case|:
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
return|;
case|case
name|inProgress
case|:
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
return|;
block|}
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
return|;
block|}
specifier|protected
name|List
argument_list|<
name|RequestedCourse
argument_list|>
name|getOverCreditRequests
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|,
name|float
name|maxCredit
parameter_list|)
block|{
name|List
argument_list|<
name|RequestedCourse
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|RequestedCourse
argument_list|>
argument_list|()
decl_stmt|;
comment|// Step 1, only check primary courses
name|float
name|primary
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
name|primary
operator|+=
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
if|if
condition|(
name|primary
operator|>
name|maxCredit
condition|)
name|ret
operator|.
name|add
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ret
return|;
comment|// Step 2, check alternatives
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|float
name|credit
init|=
operator|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|hasCredit
argument_list|()
condition|?
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getCreditMin
argument_list|()
else|:
literal|0f
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|float
name|alt
init|=
operator|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
name|i
argument_list|)
operator|.
name|hasCredit
argument_list|()
condition|?
name|r
operator|.
name|getRequestedCourse
argument_list|(
name|i
argument_list|)
operator|.
name|getCreditMin
argument_list|()
else|:
literal|0f
operator|)
decl_stmt|;
if|if
condition|(
name|primary
operator|-
name|credit
operator|+
name|alt
operator|>
name|maxCredit
condition|)
name|ret
operator|.
name|add
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ret
return|;
comment|// Step 3, check alternatives
name|List
argument_list|<
name|Float
argument_list|>
name|credits
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|float
name|total
init|=
literal|0f
decl_stmt|;
name|RequestedCourse
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|Float
name|credit
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
if|if
condition|(
name|credit
operator|==
literal|null
operator|||
name|credit
operator|<
name|rc
operator|.
name|getCreditMin
argument_list|()
condition|)
block|{
name|credit
operator|=
name|rc
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
if|if
condition|(
name|total
operator|+
name|credit
operator|>
name|maxCredit
condition|)
name|ret
operator|.
name|add
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
name|credits
operator|.
name|add
argument_list|(
name|credit
argument_list|)
expr_stmt|;
name|total
operator|+=
name|credit
expr_stmt|;
block|}
name|last
operator|=
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ret
return|;
comment|// Step 4, check alternate courses
name|Collections
operator|.
name|sort
argument_list|(
name|credits
argument_list|)
expr_stmt|;
name|float
name|low
init|=
operator|(
name|credits
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0f
else|:
name|credits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
name|RequestedCourse
name|first
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
if|if
condition|(
name|total
operator|+
name|rc
operator|.
name|getCreditMin
argument_list|()
operator|-
name|low
operator|>
name|maxCredit
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|rc
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
name|first
operator|=
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ret
return|;
comment|// Fall back: return first alternate course or the last requested course
name|ret
operator|.
name|add
argument_list|(
name|first
operator|!=
literal|null
condition|?
name|first
else|:
name|last
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|)
throws|throws
name|SectioningException
block|{
name|XStudent
name|original
init|=
operator|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return;
name|Integer
name|ORD_UNITIME
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Integer
name|ORD_BANNER
init|=
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Integer
name|ORD_CREDIT
init|=
operator|new
name|Integer
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|RequestedCourse
name|rc
init|=
name|r
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|rc
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NO_ALT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.courseHasNoAlt"
argument_list|,
literal|"No alternative course provided."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|ORD_UNITIME
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|server
operator|instanceof
name|DatabaseServer
condition|)
block|{
name|Map
argument_list|<
name|Class_
argument_list|,
name|XCourseId
argument_list|>
name|singleSections
init|=
operator|new
name|HashMap
argument_list|<
name|Class_
argument_list|,
name|XCourseId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|isAlternative
argument_list|()
condition|)
continue|continue;
comment|// no alternate course requests
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|XCourseId
name|course
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|InstructionalOffering
name|offering
init|=
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
operator|&&
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// take only single config courses
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// take only single section subparts
name|Class_
name|clazz
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TimeLocation
name|time
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
for|for
control|(
name|Class_
name|other
range|:
name|singleSections
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|other
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|time
argument_list|)
operator|&&
operator|!
name|clazz
operator|.
name|isToIgnoreStudentConflictsWith
argument_list|(
name|other
argument_list|)
condition|)
block|{
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"OVERLAP"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.courseOverlaps"
argument_list|,
literal|"Conflicts with {other}."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{other}"
argument_list|,
name|singleSections
operator|.
name|get
argument_list|(
name|other
argument_list|)
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|ORD_UNITIME
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cr
operator|.
name|getCourseIds
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// remember section when there are no alternative courses provided
name|singleSections
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|Map
argument_list|<
name|XSection
argument_list|,
name|XCourseId
argument_list|>
name|singleSections
init|=
operator|new
name|HashMap
argument_list|<
name|XSection
argument_list|,
name|XCourseId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|isAlternative
argument_list|()
condition|)
continue|continue;
comment|// no alternate course requests
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|XCourseId
name|course
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
operator|&&
name|offering
operator|.
name|getConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// take only single config courses
for|for
control|(
name|XSubpart
name|subpart
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// take only single section subparts
name|XSection
name|section
init|=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|other
range|:
name|singleSections
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|isOverlapping
argument_list|(
name|offering
operator|.
name|getDistributions
argument_list|()
argument_list|,
name|other
argument_list|)
condition|)
block|{
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"OVERLAP"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.courseOverlaps"
argument_list|,
literal|"Conflicts with {other}."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{other}"
argument_list|,
name|singleSections
operator|.
name|get
argument_list|(
name|other
argument_list|)
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
name|ORD_UNITIME
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cr
operator|.
name|getCourseIds
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// remember section when there are no alternative courses provided
name|singleSections
operator|.
name|put
argument_list|(
name|section
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RequestedCourse
argument_list|>
name|rcs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RequestedCourse
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|rc
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
condition|)
name|rcs
operator|.
name|put
argument_list|(
name|rc
operator|.
name|getOverrideExternalId
argument_list|()
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|rc
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
condition|)
name|rcs
operator|.
name|put
argument_list|(
name|rc
operator|.
name|getOverrideExternalId
argument_list|()
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
name|String
name|minCreditLimit
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.minCreditCheck"
argument_list|)
decl_stmt|;
name|float
name|minCredit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
name|minCredit
operator|+=
name|rc
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|minCreditLimit
operator|!=
literal|null
operator|&&
name|minCredit
operator|>
literal|0
operator|&&
name|minCredit
operator|<
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCreditLimit
argument_list|)
operator|&&
operator|(
name|original
operator|.
name|getMaxCredit
argument_list|()
operator|==
literal|null
operator|||
name|original
operator|.
name|getMaxCredit
argument_list|()
operator|>
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCreditLimit
argument_list|)
operator|)
condition|)
block|{
name|request
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.minCredit"
argument_list|,
literal|"Less than {min} credit hours requested."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{min}"
argument_list|,
name|minCreditLimit
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|minCredit
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|CREDIT_LOW
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minCredit
operator|>
literal|0
operator|&&
name|request
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|SAVED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rcs
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|request
operator|.
name|hasMaxCreditOverride
argument_list|()
condition|)
return|return;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatusResponse
name|status
init|=
operator|(
name|SpecialRegistrationStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Status: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"status_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|Float
name|maxCredit
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|!=
literal|null
condition|)
block|{
name|maxCredit
operator|=
name|status
operator|.
name|data
operator|.
name|maxCredit
expr_stmt|;
name|request
operator|.
name|setMaxCredit
argument_list|(
name|status
operator|.
name|data
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxCredit
operator|==
literal|null
condition|)
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|creditNote
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|.
name|requests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|status
operator|.
name|data
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|regRequestId
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|r
operator|.
name|regRequestId
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getMaxCreditOverrideExternalId
argument_list|()
argument_list|)
condition|)
block|{
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|status
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
name|request
operator|.
name|setMaxCreditOverride
argument_list|(
name|r
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
name|creditNote
operator|=
name|SpecialRegistrationHelper
operator|.
name|note
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|RequestedCourse
name|rc
init|=
name|rcs
operator|.
name|get
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
name|RequestedCourseStatus
operator|.
name|ENROLLED
condition|)
block|{
name|rc
operator|.
name|setStatus
argument_list|(
name|status
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|courseNbr
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|subject
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|er
range|:
name|ch
operator|.
name|errors
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|status
operator|==
name|ChangeStatus
operator|.
name|denied
condition|)
block|{
name|request
operator|.
name|addConfirmationError
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|er
operator|.
name|code
argument_list|,
literal|"Denied "
operator|+
name|er
operator|.
name|message
argument_list|,
name|status
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|,
name|ORD_BANNER
argument_list|)
expr_stmt|;
name|request
operator|.
name|setErrorMessage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.deniedOverrideError"
argument_list|,
literal|"One or more courses require registration overrides which have been denied.\nYou must remove or replace these courses in order to submit your registration request."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ch
operator|.
name|status
operator|!=
name|ChangeStatus
operator|.
name|approved
condition|)
block|{
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|er
operator|.
name|code
argument_list|,
name|er
operator|.
name|message
argument_list|,
name|status
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|,
name|ORD_BANNER
argument_list|)
expr_stmt|;
block|}
block|}
name|rc
operator|.
name|setStatusNote
argument_list|(
name|SpecialRegistrationHelper
operator|.
name|note
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|maxCreditLimitStr
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditCheck"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCredit
operator|<
name|request
operator|.
name|getCredit
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|getOverCreditRequests
argument_list|(
name|request
argument_list|,
name|maxCredit
argument_list|)
control|)
block|{
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"CREDIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|ORD_CREDIT
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
operator|&&
name|request
operator|.
name|getMaxCreditOverride
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasErrorMessage
argument_list|()
condition|)
name|request
operator|.
name|setErrorMessage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCreditDeniedError"
argument_list|,
literal|"Maximum of {max} credit hours exceeded.\nThe request to increase the maximum credit hours to {maxCreditDenied} has been denied.\nYou must remove some course requests in order to submit your registration request."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{maxCreditDenied}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getMaxCreditOverride
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|maxCreditLimitStr
operator|!=
literal|null
operator|&&
name|Float
operator|.
name|parseFloat
argument_list|(
name|maxCreditLimitStr
argument_list|)
operator|<
name|request
operator|.
name|getCredit
argument_list|()
condition|)
block|{
name|float
name|maxCreditLimit
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|maxCreditLimitStr
argument_list|)
decl_stmt|;
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|CREDIT_HIGH
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|hasErrorMessage
argument_list|()
condition|)
name|request
operator|.
name|setErrorMessage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCreditError"
argument_list|,
literal|"Maximum of {max} credit hours exceeded.\nYou must remove some course requests in order to submit your registration request."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCreditLimit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|creditNote
operator|!=
literal|null
operator|&&
operator|!
name|creditNote
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setCreditNote
argument_list|(
name|creditNote
argument_list|)
expr_stmt|;
block|}
name|String
name|dash
init|=
name|getSpecialRegistrationDashboardUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|dash
operator|!=
literal|null
condition|)
name|request
operator|.
name|setSpecRegDashboardUrl
argument_list|(
name|dash
operator|.
name|replace
argument_list|(
literal|"{term}"
argument_list|,
name|term
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{campus}"
argument_list|,
name|campus
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{studentId}"
argument_list|,
name|getBannerId
argument_list|(
name|original
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"Null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|isValidationEnabled
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|StudentSectioningStatus
name|status
init|=
name|student
operator|.
name|getEffectiveStatus
argument_list|()
decl_stmt|;
return|return
name|status
operator|==
literal|null
operator|||
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|reqval
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isValidationEnabled
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|)
block|{
name|String
name|status
init|=
name|student
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
name|status
operator|=
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
literal|true
return|;
name|StudentSectioningStatus
name|dbStatus
init|=
name|StudentSectioningStatus
operator|.
name|getStatus
argument_list|(
name|status
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|dbStatus
operator|!=
literal|null
operator|&&
name|dbStatus
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|reqval
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|hasPendingOverride
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
block|{
if|if
condition|(
name|student
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
operator|&&
name|student
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
operator|==
name|CourseRequestOverrideStatus
operator|.
name|PENDING
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|student
operator|.
name|getMaxCredit
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|true
return|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
operator|&&
name|cr
operator|.
name|getCourseRequestOverrideStatus
argument_list|()
operator|==
name|CourseRequestOverrideStatus
operator|.
name|PENDING
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|updateStudent
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|,
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
parameter_list|)
throws|throws
name|SectioningException
block|{
comment|// No pending overrides -> nothing to do
if|if
condition|(
name|student
operator|==
literal|null
operator|||
operator|!
name|hasPendingOverride
argument_list|(
name|student
argument_list|)
condition|)
return|return
literal|false
return|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
operator|(
name|server
operator|==
literal|null
condition|?
operator|new
name|AcademicSessionInfo
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
else|:
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|)
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|action
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatusResponse
name|status
init|=
operator|(
name|SpecialRegistrationStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Status: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"status_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SpecialRegistration
name|req
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|status
operator|.
name|data
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
condition|)
block|{
name|req
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|req
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|cr
operator|.
name|getCourseRequestOverrideStatus
argument_list|()
operator|!=
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
condition|)
block|{
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|Integer
name|oldStatus
init|=
name|cr
operator|.
name|getOverrideStatus
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|status
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
condition|)
block|{
case|case
name|OVERRIDE_REJECTED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|PENDING
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|oldStatus
operator|==
literal|null
operator|||
operator|!
name|oldStatus
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|getOverrideStatus
argument_list|()
argument_list|)
condition|)
block|{
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|boolean
name|studentChanged
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|data
operator|.
name|maxCredit
operator|!=
literal|null
operator|&&
operator|!
name|status
operator|.
name|data
operator|.
name|maxCredit
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setMaxCredit
argument_list|(
name|status
operator|.
name|data
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SpecialRegistration
name|req
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|status
operator|.
name|data
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|student
operator|.
name|getOverrideExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
condition|)
block|{
name|req
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|req
operator|==
literal|null
condition|)
block|{
name|student
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideMaxCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|Integer
name|oldStatus
init|=
name|student
operator|.
name|getOverrideStatus
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|status
argument_list|(
name|req
argument_list|,
literal|true
argument_list|)
condition|)
block|{
case|case
name|OVERRIDE_REJECTED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|PENDING
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|oldStatus
operator|==
literal|null
operator|||
operator|!
name|oldStatus
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getOverrideStatus
argument_list|()
argument_list|)
condition|)
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|studentChanged
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
operator|||
name|studentChanged
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|changed
operator|||
name|studentChanged
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"Null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|hasNotApprovedCourseRequestOverride
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
block|{
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
operator|&&
name|cr
operator|.
name|getCourseRequestOverrideStatus
argument_list|()
operator|!=
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revalidateStudent
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|,
name|Builder
name|action
parameter_list|)
throws|throws
name|SectioningException
block|{
comment|// When there is a pending override, try to update student first
if|if
condition|(
name|hasPendingOverride
argument_list|(
name|student
argument_list|)
condition|)
name|updateStudent
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// Do not re-validate when validation is disabled
if|if
condition|(
operator|!
name|isValidationEnabled
argument_list|(
name|student
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// All course requests are approved -> nothing to do
if|if
condition|(
operator|!
name|hasNotApprovedCourseRequestOverride
argument_list|(
name|student
argument_list|)
operator|&&
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.forceRevalidation"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
name|OnlineSectioningModel
name|model
init|=
operator|new
name|OnlineSectioningModel
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|,
name|server
operator|.
name|getOverExpectedCriterion
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|linkedClassesMustBeUsed
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"LinkedClasses.mustBeUsed"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
init|=
operator|new
name|AssignmentMap
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|XStudent
name|original
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
condition|)
name|original
operator|=
operator|new
name|XStudent
argument_list|(
name|student
argument_list|,
name|helper
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|)
expr_stmt|;
name|Student
name|s
init|=
operator|new
name|Student
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|.
name|setExternalId
argument_list|(
name|original
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setName
argument_list|(
name|original
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setNeedShortDistances
argument_list|(
name|original
operator|.
name|hasAccomodation
argument_list|(
name|server
operator|.
name|getDistanceMetric
argument_list|()
operator|.
name|getShortDistanceAccommodationReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setAllowDisabled
argument_list|(
name|original
operator|.
name|isAllowDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|XDistribution
argument_list|>
name|distributions
init|=
operator|new
name|HashSet
argument_list|<
name|XDistribution
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|preferredSections
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|action
operator|.
name|addRequest
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|ft
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|r
decl_stmt|;
operator|new
name|FreeTimeRequest
argument_list|(
name|r
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|r
operator|.
name|getPriority
argument_list|()
argument_list|,
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|,
name|s
argument_list|,
operator|new
name|TimeLocation
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|,
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|,
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|1l
argument_list|,
literal|"Free Time"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
name|XEnrollment
name|enrollment
init|=
name|cr
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Course
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XCourseId
name|c
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|Course
name|clonnedCourse
init|=
name|offering
operator|.
name|toCourse
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|original
argument_list|,
name|server
operator|.
name|getExpectations
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
argument_list|,
name|offering
operator|.
name|getDistributions
argument_list|()
argument_list|,
name|server
operator|.
name|getEnrollments
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|clonnedCourse
argument_list|)
expr_stmt|;
name|model
operator|.
name|addOffering
argument_list|(
name|clonnedCourse
operator|.
name|getOffering
argument_list|()
argument_list|)
expr_stmt|;
name|distributions
operator|.
name|addAll
argument_list|(
name|offering
operator|.
name|getDistributions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Long
name|sectionId
range|:
name|enrollment
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
name|Section
name|section
init|=
name|clonnedCourse
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|CourseRequest
name|clonnedRequest
init|=
operator|new
name|CourseRequest
argument_list|(
name|r
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|r
operator|.
name|getPriority
argument_list|()
argument_list|,
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|,
name|s
argument_list|,
name|courses
argument_list|,
name|cr
operator|.
name|isWaitlist
argument_list|()
argument_list|,
name|cr
operator|.
name|getTimeStamp
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|cr
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sections
operator|.
name|isEmpty
argument_list|()
condition|)
name|preferredSections
operator|.
name|put
argument_list|(
name|clonnedRequest
argument_list|,
name|sections
argument_list|)
expr_stmt|;
for|for
control|(
name|Course
name|clonnedCourse
range|:
name|clonnedRequest
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|clonnedCourse
operator|.
name|getOffering
argument_list|()
operator|.
name|hasReservations
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|clonnedCourse
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|hasMustUse
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Reservation
name|reservation
range|:
name|clonnedCourse
operator|.
name|getOffering
argument_list|()
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|isApplicable
argument_list|(
name|s
argument_list|)
operator|&&
name|reservation
operator|.
name|mustBeUsed
argument_list|()
condition|)
name|hasMustUse
operator|=
literal|true
expr_stmt|;
block|}
name|Reservation
name|reservation
init|=
operator|new
name|OnlineReservation
argument_list|(
name|XReservationType
operator|.
name|Dummy
operator|.
name|ordinal
argument_list|()
argument_list|,
operator|-
name|original
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|clonnedCourse
operator|.
name|getOffering
argument_list|()
argument_list|,
literal|1000
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|hasMustUse
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|sections
control|)
name|reservation
operator|.
name|addSection
argument_list|(
name|section
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|cr
operator|.
name|fillChoicesIn
argument_list|(
name|clonnedRequest
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|clonnedRequest
operator|.
name|getRequiredChoices
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|config
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|sections
control|)
block|{
name|clonnedRequest
operator|.
name|getRequiredChoices
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Choice
argument_list|(
name|section
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|config
condition|)
block|{
name|clonnedRequest
operator|.
name|getRequiredChoices
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Choice
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|model
operator|.
name|addStudent
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|model
operator|.
name|setStudentQuality
argument_list|(
operator|new
name|StudentQuality
argument_list|(
name|server
operator|.
name|getDistanceMetric
argument_list|()
argument_list|,
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// model.setDistanceConflict(new DistanceConflict(server.getDistanceMetric(), model.getProperties()));
comment|// model.setTimeOverlaps(new TimeOverlapsCounter(null, model.getProperties()));
for|for
control|(
name|XDistribution
name|link
range|:
name|distributions
control|)
block|{
if|if
condition|(
name|link
operator|.
name|getDistributionType
argument_list|()
operator|==
name|XDistributionType
operator|.
name|LinkedSections
condition|)
block|{
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|sectionId
range|:
name|link
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
for|for
control|(
name|Offering
name|offering
range|:
name|model
operator|.
name|getOfferings
argument_list|()
control|)
block|{
name|Section
name|x
init|=
name|offering
operator|.
name|getSection
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
name|sections
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|sections
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
name|model
operator|.
name|addLinkedSections
argument_list|(
name|linkedClassesMustBeUsed
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.dummyReservation"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|s
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|r
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|cr
operator|.
name|getCourses
argument_list|()
control|)
block|{
operator|new
name|OnlineReservation
argument_list|(
name|XReservationType
operator|.
name|Dummy
operator|.
name|ordinal
argument_list|()
argument_list|,
operator|-
literal|3l
argument_list|,
name|course
operator|.
name|getOffering
argument_list|()
argument_list|,
operator|-
literal|100
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
block|}
name|OnlineSectioningSelection
name|selection
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|selection
operator|=
operator|new
name|MultiCriteriaBranchAndBoundSelection
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|selection
operator|=
operator|new
name|SuggestionSelection
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|selection
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.fixCurrentEnrollments"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
name|selection
operator|.
name|setPreferredSections
argument_list|(
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setRequiredSections
argument_list|(
name|preferredSections
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|selection
operator|.
name|setPreferredSections
argument_list|(
name|preferredSections
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setRequiredSections
argument_list|(
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|selection
operator|.
name|setRequiredFreeTimes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setRequiredUnassinged
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|BranchBoundNeighbour
name|neighbour
init|=
name|selection
operator|.
name|select
argument_list|(
name|assignment
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|neighbour
operator|.
name|assign
argument_list|(
name|assignment
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|CheckRestrictionsRequest
name|validationRequest
init|=
operator|new
name|CheckRestrictionsRequest
argument_list|()
decl_stmt|;
name|validationRequest
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|validationRequest
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|validationRequest
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|validationRequest
operator|.
name|mode
operator|=
name|getSpecialRegistrationApiMode
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Course
argument_list|>
name|crn2course
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Course
argument_list|>
argument_list|()
decl_stmt|;
name|CheckRestrictionsResponse
name|validation
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|model
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
name|Enrollment
name|e
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|cr
argument_list|)
decl_stmt|;
name|courses
label|:
for|for
control|(
name|Course
name|course
range|:
name|cr
operator|.
name|getCourses
argument_list|()
control|)
block|{
comment|// 1. is enrolled
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|course
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|e
operator|.
name|getSections
argument_list|()
control|)
block|{
name|String
name|crn
init|=
name|getCRN
argument_list|(
name|section
argument_list|,
name|course
argument_list|)
decl_stmt|;
name|crn2course
operator|.
name|put
argument_list|(
name|crn
argument_list|,
name|course
argument_list|)
expr_stmt|;
name|SpecialRegistrationHelper
operator|.
name|addCrn
argument_list|(
name|validationRequest
argument_list|,
name|crn
argument_list|)
expr_stmt|;
block|}
continue|continue
name|courses
continue|;
block|}
comment|// 2. has value
for|for
control|(
name|Enrollment
name|x
range|:
name|cr
operator|.
name|values
argument_list|(
name|assignment
argument_list|)
control|)
block|{
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|x
operator|.
name|getSections
argument_list|()
control|)
block|{
name|String
name|crn
init|=
name|getCRN
argument_list|(
name|section
argument_list|,
name|course
argument_list|)
decl_stmt|;
name|crn2course
operator|.
name|put
argument_list|(
name|crn
argument_list|,
name|course
argument_list|)
expr_stmt|;
name|SpecialRegistrationHelper
operator|.
name|addAltCrn
argument_list|(
name|validationRequest
argument_list|,
name|crn
argument_list|)
expr_stmt|;
block|}
continue|continue
name|courses
continue|;
block|}
block|}
comment|// 3. makup a value
for|for
control|(
name|Config
name|config
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
name|Enrollment
name|x
init|=
name|firstEnrollment
argument_list|(
name|cr
argument_list|,
name|assignment
argument_list|,
name|course
argument_list|,
name|config
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|x
operator|.
name|getSections
argument_list|()
control|)
block|{
name|String
name|crn
init|=
name|getCRN
argument_list|(
name|section
argument_list|,
name|course
argument_list|)
decl_stmt|;
name|crn2course
operator|.
name|put
argument_list|(
name|crn
argument_list|,
name|course
argument_list|)
expr_stmt|;
name|SpecialRegistrationHelper
operator|.
name|addAltCrn
argument_list|(
name|validationRequest
argument_list|,
name|crn
argument_list|)
expr_stmt|;
block|}
continue|continue
name|courses
continue|;
block|}
block|}
block|}
block|}
block|}
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiValidationSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Validation Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|validationRequest
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"validation_request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|validationRequest
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|CheckRestrictionsRequest
argument_list|>
argument_list|(
name|validationRequest
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|validation
operator|=
operator|(
name|CheckRestrictionsResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|CheckRestrictionsResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|CheckRestrictionsResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Validation Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|validation
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"validation_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|validation
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|validation
operator|.
name|status
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|validation
operator|.
name|message
operator|==
literal|null
operator|||
name|validation
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to check student eligibility ("
operator|+
name|validation
operator|.
name|status
operator|+
literal|")."
else|:
name|validation
operator|.
name|message
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
name|Float
name|maxCredit
init|=
name|student
operator|.
name|getMaxCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxCredit
operator|==
literal|null
condition|)
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
expr_stmt|;
name|SpecialRegistrationRequest
name|submitRequest
init|=
operator|new
name|SpecialRegistrationRequest
argument_list|()
decl_stmt|;
name|submitRequest
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|submitRequest
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|submitRequest
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|submitRequest
operator|.
name|mode
operator|=
name|getSpecialRegistrationApiMode
argument_list|()
expr_stmt|;
name|submitRequest
operator|.
name|changes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|submitRequest
operator|.
name|requestorId
operator|=
name|getRequestorId
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|submitRequest
operator|.
name|requestorRole
operator|=
name|getRequestorType
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validation
operator|.
name|outJson
operator|!=
literal|null
operator|&&
name|validation
operator|.
name|outJson
operator|.
name|problems
operator|!=
literal|null
condition|)
name|problems
label|:
for|for
control|(
name|Problem
name|problem
range|:
name|validation
operator|.
name|outJson
operator|.
name|problems
control|)
block|{
if|if
condition|(
literal|"HOLD"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"DUPL"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"CLOS"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"TIME"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
name|Course
name|course
init|=
name|crn2course
operator|.
name|get
argument_list|(
name|problem
operator|.
name|crn
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|Change
name|change
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Change
name|ch
range|:
name|submitRequest
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|subject
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
operator|&&
name|ch
operator|.
name|courseNbr
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
condition|)
block|{
name|change
operator|=
name|ch
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
name|change
operator|=
operator|new
name|Change
argument_list|()
expr_stmt|;
name|change
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|change
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|change
operator|.
name|crn
operator|=
literal|""
expr_stmt|;
name|change
operator|.
name|errors
operator|=
operator|new
name|ArrayList
argument_list|<
name|ChangeError
argument_list|>
argument_list|()
expr_stmt|;
name|change
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|ADD
expr_stmt|;
name|submitRequest
operator|.
name|changes
operator|.
name|add
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|ChangeError
name|err
range|:
name|change
operator|.
name|errors
control|)
if|if
condition|(
name|problem
operator|.
name|code
operator|.
name|equals
argument_list|(
name|err
operator|.
name|code
argument_list|)
condition|)
continue|continue
name|problems
continue|;
block|}
name|ChangeError
name|err
init|=
operator|new
name|ChangeError
argument_list|()
decl_stmt|;
name|err
operator|.
name|code
operator|=
name|problem
operator|.
name|code
expr_stmt|;
name|err
operator|.
name|message
operator|=
name|problem
operator|.
name|message
expr_stmt|;
if|if
condition|(
name|err
operator|.
name|message
operator|!=
literal|null
operator|&&
name|err
operator|.
name|message
operator|.
name|indexOf
argument_list|(
literal|"this section"
argument_list|)
operator|>=
literal|0
condition|)
name|err
operator|.
name|message
operator|=
name|err
operator|.
name|message
operator|.
name|replace
argument_list|(
literal|"this section"
argument_list|,
name|course
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|.
name|message
operator|!=
literal|null
operator|&&
name|err
operator|.
name|message
operator|.
name|indexOf
argument_list|(
literal|" (CRN "
argument_list|)
operator|>=
literal|0
condition|)
name|err
operator|.
name|message
operator|=
name|err
operator|.
name|message
operator|.
name|replaceFirst
argument_list|(
literal|" \\(CRN [0-9][0-9][0-9][0-9][0-9]\\) "
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|change
operator|.
name|errors
operator|.
name|add
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validation
operator|.
name|outJsonAlternatives
operator|!=
literal|null
operator|&&
name|validation
operator|.
name|outJsonAlternatives
operator|.
name|problems
operator|!=
literal|null
condition|)
name|problems
label|:
for|for
control|(
name|Problem
name|problem
range|:
name|validation
operator|.
name|outJsonAlternatives
operator|.
name|problems
control|)
block|{
if|if
condition|(
literal|"HOLD"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"DUPL"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"CLOS"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"TIME"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
name|Course
name|course
init|=
name|crn2course
operator|.
name|get
argument_list|(
name|problem
operator|.
name|crn
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|Change
name|change
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Change
name|ch
range|:
name|submitRequest
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|subject
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
operator|&&
name|ch
operator|.
name|courseNbr
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
condition|)
block|{
name|change
operator|=
name|ch
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
name|change
operator|=
operator|new
name|Change
argument_list|()
expr_stmt|;
name|change
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|change
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|change
operator|.
name|crn
operator|=
literal|""
expr_stmt|;
name|change
operator|.
name|errors
operator|=
operator|new
name|ArrayList
argument_list|<
name|ChangeError
argument_list|>
argument_list|()
expr_stmt|;
name|change
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|ADD
expr_stmt|;
name|submitRequest
operator|.
name|changes
operator|.
name|add
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|ChangeError
name|err
range|:
name|change
operator|.
name|errors
control|)
if|if
condition|(
name|problem
operator|.
name|code
operator|.
name|equals
argument_list|(
name|err
operator|.
name|code
argument_list|)
condition|)
continue|continue
name|problems
continue|;
block|}
name|ChangeError
name|err
init|=
operator|new
name|ChangeError
argument_list|()
decl_stmt|;
name|err
operator|.
name|code
operator|=
name|problem
operator|.
name|code
expr_stmt|;
name|err
operator|.
name|message
operator|=
name|problem
operator|.
name|message
expr_stmt|;
if|if
condition|(
name|err
operator|.
name|message
operator|!=
literal|null
operator|&&
name|err
operator|.
name|message
operator|.
name|indexOf
argument_list|(
literal|"this section"
argument_list|)
operator|>=
literal|0
condition|)
name|err
operator|.
name|message
operator|=
name|err
operator|.
name|message
operator|.
name|replace
argument_list|(
literal|"this section"
argument_list|,
name|course
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|.
name|message
operator|!=
literal|null
operator|&&
name|err
operator|.
name|message
operator|.
name|indexOf
argument_list|(
literal|" (CRN "
argument_list|)
operator|>=
literal|0
condition|)
name|err
operator|.
name|message
operator|=
name|err
operator|.
name|message
operator|.
name|replaceFirst
argument_list|(
literal|" \\(CRN [0-9][0-9][0-9][0-9][0-9]\\) "
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|change
operator|.
name|errors
operator|.
name|add
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Float
argument_list|>
name|credits
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|nrCourses
init|=
literal|0
decl_stmt|;
name|submitRequest
operator|.
name|courseCreditHrs
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseCredit
argument_list|>
argument_list|()
expr_stmt|;
name|submitRequest
operator|.
name|alternateCourseCreditHrs
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseCredit
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|CourseCredit
name|cc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
name|Float
name|credit
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XCourseId
name|cid
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|cc
operator|==
literal|null
condition|)
block|{
name|cc
operator|=
operator|new
name|CourseCredit
argument_list|()
expr_stmt|;
name|cc
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|cc
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|cc
operator|.
name|title
operator|=
name|course
operator|.
name|getTitle
argument_list|()
expr_stmt|;
name|cc
operator|.
name|creditHrs
operator|=
operator|(
name|course
operator|.
name|hasCredit
argument_list|()
condition|?
name|course
operator|.
name|getMinCredit
argument_list|()
else|:
literal|0f
operator|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cc
operator|.
name|alternatives
operator|==
literal|null
condition|)
name|cc
operator|.
name|alternatives
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseCredit
argument_list|>
argument_list|()
expr_stmt|;
name|CourseCredit
name|acc
init|=
operator|new
name|CourseCredit
argument_list|()
decl_stmt|;
name|acc
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|acc
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|acc
operator|.
name|title
operator|=
name|course
operator|.
name|getTitle
argument_list|()
expr_stmt|;
name|acc
operator|.
name|creditHrs
operator|=
operator|(
name|course
operator|.
name|hasCredit
argument_list|()
condition|?
name|course
operator|.
name|getMinCredit
argument_list|()
else|:
literal|0f
operator|)
expr_stmt|;
name|cc
operator|.
name|alternatives
operator|.
name|add
argument_list|(
name|acc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|hasCredit
argument_list|()
operator|&&
operator|(
name|credit
operator|==
literal|null
operator|||
name|credit
operator|<
name|course
operator|.
name|getMinCredit
argument_list|()
operator|)
condition|)
name|credit
operator|=
name|course
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
name|credits
operator|.
name|add
argument_list|(
name|credit
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
condition|)
name|nrCourses
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|isAlternative
argument_list|()
condition|)
name|submitRequest
operator|.
name|alternateCourseCreditHrs
operator|.
name|add
argument_list|(
name|cc
argument_list|)
expr_stmt|;
else|else
name|submitRequest
operator|.
name|courseCreditHrs
operator|.
name|add
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|credits
argument_list|)
expr_stmt|;
name|float
name|total
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrCourses
condition|;
name|i
operator|++
control|)
block|{
name|total
operator|+=
name|credits
operator|.
name|get
argument_list|(
name|credits
operator|.
name|size
argument_list|()
operator|-
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|maxCreditLimitStr
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditCheck"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCreditLimitStr
operator|!=
literal|null
condition|)
block|{
name|float
name|maxCreditLimit
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|maxCreditLimitStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|total
operator|>
name|maxCreditLimit
condition|)
name|total
operator|=
name|maxCreditLimit
expr_stmt|;
block|}
if|if
condition|(
name|maxCredit
operator|<
name|total
condition|)
block|{
name|submitRequest
operator|.
name|maxCredit
operator|=
name|total
expr_stmt|;
block|}
name|SpecialRegistrationResponseList
name|response
init|=
literal|null
decl_stmt|;
name|resource
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteSubmitRegistration
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Submit Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|submitRequest
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|submitRequest
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationRequest
argument_list|>
argument_list|(
name|submitRequest
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|setApiPostTime
argument_list|(
name|action
operator|.
name|getApiPostTime
argument_list|()
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|response
operator|=
operator|(
name|SpecialRegistrationResponseList
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationResponseList
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationResponseList
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Submit Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|response
operator|.
name|status
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|response
operator|.
name|message
operator|==
literal|null
operator|||
name|response
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to request overrides ("
operator|+
name|response
operator|.
name|status
operator|+
literal|")."
else|:
name|response
operator|.
name|message
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
name|cr
label|:
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|data
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|response
operator|.
name|data
control|)
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|subject
argument_list|)
operator|&&
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|courseNbr
argument_list|)
condition|)
block|{
name|Integer
name|oldStatus
init|=
name|cr
operator|.
name|getOverrideStatus
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|status
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
condition|)
block|{
case|case
name|OVERRIDE_REJECTED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|PENDING
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|oldStatus
operator|==
literal|null
operator|||
operator|!
name|oldStatus
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|getOverrideStatus
argument_list|()
argument_list|)
condition|)
name|changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
condition|)
name|changed
operator|=
literal|true
expr_stmt|;
name|cr
operator|.
name|setOverrideExternalId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideTimeStamp
argument_list|(
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
continue|continue
name|cr
continue|;
block|}
block|}
block|}
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
operator|||
name|cr
operator|.
name|getOverrideStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cr
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|studentChanged
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|submitRequest
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|response
operator|.
name|data
control|)
block|{
if|if
condition|(
name|r
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
block|{
name|Integer
name|oldStatus
init|=
name|student
operator|.
name|getOverrideStatus
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|status
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
condition|)
block|{
case|case
name|OVERRIDE_REJECTED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|PENDING
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|oldStatus
operator|==
literal|null
operator|||
operator|!
name|oldStatus
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getOverrideStatus
argument_list|()
argument_list|)
condition|)
name|studentChanged
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getOverrideMaxCredit
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|student
operator|.
name|getOverrideMaxCredit
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|maxCredit
argument_list|)
condition|)
name|studentChanged
operator|=
literal|true
expr_stmt|;
name|student
operator|.
name|setOverrideMaxCredit
argument_list|(
name|r
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getOverrideExternalId
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|student
operator|.
name|getOverrideExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
condition|)
name|studentChanged
operator|=
literal|true
expr_stmt|;
name|student
operator|.
name|setOverrideExternalId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideTimeStamp
argument_list|(
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|else if
condition|(
name|student
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
operator|||
name|student
operator|.
name|getOverrideMaxCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|student
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideMaxCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|studentChanged
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|changed
operator|||
name|studentChanged
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|changed
operator|||
name|studentChanged
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkEligibility
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|EligibilityCheck
name|check
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|student
operator|==
literal|null
operator|||
operator|!
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|)
condition|)
return|return;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckEligibility
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
name|CheckEligibilityResponse
name|eligibility
init|=
operator|(
name|CheckEligibilityResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|CheckEligibilityResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|CheckEligibilityResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Eligibility: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|eligibility
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|eligibility
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|eligibility
operator|.
name|status
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|eligibility
operator|.
name|message
operator|==
literal|null
operator|||
name|eligibility
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to check student eligibility ("
operator|+
name|eligibility
operator|.
name|status
operator|+
literal|")."
else|:
name|eligibility
operator|.
name|message
argument_list|)
throw|;
if|if
condition|(
name|eligibility
operator|.
name|data
operator|==
literal|null
operator|||
name|eligibility
operator|.
name|data
operator|.
name|eligible
operator|==
literal|null
operator|||
operator|!
name|eligibility
operator|.
name|data
operator|.
name|eligible
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|eligibility
operator|.
name|data
operator|!=
literal|null
operator|&&
name|eligibility
operator|.
name|data
operator|.
name|eligibilityProblems
operator|!=
literal|null
condition|)
block|{
name|String
name|m
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EligibilityProblem
name|p
range|:
name|eligibility
operator|.
name|data
operator|.
name|eligibilityProblems
control|)
if|if
condition|(
name|m
operator|==
literal|null
condition|)
name|m
operator|=
name|p
operator|.
name|message
expr_stmt|;
else|else
name|m
operator|+=
literal|"\n"
operator|+
name|p
operator|.
name|message
expr_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
name|check
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|exceptionFailedEligibilityCheck
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"Null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|checkStudentStatuses
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|id2student
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|reloadIds
parameter_list|,
name|int
name|batchNumber
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckAllSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
operator|(
name|server
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|)
decl_stmt|;
name|String
name|studentIds
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|e
range|:
name|id2student
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
name|session
operator|=
operator|new
name|AcademicSessionInfo
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentIds
operator|==
literal|null
condition|)
name|studentIds
operator|=
name|e
operator|.
name|getKey
argument_list|()
expr_stmt|;
else|else
name|studentIds
operator|+=
literal|","
operator|+
name|e
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentIds"
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|helper
operator|.
name|getAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentIds-"
operator|+
name|batchNumber
argument_list|)
operator|.
name|setValue
argument_list|(
name|studentIds
argument_list|)
expr_stmt|;
block|}
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|setApiGetTime
argument_list|(
name|action
operator|.
name|getApiGetTime
argument_list|()
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
name|SpecialRegistrationMultipleStatusResponse
name|response
init|=
operator|(
name|SpecialRegistrationMultipleStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationMultipleStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationMultipleStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response-"
operator|+
name|batchNumber
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|response
operator|.
name|status
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|response
operator|.
name|message
operator|==
literal|null
operator|||
name|response
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to check student statuses ("
operator|+
name|response
operator|.
name|status
operator|+
literal|")."
else|:
name|response
operator|.
name|message
argument_list|)
throw|;
if|if
condition|(
name|response
operator|.
name|data
operator|!=
literal|null
operator|&&
name|response
operator|.
name|data
operator|.
name|students
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SpecialRegistrationStatus
name|status
range|:
name|response
operator|.
name|data
operator|.
name|students
control|)
block|{
name|String
name|studentId
init|=
name|status
operator|.
name|studentId
decl_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
operator|&&
name|status
operator|.
name|requests
operator|!=
literal|null
condition|)
for|for
control|(
name|SpecialRegistration
name|req
range|:
name|status
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|req
operator|.
name|studentId
operator|!=
literal|null
condition|)
block|{
name|studentId
operator|=
name|req
operator|.
name|studentId
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
name|studentId
operator|=
name|ids
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
init|=
name|id2student
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SpecialRegistration
name|req
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|status
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
condition|)
block|{
name|req
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|req
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|cr
operator|.
name|getCourseRequestOverrideStatus
argument_list|()
operator|!=
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
condition|)
block|{
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|Integer
name|oldStatus
init|=
name|cr
operator|.
name|getOverrideStatus
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|status
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
condition|)
block|{
case|case
name|OVERRIDE_REJECTED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|PENDING
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|oldStatus
operator|==
literal|null
operator|||
operator|!
name|oldStatus
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|getOverrideStatus
argument_list|()
argument_list|)
condition|)
block|{
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|boolean
name|studentChanged
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|maxCredit
operator|!=
literal|null
operator|&&
operator|!
name|status
operator|.
name|maxCredit
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setMaxCredit
argument_list|(
name|status
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SpecialRegistration
name|req
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|status
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|student
operator|.
name|getOverrideExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
condition|)
block|{
name|req
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|req
operator|==
literal|null
condition|)
block|{
name|student
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideMaxCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|Integer
name|oldStatus
init|=
name|student
operator|.
name|getOverrideStatus
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|status
argument_list|(
name|req
argument_list|,
literal|true
argument_list|)
condition|)
block|{
case|case
name|OVERRIDE_REJECTED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|PENDING
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|oldStatus
operator|==
literal|null
operator|||
operator|!
name|oldStatus
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getOverrideStatus
argument_list|()
argument_list|)
condition|)
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|studentChanged
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
operator|||
name|studentChanged
condition|)
name|reloadIds
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|updateStudents
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|students
parameter_list|)
throws|throws
name|SectioningException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|id2student
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|reloadIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|batchNumber
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|students
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
init|=
name|students
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
operator|||
operator|!
name|hasPendingOverride
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
name|String
name|id
init|=
name|getBannerId
argument_list|(
name|student
argument_list|)
decl_stmt|;
name|id2student
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|id2student
operator|.
name|size
argument_list|()
operator|>=
literal|100
condition|)
block|{
name|checkStudentStatuses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|id2student
argument_list|,
name|reloadIds
argument_list|,
name|batchNumber
operator|++
argument_list|)
expr_stmt|;
name|id2student
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|id2student
operator|.
name|isEmpty
argument_list|()
condition|)
name|checkStudentStatuses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|id2student
argument_list|,
name|reloadIds
argument_list|,
name|batchNumber
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reloadIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|reloadIds
operator|.
name|isEmpty
argument_list|()
operator|&&
name|server
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|server
operator|instanceof
name|DatabaseServer
operator|)
condition|)
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|ReloadStudent
operator|.
name|class
argument_list|)
operator|.
name|forStudents
argument_list|(
name|reloadIds
argument_list|)
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reloadIds
return|;
block|}
block|}
end_class

end_unit

