begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationEligibilityRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationEligibilityResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|CancelSpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|CancelSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveSpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SubmitSpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SubmitSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalClassLookupInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|SpecialRegistrationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|StudentEnrollmentProvider
operator|.
name|EnrollmentRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|EligibilityProblem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|Problem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|RequestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|RestrictionsCheckRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|RestrictionsCheckResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationCancelResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DefaultExternalClassLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PurdueSpecialRegistrationProvider
implements|implements
name|SpecialRegistrationProvider
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|PurdueSpecialRegistrationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Client
name|iClient
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|private
name|ExternalClassLookupInterface
name|iExternalClassLookup
decl_stmt|;
specifier|public
name|PurdueSpecialRegistrationProvider
parameter_list|()
block|{
name|List
argument_list|<
name|Protocol
argument_list|>
name|protocols
init|=
operator|new
name|ArrayList
argument_list|<
name|Protocol
argument_list|>
argument_list|()
decl_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
expr_stmt|;
name|iClient
operator|=
operator|new
name|Client
argument_list|(
name|protocols
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalClassLookup
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalClassLookup
operator|=
operator|new
name|DefaultExternalClassLookup
argument_list|()
expr_stmt|;
else|else
name|iExternalClassLookup
operator|=
operator|(
name|ExternalClassLookupInterface
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external class lookup, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalClassLookup
operator|=
operator|new
name|DefaultExternalClassLookup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteRetrieveRegistration
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.retrieveRegistration"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/retrieveRegistration"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteSubmitRegistration
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.submitRegistration"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/submitRegistration"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCheckEligibility
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.checkEligibility"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkEligibility"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteGetAllRegistrations
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.retrieveAllRegistrations"
argument_list|,
literal|null
argument_list|)
return|;
comment|//getSpecialRegistrationApiSite() + "/retrieveAllRegistrations");
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.checkSpecialRegistrationStatus"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkSpecialRegistrationStatus"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiValidationSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.validation"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkRestrictionsForOPEN"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCancelSpecialRegistration
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.cancelSpecialRegistration"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/cancelRegistrationRequestFromUniTime"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiKey
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.apiKey"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationMode
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.mode"
argument_list|,
literal|"REG"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerTerm
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerCampus
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalCampus
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getRequestorId
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|id
init|=
name|user
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getRequestorType
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|,
name|XStudent
name|student
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|user
operator|.
name|hasType
argument_list|()
condition|)
return|return
name|user
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
return|;
return|return
operator|(
name|user
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|?
literal|"STUDENT"
else|:
literal|"MANAGER"
operator|)
return|;
block|}
specifier|protected
name|SpecialRegistrationStatus
name|getStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{
if|if
condition|(
name|RequestStatus
operator|.
name|mayEdit
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|status
argument_list|)
operator|||
name|RequestStatus
operator|.
name|newRequest
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|status
argument_list|)
operator|||
name|RequestStatus
operator|.
name|draft
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|status
argument_list|)
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Draft
return|;
if|else if
condition|(
name|RequestStatus
operator|.
name|approved
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|status
argument_list|)
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Approved
return|;
if|else if
condition|(
name|RequestStatus
operator|.
name|cancelled
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|status
argument_list|)
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Cancelled
return|;
if|else if
condition|(
name|RequestStatus
operator|.
name|denied
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|status
argument_list|)
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Rejected
return|;
else|else
return|return
name|SpecialRegistrationStatus
operator|.
name|Pending
return|;
block|}
specifier|protected
name|SpecialRegistrationStatus
name|combine
parameter_list|(
name|SpecialRegistrationStatus
name|s1
parameter_list|,
name|SpecialRegistrationStatus
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|==
literal|null
condition|)
return|return
name|s2
return|;
if|if
condition|(
name|s2
operator|==
literal|null
condition|)
return|return
name|s1
return|;
if|if
condition|(
name|s1
operator|==
name|s2
condition|)
return|return
name|s1
return|;
if|if
condition|(
name|s1
operator|==
name|SpecialRegistrationStatus
operator|.
name|Draft
operator|||
name|s2
operator|==
name|SpecialRegistrationStatus
operator|.
name|Draft
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Draft
return|;
if|if
condition|(
name|s1
operator|==
name|SpecialRegistrationStatus
operator|.
name|Pending
operator|||
name|s2
operator|==
name|SpecialRegistrationStatus
operator|.
name|Pending
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Pending
return|;
if|if
condition|(
name|s1
operator|==
name|SpecialRegistrationStatus
operator|.
name|Cancelled
operator|||
name|s2
operator|==
name|SpecialRegistrationStatus
operator|.
name|Cancelled
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Cancelled
return|;
if|if
condition|(
name|s1
operator|==
name|SpecialRegistrationStatus
operator|.
name|Rejected
operator|||
name|s2
operator|==
name|SpecialRegistrationStatus
operator|.
name|Rejected
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Rejected
return|;
if|if
condition|(
name|s1
operator|==
name|SpecialRegistrationStatus
operator|.
name|Approved
operator|||
name|s2
operator|==
name|SpecialRegistrationStatus
operator|.
name|Approved
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Approved
return|;
return|return
name|s1
return|;
block|}
specifier|protected
name|boolean
name|canCancel
parameter_list|(
name|String
name|status
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|buildChangeList
parameter_list|(
name|SpecialRegistrationRequest
name|request
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|assignment
parameter_list|,
name|Collection
argument_list|<
name|ErrorMessage
argument_list|>
name|errors
parameter_list|)
block|{
name|request
operator|.
name|changes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
expr_stmt|;
name|request
operator|.
name|maxCredit
operator|=
literal|0f
expr_stmt|;
name|Map
argument_list|<
name|XCourse
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|enrollments
init|=
operator|new
name|HashMap
argument_list|<
name|XCourse
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
name|offerings
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
range|:
name|assignment
control|)
block|{
comment|// Skip free times and dummy sections
if|if
condition|(
name|ca
operator|==
literal|null
operator|||
name|ca
operator|.
name|isFreeTime
argument_list|()
operator|||
name|ca
operator|.
name|getClassId
argument_list|()
operator|==
literal|null
operator|||
name|ca
operator|.
name|isDummy
argument_list|()
operator|||
name|ca
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getClassNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getClassNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
comment|// Check section limits
name|XSection
name|section
init|=
name|offering
operator|.
name|getSection
argument_list|(
name|ca
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|ca
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
comment|// Check cancelled flag
if|if
condition|(
name|section
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
if|if
condition|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Enrollment.CanKeepCancelledClass"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
name|contains
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|contains
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollCancelled
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|ca
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollCancelled
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|ca
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|enrollments
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
block|{
name|sections
operator|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
expr_stmt|;
name|enrollments
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|offerings
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|offering
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|crns
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|check
label|:
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|XCourse
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|e
range|:
name|enrollments
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|XCourse
name|course
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|hasCredit
argument_list|()
condition|)
name|request
operator|.
name|maxCredit
operator|+=
name|course
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|enrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
comment|// course change
for|for
control|(
name|XSection
name|s
range|:
name|sections
control|)
block|{
if|if
condition|(
operator|!
name|enrollment
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
name|s
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|ADD
operator|.
name|name
argument_list|()
expr_stmt|;
if|if
condition|(
name|crns
operator|.
name|add
argument_list|(
name|ch
operator|.
name|crn
argument_list|)
condition|)
name|request
operator|.
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Long
name|id
range|:
name|enrollment
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
name|XSection
name|s
init|=
name|offerings
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|.
name|getSection
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sections
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
name|s
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|DROP
operator|.
name|name
argument_list|()
expr_stmt|;
if|if
condition|(
name|crns
operator|.
name|add
argument_list|(
name|ch
operator|.
name|crn
argument_list|)
condition|)
name|request
operator|.
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue
name|check
continue|;
block|}
block|}
block|}
comment|// new course
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
block|{
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|ADD
operator|.
name|name
argument_list|()
expr_stmt|;
if|if
condition|(
name|crns
operator|.
name|add
argument_list|(
name|ch
operator|.
name|crn
argument_list|)
condition|)
name|request
operator|.
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
comment|// drop course
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|enrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
operator|!
name|offerings
operator|.
name|containsKey
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
name|enrollment
argument_list|)
control|)
block|{
name|XCourse
name|course
init|=
name|offering
operator|.
name|getCourse
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|DROP
operator|.
name|name
argument_list|()
expr_stmt|;
if|if
condition|(
name|crns
operator|.
name|add
argument_list|(
name|ch
operator|.
name|crn
argument_list|)
condition|)
name|request
operator|.
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|errors
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|ErrorMessage
argument_list|>
name|added
init|=
operator|new
name|HashSet
argument_list|<
name|ErrorMessage
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Change
name|ch
range|:
name|request
operator|.
name|changes
control|)
block|{
for|for
control|(
name|ErrorMessage
name|m
range|:
name|errors
control|)
if|if
condition|(
name|ch
operator|.
name|crn
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getSection
argument_list|()
argument_list|)
operator|&&
name|added
operator|.
name|add
argument_list|(
name|m
argument_list|)
condition|)
block|{
if|if
condition|(
name|ch
operator|.
name|errors
operator|==
literal|null
condition|)
name|ch
operator|.
name|errors
operator|=
operator|new
name|ArrayList
argument_list|<
name|ChangeError
argument_list|>
argument_list|()
expr_stmt|;
name|ChangeError
name|er
init|=
operator|new
name|ChangeError
argument_list|()
decl_stmt|;
name|er
operator|.
name|code
operator|=
name|m
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|er
operator|.
name|message
operator|=
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|ch
operator|.
name|errors
operator|.
name|add
argument_list|(
name|er
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|SpecialRegistrationEligibilityResponse
name|checkEligibility
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|SpecialRegistrationEligibilityRequest
name|input
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
literal|false
argument_list|,
literal|"No student."
argument_list|)
return|;
if|if
condition|(
operator|!
name|isSpecialRegistrationEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|)
condition|)
return|return
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
literal|false
argument_list|,
literal|"Special registration is disabled."
argument_list|)
return|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|getSpecialRegistrationApiSiteCheckEligibility
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|/** -- POST 				Gson gson = getGson(helper); 				SpecialRegistrationRequest request = new SpecialRegistrationRequest(); 				AcademicSessionInfo session = server.getAcademicSession(); 				request.term = getBannerTerm(session); 				request.campus = getBannerCampus(session); 				request.studentId = getBannerId(student); 				request.changes = buildChangeList(server, helper, student, input.getClassAssignments(), input.getErrors()); 				 				if (request.changes == null || request.changes.isEmpty()) 					return new SpecialRegistrationEligibilityResponse(false, "There are no changes.");  				resource = new ClientResource(getSpecialRegistrationApiSiteCheckEligibility()); 				resource.setNext(iClient); 				resource.addQueryParameter("apiKey", getSpecialRegistrationApiKey()); 				 				if (helper.isDebugEnabled()) 					helper.debug("Request: " + gson.toJson(request)); 				helper.getAction().addOptionBuilder().setKey("specreg_request").setValue(gson.toJson(request)); 				 				long t1 = System.currentTimeMillis(); 				 				resource.post(new GsonRepresentation<SpecialRegistrationRequest>(request)); 				 				helper.getAction().setApiPostTime(System.currentTimeMillis() - t1); 				 				SpecialRegistrationResponse response = (SpecialRegistrationResponse)new GsonRepresentation<SpecialRegistrationResponse>(resource.getResponseEntity(), SpecialRegistrationResponse.class).getObject(); 				 				if (helper.isDebugEnabled()) 					helper.debug("Response: " + gson.toJson(response)); 				helper.getAction().addOptionBuilder().setKey("specreg_response").setValue(gson.toJson(response)); 				 				return new SpecialRegistrationEligibilityResponse(response != null&& ResponseStatus.success.name().equals(response.status), response != null ? response.message : null); 				*/
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckEligibility
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationMode
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationEligibilityResponse
name|eligibility
init|=
operator|(
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationEligibilityResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationEligibilityResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationEligibilityResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Eligibility: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|eligibility
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|eligibility
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ResponseStatus
operator|.
name|success
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|eligibility
operator|.
name|status
argument_list|)
condition|)
return|return
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
literal|false
argument_list|,
name|eligibility
operator|.
name|message
operator|==
literal|null
operator|||
name|eligibility
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to check student eligibility ("
operator|+
name|eligibility
operator|.
name|status
operator|+
literal|")."
else|:
name|eligibility
operator|.
name|message
argument_list|)
return|;
name|boolean
name|eligible
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|eligibility
operator|.
name|data
operator|==
literal|null
operator|||
name|eligibility
operator|.
name|data
operator|.
name|eligible
operator|==
literal|null
operator|||
operator|!
name|eligibility
operator|.
name|data
operator|.
name|eligible
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|eligible
operator|=
literal|false
expr_stmt|;
block|}
name|String
name|message
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|eligibility
operator|.
name|data
operator|!=
literal|null
operator|&&
name|eligibility
operator|.
name|data
operator|.
name|eligibilityProblems
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|EligibilityProblem
name|p
range|:
name|eligibility
operator|.
name|data
operator|.
name|eligibilityProblems
control|)
if|if
condition|(
name|message
operator|==
literal|null
condition|)
name|message
operator|=
name|p
operator|.
name|message
expr_stmt|;
else|else
name|message
operator|+=
literal|"\n"
operator|+
name|p
operator|.
name|message
expr_stmt|;
block|}
name|SpecialRegistrationEligibilityResponse
name|ret
init|=
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
name|eligible
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|isCanSubmit
argument_list|()
condition|)
name|ret
operator|.
name|setErrors
argument_list|(
name|validate
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|input
operator|.
name|getClassAssignments
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|input
operator|.
name|hasErrors
argument_list|()
condition|)
return|return
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
return|;
name|Set
argument_list|<
name|String
argument_list|>
name|errors
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ErrorMessage
name|m
range|:
name|input
operator|.
name|getErrors
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|getCode
argument_list|()
operator|!=
literal|null
condition|)
name|errors
operator|.
name|add
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
return|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"errors"
argument_list|)
operator|.
name|setValue
argument_list|(
name|errors
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatusResponse
name|response
init|=
operator|(
name|SpecialRegistrationStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|ResponseStatus
operator|.
name|success
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|status
argument_list|)
operator|&&
name|response
operator|.
name|data
operator|!=
literal|null
operator|&&
name|response
operator|.
name|data
operator|.
name|overrides
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|error
range|:
name|errors
control|)
if|if
condition|(
operator|!
name|response
operator|.
name|data
operator|.
name|overrides
operator|.
name|contains
argument_list|(
name|error
argument_list|)
condition|)
return|return
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
literal|false
argument_list|,
literal|"Missing "
operator|+
name|error
operator|+
literal|" override."
argument_list|)
return|;
return|return
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
literal|false
argument_list|,
name|response
operator|!=
literal|null
condition|?
name|response
operator|.
name|message
else|:
literal|null
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Set
argument_list|<
name|ErrorMessage
argument_list|>
name|validate
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
name|classAssignments
parameter_list|)
block|{
name|RestrictionsCheckRequest
name|req
init|=
operator|new
name|RestrictionsCheckRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|sisId
operator|=
name|getBannerId
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|req
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|mode
operator|=
name|getSpecialRegistrationMode
argument_list|()
expr_stmt|;
name|req
operator|.
name|includeReg
operator|=
literal|"Y"
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|current
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|crn2course
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|newCourses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|adds
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|courses
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
name|XEnrollment
name|enr
init|=
name|cr
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enr
operator|!=
literal|null
condition|)
block|{
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|enr
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|enr
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Long
name|id
range|:
name|enr
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
name|XSection
name|section
init|=
name|offering
operator|.
name|getSection
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|crn
init|=
name|section
operator|.
name|getExternalId
argument_list|(
name|enr
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|current
operator|.
name|add
argument_list|(
name|crn
argument_list|)
expr_stmt|;
name|crn2course
operator|.
name|put
argument_list|(
name|crn
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|classAssignments
operator|!=
literal|null
condition|)
for|for
control|(
name|ClassAssignment
name|ca
range|:
name|classAssignments
control|)
block|{
if|if
condition|(
name|ca
operator|==
literal|null
operator|||
name|ca
operator|.
name|isFreeTime
argument_list|()
operator|||
name|ca
operator|.
name|getClassId
argument_list|()
operator|==
literal|null
operator|||
name|ca
operator|.
name|isDummy
argument_list|()
operator|||
name|ca
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
continue|continue;
name|XSection
name|section
init|=
name|offering
operator|.
name|getSection
argument_list|(
name|ca
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
continue|continue;
name|String
name|crn
init|=
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|current
operator|.
name|remove
argument_list|(
name|crn
argument_list|)
condition|)
block|{
name|req
operator|.
name|add
argument_list|(
name|crn
argument_list|)
expr_stmt|;
name|crn2course
operator|.
name|put
argument_list|(
name|crn
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|courses
operator|.
name|add
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
condition|)
name|newCourses
operator|.
name|add
argument_list|(
name|crn
argument_list|)
expr_stmt|;
name|adds
operator|.
name|add
argument_list|(
name|crn
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|crn
range|:
name|current
control|)
name|req
operator|.
name|drop
argument_list|(
name|crn
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ErrorMessage
argument_list|>
name|errors
init|=
operator|new
name|TreeSet
argument_list|<
name|ErrorMessage
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|actions
operator|!=
literal|null
condition|)
block|{
name|RestrictionsCheckResponse
name|resp
init|=
literal|null
decl_stmt|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiValidationSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"validation_request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|RestrictionsCheckRequest
argument_list|>
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|resp
operator|=
operator|(
name|RestrictionsCheckResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|RestrictionsCheckResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|RestrictionsCheckResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"validation_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resp
operator|!=
literal|null
operator|&&
name|resp
operator|.
name|problems
operator|!=
literal|null
condition|)
for|for
control|(
name|Problem
name|problem
range|:
name|resp
operator|.
name|problems
control|)
block|{
if|if
condition|(
literal|"CLOS"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
operator|&&
operator|!
name|adds
operator|.
name|contains
argument_list|(
name|problem
operator|.
name|crn
argument_list|)
condition|)
block|{
comment|// Ignore closed section error on sections that are not being added
block|}
if|else if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
operator|&&
operator|!
name|newCourses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Move max credit error message to the last added course
name|String
name|crn
init|=
name|newCourses
operator|.
name|remove
argument_list|(
name|newCourses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|crn2course
operator|.
name|get
argument_list|(
name|crn
argument_list|)
argument_list|,
name|crn
argument_list|,
name|problem
operator|.
name|code
argument_list|,
name|problem
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|crn2course
operator|.
name|get
argument_list|(
name|problem
operator|.
name|crn
argument_list|)
argument_list|,
name|problem
operator|.
name|crn
argument_list|,
name|problem
operator|.
name|code
argument_list|,
name|problem
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|errors
return|;
block|}
annotation|@
name|Override
specifier|public
name|SubmitSpecialRegistrationResponse
name|submitRegistration
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|SubmitSpecialRegistrationRequest
name|input
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SpecialRegistrationRequest
name|request
init|=
operator|new
name|SpecialRegistrationRequest
argument_list|()
decl_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|request
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|request
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|request
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|buildChangeList
argument_list|(
name|request
argument_list|,
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|input
operator|.
name|getClassAssignments
argument_list|()
argument_list|,
name|input
operator|.
name|hasErrors
argument_list|()
condition|?
name|input
operator|.
name|getErrors
argument_list|()
else|:
name|validate
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|input
operator|.
name|getClassAssignments
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// buildChangeList(request, server, helper, student, input.getClassAssignments(), validate(server, helper, student, input.getClassAssignments()));
name|request
operator|.
name|requestId
operator|=
name|input
operator|.
name|getRequestId
argument_list|()
expr_stmt|;
name|request
operator|.
name|mode
operator|=
name|getSpecialRegistrationMode
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|requestorId
operator|=
name|getRequestorId
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|requestorRole
operator|=
name|getRequestorType
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|notes
operator|=
name|input
operator|.
name|getNote
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|changes
operator|==
literal|null
operator|||
name|request
operator|.
name|changes
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"There are no changes."
argument_list|)
throw|;
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteSubmitRegistration
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|getRequestKey
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|input
operator|.
name|getRequestKey
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"reqKey"
argument_list|,
name|input
operator|.
name|getRequestKey
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationRequest
argument_list|>
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationResponseList
name|response
init|=
operator|(
name|SpecialRegistrationResponseList
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationResponseList
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationResponseList
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|SubmitSpecialRegistrationResponse
name|ret
init|=
operator|new
name|SubmitSpecialRegistrationResponse
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setMessage
argument_list|(
name|response
operator|.
name|message
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setSuccess
argument_list|(
name|ResponseStatus
operator|.
name|success
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|data
operator|!=
literal|null
operator|&&
operator|!
name|response
operator|.
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setStatus
argument_list|(
name|getStatus
argument_list|(
name|response
operator|.
name|data
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|setSuccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
try|try
block|{
name|iClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|CourseOffering
name|findCourseByExternalId
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|externalId
parameter_list|)
block|{
return|return
name|iExternalClassLookup
operator|.
name|findCourseByExternalId
argument_list|(
name|sessionId
argument_list|,
name|externalId
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Class_
argument_list|>
name|findClassesByExternalId
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|externalId
parameter_list|)
block|{
return|return
name|iExternalClassLookup
operator|.
name|findClassesByExternalId
argument_list|(
name|sessionId
argument_list|,
name|externalId
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isDrop
parameter_list|(
name|XEnrollment
name|enrollment
parameter_list|,
name|List
argument_list|<
name|Change
argument_list|>
name|changes
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|protected
name|List
argument_list|<
name|XRequest
argument_list|>
name|getRequests
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|Map
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|adds
parameter_list|,
name|Map
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|drops
parameter_list|)
block|{
name|Student
name|dbStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XRequest
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<
name|XRequest
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|CourseOffering
argument_list|>
name|remaining
init|=
operator|new
name|HashSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|(
name|adds
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|request
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|add
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|drop
init|=
literal|null
decl_stmt|;
name|XCourseId
name|courseId
init|=
literal|null
decl_stmt|;
name|Long
name|configId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XCourseId
name|course
range|:
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|e
range|:
name|adds
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|add
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|courseId
operator|=
name|course
expr_stmt|;
name|configId
operator|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|remaining
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|e
range|:
name|drops
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|drop
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|add
operator|==
literal|null
operator|&&
name|drop
operator|==
literal|null
condition|)
block|{
comment|// no change detected
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XEnrollment
name|enrollemnt
init|=
name|cr
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
operator|(
name|enrollemnt
operator|==
literal|null
condition|?
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
else|:
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|enrollemnt
operator|.
name|getSectionIds
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|enrollemnt
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|courseId
operator|!=
literal|null
condition|)
block|{
comment|// add -> check course& config
if|if
condition|(
operator|!
name|enrollemnt
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|courseId
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|&&
name|drop
operator|==
literal|null
condition|)
block|{
comment|// different course and no drop -> create new course request
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|remaining
operator|.
name|add
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseId
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
operator|!
name|enrollemnt
operator|.
name|getConfigId
argument_list|()
operator|.
name|equals
argument_list|(
name|configId
argument_list|)
condition|)
block|{
comment|// same course different config -> drop all
name|classIds
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|courseId
operator|=
name|enrollemnt
expr_stmt|;
name|configId
operator|=
name|enrollemnt
operator|.
name|getConfigId
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|add
operator|!=
literal|null
condition|)
for|for
control|(
name|Class_
name|c
range|:
name|add
control|)
name|classIds
operator|.
name|add
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|drop
operator|!=
literal|null
condition|)
for|for
control|(
name|Class_
name|c
range|:
name|drop
control|)
name|classIds
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|classIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requests
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
name|cr
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requests
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
name|cr
argument_list|,
operator|new
name|XEnrollment
argument_list|(
name|dbStudent
argument_list|,
name|courseId
argument_list|,
name|configId
argument_list|,
name|classIds
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// free time --> no change
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseOffering
name|course
range|:
name|remaining
control|)
block|{
name|Long
name|configId
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|adds
operator|.
name|get
argument_list|(
name|course
argument_list|)
control|)
block|{
if|if
condition|(
name|configId
operator|==
literal|null
condition|)
name|configId
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|classIds
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|XCourseId
name|courseId
init|=
operator|new
name|XCourseId
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
name|dbStudent
argument_list|,
name|courseId
argument_list|,
name|requests
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|XEnrollment
argument_list|(
name|dbStudent
argument_list|,
name|courseId
argument_list|,
name|configId
argument_list|,
name|classIds
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|requests
return|;
block|}
specifier|protected
name|void
name|checkRequests
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|List
argument_list|<
name|XRequest
argument_list|>
name|xrequests
parameter_list|,
name|Set
argument_list|<
name|ErrorMessage
argument_list|>
name|errors
parameter_list|,
name|boolean
name|allowTimeConf
parameter_list|,
name|boolean
name|allowSpaceConf
parameter_list|)
block|{
name|List
argument_list|<
name|EnrollmentRequest
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<
name|EnrollmentRequest
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
name|courseId2offering
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|req
range|:
name|xrequests
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|req
operator|instanceof
name|XCourseRequest
operator|)
condition|)
continue|continue;
name|XCourseRequest
name|courseReq
init|=
operator|(
name|XCourseRequest
operator|)
name|req
decl_stmt|;
name|XEnrollment
name|e
init|=
name|courseReq
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|e
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|e
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
throw|;
name|EnrollmentRequest
name|request
init|=
operator|new
name|EnrollmentRequest
argument_list|(
name|course
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|e
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
throw|;
for|for
control|(
name|Long
name|sectionId
range|:
name|e
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
comment|// Check section limits
name|XSection
name|section
init|=
name|offering
operator|.
name|getSection
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|e
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|sectionId
argument_list|)
argument_list|)
throw|;
comment|// Check cancelled flag
if|if
condition|(
name|section
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
if|if
condition|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Enrollment.CanKeepCancelledClass"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
name|contains
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|contains
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_CANCEL
argument_list|,
name|MSG
operator|.
name|exceptionEnrollCancelled
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_CANCEL
argument_list|,
name|MSG
operator|.
name|exceptionEnrollCancelled
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|getSections
argument_list|()
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|courseId2offering
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|offering
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check for NEW and CHANGE deadlines
name|check
label|:
for|for
control|(
name|EnrollmentRequest
name|request
range|:
name|requests
control|)
block|{
name|XCourse
name|course
init|=
name|request
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|request
operator|.
name|getSections
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|enrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
comment|// course change
for|for
control|(
name|XSection
name|s
range|:
name|sections
control|)
if|if
condition|(
operator|!
name|enrollment
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getSectionId
argument_list|()
argument_list|)
operator|&&
operator|!
name|server
operator|.
name|checkDeadline
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|s
operator|.
name|getTime
argument_list|()
argument_list|,
name|OnlineSectioningServer
operator|.
name|Deadline
operator|.
name|CHANGE
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|s
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_DEADLINE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollDeadlineChange
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|s
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|s
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue
name|check
continue|;
block|}
block|}
block|}
comment|// new course
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|checkDeadline
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
argument_list|,
name|OnlineSectioningServer
operator|.
name|Deadline
operator|.
name|NEW
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_DEADLINE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollDeadlineNew
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check for DROP deadlines
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|enrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
operator|!
name|courseId2offering
operator|.
name|containsKey
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
name|enrollment
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|checkDeadline
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
argument_list|,
name|OnlineSectioningServer
operator|.
name|Deadline
operator|.
name|DROP
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|enrollment
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_DEADLINE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollDeadlineDrop
argument_list|(
name|enrollment
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|XConfig
argument_list|>
name|courseId2config
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|XConfig
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|EnrollmentRequest
name|request
range|:
name|requests
control|)
block|{
name|XCourse
name|course
init|=
name|request
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|XOffering
name|offering
init|=
name|courseId2offering
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|XEnrollments
name|enrollments
init|=
name|server
operator|.
name|getEnrollments
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|request
operator|.
name|getSections
argument_list|()
decl_stmt|;
name|XSubpart
name|subpart
init|=
name|offering
operator|.
name|getSubpart
argument_list|(
name|sections
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
name|XConfig
name|config
init|=
name|offering
operator|.
name|getConfig
argument_list|(
name|subpart
operator|.
name|getConfigId
argument_list|()
argument_list|)
decl_stmt|;
name|courseId2config
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|XReservation
name|reservation
init|=
literal|null
decl_stmt|;
name|reservations
label|:
for|for
control|(
name|XReservation
name|r
range|:
name|offering
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|isApplicable
argument_list|(
name|student
argument_list|,
name|course
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|r
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|r
operator|.
name|getLimit
argument_list|()
operator|<=
name|enrollments
operator|.
name|countEnrollmentsForReservation
argument_list|(
name|r
operator|.
name|getReservationId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForReservation
argument_list|(
name|r
operator|.
name|getReservationId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
continue|continue;
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|getConfigsIds
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|getConfigsIds
argument_list|()
operator|.
name|contains
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
if|if
condition|(
name|r
operator|.
name|getSectionIds
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|getSectionIds
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
continue|continue
name|reservations
continue|;
if|if
condition|(
name|reservation
operator|==
literal|null
operator|||
name|r
operator|.
name|compareTo
argument_list|(
name|reservation
argument_list|)
operator|<
literal|0
condition|)
name|reservation
operator|=
name|r
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|reservation
operator|==
literal|null
operator|||
operator|!
name|reservation
operator|.
name|canAssignOverLimit
argument_list|()
operator|)
operator|&&
operator|!
name|allowSpaceConf
condition|)
block|{
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|section
operator|.
name|getLimit
argument_list|()
operator|<=
name|enrollments
operator|.
name|countEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_NOT_AVAILABLE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|reservation
operator|==
literal|null
operator|||
operator|!
name|offering
operator|.
name|getSectionReservations
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|reservation
argument_list|)
operator|)
operator|&&
name|offering
operator|.
name|getUnreservedSectionSpace
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|,
name|enrollments
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_NOT_AVAILABLE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|config
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|config
operator|.
name|getLimit
argument_list|()
operator|<=
name|enrollments
operator|.
name|countEnrollmentsForConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_NOT_AVAILABLE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|reservation
operator|==
literal|null
operator|||
operator|!
name|offering
operator|.
name|getConfigReservations
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|reservation
argument_list|)
operator|)
operator|&&
name|offering
operator|.
name|getUnreservedConfigSpace
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|enrollments
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_NOT_AVAILABLE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|course
operator|.
name|getLimit
argument_list|()
operator|<=
name|enrollments
operator|.
name|countEnrollmentsForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_NOT_AVAILABLE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|EnrollmentRequest
name|request
range|:
name|requests
control|)
block|{
name|XCourse
name|course
init|=
name|request
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|XOffering
name|offering
init|=
name|courseId2offering
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|request
operator|.
name|getSections
argument_list|()
decl_stmt|;
name|XSubpart
name|subpart
init|=
name|offering
operator|.
name|getSubpart
argument_list|(
name|sections
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
name|XConfig
name|config
init|=
name|offering
operator|.
name|getConfig
argument_list|(
name|subpart
operator|.
name|getConfigId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|.
name|size
argument_list|()
operator|<
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_STRUCTURE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentIncomplete
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|sections
operator|.
name|size
argument_list|()
operator|>
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_STRUCTURE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentInvalid
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|XSection
name|s1
range|:
name|sections
control|)
block|{
for|for
control|(
name|XSection
name|s2
range|:
name|sections
control|)
block|{
if|if
condition|(
name|s1
operator|.
name|getSectionId
argument_list|()
operator|<
name|s2
operator|.
name|getSectionId
argument_list|()
operator|&&
name|s1
operator|.
name|isOverlapping
argument_list|(
name|offering
operator|.
name|getDistributions
argument_list|()
argument_list|,
name|s2
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|s1
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_TIME_CNF
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentOverlapping
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|s2
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_TIME_CNF
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentOverlapping
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|s1
operator|.
name|getSectionId
argument_list|()
operator|.
name|equals
argument_list|(
name|s2
operator|.
name|getSectionId
argument_list|()
argument_list|)
operator|&&
name|s1
operator|.
name|getSubpartId
argument_list|()
operator|.
name|equals
argument_list|(
name|s2
operator|.
name|getSubpartId
argument_list|()
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|s1
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_STRUCTURE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentInvalid
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|s2
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_STRUCTURE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentInvalid
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|offering
operator|.
name|getSubpart
argument_list|(
name|s1
operator|.
name|getSubpartId
argument_list|()
argument_list|)
operator|.
name|getConfigId
argument_list|()
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|s1
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_STRUCTURE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentInvalid
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|offering
operator|.
name|isAllowOverlap
argument_list|(
name|student
argument_list|,
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|course
argument_list|,
name|sections
argument_list|)
operator|&&
operator|!
name|allowTimeConf
condition|)
for|for
control|(
name|EnrollmentRequest
name|otherRequest
range|:
name|requests
control|)
block|{
name|XOffering
name|other
init|=
name|courseId2offering
operator|.
name|get
argument_list|(
name|otherRequest
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|XConfig
name|otherConfig
init|=
name|courseId2config
operator|.
name|get
argument_list|(
name|otherRequest
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|other
operator|.
name|equals
argument_list|(
name|offering
argument_list|)
operator|&&
operator|!
name|other
operator|.
name|isAllowOverlap
argument_list|(
name|student
argument_list|,
name|otherConfig
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|otherRequest
operator|.
name|getCourse
argument_list|()
argument_list|,
name|otherRequest
operator|.
name|getSections
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|XSection
argument_list|>
name|assignment
init|=
name|otherRequest
operator|.
name|getSections
argument_list|()
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
if|if
condition|(
name|section
operator|.
name|isOverlapping
argument_list|(
name|offering
operator|.
name|getDistributions
argument_list|()
argument_list|,
name|assignment
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_TIME_CNF
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentConflicting
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|RetrieveSpecialRegistrationResponse
name|convert
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|SpecialRegistrationRequest
name|specialRequest
parameter_list|)
block|{
if|if
condition|(
name|specialRequest
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|change
range|:
name|specialRequest
operator|.
name|changes
control|)
if|if
condition|(
name|RequestStatus
operator|.
name|cancelled
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|status
argument_list|)
condition|)
return|return
literal|null
return|;
name|RetrieveSpecialRegistrationResponse
name|ret
init|=
operator|new
name|RetrieveSpecialRegistrationResponse
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|adds
init|=
operator|new
name|HashMap
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|drops
init|=
operator|new
name|HashMap
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|pinned
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ErrorMessage
argument_list|>
name|errors
init|=
operator|new
name|TreeSet
argument_list|<
name|ErrorMessage
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
name|SpecialRegistrationStatus
name|status
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|specialRequest
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|change
range|:
name|specialRequest
operator|.
name|changes
control|)
block|{
name|CourseOffering
name|course
init|=
name|findCourseByExternalId
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|change
operator|.
name|crn
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
name|findClassesByExternalId
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|change
operator|.
name|crn
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
operator|&&
name|classes
operator|!=
literal|null
operator|&&
operator|!
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Class_
argument_list|>
name|list
init|=
operator|(
operator|!
name|ChangeOperation
operator|.
name|DROP
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|operation
argument_list|)
condition|?
name|adds
else|:
name|drops
operator|)
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
operator|(
operator|!
name|ChangeOperation
operator|.
name|DROP
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|operation
argument_list|)
condition|?
name|adds
else|:
name|drops
operator|)
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|change
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|err
range|:
name|change
operator|.
name|errors
control|)
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|clazz
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
argument_list|,
name|err
operator|.
name|code
argument_list|,
name|err
operator|.
name|message
operator|+
operator|(
name|change
operator|.
name|status
operator|==
literal|null
operator|||
name|change
operator|.
name|status
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" ("
operator|+
name|change
operator|.
name|status
operator|+
literal|")"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|pinned
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|change
operator|.
name|status
operator|!=
literal|null
condition|)
name|status
operator|=
name|combine
argument_list|(
name|status
argument_list|,
name|getStatus
argument_list|(
name|change
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|desc
init|=
literal|""
decl_stmt|;
name|NameFormat
name|nameFormat
init|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingInstructorNameFormat
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|courses
control|)
block|{
if|if
condition|(
operator|!
name|desc
operator|.
name|isEmpty
argument_list|()
condition|)
name|desc
operator|+=
literal|", "
expr_stmt|;
name|desc
operator|+=
name|course
operator|.
name|getCourseName
argument_list|()
expr_stmt|;
if|if
condition|(
name|adds
operator|.
name|containsKey
argument_list|(
name|course
argument_list|)
condition|)
block|{
if|if
condition|(
name|drops
operator|.
name|containsKey
argument_list|(
name|course
argument_list|)
condition|)
block|{
name|desc
operator|+=
literal|" (change)"
expr_stmt|;
block|}
else|else
block|{
name|desc
operator|+=
literal|" (add)"
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|drops
operator|.
name|containsKey
argument_list|(
name|course
argument_list|)
condition|)
block|{
name|desc
operator|+=
literal|" (drop)"
expr_stmt|;
block|}
name|CourseCreditUnitConfig
name|credit
init|=
name|course
operator|.
name|getCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|adds
operator|.
name|containsKey
argument_list|(
name|course
argument_list|)
condition|)
block|{
for|for
control|(
name|Class_
name|clazz
range|:
name|adds
operator|.
name|get
argument_list|(
name|course
argument_list|)
control|)
block|{
name|ClassAssignment
name|ca
init|=
operator|new
name|ClassAssignment
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setPinned
argument_list|(
name|pinned
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setClassId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSection
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getSection
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setSection
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setClassNumber
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubpart
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setExternalId
argument_list|(
name|clazz
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ca
operator|.
name|setParentSection
argument_list|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setParentSection
argument_list|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|.
name|getSectionNumberString
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
operator|!=
literal|null
condition|)
name|ca
operator|.
name|addNote
argument_list|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|Placement
name|placement
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
name|int
name|minLimit
init|=
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
operator|&&
name|placement
operator|!=
literal|null
condition|)
block|{
comment|// int roomLimit = Math.round((enrollment.getClazz().getRoomRatio() == null ? 1.0f : enrollment.getClazz().getRoomRatio()) * placement.getRoomSize());
name|int
name|roomLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|placement
operator|.
name|getRoomSize
argument_list|()
operator|/
operator|(
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|||
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|ca
operator|.
name|setCancelled
argument_list|(
name|clazz
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|clazz
operator|.
name|getEnrollment
argument_list|()
block|,
name|limit
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|ca
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setStart
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setLength
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setBreakTime
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setDatePattern
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Location
name|loc
range|:
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
control|)
name|ca
operator|.
name|addRoom
argument_list|(
name|loc
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|loc
operator|.
name|getLabelWithDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getDisplayInstructor
argument_list|()
condition|)
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
name|ca
operator|.
name|addInstructor
argument_list|(
name|nameFormat
operator|.
name|format
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|addInstructoEmail
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ca
operator|.
name|setCredit
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
name|ca
operator|.
name|setCredit
argument_list|(
name|credit
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|credit
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|credit
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setParentSection
argument_list|(
name|course
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|course
operator|.
name|getConsentType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ErrorMessage
name|error
range|:
name|errors
control|)
block|{
if|if
condition|(
name|ca
operator|.
name|getCourseName
argument_list|()
operator|.
name|equals
argument_list|(
name|error
operator|.
name|getCourse
argument_list|()
argument_list|)
operator|&&
name|ca
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|error
operator|.
name|getSection
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"TIME"
operator|.
name|equals
argument_list|(
name|error
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|setHasTimeConflict
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"CLOS"
operator|.
name|equals
argument_list|(
name|error
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|setHasSpaceConflict
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|hasError
argument_list|()
condition|)
name|ca
operator|.
name|setError
argument_list|(
name|ca
operator|.
name|getError
argument_list|()
operator|+
literal|"\n"
operator|+
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ca
operator|.
name|setError
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|addChange
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|drops
operator|.
name|containsKey
argument_list|(
name|course
argument_list|)
condition|)
block|{
for|for
control|(
name|Class_
name|clazz
range|:
name|drops
operator|.
name|get
argument_list|(
name|course
argument_list|)
control|)
block|{
name|ClassAssignment
name|ca
init|=
operator|new
name|ClassAssignment
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseAssigned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setClassId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSection
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getSection
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setSection
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setClassNumber
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubpart
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setExternalId
argument_list|(
name|clazz
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ca
operator|.
name|setParentSection
argument_list|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setParentSection
argument_list|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|.
name|getSectionNumberString
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
operator|!=
literal|null
condition|)
name|ca
operator|.
name|addNote
argument_list|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|Placement
name|placement
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
name|int
name|minLimit
init|=
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
operator|&&
name|placement
operator|!=
literal|null
condition|)
block|{
comment|// int roomLimit = Math.round((enrollment.getClazz().getRoomRatio() == null ? 1.0f : enrollment.getClazz().getRoomRatio()) * placement.getRoomSize());
name|int
name|roomLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|placement
operator|.
name|getRoomSize
argument_list|()
operator|/
operator|(
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|||
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|ca
operator|.
name|setCancelled
argument_list|(
name|clazz
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|clazz
operator|.
name|getEnrollment
argument_list|()
block|,
name|limit
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|ca
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setStart
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setLength
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setBreakTime
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setDatePattern
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Location
name|loc
range|:
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
control|)
name|ca
operator|.
name|addRoom
argument_list|(
name|loc
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|loc
operator|.
name|getLabelWithDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getDisplayInstructor
argument_list|()
condition|)
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
name|ca
operator|.
name|addInstructor
argument_list|(
name|nameFormat
operator|.
name|format
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|addInstructoEmail
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ca
operator|.
name|setCredit
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
name|ca
operator|.
name|setCredit
argument_list|(
name|credit
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|credit
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|credit
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setParentSection
argument_list|(
name|course
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|course
operator|.
name|getConsentType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ErrorMessage
name|error
range|:
name|errors
control|)
block|{
if|if
condition|(
name|ca
operator|.
name|getCourseName
argument_list|()
operator|.
name|equals
argument_list|(
name|error
operator|.
name|getCourse
argument_list|()
argument_list|)
operator|&&
name|ca
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|error
operator|.
name|getSection
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|ca
operator|.
name|hasError
argument_list|()
condition|)
name|ca
operator|.
name|setError
argument_list|(
name|ca
operator|.
name|getError
argument_list|()
operator|+
literal|"\n"
operator|+
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ca
operator|.
name|setError
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|addChange
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|desc
operator|.
name|isEmpty
argument_list|()
operator|&&
name|specialRequest
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Change
name|change
range|:
name|specialRequest
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|change
operator|.
name|crn
operator|==
literal|null
operator|&&
name|change
operator|.
name|overrides
operator|!=
literal|null
condition|)
for|for
control|(
name|SpecialRegistrationInterface
operator|.
name|Override
name|o
range|:
name|change
operator|.
name|overrides
control|)
if|if
condition|(
name|o
operator|.
name|message
operator|!=
literal|null
operator|&&
operator|!
name|o
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
name|desc
operator|+=
operator|(
name|desc
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|o
operator|.
name|message
operator|+
operator|(
name|change
operator|.
name|status
operator|==
literal|null
operator|||
name|change
operator|.
name|status
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" ("
operator|+
name|change
operator|.
name|status
operator|+
literal|")"
operator|)
expr_stmt|;
block|}
block|}
comment|/* 		List<XRequest> requests = getRequests(server, helper, student, adds, drops); 		checkRequests(server, helper, student, requests, errors, false, false); 		ret.setClassAssignments(GetAssignment.computeAssignment(server, helper, student, requests, null, errors, true)); 		if (helper.getAction().getEnrollmentCount()> 0) 			helper.getAction().getEnrollmentBuilder(helper.getAction().getEnrollmentCount() - 1).setType(OnlineSectioningLog.Enrollment.EnrollmentType.EXTERNAL); 		helper.getAction().clearRequest(); 		 		if (ret.hasClassAssignments()) 			for (CourseAssignment course: ret.getClassAssignments().getCourseAssignments()) { 				if (course.isFreeTime() || course.isTeachingAssignment()) continue; 				List<Class_> add = null; 				for (Map.Entry<CourseOffering, List<Class_>> e: adds.entrySet()) 					if (course.getCourseId().equals(e.getKey().getUniqueId())) { add = e.getValue(); break; } 				if (add != null) 					for (ClassAssignment ca: course.getClassAssignments()) 						if (ca.isSaved()) 							for (Class_ c: add) 								if (c.getUniqueId().equals(ca.getClassId())) ca.setSaved(false); 			} 		*/
name|ret
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setRequestId
argument_list|(
name|specialRequest
operator|.
name|requestId
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setSubmitDate
argument_list|(
name|specialRequest
operator|.
name|dateCreated
operator|==
literal|null
condition|?
literal|null
else|:
name|specialRequest
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setNote
argument_list|(
name|specialRequest
operator|.
name|notes
argument_list|)
expr_stmt|;
if|if
condition|(
name|specialRequest
operator|.
name|status
operator|!=
literal|null
condition|)
name|ret
operator|.
name|setStatus
argument_list|(
name|getStatus
argument_list|(
name|specialRequest
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|!=
literal|null
condition|)
name|ret
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|setStatus
argument_list|(
name|SpecialRegistrationStatus
operator|.
name|Pending
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setCanCancel
argument_list|(
name|canCancel
argument_list|(
name|specialRequest
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|RetrieveSpecialRegistrationResponse
name|retrieveRegistration
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|RetrieveSpecialRegistrationRequest
name|input
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteRetrieveRegistration
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"reqKey"
argument_list|,
name|input
operator|.
name|getRequestKey
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"reqKey"
argument_list|)
operator|.
name|setValue
argument_list|(
name|input
operator|.
name|getRequestKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationResponse
name|response
init|=
operator|(
name|SpecialRegistrationResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|data
operator|!=
literal|null
condition|)
block|{
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|data
operator|.
name|campus
operator|!=
literal|null
operator|&&
operator|!
name|campus
operator|.
name|equals
argument_list|(
name|response
operator|.
name|data
operator|.
name|campus
argument_list|)
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Special registration request is for a different campus ("
operator|+
name|response
operator|.
name|data
operator|.
name|campus
operator|+
literal|")."
argument_list|)
throw|;
if|if
condition|(
name|response
operator|.
name|data
operator|.
name|term
operator|!=
literal|null
operator|&&
operator|!
name|term
operator|.
name|equals
argument_list|(
name|response
operator|.
name|data
operator|.
name|term
argument_list|)
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Special registration request is for a different term ("
operator|+
name|response
operator|.
name|data
operator|.
name|term
operator|+
literal|")."
argument_list|)
throw|;
if|if
condition|(
name|response
operator|.
name|data
operator|.
name|studentId
operator|!=
literal|null
operator|&&
operator|!
name|getBannerId
argument_list|(
name|student
argument_list|)
operator|.
name|equals
argument_list|(
name|response
operator|.
name|data
operator|.
name|studentId
argument_list|)
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Special registration request is for a different student."
argument_list|)
throw|;
return|return
name|convert
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|response
operator|.
name|data
argument_list|)
return|;
block|}
if|else if
condition|(
operator|!
name|ResponseStatus
operator|.
name|success
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|status
argument_list|)
condition|)
block|{
if|if
condition|(
name|response
operator|.
name|message
operator|!=
literal|null
operator|&&
operator|!
name|response
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|response
operator|.
name|message
argument_list|)
throw|;
block|}
name|RetrieveSpecialRegistrationResponse
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|data
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|convert
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|response
operator|.
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
operator|new
name|RetrieveSpecialRegistrationResponse
argument_list|()
expr_stmt|;
name|ret
operator|.
name|setStatus
argument_list|(
name|getStatus
argument_list|(
name|response
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setDescription
argument_list|(
name|response
operator|.
name|message
operator|!=
literal|null
operator|&&
operator|!
name|response
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
name|response
operator|.
name|message
else|:
literal|"New Special Registration"
argument_list|)
expr_stmt|;
block|}
comment|// ret.setRequestId(input.getRequestKey());
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Gson
name|getGson
parameter_list|(
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|GsonBuilder
name|builder
init|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|DateTime
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|toString
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DateTime
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|Date
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
operator|.
name|format
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Date
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
try|try
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
operator|.
name|parse
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JsonParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|builder
operator|.
name|setPrettyPrinting
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
name|retrieveAllRegistrations
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|isSpecialRegistrationEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|)
condition|)
return|return
literal|null
return|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|getSpecialRegistrationApiSiteGetAllRegistrations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteGetAllRegistrations
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationResponseList
name|specialRequests
init|=
operator|(
name|SpecialRegistrationResponseList
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationResponseList
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationResponseList
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|specialRequests
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|specialRequests
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|specialRequests
operator|.
name|data
operator|==
literal|null
operator|||
name|specialRequests
operator|.
name|data
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|!
name|ResponseStatus
operator|.
name|success
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|specialRequests
operator|.
name|status
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|specialRequests
operator|.
name|message
operator|==
literal|null
operator|||
name|specialRequests
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Call failed but no message was given."
else|:
name|specialRequests
operator|.
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|specialRequests
operator|.
name|data
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
argument_list|(
name|specialRequests
operator|.
name|data
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SpecialRegistrationRequest
name|specialRequest
range|:
name|specialRequests
operator|.
name|data
control|)
if|if
condition|(
name|specialRequest
operator|.
name|requestId
operator|!=
literal|null
condition|)
block|{
name|RetrieveSpecialRegistrationResponse
name|req
init|=
name|convert
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|specialRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
else|else
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatusResponse
name|response
init|=
operator|(
name|SpecialRegistrationStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|ResponseStatus
operator|.
name|success
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|status
argument_list|)
operator|&&
name|response
operator|.
name|data
operator|!=
literal|null
operator|&&
name|response
operator|.
name|data
operator|.
name|requests
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
argument_list|(
name|response
operator|.
name|data
operator|.
name|requests
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SpecialRegistrationRequest
name|specialRequest
range|:
name|response
operator|.
name|data
operator|.
name|requests
control|)
if|if
condition|(
name|specialRequest
operator|.
name|requestId
operator|!=
literal|null
condition|)
block|{
name|RetrieveSpecialRegistrationResponse
name|req
init|=
name|convert
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|specialRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|specialRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkEligibility
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|EligibilityCheck
name|check
parameter_list|,
name|XStudent
name|student
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|student
operator|==
literal|null
operator|||
operator|!
name|isSpecialRegistrationEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|)
condition|)
block|{
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_SPECREG
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatusResponse
name|response
init|=
operator|(
name|SpecialRegistrationStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|ResponseStatus
operator|.
name|success
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|status
argument_list|)
condition|)
block|{
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_SPECREG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|data
operator|!=
literal|null
condition|)
name|check
operator|.
name|setOverrides
argument_list|(
name|response
operator|.
name|data
operator|.
name|overrides
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|SR_TIME_CONF
argument_list|,
name|check
operator|.
name|hasOverride
argument_list|(
literal|"TIME"
argument_list|)
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|SR_LIMIT_CONF
argument_list|,
name|check
operator|.
name|hasOverride
argument_list|(
literal|"CLOS"
argument_list|)
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|HAS_SPECREG
argument_list|,
name|response
operator|.
name|data
operator|!=
literal|null
operator|&&
name|response
operator|.
name|data
operator|.
name|requests
operator|!=
literal|null
operator|&&
operator|!
name|response
operator|.
name|data
operator|.
name|requests
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_SPECREG
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|isSpecialRegistrationEnabled
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|StudentSectioningStatus
name|status
init|=
name|student
operator|.
name|getEffectiveStatus
argument_list|()
decl_stmt|;
return|return
name|status
operator|==
literal|null
operator|||
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|specreg
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isSpecialRegistrationEnabled
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|)
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|String
name|status
init|=
name|student
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
name|status
operator|=
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
literal|true
return|;
name|StudentSectioningStatus
name|dbStatus
init|=
name|StudentSectioningStatus
operator|.
name|getStatus
argument_list|(
name|status
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|dbStatus
operator|!=
literal|null
operator|&&
name|dbStatus
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|specreg
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CancelSpecialRegistrationResponse
name|cancelRegistration
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|CancelSpecialRegistrationRequest
name|request
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCancelSpecialRegistration
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"regRequestId"
argument_list|,
name|request
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"regRequestId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|request
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationCancelResponse
name|response
init|=
operator|(
name|SpecialRegistrationCancelResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationCancelResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationCancelResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|CancelSpecialRegistrationResponse
name|ret
init|=
operator|new
name|CancelSpecialRegistrationResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|setSuccess
argument_list|(
name|ResponseStatus
operator|.
name|success
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setMessage
argument_list|(
name|response
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

