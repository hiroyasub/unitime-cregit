begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|ChallengeScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationEligibilityRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationEligibilityResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveSpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SubmitSpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SubmitSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalClassLookupInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|GetAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|SpecialRegistrationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DefaultExternalClassLookup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PurdueSpecialRegistrationProvider
implements|implements
name|SpecialRegistrationProvider
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|PurdueSpecialRegistrationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Client
name|iClient
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|private
name|ExternalClassLookupInterface
name|iExternalClassLookup
decl_stmt|;
specifier|public
name|PurdueSpecialRegistrationProvider
parameter_list|()
block|{
name|List
argument_list|<
name|Protocol
argument_list|>
name|protocols
init|=
operator|new
name|ArrayList
argument_list|<
name|Protocol
argument_list|>
argument_list|()
decl_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
expr_stmt|;
name|iClient
operator|=
operator|new
name|Client
argument_list|(
name|protocols
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalClassLookup
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalClassLookup
operator|=
operator|new
name|DefaultExternalClassLookup
argument_list|()
expr_stmt|;
else|else
name|iExternalClassLookup
operator|=
operator|(
name|ExternalClassLookupInterface
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external class lookup, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalClassLookup
operator|=
operator|new
name|DefaultExternalClassLookup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCheckEligibility
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.eligibility"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteSubmit
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.submit"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiUser
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.user"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiPassword
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.password"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiKeyParameter
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.apikey.name"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiKeyValue
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.apikey.value"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerTerm
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerCampus
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalCampus
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Change
argument_list|>
name|buildChangeList
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|assignment
parameter_list|)
block|{
name|List
argument_list|<
name|Change
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|XCourse
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|enrollments
init|=
operator|new
name|HashMap
argument_list|<
name|XCourse
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
name|offerings
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
range|:
name|assignment
control|)
block|{
comment|// Skip free times and dummy sections
if|if
condition|(
name|ca
operator|==
literal|null
operator|||
name|ca
operator|.
name|isFreeTime
argument_list|()
operator|||
name|ca
operator|.
name|getClassId
argument_list|()
operator|==
literal|null
operator|||
name|ca
operator|.
name|isDummy
argument_list|()
operator|||
name|ca
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getClassNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getClassNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
comment|// Check section limits
name|XSection
name|section
init|=
name|offering
operator|.
name|getSection
argument_list|(
name|ca
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|ca
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
comment|// Check cancelled flag
if|if
condition|(
name|section
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
if|if
condition|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Enrollment.CanKeepCancelledClass"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
name|contains
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|contains
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollCancelled
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|ca
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollCancelled
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|ca
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|enrollments
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
block|{
name|sections
operator|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
expr_stmt|;
name|enrollments
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|offerings
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|offering
argument_list|)
expr_stmt|;
block|}
name|check
label|:
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|XCourse
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|e
range|:
name|enrollments
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|XCourse
name|course
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|enrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
comment|// course change
for|for
control|(
name|XSection
name|s
range|:
name|sections
control|)
block|{
if|if
condition|(
operator|!
name|enrollment
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
name|s
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|ADD
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Long
name|id
range|:
name|enrollment
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
name|XSection
name|s
init|=
name|offerings
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|.
name|getSection
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sections
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
name|s
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|DROP
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue
name|check
continue|;
block|}
block|}
block|}
comment|// new course
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
block|{
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|ADD
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
comment|// drop course
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|enrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
operator|!
name|offerings
operator|.
name|containsKey
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
name|enrollment
argument_list|)
control|)
block|{
name|XCourse
name|course
init|=
name|offering
operator|.
name|getCourse
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|DROP
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|changes
return|;
block|}
annotation|@
name|Override
specifier|public
name|SpecialRegistrationEligibilityResponse
name|checkEligibility
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|SpecialRegistrationEligibilityRequest
name|input
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
literal|false
argument_list|,
literal|"No student."
argument_list|)
return|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|SpecialRegistrationRequest
name|request
init|=
operator|new
name|SpecialRegistrationRequest
argument_list|()
decl_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|request
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|request
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|request
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|request
operator|.
name|changes
operator|=
name|buildChangeList
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|input
operator|.
name|getClassAssignments
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckEligibility
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|String
name|apiKeyName
init|=
name|getSpecialRegistrationApiKeyParameter
argument_list|()
decl_stmt|;
if|if
condition|(
name|apiKeyName
operator|!=
literal|null
condition|)
name|resource
operator|.
name|addQueryParameter
argument_list|(
name|apiKeyName
argument_list|,
name|getSpecialRegistrationApiKeyValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|apiUser
init|=
name|getSpecialRegistrationApiUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|apiUser
operator|!=
literal|null
condition|)
name|resource
operator|.
name|setChallengeResponse
argument_list|(
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
name|apiUser
argument_list|,
name|getSpecialRegistrationApiPassword
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationRequest
argument_list|>
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationResponse
name|response
init|=
operator|(
name|SpecialRegistrationResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|status
operator|==
name|SpecialRegistrationResponseStatus
operator|.
name|success
argument_list|,
name|response
operator|!=
literal|null
condition|?
name|response
operator|.
name|message
else|:
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Failed to check special registration eligibility: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|SubmitSpecialRegistrationResponse
name|submitRegistration
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|SubmitSpecialRegistrationRequest
name|input
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SpecialRegistrationRequest
name|request
init|=
operator|new
name|SpecialRegistrationRequest
argument_list|()
decl_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|request
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|request
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|request
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|request
operator|.
name|changes
operator|=
name|buildChangeList
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|input
operator|.
name|getClassAssignments
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteSubmit
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|String
name|apiKeyName
init|=
name|getSpecialRegistrationApiKeyParameter
argument_list|()
decl_stmt|;
if|if
condition|(
name|apiKeyName
operator|!=
literal|null
condition|)
name|resource
operator|.
name|addQueryParameter
argument_list|(
name|apiKeyName
argument_list|,
name|getSpecialRegistrationApiKeyValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|apiUser
init|=
name|getSpecialRegistrationApiUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|apiUser
operator|!=
literal|null
condition|)
name|resource
operator|.
name|setChallengeResponse
argument_list|(
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
name|apiUser
argument_list|,
name|getSpecialRegistrationApiPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationRequest
argument_list|>
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationResponse
name|response
init|=
operator|(
name|SpecialRegistrationResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|SubmitSpecialRegistrationResponse
name|ret
init|=
operator|new
name|SubmitSpecialRegistrationResponse
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setRequestId
argument_list|(
name|response
operator|.
name|requestId
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setMessage
argument_list|(
name|response
operator|.
name|message
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setCanEnroll
argument_list|(
name|response
operator|.
name|requestStatus
operator|==
name|SpecialRegistrationStatus
operator|.
name|maySubmit
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setCanSubmit
argument_list|(
name|response
operator|.
name|requestStatus
operator|==
name|SpecialRegistrationStatus
operator|.
name|mayEdit
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setSuccess
argument_list|(
name|response
operator|.
name|status
operator|==
name|SpecialRegistrationResponseStatus
operator|.
name|success
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to submit special registration: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Failed to submit special registration: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
try|try
block|{
name|iClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|CourseOffering
name|findCourseByExternalId
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|externalId
parameter_list|)
block|{
return|return
name|iExternalClassLookup
operator|.
name|findCourseByExternalId
argument_list|(
name|sessionId
argument_list|,
name|externalId
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Class_
argument_list|>
name|findClassesByExternalId
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|externalId
parameter_list|)
block|{
return|return
name|iExternalClassLookup
operator|.
name|findClassesByExternalId
argument_list|(
name|sessionId
argument_list|,
name|externalId
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isDrop
parameter_list|(
name|XEnrollment
name|enrollment
parameter_list|,
name|List
argument_list|<
name|Change
argument_list|>
name|changes
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|protected
name|List
argument_list|<
name|XRequest
argument_list|>
name|getRequests
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|Map
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|adds
parameter_list|,
name|Map
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|drops
parameter_list|)
block|{
name|Student
name|dbStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XRequest
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<
name|XRequest
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|CourseOffering
argument_list|>
name|remaining
init|=
operator|new
name|HashSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|(
name|adds
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|request
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|add
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|drop
init|=
literal|null
decl_stmt|;
name|XCourseId
name|courseId
init|=
literal|null
decl_stmt|;
name|Long
name|configId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XCourseId
name|course
range|:
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|e
range|:
name|adds
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|add
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|courseId
operator|=
name|course
expr_stmt|;
name|configId
operator|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|remaining
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|e
range|:
name|drops
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|drop
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|add
operator|==
literal|null
operator|&&
name|drop
operator|==
literal|null
condition|)
block|{
comment|// no change detected
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XEnrollment
name|enrollemnt
init|=
name|cr
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
operator|(
name|enrollemnt
operator|==
literal|null
condition|?
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
else|:
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|enrollemnt
operator|.
name|getSectionIds
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|enrollemnt
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|courseId
operator|!=
literal|null
condition|)
block|{
comment|// add -> check course& config
if|if
condition|(
operator|!
name|enrollemnt
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|courseId
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|&&
name|drop
operator|==
literal|null
condition|)
block|{
comment|// different course and no drop -> create new course request
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|remaining
operator|.
name|add
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseId
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
operator|!
name|enrollemnt
operator|.
name|getConfigId
argument_list|()
operator|.
name|equals
argument_list|(
name|configId
argument_list|)
condition|)
block|{
comment|// same course different config -> drop all
name|classIds
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|courseId
operator|=
name|enrollemnt
expr_stmt|;
name|configId
operator|=
name|enrollemnt
operator|.
name|getConfigId
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|add
operator|!=
literal|null
condition|)
for|for
control|(
name|Class_
name|c
range|:
name|add
control|)
name|classIds
operator|.
name|add
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|drop
operator|!=
literal|null
condition|)
for|for
control|(
name|Class_
name|c
range|:
name|drop
control|)
name|classIds
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|classIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requests
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
name|cr
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requests
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
name|cr
argument_list|,
operator|new
name|XEnrollment
argument_list|(
name|dbStudent
argument_list|,
name|courseId
argument_list|,
name|configId
argument_list|,
name|classIds
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// free time --> no change
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseOffering
name|course
range|:
name|remaining
control|)
block|{
name|Long
name|configId
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|adds
operator|.
name|get
argument_list|(
name|course
argument_list|)
control|)
block|{
if|if
condition|(
name|configId
operator|==
literal|null
condition|)
name|configId
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|classIds
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|XCourseId
name|courseId
init|=
operator|new
name|XCourseId
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
name|dbStudent
argument_list|,
name|courseId
argument_list|,
name|requests
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|XEnrollment
argument_list|(
name|dbStudent
argument_list|,
name|courseId
argument_list|,
name|configId
argument_list|,
name|classIds
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|requests
return|;
block|}
annotation|@
name|Override
specifier|public
name|RetrieveSpecialRegistrationResponse
name|retrieveRegistration
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|RetrieveSpecialRegistrationRequest
name|input
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteSubmit
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"requestId"
argument_list|,
name|input
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|input
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|input
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|input
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"requestId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|input
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|apiKeyName
init|=
name|getSpecialRegistrationApiKeyParameter
argument_list|()
decl_stmt|;
if|if
condition|(
name|apiKeyName
operator|!=
literal|null
condition|)
name|resource
operator|.
name|addQueryParameter
argument_list|(
name|apiKeyName
argument_list|,
name|getSpecialRegistrationApiKeyValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|apiUser
init|=
name|getSpecialRegistrationApiUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|apiUser
operator|!=
literal|null
condition|)
name|resource
operator|.
name|setChallengeResponse
argument_list|(
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
name|apiUser
argument_list|,
name|getSpecialRegistrationApiPassword
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationRequest
name|specialRequest
init|=
operator|(
name|SpecialRegistrationRequest
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationRequest
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationRequest
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|specialRequest
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|specialRequest
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|adds
init|=
operator|new
name|HashMap
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|drops
init|=
operator|new
name|HashMap
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|specialRequest
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|change
range|:
name|specialRequest
operator|.
name|changes
control|)
block|{
name|CourseOffering
name|course
init|=
name|findCourseByExternalId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|change
operator|.
name|crn
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
name|findClassesByExternalId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|change
operator|.
name|crn
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
operator|&&
name|classes
operator|!=
literal|null
operator|&&
operator|!
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Class_
argument_list|>
name|list
init|=
operator|(
name|change
operator|.
name|operation
operator|==
name|ChangeOperation
operator|.
name|ADD
condition|?
name|adds
else|:
name|drops
operator|)
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
operator|(
name|change
operator|.
name|operation
operator|==
name|ChangeOperation
operator|.
name|ADD
condition|?
name|adds
else|:
name|drops
operator|)
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
name|list
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
name|RetrieveSpecialRegistrationResponse
name|ret
init|=
operator|new
name|RetrieveSpecialRegistrationResponse
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setClassAssignments
argument_list|(
name|GetAssignment
operator|.
name|computeAssignment
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|getRequests
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|adds
argument_list|,
name|drops
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|hasClassAssignments
argument_list|()
condition|)
for|for
control|(
name|CourseAssignment
name|course
range|:
name|ret
operator|.
name|getClassAssignments
argument_list|()
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|)
continue|continue;
name|List
argument_list|<
name|Class_
argument_list|>
name|add
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|e
range|:
name|adds
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|add
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|add
operator|!=
literal|null
condition|)
for|for
control|(
name|ClassAssignment
name|ca
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
if|if
condition|(
name|ca
operator|.
name|isSaved
argument_list|()
condition|)
for|for
control|(
name|Class_
name|c
range|:
name|add
control|)
if|if
condition|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|ca
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
name|ca
operator|.
name|setSaved
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setCanEnroll
argument_list|(
name|specialRequest
operator|.
name|status
operator|==
name|SpecialRegistrationStatus
operator|.
name|maySubmit
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setCanSubmit
argument_list|(
name|specialRequest
operator|.
name|status
operator|==
name|SpecialRegistrationStatus
operator|.
name|mayEdit
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to request special registration: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Failed to request special registration: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Gson
name|getGson
parameter_list|(
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|GsonBuilder
name|builder
init|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|DateTime
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|toString
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DateTime
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|builder
operator|.
name|setPrettyPrinting
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|create
argument_list|()
return|;
block|}
block|}
end_class

end_unit

