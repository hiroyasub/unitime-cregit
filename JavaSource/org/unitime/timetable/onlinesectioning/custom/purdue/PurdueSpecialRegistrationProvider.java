begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|ChallengeScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentEnrollmentMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseDemandDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|GradeMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationEligibilityRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationEligibilityResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationGradeMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationGradeModeChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationGradeModeChanges
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|CancelSpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|CancelSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeGradeModesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeGradeModesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveAvailableGradeModesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SubmitSpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SubmitSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalClassLookupInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|SpecialRegistrationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|StudentEnrollmentProvider
operator|.
name|EnrollmentRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ApiMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|CancelledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|CheckEligibilityResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|CheckRestrictionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|CheckRestrictionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|CompletionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|DeniedRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|EligibilityProblem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|Problem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|RequestorRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationAvailableGradeMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationCancelResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationCheckGradeModesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationCurrentGradeMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SubmitRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ValidationMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|XEInterface
operator|.
name|CourseReferenceNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|XEInterface
operator|.
name|RegisterAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|XEInterface
operator|.
name|RegistrationGradingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOverride
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DefaultExternalClassLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PurdueSpecialRegistrationProvider
implements|implements
name|SpecialRegistrationProvider
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|PurdueSpecialRegistrationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Client
name|iClient
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|private
name|ExternalClassLookupInterface
name|iExternalClassLookup
decl_stmt|;
specifier|public
name|PurdueSpecialRegistrationProvider
parameter_list|()
block|{
name|List
argument_list|<
name|Protocol
argument_list|>
name|protocols
init|=
operator|new
name|ArrayList
argument_list|<
name|Protocol
argument_list|>
argument_list|()
decl_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
expr_stmt|;
name|iClient
operator|=
operator|new
name|Client
argument_list|(
name|protocols
argument_list|)
expr_stmt|;
name|Context
name|cx
init|=
operator|new
name|Context
argument_list|()
decl_stmt|;
name|cx
operator|.
name|getParameters
argument_list|()
operator|.
name|add
argument_list|(
literal|"readTimeout"
argument_list|,
name|getSpecialRegistrationApiReadTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|iClient
operator|.
name|setContext
argument_list|(
name|cx
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalClassLookup
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalClassLookup
operator|=
operator|new
name|DefaultExternalClassLookup
argument_list|()
expr_stmt|;
else|else
name|iExternalClassLookup
operator|=
operator|(
name|ExternalClassLookupInterface
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external class lookup, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalClassLookup
operator|=
operator|new
name|DefaultExternalClassLookup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiReadTimeout
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.readTimeout"
argument_list|,
literal|"60000"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteSubmitRegistration
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.submitRegistration"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/submitRegistration"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCheckEligibility
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.checkEligibility"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkEligibility"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.checkSpecialRegistrationStatus"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkSpecialRegistrationStatus"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiCheckRestrictions
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.checkRestrictions"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkRestrictions"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCancelSpecialRegistration
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.cancelSpecialRegistration"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/cancelRegistrationRequestFromUniTime"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCheckStudentGradeModes
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.checkStudentGradeModes"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkStudentGradeModes"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiKey
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.apiKey"
argument_list|)
return|;
block|}
specifier|protected
name|ApiMode
name|getSpecialRegistrationMode
parameter_list|()
block|{
return|return
name|ApiMode
operator|.
name|valueOf
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.mode"
argument_list|,
literal|"REG"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isUpdateUniTimeStatuses
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.updateUniTimeStatuses"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isAllowClosedErrorForAvailableSections
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.allowClosedWhenAvailable"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerTerm
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerCampus
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalCampus
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getResetGradeModesRegExp
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.resetGradeModes"
argument_list|,
literal|"H|Q|R"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getRequestorId
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|id
init|=
name|user
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|RequestorRole
name|getRequestorType
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|,
name|XStudent
name|student
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|user
operator|.
name|hasType
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|user
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|MANAGER
case|:
return|return
name|RequestorRole
operator|.
name|MANAGER
return|;
case|case
name|STUDENT
case|:
return|return
name|RequestorRole
operator|.
name|STUDENT
return|;
default|default:
return|return
name|RequestorRole
operator|.
name|MANAGER
return|;
block|}
block|}
return|return
operator|(
name|user
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|?
name|RequestorRole
operator|.
name|STUDENT
else|:
name|RequestorRole
operator|.
name|MANAGER
operator|)
return|;
block|}
specifier|protected
name|SpecialRegistrationStatus
name|getStatus
parameter_list|(
name|ChangeStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Pending
return|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|approved
case|:
return|return
name|SpecialRegistrationStatus
operator|.
name|Approved
return|;
case|case
name|cancelled
case|:
return|return
name|SpecialRegistrationStatus
operator|.
name|Cancelled
return|;
case|case
name|denied
case|:
return|return
name|SpecialRegistrationStatus
operator|.
name|Rejected
return|;
default|default:
return|return
name|SpecialRegistrationStatus
operator|.
name|Pending
return|;
block|}
block|}
specifier|protected
name|SpecialRegistrationStatus
name|getStatus
parameter_list|(
name|CompletionStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Pending
return|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|cancelled
case|:
return|return
name|SpecialRegistrationStatus
operator|.
name|Cancelled
return|;
case|case
name|completed
case|:
return|return
name|SpecialRegistrationStatus
operator|.
name|Approved
return|;
default|default:
return|return
name|SpecialRegistrationStatus
operator|.
name|Pending
return|;
block|}
block|}
specifier|protected
name|SpecialRegistrationStatus
name|getStatus
parameter_list|(
name|SpecialRegistration
name|request
parameter_list|)
block|{
name|SpecialRegistrationStatus
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|request
operator|.
name|changes
control|)
name|ret
operator|=
name|combine
argument_list|(
name|ret
argument_list|,
name|getStatus
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
name|SpecialRegistrationStatus
operator|.
name|Approved
operator|&&
name|request
operator|.
name|completionStatus
operator|==
name|CompletionStatus
operator|.
name|inProgress
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Pending
return|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
return|return
name|ret
return|;
return|return
name|getStatus
argument_list|(
name|request
operator|.
name|completionStatus
argument_list|)
return|;
block|}
specifier|protected
name|int
name|toStatus
parameter_list|(
name|ChangeStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
name|CourseRequestOverrideStatus
operator|.
name|PENDING
operator|.
name|ordinal
argument_list|()
return|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|approved
case|:
return|return
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
operator|.
name|ordinal
argument_list|()
return|;
case|case
name|cancelled
case|:
return|return
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
return|;
case|case
name|denied
case|:
return|return
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
operator|.
name|ordinal
argument_list|()
return|;
default|default:
return|return
name|CourseRequestOverrideStatus
operator|.
name|PENDING
operator|.
name|ordinal
argument_list|()
return|;
block|}
block|}
specifier|protected
name|int
name|toStatus
parameter_list|(
name|SpecialRegistrationStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
name|CourseRequestOverrideStatus
operator|.
name|PENDING
operator|.
name|ordinal
argument_list|()
return|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|Approved
case|:
return|return
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
operator|.
name|ordinal
argument_list|()
return|;
case|case
name|Cancelled
case|:
return|return
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
return|;
case|case
name|Rejected
case|:
return|return
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
operator|.
name|ordinal
argument_list|()
return|;
default|default:
return|return
name|CourseRequestOverrideStatus
operator|.
name|PENDING
operator|.
name|ordinal
argument_list|()
return|;
block|}
block|}
specifier|protected
name|int
name|toStatus
parameter_list|(
name|SpecialRegistration
name|request
parameter_list|)
block|{
return|return
name|toStatus
argument_list|(
name|getStatus
argument_list|(
name|request
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isPending
parameter_list|(
name|ChangeStatus
name|status
parameter_list|)
block|{
return|return
name|status
operator|!=
literal|null
operator|&&
name|status
operator|!=
name|ChangeStatus
operator|.
name|cancelled
operator|&&
name|status
operator|!=
name|ChangeStatus
operator|.
name|approved
operator|&&
name|status
operator|!=
name|ChangeStatus
operator|.
name|denied
return|;
block|}
specifier|protected
name|SpecialRegistrationStatus
name|combine
parameter_list|(
name|SpecialRegistrationStatus
name|s1
parameter_list|,
name|SpecialRegistrationStatus
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|==
literal|null
condition|)
return|return
name|s2
return|;
if|if
condition|(
name|s2
operator|==
literal|null
condition|)
return|return
name|s1
return|;
if|if
condition|(
name|s1
operator|==
name|s2
condition|)
return|return
name|s1
return|;
if|if
condition|(
name|s1
operator|==
name|SpecialRegistrationStatus
operator|.
name|Draft
operator|||
name|s2
operator|==
name|SpecialRegistrationStatus
operator|.
name|Draft
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Draft
return|;
if|if
condition|(
name|s1
operator|==
name|SpecialRegistrationStatus
operator|.
name|Pending
operator|||
name|s2
operator|==
name|SpecialRegistrationStatus
operator|.
name|Pending
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Pending
return|;
if|if
condition|(
name|s1
operator|==
name|SpecialRegistrationStatus
operator|.
name|Cancelled
operator|||
name|s2
operator|==
name|SpecialRegistrationStatus
operator|.
name|Cancelled
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Cancelled
return|;
if|if
condition|(
name|s1
operator|==
name|SpecialRegistrationStatus
operator|.
name|Rejected
operator|||
name|s2
operator|==
name|SpecialRegistrationStatus
operator|.
name|Rejected
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Rejected
return|;
if|if
condition|(
name|s1
operator|==
name|SpecialRegistrationStatus
operator|.
name|Approved
operator|||
name|s2
operator|==
name|SpecialRegistrationStatus
operator|.
name|Approved
condition|)
return|return
name|SpecialRegistrationStatus
operator|.
name|Approved
return|;
return|return
name|s1
return|;
block|}
specifier|protected
name|boolean
name|canCancel
parameter_list|(
name|SpecialRegistration
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|changes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Change
name|ch
range|:
name|request
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|isPending
argument_list|(
name|ch
operator|.
name|status
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|buildChangeList
parameter_list|(
name|SpecialRegistration
name|request
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|assignment
parameter_list|,
name|Collection
argument_list|<
name|ErrorMessage
argument_list|>
name|errors
parameter_list|,
name|Float
name|credit
parameter_list|)
block|{
name|request
operator|.
name|changes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
expr_stmt|;
name|float
name|maxCredit
init|=
literal|0f
decl_stmt|;
name|Map
argument_list|<
name|XCourse
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|enrollments
init|=
operator|new
name|HashMap
argument_list|<
name|XCourse
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
name|offerings
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
range|:
name|assignment
control|)
block|{
comment|// Skip free times and dummy sections
if|if
condition|(
name|ca
operator|==
literal|null
operator|||
name|ca
operator|.
name|isFreeTime
argument_list|()
operator|||
name|ca
operator|.
name|getClassId
argument_list|()
operator|==
literal|null
operator|||
name|ca
operator|.
name|isDummy
argument_list|()
operator|||
name|ca
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getClassNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getClassNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
comment|// Check section limits
name|XSection
name|section
init|=
name|offering
operator|.
name|getSection
argument_list|(
name|ca
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|ca
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
comment|// Check cancelled flag
if|if
condition|(
name|section
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
if|if
condition|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Enrollment.CanKeepCancelledClass"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
name|contains
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|contains
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollCancelled
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|ca
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollCancelled
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|ca
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|enrollments
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
block|{
name|sections
operator|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
expr_stmt|;
name|enrollments
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|offerings
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|offering
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|crns
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|check
label|:
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|XCourse
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|e
range|:
name|enrollments
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|XCourse
name|course
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Float
name|sectionCredit
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XSection
name|s
range|:
name|sections
control|)
block|{
name|Float
name|creditOverride
init|=
name|s
operator|.
name|getCreditOverride
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|creditOverride
operator|!=
literal|null
condition|)
block|{
name|sectionCredit
operator|=
operator|(
name|sectionCredit
operator|==
literal|null
condition|?
literal|0f
else|:
name|sectionCredit
operator|.
name|floatValue
argument_list|()
operator|)
operator|+
name|creditOverride
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sectionCredit
operator|!=
literal|null
condition|)
name|maxCredit
operator|+=
name|sectionCredit
expr_stmt|;
if|else if
condition|(
name|course
operator|.
name|hasCredit
argument_list|()
condition|)
name|maxCredit
operator|+=
name|course
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|enrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
comment|// course change
for|for
control|(
name|XSection
name|s
range|:
name|sections
control|)
block|{
if|if
condition|(
operator|!
name|enrollment
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
name|s
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|ADD
expr_stmt|;
name|ch
operator|.
name|credit
operator|=
name|course
operator|.
name|getCreditAbbv
argument_list|()
expr_stmt|;
if|if
condition|(
name|crns
operator|.
name|add
argument_list|(
name|ch
operator|.
name|crn
argument_list|)
condition|)
name|request
operator|.
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Long
name|id
range|:
name|enrollment
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
name|XSection
name|s
init|=
name|offerings
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|.
name|getSection
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sections
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
name|s
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|DROP
expr_stmt|;
name|ch
operator|.
name|credit
operator|=
name|course
operator|.
name|getCreditAbbv
argument_list|()
expr_stmt|;
if|if
condition|(
name|crns
operator|.
name|add
argument_list|(
name|ch
operator|.
name|crn
argument_list|)
condition|)
name|request
operator|.
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue
name|check
continue|;
block|}
block|}
block|}
comment|// new course
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
block|{
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|ADD
expr_stmt|;
name|ch
operator|.
name|credit
operator|=
name|course
operator|.
name|getCreditAbbv
argument_list|()
expr_stmt|;
if|if
condition|(
name|crns
operator|.
name|add
argument_list|(
name|ch
operator|.
name|crn
argument_list|)
condition|)
name|request
operator|.
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
comment|// drop course
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|enrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
operator|!
name|offerings
operator|.
name|containsKey
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
name|enrollment
argument_list|)
control|)
block|{
name|XCourse
name|course
init|=
name|offering
operator|.
name|getCourse
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|DROP
expr_stmt|;
name|ch
operator|.
name|credit
operator|=
name|course
operator|.
name|getCreditAbbv
argument_list|()
expr_stmt|;
if|if
condition|(
name|crns
operator|.
name|add
argument_list|(
name|ch
operator|.
name|crn
argument_list|)
condition|)
name|request
operator|.
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|boolean
name|maxi
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|errors
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|ErrorMessage
argument_list|>
name|added
init|=
operator|new
name|HashSet
argument_list|<
name|ErrorMessage
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Change
name|ch
range|:
name|request
operator|.
name|changes
control|)
block|{
for|for
control|(
name|ErrorMessage
name|m
range|:
name|errors
control|)
if|if
condition|(
name|ch
operator|.
name|crn
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getSection
argument_list|()
argument_list|)
operator|&&
name|added
operator|.
name|add
argument_list|(
name|m
argument_list|)
condition|)
block|{
if|if
condition|(
name|ch
operator|.
name|errors
operator|==
literal|null
condition|)
name|ch
operator|.
name|errors
operator|=
operator|new
name|ArrayList
argument_list|<
name|ChangeError
argument_list|>
argument_list|()
expr_stmt|;
name|ChangeError
name|er
init|=
operator|new
name|ChangeError
argument_list|()
decl_stmt|;
name|er
operator|.
name|code
operator|=
name|m
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|er
operator|.
name|message
operator|=
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|ch
operator|.
name|errors
operator|.
name|add
argument_list|(
name|er
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ErrorMessage
name|m
range|:
name|errors
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getCourse
argument_list|()
operator|!=
literal|null
operator|&&
name|added
operator|.
name|add
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|m
operator|.
name|getCourse
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|m
operator|.
name|getCourse
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|m
operator|.
name|getCourse
argument_list|()
operator|.
name|substring
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
name|m
operator|.
name|getSection
argument_list|()
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|KEEP
expr_stmt|;
name|ch
operator|.
name|errors
operator|=
operator|new
name|ArrayList
argument_list|<
name|ChangeError
argument_list|>
argument_list|()
expr_stmt|;
name|ChangeError
name|er
init|=
operator|new
name|ChangeError
argument_list|()
decl_stmt|;
name|er
operator|.
name|code
operator|=
name|m
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|er
operator|.
name|message
operator|=
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|ch
operator|.
name|errors
operator|.
name|add
argument_list|(
name|er
argument_list|)
expr_stmt|;
name|request
operator|.
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|XCourseId
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
name|ch
operator|.
name|credit
operator|=
name|offering
operator|.
name|getCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|.
name|getCreditAbbv
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
name|maxi
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|credit
operator|!=
literal|null
operator|&&
name|credit
operator|>
name|maxCredit
condition|)
name|maxCredit
operator|=
name|credit
expr_stmt|;
if|if
condition|(
name|maxi
operator|||
operator|(
name|student
operator|.
name|getMaxCredit
argument_list|()
operator|!=
literal|null
operator|&&
name|student
operator|.
name|getMaxCredit
argument_list|()
operator|<
name|maxCredit
operator|)
condition|)
name|request
operator|.
name|maxCredit
operator|=
name|maxCredit
expr_stmt|;
block|}
specifier|protected
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
name|combine
parameter_list|(
name|Change
name|change
parameter_list|,
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
name|oldIntent
parameter_list|)
block|{
name|boolean
name|ex
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|e
range|:
name|change
operator|.
name|errors
control|)
if|if
condition|(
name|e
operator|.
name|code
operator|!=
literal|null
operator|&&
name|e
operator|.
name|code
operator|.
name|startsWith
argument_list|(
literal|"EX-"
argument_list|)
condition|)
name|ex
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|oldIntent
operator|!=
literal|null
condition|)
switch|switch
condition|(
name|oldIntent
condition|)
block|{
case|case
name|EX_ADD
case|:
case|case
name|EX_DROP
case|:
case|case
name|EX_CHANGE
case|:
name|ex
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|change
operator|.
name|operation
operator|==
name|ChangeOperation
operator|.
name|ADD
condition|)
block|{
if|if
condition|(
name|oldIntent
operator|!=
literal|null
condition|)
switch|switch
condition|(
name|oldIntent
condition|)
block|{
case|case
name|ADD
case|:
case|case
name|EX_ADD
case|:
return|return
operator|(
name|ex
condition|?
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
operator|.
name|EX_ADD
else|:
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
operator|.
name|ADD
operator|)
return|;
default|default:
return|return
operator|(
name|ex
condition|?
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
operator|.
name|EX_CHANGE
else|:
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
operator|.
name|CHANGE
operator|)
return|;
block|}
return|return
operator|(
name|ex
condition|?
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
operator|.
name|EX_ADD
else|:
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
operator|.
name|ADD
operator|)
return|;
block|}
if|else if
condition|(
name|change
operator|.
name|operation
operator|==
name|ChangeOperation
operator|.
name|DROP
condition|)
block|{
if|if
condition|(
name|oldIntent
operator|!=
literal|null
condition|)
switch|switch
condition|(
name|oldIntent
condition|)
block|{
case|case
name|DROP
case|:
case|case
name|EX_DROP
case|:
return|return
operator|(
name|ex
condition|?
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
operator|.
name|EX_DROP
else|:
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
operator|.
name|DROP
operator|)
return|;
default|default:
return|return
operator|(
name|ex
condition|?
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
operator|.
name|EX_CHANGE
else|:
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
operator|.
name|CHANGE
operator|)
return|;
block|}
return|return
operator|(
name|ex
condition|?
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
operator|.
name|EX_DROP
else|:
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
operator|.
name|DROP
operator|)
return|;
block|}
else|else
block|{
return|return
name|oldIntent
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SpecialRegistrationEligibilityResponse
name|checkEligibility
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|SpecialRegistrationEligibilityRequest
name|input
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
literal|false
argument_list|,
literal|"No student."
argument_list|)
return|;
if|if
condition|(
operator|!
name|isSpecialRegistrationEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|)
condition|)
return|return
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
literal|false
argument_list|,
literal|"Special registration is disabled."
argument_list|)
return|;
name|CheckRestrictionsRequest
name|req
init|=
operator|new
name|CheckRestrictionsRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|mode
operator|=
name|getSpecialRegistrationMode
argument_list|()
expr_stmt|;
name|req
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|req
operator|.
name|changes
operator|=
name|SpecialRegistrationHelper
operator|.
name|createValidationRequest
argument_list|(
name|req
argument_list|,
name|ValidationMode
operator|.
name|REG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|current
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keep
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|crn2course
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|newCourses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|adds
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|XCourse
argument_list|>
name|courses
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|XCourse
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|crn2sections
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
name|XEnrollment
name|enr
init|=
name|cr
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enr
operator|!=
literal|null
condition|)
block|{
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|enr
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|enr
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Long
name|id
range|:
name|enr
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
name|XSection
name|section
init|=
name|offering
operator|.
name|getSection
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|crn
init|=
name|section
operator|.
name|getExternalId
argument_list|(
name|enr
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|current
operator|.
name|add
argument_list|(
name|crn
argument_list|)
expr_stmt|;
name|crn2course
operator|.
name|put
argument_list|(
name|crn
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|courses
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|crn2sections
operator|.
name|get
argument_list|(
name|crn
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
block|{
name|sections
operator|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
expr_stmt|;
name|crn2sections
operator|.
name|put
argument_list|(
name|crn
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|input
operator|.
name|getClassAssignments
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|ClassAssignment
name|ca
range|:
name|input
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|ca
operator|==
literal|null
operator|||
name|ca
operator|.
name|isFreeTime
argument_list|()
operator|||
name|ca
operator|.
name|getClassId
argument_list|()
operator|==
literal|null
operator|||
name|ca
operator|.
name|isDummy
argument_list|()
operator|||
name|ca
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
continue|continue;
name|XSection
name|section
init|=
name|offering
operator|.
name|getSection
argument_list|(
name|ca
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
continue|continue;
name|String
name|crn
init|=
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|contains
argument_list|(
name|crn
argument_list|)
condition|)
block|{
name|keep
operator|.
name|add
argument_list|(
name|crn
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|adds
operator|.
name|add
argument_list|(
name|crn
argument_list|)
condition|)
block|{
name|SpecialRegistrationHelper
operator|.
name|addCrn
argument_list|(
name|req
operator|.
name|changes
argument_list|,
name|crn
argument_list|)
expr_stmt|;
name|crn2course
operator|.
name|put
argument_list|(
name|crn
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|courses
operator|.
name|containsKey
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
condition|)
block|{
name|courses
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
name|newCourses
operator|.
name|add
argument_list|(
name|crn
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|crn2sections
operator|.
name|get
argument_list|(
name|crn
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
block|{
name|sections
operator|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
expr_stmt|;
name|crn2sections
operator|.
name|put
argument_list|(
name|crn
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|crn
range|:
name|current
control|)
if|if
condition|(
operator|!
name|keep
operator|.
name|contains
argument_list|(
name|crn
argument_list|)
condition|)
name|SpecialRegistrationHelper
operator|.
name|dropCrn
argument_list|(
name|req
operator|.
name|changes
argument_list|,
name|crn
argument_list|)
expr_stmt|;
name|CheckRestrictionsResponse
name|resp
init|=
literal|null
decl_stmt|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiCheckRestrictions
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|CheckRestrictionsRequest
argument_list|>
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|resp
operator|=
operator|(
name|CheckRestrictionsResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|CheckRestrictionsResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|CheckRestrictionsResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"validation_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|message
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|eligible
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|resp
operator|.
name|status
condition|)
return|return
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
literal|false
argument_list|,
name|resp
operator|.
name|message
operator|==
literal|null
operator|||
name|resp
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to check student eligibility ("
operator|+
name|resp
operator|.
name|status
operator|+
literal|")."
else|:
name|resp
operator|.
name|message
argument_list|)
return|;
name|boolean
name|eligible
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|eligible
operator|==
literal|null
operator|||
name|resp
operator|.
name|eligible
operator|.
name|eligible
operator|==
literal|null
operator|||
operator|!
name|resp
operator|.
name|eligible
operator|.
name|eligible
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|eligible
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|resp
operator|.
name|eligible
operator|!=
literal|null
operator|&&
name|resp
operator|.
name|eligible
operator|.
name|eligibilityProblems
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|EligibilityProblem
name|p
range|:
name|resp
operator|.
name|eligible
operator|.
name|eligibilityProblems
control|)
if|if
condition|(
name|message
operator|==
literal|null
condition|)
name|message
operator|=
name|p
operator|.
name|message
expr_stmt|;
else|else
name|message
operator|+=
literal|"\n"
operator|+
name|p
operator|.
name|message
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|eligible
condition|)
return|return
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
literal|false
argument_list|,
name|message
operator|!=
literal|null
condition|?
name|message
else|:
literal|"Student not eligible."
argument_list|)
return|;
block|}
name|SpecialRegistrationEligibilityResponse
name|ret
init|=
operator|new
name|SpecialRegistrationEligibilityResponse
argument_list|(
literal|true
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|ext
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|outJson
operator|!=
literal|null
operator|&&
name|resp
operator|.
name|outJson
operator|.
name|problems
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|ErrorMessage
argument_list|>
name|errors
init|=
operator|new
name|TreeSet
argument_list|<
name|ErrorMessage
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Problem
name|problem
range|:
name|resp
operator|.
name|outJson
operator|.
name|problems
control|)
block|{
if|if
condition|(
literal|"CLOS"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
operator|&&
operator|!
name|adds
operator|.
name|contains
argument_list|(
name|problem
operator|.
name|crn
argument_list|)
condition|)
block|{
comment|// Ignore closed section error on sections that are not being added
block|}
if|else if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
operator|&&
operator|!
name|newCourses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Move max credit error message to the last added course
name|String
name|crn
init|=
name|newCourses
operator|.
name|remove
argument_list|(
name|newCourses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|crn2course
operator|.
name|get
argument_list|(
name|crn
argument_list|)
argument_list|,
name|crn
argument_list|,
name|problem
operator|.
name|code
argument_list|,
name|problem
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|crn2course
operator|.
name|get
argument_list|(
name|problem
operator|.
name|crn
argument_list|)
argument_list|,
name|problem
operator|.
name|crn
argument_list|,
name|problem
operator|.
name|code
argument_list|,
name|problem
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|problem
operator|.
name|code
operator|!=
literal|null
operator|&&
name|problem
operator|.
name|code
operator|.
name|startsWith
argument_list|(
literal|"EX-"
argument_list|)
condition|)
name|ext
operator|.
name|add
argument_list|(
name|problem
operator|.
name|crn
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setErrors
argument_list|(
name|errors
argument_list|)
expr_stmt|;
if|if
condition|(
name|resp
operator|.
name|outJson
operator|.
name|maxHoursCalc
operator|!=
literal|null
condition|)
name|ret
operator|.
name|setCredit
argument_list|(
name|resp
operator|.
name|outJson
operator|.
name|maxHoursCalc
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|ErrorMessage
argument_list|>
name|denied
init|=
operator|new
name|TreeSet
argument_list|<
name|ErrorMessage
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|hasErrors
argument_list|()
condition|)
block|{
for|for
control|(
name|ErrorMessage
name|error
range|:
name|ret
operator|.
name|getErrors
argument_list|()
control|)
block|{
if|if
condition|(
name|resp
operator|.
name|overrides
operator|!=
literal|null
operator|&&
operator|!
name|resp
operator|.
name|overrides
operator|.
name|contains
argument_list|(
name|error
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|.
name|setMessage
argument_list|(
operator|(
name|ret
operator|.
name|hasMessage
argument_list|()
condition|?
name|ret
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
else|:
literal|""
operator|)
operator|+
literal|"No approvals are allowed for "
operator|+
name|error
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setCanSubmit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|denied
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|error
operator|.
name|getCourse
argument_list|()
argument_list|,
literal|""
argument_list|,
name|error
operator|.
name|getCode
argument_list|()
argument_list|,
literal|"Approvals are not allowed for: "
operator|+
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"CLOS"
operator|.
name|equals
argument_list|(
name|error
operator|.
name|getCode
argument_list|()
argument_list|)
operator|&&
name|adds
operator|.
name|contains
argument_list|(
name|error
operator|.
name|getSection
argument_list|()
argument_list|)
operator|&&
name|isAllowClosedErrorForAvailableSections
argument_list|()
condition|)
block|{
name|XCourse
name|course
init|=
name|courses
operator|.
name|get
argument_list|(
name|error
operator|.
name|getCourse
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
comment|// special handing of CLOS errors
if|if
condition|(
name|ext
operator|.
name|contains
argument_list|(
name|error
operator|.
name|getSection
argument_list|()
argument_list|)
condition|)
block|{
comment|// is extended add: check availability
name|XEnrollments
name|enrollments
init|=
name|server
operator|.
name|getEnrollments
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|available
init|=
literal|true
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|crn2sections
operator|.
name|get
argument_list|(
name|error
operator|.
name|getSection
argument_list|()
argument_list|)
control|)
block|{
name|int
name|enrl
init|=
operator|(
name|enrollments
operator|!=
literal|null
condition|?
name|enrollments
operator|.
name|countEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
else|:
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|section
operator|.
name|getLimit
argument_list|()
operator|<=
name|enrl
condition|)
block|{
name|available
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|available
condition|)
block|{
name|ret
operator|.
name|setMessage
argument_list|(
operator|(
name|ret
operator|.
name|hasMessage
argument_list|()
condition|?
name|ret
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
else|:
literal|""
operator|)
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" does not allow approvals for "
operator|+
name|error
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setCanSubmit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|denied
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|""
argument_list|,
name|error
operator|.
name|getCode
argument_list|()
argument_list|,
literal|"Approvals are not allowed for: "
operator|+
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// is open registration -- check course settings
if|if
condition|(
name|course
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|isOverrideEnabled
argument_list|(
name|error
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|.
name|setMessage
argument_list|(
operator|(
name|ret
operator|.
name|hasMessage
argument_list|()
condition|?
name|ret
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
else|:
literal|""
operator|)
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" does not allow approvals for "
operator|+
name|error
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setCanSubmit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|denied
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|""
argument_list|,
name|error
operator|.
name|getCode
argument_list|()
argument_list|,
literal|"Approvals are not allowed for: "
operator|+
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|XCourse
name|course
init|=
name|courses
operator|.
name|get
argument_list|(
name|error
operator|.
name|getCourse
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|isOverrideEnabled
argument_list|(
name|error
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|.
name|setMessage
argument_list|(
operator|(
name|ret
operator|.
name|hasMessage
argument_list|()
condition|?
name|ret
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
else|:
literal|""
operator|)
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" does not allow approvals for "
operator|+
name|error
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setCanSubmit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|denied
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|""
argument_list|,
name|error
operator|.
name|getCode
argument_list|()
argument_list|,
literal|"Approvals are not allowed for: "
operator|+
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|denials
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|deniedRequests
operator|!=
literal|null
operator|&&
operator|!
name|resp
operator|.
name|deniedRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|DeniedRequest
name|r
range|:
name|resp
operator|.
name|deniedRequests
control|)
block|{
name|String
name|course
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|subject
operator|!=
literal|null
condition|)
block|{
name|course
operator|=
name|r
operator|.
name|subject
operator|+
literal|" "
operator|+
name|r
operator|.
name|courseNbr
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|.
name|crn
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|crn
range|:
name|r
operator|.
name|crn
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|CourseOffering
name|c
init|=
name|findCourseByExternalId
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|crn
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|course
operator|=
name|c
operator|.
name|getCourseName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|denials
operator|.
name|add
argument_list|(
name|course
operator|+
literal|":"
operator|+
name|r
operator|.
name|code
argument_list|)
condition|)
block|{
name|ret
operator|.
name|setMessage
argument_list|(
operator|(
name|ret
operator|.
name|hasMessage
argument_list|()
condition|?
name|ret
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
else|:
literal|""
operator|)
operator|+
name|course
operator|+
literal|": "
operator|+
name|r
operator|.
name|errorMessage
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setCanSubmit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|denied
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
argument_list|,
name|r
operator|.
name|crn
argument_list|,
name|r
operator|.
name|code
argument_list|,
name|r
operator|.
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|resp
operator|.
name|cancelRegistrationRequests
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|ErrorMessage
argument_list|>
name|errors
init|=
operator|new
name|TreeSet
argument_list|<
name|ErrorMessage
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|resp
operator|.
name|cancelRegistrationRequests
control|)
block|{
name|ret
operator|.
name|addCancelRequestId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|changes
operator|==
literal|null
condition|)
continue|continue;
name|String
name|maxi
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rAdds
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|,
name|rDrops
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|subject
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|courseNbr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isPending
argument_list|(
name|ch
operator|.
name|status
argument_list|)
condition|)
block|{
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|e
range|:
name|ch
operator|.
name|errors
control|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
argument_list|,
name|ch
operator|.
name|crn
argument_list|,
name|e
operator|.
name|code
argument_list|,
name|e
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ChangeOperation
operator|.
name|ADD
operator|==
name|ch
operator|.
name|operation
condition|)
name|rAdds
operator|.
name|add
argument_list|(
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
argument_list|)
expr_stmt|;
else|else
name|rDrops
operator|.
name|add
argument_list|(
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|.
name|regRequestId
operator|.
name|equals
argument_list|(
name|input
operator|.
name|getRequestId
argument_list|()
argument_list|)
operator|&&
name|isPending
argument_list|(
name|ch
operator|.
name|status
argument_list|)
condition|)
block|{
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|e
range|:
name|ch
operator|.
name|errors
control|)
if|if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|code
argument_list|)
condition|)
name|maxi
operator|=
name|e
operator|.
name|message
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxi
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|c
range|:
name|rAdds
control|)
if|if
condition|(
operator|!
name|rDrops
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|c
argument_list|,
literal|""
argument_list|,
literal|"MAXI"
argument_list|,
name|maxi
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|.
name|setCancelErrors
argument_list|(
name|errors
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|denied
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|.
name|setDeniedErrors
argument_list|(
name|denied
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|SubmitSpecialRegistrationResponse
name|submitRegistration
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|SubmitSpecialRegistrationRequest
name|input
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SpecialRegistrationRequest
name|request
init|=
operator|new
name|SpecialRegistrationRequest
argument_list|()
decl_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|request
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|request
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|request
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|buildChangeList
argument_list|(
name|request
argument_list|,
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|input
operator|.
name|getClassAssignments
argument_list|()
argument_list|,
name|input
operator|.
name|getErrors
argument_list|()
argument_list|,
name|input
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
comment|// buildChangeList(request, server, helper, student, input.getClassAssignments(), validate(server, helper, student, input.getClassAssignments()));
name|request
operator|.
name|regRequestId
operator|=
name|input
operator|.
name|getRequestId
argument_list|()
expr_stmt|;
name|request
operator|.
name|mode
operator|=
name|getSpecialRegistrationMode
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|requestorId
operator|=
name|getRequestorId
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|requestorRole
operator|=
name|getRequestorType
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|requestorNotes
operator|=
name|input
operator|.
name|getNote
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|changes
operator|==
literal|null
operator|||
name|request
operator|.
name|changes
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"There are no changes."
argument_list|)
throw|;
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteSubmitRegistration
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationRequest
argument_list|>
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationResponseList
name|response
init|=
operator|(
name|SpecialRegistrationResponseList
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationResponseList
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationResponseList
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|SubmitSpecialRegistrationResponse
name|ret
init|=
operator|new
name|SubmitSpecialRegistrationResponse
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setMessage
argument_list|(
name|response
operator|.
name|message
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setSuccess
argument_list|(
name|ResponseStatus
operator|.
name|success
operator|==
name|response
operator|.
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|data
operator|!=
literal|null
operator|&&
operator|!
name|response
operator|.
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setStatus
argument_list|(
name|getStatus
argument_list|(
name|response
operator|.
name|data
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SubmitRegistrationResponse
name|r
range|:
name|response
operator|.
name|data
control|)
block|{
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
operator|&&
operator|!
name|ch
operator|.
name|errors
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ch
operator|.
name|status
operator|==
literal|null
condition|)
name|ch
operator|.
name|status
operator|=
name|ChangeStatus
operator|.
name|inProgress
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|requestorNotes
operator|==
literal|null
condition|)
name|r
operator|.
name|requestorNotes
operator|=
name|input
operator|.
name|getNote
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|maxCredit
operator|==
literal|null
operator|&&
name|request
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
name|r
operator|.
name|maxCredit
operator|=
name|request
operator|.
name|maxCredit
expr_stmt|;
name|ret
operator|.
name|addRequest
argument_list|(
name|convert
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|cancelledRequests
operator|!=
literal|null
condition|)
for|for
control|(
name|CancelledRequest
name|c
range|:
name|r
operator|.
name|cancelledRequests
control|)
name|ret
operator|.
name|addCancelledRequest
argument_list|(
name|c
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|.
name|setSuccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUpdateUniTimeStatuses
argument_list|()
operator|&&
name|response
operator|.
name|data
operator|!=
literal|null
operator|&&
operator|!
name|response
operator|.
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|studentChanged
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SubmitRegistrationResponse
name|r
range|:
name|response
operator|.
name|data
control|)
block|{
name|ChangeStatus
name|maxiStatus
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|course2errors
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
argument_list|>
name|course2intent
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SpecialRegistrationStatus
argument_list|>
name|course2status
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SpecialRegistrationStatus
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|subject
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|courseNbr
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|errors
operator|!=
literal|null
operator|&&
operator|!
name|ch
operator|.
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|course
init|=
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
decl_stmt|;
name|course2intent
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|combine
argument_list|(
name|ch
argument_list|,
name|course2intent
operator|.
name|get
argument_list|(
name|course
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|course2errors
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|==
literal|null
condition|)
block|{
name|errors
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|course2errors
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChangeError
name|e
range|:
name|ch
operator|.
name|errors
control|)
block|{
if|if
condition|(
name|e
operator|.
name|message
operator|!=
literal|null
condition|)
name|errors
operator|.
name|add
argument_list|(
name|e
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|.
name|status
operator|!=
literal|null
condition|)
block|{
name|SpecialRegistrationStatus
name|s
init|=
name|course2status
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|course2status
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|s
operator|==
literal|null
condition|?
name|getStatus
argument_list|(
name|ch
operator|.
name|status
argument_list|)
else|:
name|combine
argument_list|(
name|s
argument_list|,
name|getStatus
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|ch
operator|.
name|crn
operator|==
literal|null
operator|&&
name|ch
operator|.
name|errors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ChangeError
name|e
range|:
name|ch
operator|.
name|errors
control|)
block|{
if|if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|code
argument_list|)
condition|)
name|maxiStatus
operator|=
name|ch
operator|.
name|status
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|r
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
block|{
name|student
operator|.
name|setMaxCreditOverride
argument_list|(
operator|new
name|XOverride
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|,
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|,
name|maxiStatus
operator|!=
literal|null
condition|?
name|toStatus
argument_list|(
name|maxiStatus
argument_list|)
else|:
name|toStatus
argument_list|(
name|r
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Student
name|dbStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbStudent
operator|!=
literal|null
condition|)
block|{
name|dbStudent
operator|.
name|setOverrideStatus
argument_list|(
name|maxiStatus
operator|!=
literal|null
condition|?
name|toStatus
argument_list|(
name|maxiStatus
argument_list|)
else|:
name|toStatus
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|dbStudent
operator|.
name|setOverrideMaxCredit
argument_list|(
name|r
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
name|dbStudent
operator|.
name|setOverrideExternalId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
name|dbStudent
operator|.
name|setOverrideTimeStamp
argument_list|(
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbStudent
argument_list|)
expr_stmt|;
block|}
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|course2errors
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|XCourseRequest
name|cr
init|=
name|student
operator|.
name|getRequestForCourseName
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cr
operator|!=
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|m
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
name|message
operator|+=
operator|(
name|m
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|m
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|length
argument_list|()
operator|>
literal|255
condition|)
name|message
operator|=
name|message
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|252
argument_list|)
operator|+
literal|"..."
expr_stmt|;
name|cr
operator|.
name|setEnrollmentMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
for|for
control|(
name|XCourseId
name|course
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|cr
operator|.
name|setOverride
argument_list|(
name|course
argument_list|,
operator|new
name|XOverride
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|,
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|,
name|toStatus
argument_list|(
name|course2status
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|CourseDemand
name|dbCourseDemand
init|=
name|CourseDemandDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|cr
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbCourseDemand
operator|!=
literal|null
condition|)
block|{
name|StudentEnrollmentMessage
name|m
init|=
operator|new
name|StudentEnrollmentMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|setCourseDemand
argument_list|(
name|dbCourseDemand
argument_list|)
expr_stmt|;
name|m
operator|.
name|setLevel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m
operator|.
name|setType
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m
operator|.
name|setTimestamp
argument_list|(
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|m
operator|.
name|setOrder
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dbCourseDemand
operator|.
name|getEnrollmentMessages
argument_list|()
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbCourseDemand
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseRequest
name|dbCourseRequest
range|:
name|dbCourseDemand
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|dbCourseRequest
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|dbCourseRequest
operator|.
name|setOverrideExternalId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
name|dbCourseRequest
operator|.
name|setOverrideStatus
argument_list|(
name|toStatus
argument_list|(
name|course2status
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dbCourseRequest
operator|.
name|setOverrideTimeStamp
argument_list|(
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|dbCourseRequest
operator|.
name|setCourseRequestOverrideIntent
argument_list|(
name|course2intent
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbCourseRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|.
name|hasCancelledRequestIds
argument_list|()
condition|)
block|{
if|if
condition|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|isCancelledRequest
argument_list|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|setStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|Student
name|dbStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbStudent
operator|!=
literal|null
condition|)
block|{
name|dbStudent
operator|.
name|setOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbStudent
argument_list|)
expr_stmt|;
block|}
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|XRequest
name|xr
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|xr
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|xr
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|hasOverrides
argument_list|()
condition|)
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|XCourseId
argument_list|,
name|XOverride
argument_list|>
name|e
range|:
name|cr
operator|.
name|getOverrides
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ret
operator|.
name|isCancelledRequest
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|)
block|{
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|setStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|CourseDemand
name|dbCourseDemand
init|=
name|CourseDemandDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|cr
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbCourseDemand
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CourseRequest
name|dbCourseRequest
range|:
name|dbCourseDemand
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|dbCourseRequest
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|dbCourseRequest
operator|.
name|setOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbCourseRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|studentChanged
condition|)
block|{
name|server
operator|.
name|update
argument_list|(
name|student
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
try|try
block|{
name|iClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|CourseOffering
name|findCourseByExternalId
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|externalId
parameter_list|)
block|{
return|return
name|iExternalClassLookup
operator|.
name|findCourseByExternalId
argument_list|(
name|sessionId
argument_list|,
name|externalId
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Class_
argument_list|>
name|findClassesByExternalId
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|externalId
parameter_list|)
block|{
return|return
name|iExternalClassLookup
operator|.
name|findClassesByExternalId
argument_list|(
name|sessionId
argument_list|,
name|externalId
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isDrop
parameter_list|(
name|XEnrollment
name|enrollment
parameter_list|,
name|List
argument_list|<
name|Change
argument_list|>
name|changes
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|protected
name|List
argument_list|<
name|XRequest
argument_list|>
name|getRequests
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|Map
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|adds
parameter_list|,
name|Map
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|drops
parameter_list|)
block|{
name|Student
name|dbStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XRequest
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<
name|XRequest
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|CourseOffering
argument_list|>
name|remaining
init|=
operator|new
name|HashSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|(
name|adds
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|request
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|add
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|drop
init|=
literal|null
decl_stmt|;
name|XCourseId
name|courseId
init|=
literal|null
decl_stmt|;
name|Long
name|configId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XCourseId
name|course
range|:
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|e
range|:
name|adds
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|add
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|courseId
operator|=
name|course
expr_stmt|;
name|configId
operator|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|remaining
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|e
range|:
name|drops
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|drop
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|add
operator|==
literal|null
operator|&&
name|drop
operator|==
literal|null
condition|)
block|{
comment|// no change detected
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XEnrollment
name|enrollemnt
init|=
name|cr
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
operator|(
name|enrollemnt
operator|==
literal|null
condition|?
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
else|:
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|enrollemnt
operator|.
name|getSectionIds
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|enrollemnt
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|courseId
operator|!=
literal|null
condition|)
block|{
comment|// add -> check course& config
if|if
condition|(
operator|!
name|enrollemnt
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|courseId
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|&&
name|drop
operator|==
literal|null
condition|)
block|{
comment|// different course and no drop -> create new course request
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|remaining
operator|.
name|add
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseId
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
operator|!
name|enrollemnt
operator|.
name|getConfigId
argument_list|()
operator|.
name|equals
argument_list|(
name|configId
argument_list|)
condition|)
block|{
comment|// same course different config -> drop all
name|classIds
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|courseId
operator|=
name|enrollemnt
expr_stmt|;
name|configId
operator|=
name|enrollemnt
operator|.
name|getConfigId
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|add
operator|!=
literal|null
condition|)
for|for
control|(
name|Class_
name|c
range|:
name|add
control|)
name|classIds
operator|.
name|add
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|drop
operator|!=
literal|null
condition|)
for|for
control|(
name|Class_
name|c
range|:
name|drop
control|)
name|classIds
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|classIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requests
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
name|cr
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requests
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
name|cr
argument_list|,
operator|new
name|XEnrollment
argument_list|(
name|dbStudent
argument_list|,
name|courseId
argument_list|,
name|configId
argument_list|,
name|classIds
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// free time --> no change
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseOffering
name|course
range|:
name|remaining
control|)
block|{
name|Long
name|configId
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|adds
operator|.
name|get
argument_list|(
name|course
argument_list|)
control|)
block|{
if|if
condition|(
name|configId
operator|==
literal|null
condition|)
name|configId
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|classIds
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|XCourseId
name|courseId
init|=
operator|new
name|XCourseId
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
name|dbStudent
argument_list|,
name|courseId
argument_list|,
name|requests
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|XEnrollment
argument_list|(
name|dbStudent
argument_list|,
name|courseId
argument_list|,
name|configId
argument_list|,
name|classIds
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|requests
return|;
block|}
specifier|protected
name|void
name|checkRequests
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|List
argument_list|<
name|XRequest
argument_list|>
name|xrequests
parameter_list|,
name|Set
argument_list|<
name|ErrorMessage
argument_list|>
name|errors
parameter_list|,
name|boolean
name|allowTimeConf
parameter_list|,
name|boolean
name|allowSpaceConf
parameter_list|)
block|{
name|List
argument_list|<
name|EnrollmentRequest
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<
name|EnrollmentRequest
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
name|courseId2offering
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|req
range|:
name|xrequests
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|req
operator|instanceof
name|XCourseRequest
operator|)
condition|)
continue|continue;
name|XCourseRequest
name|courseReq
init|=
operator|(
name|XCourseRequest
operator|)
name|req
decl_stmt|;
name|XEnrollment
name|e
init|=
name|courseReq
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|e
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|e
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
throw|;
name|EnrollmentRequest
name|request
init|=
operator|new
name|EnrollmentRequest
argument_list|(
name|course
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|e
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
throw|;
for|for
control|(
name|Long
name|sectionId
range|:
name|e
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
comment|// Check section limits
name|XSection
name|section
init|=
name|offering
operator|.
name|getSection
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|e
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|sectionId
argument_list|)
argument_list|)
throw|;
comment|// Check cancelled flag
if|if
condition|(
name|section
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
if|if
condition|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Enrollment.CanKeepCancelledClass"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
name|contains
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|contains
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_CANCEL
argument_list|,
name|MSG
operator|.
name|exceptionEnrollCancelled
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_CANCEL
argument_list|,
name|MSG
operator|.
name|exceptionEnrollCancelled
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|getSections
argument_list|()
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|courseId2offering
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|offering
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check for NEW and CHANGE deadlines
name|check
label|:
for|for
control|(
name|EnrollmentRequest
name|request
range|:
name|requests
control|)
block|{
name|XCourse
name|course
init|=
name|request
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|request
operator|.
name|getSections
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|enrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
comment|// course change
for|for
control|(
name|XSection
name|s
range|:
name|sections
control|)
if|if
condition|(
operator|!
name|enrollment
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getSectionId
argument_list|()
argument_list|)
operator|&&
operator|!
name|server
operator|.
name|checkDeadline
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|s
operator|.
name|getTime
argument_list|()
argument_list|,
name|OnlineSectioningServer
operator|.
name|Deadline
operator|.
name|CHANGE
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|s
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_DEADLINE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollDeadlineChange
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|s
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|s
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue
name|check
continue|;
block|}
block|}
block|}
comment|// new course
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|checkDeadline
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
argument_list|,
name|OnlineSectioningServer
operator|.
name|Deadline
operator|.
name|NEW
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_DEADLINE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollDeadlineNew
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check for DROP deadlines
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|enrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
operator|!
name|courseId2offering
operator|.
name|containsKey
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
name|enrollment
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|checkDeadline
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
argument_list|,
name|OnlineSectioningServer
operator|.
name|Deadline
operator|.
name|DROP
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|enrollment
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_DEADLINE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollDeadlineDrop
argument_list|(
name|enrollment
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|XConfig
argument_list|>
name|courseId2config
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|XConfig
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|EnrollmentRequest
name|request
range|:
name|requests
control|)
block|{
name|XCourse
name|course
init|=
name|request
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|XOffering
name|offering
init|=
name|courseId2offering
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|XEnrollments
name|enrollments
init|=
name|server
operator|.
name|getEnrollments
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|request
operator|.
name|getSections
argument_list|()
decl_stmt|;
name|XSubpart
name|subpart
init|=
name|offering
operator|.
name|getSubpart
argument_list|(
name|sections
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
name|XConfig
name|config
init|=
name|offering
operator|.
name|getConfig
argument_list|(
name|subpart
operator|.
name|getConfigId
argument_list|()
argument_list|)
decl_stmt|;
name|courseId2config
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|XReservation
name|reservation
init|=
literal|null
decl_stmt|;
name|reservations
label|:
for|for
control|(
name|XReservation
name|r
range|:
name|offering
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|isApplicable
argument_list|(
name|student
argument_list|,
name|course
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|r
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|r
operator|.
name|getLimit
argument_list|()
operator|<=
name|enrollments
operator|.
name|countEnrollmentsForReservation
argument_list|(
name|r
operator|.
name|getReservationId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForReservation
argument_list|(
name|r
operator|.
name|getReservationId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
continue|continue;
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|getConfigsIds
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|getConfigsIds
argument_list|()
operator|.
name|contains
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
if|if
condition|(
name|r
operator|.
name|getSectionIds
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|getSectionIds
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
continue|continue
name|reservations
continue|;
if|if
condition|(
name|reservation
operator|==
literal|null
operator|||
name|r
operator|.
name|compareTo
argument_list|(
name|reservation
argument_list|)
operator|<
literal|0
condition|)
name|reservation
operator|=
name|r
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|reservation
operator|==
literal|null
operator|||
operator|!
name|reservation
operator|.
name|canAssignOverLimit
argument_list|()
operator|)
operator|&&
operator|!
name|allowSpaceConf
condition|)
block|{
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|section
operator|.
name|getLimit
argument_list|()
operator|<=
name|enrollments
operator|.
name|countEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_NOT_AVAILABLE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|reservation
operator|==
literal|null
operator|||
operator|!
name|offering
operator|.
name|getSectionReservations
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|reservation
argument_list|)
operator|)
operator|&&
name|offering
operator|.
name|getUnreservedSectionSpace
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|,
name|enrollments
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_NOT_AVAILABLE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|config
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|config
operator|.
name|getLimit
argument_list|()
operator|<=
name|enrollments
operator|.
name|countEnrollmentsForConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_NOT_AVAILABLE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|reservation
operator|==
literal|null
operator|||
operator|!
name|offering
operator|.
name|getConfigReservations
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|reservation
argument_list|)
operator|)
operator|&&
name|offering
operator|.
name|getUnreservedConfigSpace
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|enrollments
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_NOT_AVAILABLE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|course
operator|.
name|getLimit
argument_list|()
operator|<=
name|enrollments
operator|.
name|countEnrollmentsForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_NOT_AVAILABLE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|EnrollmentRequest
name|request
range|:
name|requests
control|)
block|{
name|XCourse
name|course
init|=
name|request
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|XOffering
name|offering
init|=
name|courseId2offering
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|request
operator|.
name|getSections
argument_list|()
decl_stmt|;
name|XSubpart
name|subpart
init|=
name|offering
operator|.
name|getSubpart
argument_list|(
name|sections
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
name|XConfig
name|config
init|=
name|offering
operator|.
name|getConfig
argument_list|(
name|subpart
operator|.
name|getConfigId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|.
name|size
argument_list|()
operator|<
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_STRUCTURE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentIncomplete
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|sections
operator|.
name|size
argument_list|()
operator|>
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_STRUCTURE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentInvalid
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|XSection
name|s1
range|:
name|sections
control|)
block|{
for|for
control|(
name|XSection
name|s2
range|:
name|sections
control|)
block|{
if|if
condition|(
name|s1
operator|.
name|getSectionId
argument_list|()
operator|<
name|s2
operator|.
name|getSectionId
argument_list|()
operator|&&
name|s1
operator|.
name|isOverlapping
argument_list|(
name|offering
operator|.
name|getDistributions
argument_list|()
argument_list|,
name|s2
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|s1
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_TIME_CNF
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentOverlapping
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|s2
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_TIME_CNF
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentOverlapping
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|s1
operator|.
name|getSectionId
argument_list|()
operator|.
name|equals
argument_list|(
name|s2
operator|.
name|getSectionId
argument_list|()
argument_list|)
operator|&&
name|s1
operator|.
name|getSubpartId
argument_list|()
operator|.
name|equals
argument_list|(
name|s2
operator|.
name|getSubpartId
argument_list|()
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|s1
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_STRUCTURE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentInvalid
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|s2
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_STRUCTURE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentInvalid
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|offering
operator|.
name|getSubpart
argument_list|(
name|s1
operator|.
name|getSubpartId
argument_list|()
argument_list|)
operator|.
name|getConfigId
argument_list|()
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|s1
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_STRUCTURE
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentInvalid
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|offering
operator|.
name|isAllowOverlap
argument_list|(
name|student
argument_list|,
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|course
argument_list|,
name|sections
argument_list|)
operator|&&
operator|!
name|allowTimeConf
condition|)
for|for
control|(
name|EnrollmentRequest
name|otherRequest
range|:
name|requests
control|)
block|{
name|XOffering
name|other
init|=
name|courseId2offering
operator|.
name|get
argument_list|(
name|otherRequest
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|XConfig
name|otherConfig
init|=
name|courseId2config
operator|.
name|get
argument_list|(
name|otherRequest
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|other
operator|.
name|equals
argument_list|(
name|offering
argument_list|)
operator|&&
operator|!
name|other
operator|.
name|isAllowOverlap
argument_list|(
name|student
argument_list|,
name|otherConfig
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|otherRequest
operator|.
name|getCourse
argument_list|()
argument_list|,
name|otherRequest
operator|.
name|getSections
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|XSection
argument_list|>
name|assignment
init|=
name|otherRequest
operator|.
name|getSections
argument_list|()
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
if|if
condition|(
name|section
operator|.
name|isOverlapping
argument_list|(
name|offering
operator|.
name|getDistributions
argument_list|()
argument_list|,
name|assignment
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|ErrorMessage
operator|.
name|UniTimeCode
operator|.
name|UT_TIME_CNF
argument_list|,
name|MSG
operator|.
name|exceptionEnrollmentConflicting
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|boolean
name|isCancelled
parameter_list|(
name|SpecialRegistration
name|specialRequest
parameter_list|)
block|{
if|if
condition|(
name|specialRequest
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|change
range|:
name|specialRequest
operator|.
name|changes
control|)
if|if
condition|(
name|ChangeStatus
operator|.
name|cancelled
operator|==
name|change
operator|.
name|status
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|protected
name|RetrieveSpecialRegistrationResponse
name|convert
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|SpecialRegistration
name|specialRequest
parameter_list|,
name|boolean
name|excludeApprovedOrRejected
parameter_list|)
block|{
name|RetrieveSpecialRegistrationResponse
name|ret
init|=
operator|new
name|RetrieveSpecialRegistrationResponse
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|adds
init|=
operator|new
name|HashMap
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|drops
init|=
operator|new
name|HashMap
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|CourseOffering
argument_list|>
name|keeps
init|=
operator|new
name|HashSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Class_
argument_list|,
name|List
argument_list|<
name|Change
argument_list|>
argument_list|>
name|changes
init|=
operator|new
name|HashMap
argument_list|<
name|Class_
argument_list|,
name|List
argument_list|<
name|Change
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
name|SpecialRegistrationStatus
name|status
init|=
literal|null
decl_stmt|;
name|String
name|maxi
init|=
literal|null
decl_stmt|;
name|ChangeStatus
name|maxStatus
init|=
literal|null
decl_stmt|;
name|String
name|maxiNote
init|=
literal|null
decl_stmt|;
name|String
name|honorsGradeMode
init|=
name|getResetGradeModesRegExp
argument_list|()
decl_stmt|;
if|if
condition|(
name|specialRequest
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|change
range|:
name|specialRequest
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|change
operator|.
name|crn
operator|==
literal|null
operator|||
name|change
operator|.
name|crn
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|change
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|err
range|:
name|change
operator|.
name|errors
control|)
if|if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|err
operator|.
name|code
argument_list|)
condition|)
block|{
name|maxi
operator|=
name|err
operator|.
name|message
expr_stmt|;
name|maxStatus
operator|=
name|change
operator|.
name|status
expr_stmt|;
name|maxiNote
operator|=
name|SpecialRegistrationHelper
operator|.
name|getLastNote
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setMaxCredit
argument_list|(
name|specialRequest
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
if|if
condition|(
name|specialRequest
operator|.
name|maxCredit
operator|!=
literal|null
operator|&&
name|student
operator|.
name|getMaxCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.#"
argument_list|)
decl_stmt|;
name|maxi
operator|=
literal|"Maximum hours exceeded. Currently allowed "
operator|+
name|df
operator|.
name|format
argument_list|(
name|student
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
operator|+
literal|" but needs "
operator|+
name|df
operator|.
name|format
argument_list|(
name|specialRequest
operator|.
name|maxCredit
argument_list|)
operator|+
literal|"."
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getMaxCredit
argument_list|()
operator|>=
name|specialRequest
operator|.
name|maxCredit
operator|&&
name|getStatus
argument_list|(
name|change
operator|.
name|status
argument_list|)
operator|==
name|SpecialRegistrationStatus
operator|.
name|Pending
condition|)
name|maxStatus
operator|=
name|ChangeStatus
operator|.
name|approved
expr_stmt|;
block|}
block|}
continue|continue;
block|}
for|for
control|(
name|String
name|crn
range|:
name|change
operator|.
name|crn
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|CourseOffering
name|course
init|=
name|findCourseByExternalId
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|crn
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
name|findClassesByExternalId
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|crn
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
operator|&&
name|classes
operator|!=
literal|null
operator|&&
operator|!
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Class_
argument_list|>
name|list
init|=
operator|(
name|ChangeOperation
operator|.
name|DROP
operator|!=
name|change
operator|.
name|operation
condition|?
name|adds
else|:
name|drops
operator|)
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|ChangeOperation
operator|.
name|KEEP
operator|==
name|change
operator|.
name|operation
operator|||
name|ChangeOperation
operator|.
name|CHGMODE
operator|==
name|change
operator|.
name|operation
condition|)
name|keeps
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|TreeSet
argument_list|<
name|Class_
argument_list|>
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|ChangeOperation
operator|.
name|DROP
operator|!=
name|change
operator|.
name|operation
condition|?
name|adds
else|:
name|drops
operator|)
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Change
argument_list|>
name|ch
init|=
name|changes
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|null
condition|)
block|{
name|ch
operator|=
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
expr_stmt|;
name|changes
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
name|ch
argument_list|)
expr_stmt|;
block|}
name|ch
operator|.
name|add
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|change
operator|.
name|status
operator|!=
literal|null
condition|)
name|status
operator|=
name|combine
argument_list|(
name|status
argument_list|,
name|getStatus
argument_list|(
name|change
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|desc
init|=
literal|""
decl_stmt|;
name|NameFormat
name|nameFormat
init|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingInstructorNameFormat
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|courses
control|)
block|{
if|if
condition|(
operator|!
name|desc
operator|.
name|isEmpty
argument_list|()
condition|)
name|desc
operator|+=
literal|", "
expr_stmt|;
name|desc
operator|+=
name|course
operator|.
name|getCourseName
argument_list|()
expr_stmt|;
if|if
condition|(
name|adds
operator|.
name|containsKey
argument_list|(
name|course
argument_list|)
condition|)
block|{
if|if
condition|(
name|drops
operator|.
name|containsKey
argument_list|(
name|course
argument_list|)
condition|)
block|{
name|desc
operator|+=
literal|" (change)"
expr_stmt|;
block|}
else|else
block|{
name|desc
operator|+=
literal|" (add)"
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|drops
operator|.
name|containsKey
argument_list|(
name|course
argument_list|)
condition|)
block|{
name|desc
operator|+=
literal|" (drop)"
expr_stmt|;
block|}
name|CourseCreditUnitConfig
name|credit
init|=
name|course
operator|.
name|getCredit
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|additionalMessages
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|adds
operator|.
name|containsKey
argument_list|(
name|course
argument_list|)
condition|)
block|{
for|for
control|(
name|Class_
name|clazz
range|:
name|adds
operator|.
name|get
argument_list|(
name|course
argument_list|)
control|)
block|{
name|ClassAssignment
name|ca
init|=
operator|new
name|ClassAssignment
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Change
argument_list|>
name|change
init|=
name|changes
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|ca
operator|.
name|setSpecRegOperation
argument_list|(
name|ChangeOperation
operator|.
name|ADD
operator|==
name|change
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|operation
condition|?
name|SpecialRegistrationOperation
operator|.
name|Add
else|:
name|SpecialRegistrationOperation
operator|.
name|Keep
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|operation
operator|==
name|ChangeOperation
operator|.
name|CHGMODE
condition|)
block|{
name|ca
operator|.
name|setGradeMode
argument_list|(
operator|new
name|GradeMode
argument_list|(
name|change
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|selectedGradeMode
argument_list|,
name|change
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|selectedGradeModeDescription
argument_list|,
name|honorsGradeMode
operator|!=
literal|null
operator|&&
operator|!
name|honorsGradeMode
operator|.
name|isEmpty
argument_list|()
operator|&&
name|change
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|selectedGradeMode
operator|.
name|matches
argument_list|(
name|honorsGradeMode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
name|SpecialRegistrationStatus
name|s
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Change
name|ch
range|:
name|change
control|)
if|if
condition|(
name|ch
operator|.
name|status
operator|!=
literal|null
condition|)
name|s
operator|=
name|combine
argument_list|(
name|s
argument_list|,
name|getStatus
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSpecRegStatus
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setClassId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSection
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getSection
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setSection
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setClassNumber
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubpart
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setExternalId
argument_list|(
name|clazz
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ca
operator|.
name|setParentSection
argument_list|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setParentSection
argument_list|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|.
name|getSectionNumberString
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
operator|!=
literal|null
condition|)
name|ca
operator|.
name|addNote
argument_list|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|Placement
name|placement
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
name|int
name|minLimit
init|=
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
operator|&&
name|placement
operator|!=
literal|null
condition|)
block|{
comment|// int roomLimit = Math.round((enrollment.getClazz().getRoomRatio() == null ? 1.0f : enrollment.getClazz().getRoomRatio()) * placement.getRoomSize());
name|int
name|roomLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|placement
operator|.
name|getRoomSize
argument_list|()
operator|/
operator|(
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|||
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|ca
operator|.
name|setCancelled
argument_list|(
name|clazz
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|clazz
operator|.
name|getEnrollment
argument_list|()
block|,
name|limit
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|ca
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setStart
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setLength
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setBreakTime
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setDatePattern
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Location
name|loc
range|:
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
control|)
name|ca
operator|.
name|addRoom
argument_list|(
name|loc
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|loc
operator|.
name|getLabelWithDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getDisplayInstructor
argument_list|()
condition|)
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
name|ca
operator|.
name|addInstructor
argument_list|(
name|nameFormat
operator|.
name|format
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|addInstructoEmail
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ca
operator|.
name|setCredit
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
name|ca
operator|.
name|setCredit
argument_list|(
name|credit
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|credit
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Float
name|creditOverride
init|=
name|clazz
operator|.
name|getCredit
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|creditOverride
operator|!=
literal|null
condition|)
name|ca
operator|.
name|setCredit
argument_list|(
name|FixedCreditUnitConfig
operator|.
name|formatCredit
argument_list|(
name|creditOverride
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setParentSection
argument_list|(
name|course
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|course
operator|.
name|getConsentType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Change
name|ch
range|:
name|change
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|err
range|:
name|ch
operator|.
name|errors
control|)
block|{
if|if
condition|(
literal|"TIME"
operator|.
name|equals
argument_list|(
name|err
operator|.
name|code
argument_list|)
condition|)
name|ret
operator|.
name|setHasTimeConflict
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"CLOS"
operator|.
name|equals
argument_list|(
name|err
operator|.
name|code
argument_list|)
condition|)
name|ret
operator|.
name|setHasSpaceConflict
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|.
name|code
operator|!=
literal|null
operator|&&
name|err
operator|.
name|code
operator|.
name|startsWith
argument_list|(
literal|"EX-"
argument_list|)
condition|)
name|ret
operator|.
name|setExtended
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|err
operator|.
name|code
argument_list|)
operator|&&
name|maxi
operator|!=
literal|null
condition|)
continue|continue;
name|String
name|message
init|=
name|err
operator|.
name|message
decl_stmt|;
switch|switch
condition|(
name|getStatus
argument_list|(
name|ch
operator|.
name|status
argument_list|)
condition|)
block|{
case|case
name|Approved
case|:
name|message
operator|=
literal|"Approved: "
operator|+
name|message
expr_stmt|;
if|if
condition|(
name|excludeApprovedOrRejected
condition|)
continue|continue;
break|break;
case|case
name|Rejected
case|:
name|message
operator|=
literal|"Denied: "
operator|+
name|message
expr_stmt|;
if|if
condition|(
name|excludeApprovedOrRejected
condition|)
continue|continue;
break|break;
block|}
if|if
condition|(
name|SpecialRegistrationHelper
operator|.
name|hasLastNote
argument_list|(
name|ch
argument_list|)
condition|)
name|message
operator|+=
literal|"\n<span class='note'>"
operator|+
name|SpecialRegistrationHelper
operator|.
name|getLastNote
argument_list|(
name|ch
argument_list|)
operator|+
literal|"</span>"
expr_stmt|;
name|String
name|additionalMessage
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.note."
operator|+
name|err
operator|.
name|code
operator|+
literal|"."
operator|+
operator|(
name|ch
operator|.
name|status
operator|==
name|ChangeStatus
operator|.
name|approved
operator|&&
name|specialRequest
operator|.
name|completionStatus
operator|==
name|CompletionStatus
operator|.
name|completed
condition|?
literal|"completed"
else|:
name|ch
operator|.
name|status
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|additionalMessage
operator|!=
literal|null
operator|&&
operator|!
name|additionalMessage
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|additionalMessage
operator|.
name|contains
argument_list|(
literal|"{course}"
argument_list|)
condition|)
name|additionalMessage
operator|=
name|additionalMessage
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
argument_list|)
expr_stmt|;
if|if
condition|(
name|additionalMessage
operator|.
name|contains
argument_list|(
literal|"{crn}"
argument_list|)
operator|&&
name|ch
operator|.
name|crn
operator|!=
literal|null
condition|)
name|additionalMessage
operator|=
name|additionalMessage
operator|.
name|replace
argument_list|(
literal|"{crn}"
argument_list|,
name|ch
operator|.
name|crn
argument_list|)
expr_stmt|;
if|if
condition|(
name|additionalMessage
operator|.
name|contains
argument_list|(
literal|"{currentGradeMode}"
argument_list|)
operator|&&
name|ch
operator|.
name|currentGradeMode
operator|!=
literal|null
condition|)
name|additionalMessage
operator|=
name|additionalMessage
operator|.
name|replace
argument_list|(
literal|"{currentGradeMode}"
argument_list|,
name|ch
operator|.
name|currentGradeMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|additionalMessage
operator|.
name|contains
argument_list|(
literal|"{selectedGradeMode}"
argument_list|)
operator|&&
name|ch
operator|.
name|selectedGradeMode
operator|!=
literal|null
condition|)
name|additionalMessage
operator|=
name|additionalMessage
operator|.
name|replace
argument_list|(
literal|"{selectedGradeMode}"
argument_list|,
name|ch
operator|.
name|selectedGradeMode
argument_list|)
expr_stmt|;
name|additionalMessages
operator|.
name|add
argument_list|(
name|additionalMessage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|.
name|status
operator|!=
literal|null
condition|)
name|message
operator|=
literal|"<span class='"
operator|+
name|ch
operator|.
name|status
operator|+
literal|"'>"
operator|+
name|message
operator|+
literal|"</span>"
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|hasError
argument_list|()
condition|)
name|ca
operator|.
name|setError
argument_list|(
name|ca
operator|.
name|getError
argument_list|()
operator|+
literal|"\n"
operator|+
name|message
argument_list|)
expr_stmt|;
else|else
name|ca
operator|.
name|setError
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPending
argument_list|(
name|ch
operator|.
name|status
argument_list|)
condition|)
name|ret
operator|.
name|addError
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
argument_list|,
name|ch
operator|.
name|crn
argument_list|,
name|err
operator|.
name|code
argument_list|,
name|err
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setPinned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|drops
operator|.
name|containsKey
argument_list|(
name|course
argument_list|)
operator|&&
operator|!
name|keeps
operator|.
name|contains
argument_list|(
name|course
argument_list|)
operator|&&
name|maxStatus
operator|!=
literal|null
operator|&&
name|maxi
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
operator|&&
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|<
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|first
condition|)
block|{
name|String
name|message
init|=
name|maxi
decl_stmt|;
switch|switch
condition|(
name|getStatus
argument_list|(
name|maxStatus
argument_list|)
condition|)
block|{
case|case
name|Approved
case|:
name|message
operator|=
literal|"Approved: "
operator|+
name|message
expr_stmt|;
if|if
condition|(
name|excludeApprovedOrRejected
condition|)
continue|continue;
break|break;
case|case
name|Rejected
case|:
name|message
operator|=
literal|"Denied: "
operator|+
name|message
expr_stmt|;
if|if
condition|(
name|excludeApprovedOrRejected
condition|)
continue|continue;
break|break;
block|}
if|if
condition|(
name|maxiNote
operator|!=
literal|null
operator|&&
operator|!
name|maxiNote
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|message
operator|+=
literal|"\n<span class='note'>"
operator|+
name|maxiNote
operator|.
name|trim
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
name|String
name|additionalMessage
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.note.MAXI."
operator|+
operator|(
name|maxStatus
operator|==
name|ChangeStatus
operator|.
name|approved
operator|&&
name|specialRequest
operator|.
name|completionStatus
operator|==
name|CompletionStatus
operator|.
name|completed
condition|?
literal|"completed"
else|:
name|maxStatus
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|additionalMessage
operator|!=
literal|null
operator|&&
operator|!
name|additionalMessage
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|additionalMessage
operator|.
name|contains
argument_list|(
literal|"{course}"
argument_list|)
condition|)
name|additionalMessage
operator|=
name|additionalMessage
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|ca
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|additionalMessages
operator|.
name|add
argument_list|(
name|additionalMessage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxStatus
operator|!=
literal|null
condition|)
name|message
operator|=
literal|"<span class='"
operator|+
name|maxStatus
operator|+
literal|"'>"
operator|+
name|message
operator|+
literal|"</span>"
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|hasError
argument_list|()
condition|)
name|ca
operator|.
name|setError
argument_list|(
name|ca
operator|.
name|getError
argument_list|()
operator|+
literal|"\n"
operator|+
name|message
argument_list|)
expr_stmt|;
else|else
name|ca
operator|.
name|setError
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getSpecRegStatus
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setSpecRegStatus
argument_list|(
name|getStatus
argument_list|(
name|maxStatus
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPending
argument_list|(
name|maxStatus
argument_list|)
condition|)
name|ret
operator|.
name|addError
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|"MAXI"
argument_list|,
name|maxi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|addChange
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|drops
operator|.
name|containsKey
argument_list|(
name|course
argument_list|)
condition|)
block|{
for|for
control|(
name|Class_
name|clazz
range|:
name|drops
operator|.
name|get
argument_list|(
name|course
argument_list|)
control|)
block|{
name|ClassAssignment
name|ca
init|=
operator|new
name|ClassAssignment
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Change
argument_list|>
name|change
init|=
name|changes
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|ca
operator|.
name|setSpecRegOperation
argument_list|(
name|SpecialRegistrationOperation
operator|.
name|Drop
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatus
name|s
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Change
name|ch
range|:
name|change
control|)
if|if
condition|(
name|ch
operator|.
name|status
operator|!=
literal|null
condition|)
name|s
operator|=
name|combine
argument_list|(
name|s
argument_list|,
name|getStatus
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSpecRegStatus
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseAssigned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setClassId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSection
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getSection
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setSection
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setClassNumber
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubpart
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setExternalId
argument_list|(
name|clazz
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ca
operator|.
name|setParentSection
argument_list|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setParentSection
argument_list|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|.
name|getSectionNumberString
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
operator|!=
literal|null
condition|)
name|ca
operator|.
name|addNote
argument_list|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|Placement
name|placement
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
name|int
name|minLimit
init|=
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
operator|&&
name|placement
operator|!=
literal|null
condition|)
block|{
comment|// int roomLimit = Math.round((enrollment.getClazz().getRoomRatio() == null ? 1.0f : enrollment.getClazz().getRoomRatio()) * placement.getRoomSize());
name|int
name|roomLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|placement
operator|.
name|getRoomSize
argument_list|()
operator|/
operator|(
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|||
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|ca
operator|.
name|setCancelled
argument_list|(
name|clazz
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|clazz
operator|.
name|getEnrollment
argument_list|()
block|,
name|limit
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|ca
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setStart
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setLength
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setBreakTime
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setDatePattern
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Location
name|loc
range|:
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
control|)
name|ca
operator|.
name|addRoom
argument_list|(
name|loc
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|loc
operator|.
name|getLabelWithDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getDisplayInstructor
argument_list|()
condition|)
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
name|ca
operator|.
name|addInstructor
argument_list|(
name|nameFormat
operator|.
name|format
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|addInstructoEmail
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ca
operator|.
name|setCredit
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
name|ca
operator|.
name|setCredit
argument_list|(
name|credit
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|credit
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Float
name|creditOverride
init|=
name|clazz
operator|.
name|getCredit
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|creditOverride
operator|!=
literal|null
condition|)
name|ca
operator|.
name|setCredit
argument_list|(
name|FixedCreditUnitConfig
operator|.
name|formatCredit
argument_list|(
name|creditOverride
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setParentSection
argument_list|(
name|course
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|course
operator|.
name|getConsentType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Change
name|ch
range|:
name|change
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|err
range|:
name|ch
operator|.
name|errors
control|)
block|{
if|if
condition|(
literal|"TIME"
operator|.
name|equals
argument_list|(
name|err
operator|.
name|code
argument_list|)
condition|)
name|ret
operator|.
name|setHasTimeConflict
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"CLOS"
operator|.
name|equals
argument_list|(
name|err
operator|.
name|code
argument_list|)
condition|)
name|ret
operator|.
name|setHasSpaceConflict
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|err
operator|.
name|code
argument_list|)
operator|&&
name|maxi
operator|!=
literal|null
condition|)
continue|continue;
name|String
name|message
init|=
name|err
operator|.
name|message
decl_stmt|;
switch|switch
condition|(
name|getStatus
argument_list|(
name|ch
operator|.
name|status
argument_list|)
condition|)
block|{
case|case
name|Approved
case|:
name|message
operator|=
literal|"Approved: "
operator|+
name|message
expr_stmt|;
if|if
condition|(
name|excludeApprovedOrRejected
condition|)
continue|continue;
break|break;
case|case
name|Rejected
case|:
name|message
operator|=
literal|"Denied: "
operator|+
name|message
expr_stmt|;
if|if
condition|(
name|excludeApprovedOrRejected
condition|)
continue|continue;
break|break;
block|}
if|if
condition|(
name|SpecialRegistrationHelper
operator|.
name|hasLastNote
argument_list|(
name|ch
argument_list|)
condition|)
name|message
operator|+=
literal|"\n<span class='note'>"
operator|+
name|SpecialRegistrationHelper
operator|.
name|getLastNote
argument_list|(
name|ch
argument_list|)
operator|+
literal|"</span>"
expr_stmt|;
name|String
name|additionalMessage
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.note."
operator|+
name|err
operator|.
name|code
operator|+
literal|"."
operator|+
operator|(
name|ch
operator|.
name|status
operator|==
name|ChangeStatus
operator|.
name|approved
operator|&&
name|specialRequest
operator|.
name|completionStatus
operator|==
name|CompletionStatus
operator|.
name|completed
condition|?
literal|"completed"
else|:
name|ch
operator|.
name|status
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|additionalMessage
operator|!=
literal|null
operator|&&
operator|!
name|additionalMessage
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|additionalMessage
operator|.
name|contains
argument_list|(
literal|"{course}"
argument_list|)
condition|)
name|additionalMessage
operator|=
name|additionalMessage
operator|.
name|replace
argument_list|(
literal|"{course}"
argument_list|,
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
argument_list|)
expr_stmt|;
if|if
condition|(
name|additionalMessage
operator|.
name|contains
argument_list|(
literal|"{crn}"
argument_list|)
operator|&&
name|ch
operator|.
name|crn
operator|!=
literal|null
condition|)
name|additionalMessage
operator|=
name|additionalMessage
operator|.
name|replace
argument_list|(
literal|"{crn}"
argument_list|,
name|ch
operator|.
name|crn
argument_list|)
expr_stmt|;
if|if
condition|(
name|additionalMessage
operator|.
name|contains
argument_list|(
literal|"{currentGradeMode}"
argument_list|)
operator|&&
name|ch
operator|.
name|currentGradeMode
operator|!=
literal|null
condition|)
name|additionalMessage
operator|=
name|additionalMessage
operator|.
name|replace
argument_list|(
literal|"{currentGradeMode}"
argument_list|,
name|ch
operator|.
name|currentGradeMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|additionalMessage
operator|.
name|contains
argument_list|(
literal|"{selectedGradeMode}"
argument_list|)
operator|&&
name|ch
operator|.
name|selectedGradeMode
operator|!=
literal|null
condition|)
name|additionalMessage
operator|=
name|additionalMessage
operator|.
name|replace
argument_list|(
literal|"{selectedGradeMode}"
argument_list|,
name|ch
operator|.
name|selectedGradeMode
argument_list|)
expr_stmt|;
name|additionalMessages
operator|.
name|add
argument_list|(
name|additionalMessage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|.
name|status
operator|!=
literal|null
condition|)
name|message
operator|=
literal|"<span class='"
operator|+
name|ch
operator|.
name|status
operator|+
literal|"'>"
operator|+
name|message
operator|+
literal|"</span>"
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|hasError
argument_list|()
condition|)
name|ca
operator|.
name|setError
argument_list|(
name|ca
operator|.
name|getError
argument_list|()
operator|+
literal|"\n"
operator|+
name|message
argument_list|)
expr_stmt|;
else|else
name|ca
operator|.
name|setError
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setPinned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPending
argument_list|(
name|ch
operator|.
name|status
argument_list|)
condition|)
name|ret
operator|.
name|addError
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
argument_list|,
name|ch
operator|.
name|crn
argument_list|,
name|err
operator|.
name|code
argument_list|,
name|err
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|addChange
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|additionalMessages
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ret
operator|.
name|hasChanges
argument_list|()
condition|)
block|{
name|ClassAssignment
name|ca
init|=
name|ret
operator|.
name|getChanges
argument_list|()
operator|.
name|get
argument_list|(
name|ret
operator|.
name|getChanges
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|message
range|:
name|additionalMessages
control|)
block|{
name|message
operator|=
literal|"<span class='note'>"
operator|+
name|message
operator|+
literal|"</span>"
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|hasError
argument_list|()
condition|)
name|ca
operator|.
name|setError
argument_list|(
name|ca
operator|.
name|getError
argument_list|()
operator|+
literal|"\n"
operator|+
name|message
argument_list|)
expr_stmt|;
else|else
name|ca
operator|.
name|setError
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* 		List<XRequest> requests = getRequests(server, helper, student, adds, drops); 		checkRequests(server, helper, student, requests, errors, false, false); 		ret.setClassAssignments(GetAssignment.computeAssignment(server, helper, student, requests, null, errors, true)); 		if (helper.getAction().getEnrollmentCount()> 0) 			helper.getAction().getEnrollmentBuilder(helper.getAction().getEnrollmentCount() - 1).setType(OnlineSectioningLog.Enrollment.EnrollmentType.EXTERNAL); 		helper.getAction().clearRequest(); 		 		if (ret.hasClassAssignments()) 			for (CourseAssignment course: ret.getClassAssignments().getCourseAssignments()) { 				if (course.isFreeTime() || course.isTeachingAssignment()) continue; 				List<Class_> add = null; 				for (Map.Entry<CourseOffering, List<Class_>> e: adds.entrySet()) 					if (course.getCourseId().equals(e.getKey().getUniqueId())) { add = e.getValue(); break; } 				if (add != null) 					for (ClassAssignment ca: course.getClassAssignments()) 						if (ca.isSaved()) 							for (Class_ c: add) 								if (c.getUniqueId().equals(ca.getClassId())) ca.setSaved(false); 			} 		*/
name|ret
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setRequestId
argument_list|(
name|specialRequest
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setSubmitDate
argument_list|(
name|specialRequest
operator|.
name|dateCreated
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|specialRequest
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setNote
argument_list|(
name|specialRequest
operator|.
name|requestorNotes
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setStatus
argument_list|(
name|getStatus
argument_list|(
name|specialRequest
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setCanCancel
argument_list|(
name|canCancel
argument_list|(
name|specialRequest
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|protected
name|Gson
name|getGson
parameter_list|(
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|GsonBuilder
name|builder
init|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|DateTime
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|toString
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DateTime
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|Date
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
operator|.
name|format
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Date
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
try|try
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
operator|.
name|parse
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JsonParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|builder
operator|.
name|setPrettyPrinting
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
name|retrieveAllRegistrations
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|isSpecialRegistrationEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|)
condition|)
return|return
literal|null
return|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatusResponse
name|response
init|=
operator|(
name|SpecialRegistrationStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUpdateUniTimeStatuses
argument_list|()
operator|&&
name|response
operator|.
name|data
operator|!=
literal|null
operator|&&
name|response
operator|.
name|data
operator|.
name|requests
operator|!=
literal|null
operator|&&
operator|!
name|response
operator|.
name|data
operator|.
name|requests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|studentChanged
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|requestIds
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|response
operator|.
name|data
operator|.
name|requests
control|)
block|{
name|requestIds
operator|.
name|add
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
block|{
comment|// max credit request -> get status
name|ChangeStatus
name|maxiStatus
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|crn
operator|==
literal|null
operator|&&
name|ch
operator|.
name|errors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ChangeError
name|e
range|:
name|ch
operator|.
name|errors
control|)
block|{
if|if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|code
argument_list|)
condition|)
name|maxiStatus
operator|=
name|ch
operator|.
name|status
expr_stmt|;
block|}
block|}
block|}
comment|// check student status
if|if
condition|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|regRequestId
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|&&
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|!=
operator|(
name|maxiStatus
operator|!=
literal|null
condition|?
name|toStatus
argument_list|(
name|maxiStatus
argument_list|)
else|:
name|toStatus
argument_list|(
name|r
argument_list|)
operator|)
condition|)
block|{
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|setStatus
argument_list|(
name|maxiStatus
operator|!=
literal|null
condition|?
name|toStatus
argument_list|(
name|maxiStatus
argument_list|)
else|:
name|toStatus
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|Student
name|dbStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbStudent
operator|!=
literal|null
condition|)
block|{
name|dbStudent
operator|.
name|setOverrideStatus
argument_list|(
name|maxiStatus
operator|!=
literal|null
condition|?
name|toStatus
argument_list|(
name|maxiStatus
argument_list|)
else|:
name|toStatus
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbStudent
argument_list|)
expr_stmt|;
block|}
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// check other statuses
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SpecialRegistrationStatus
argument_list|>
name|course2status
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SpecialRegistrationStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|subject
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|courseNbr
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|errors
operator|!=
literal|null
operator|&&
operator|!
name|ch
operator|.
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|course
init|=
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|status
operator|!=
literal|null
condition|)
block|{
name|SpecialRegistrationStatus
name|s
init|=
name|course2status
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|course2status
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|s
operator|==
literal|null
condition|?
name|getStatus
argument_list|(
name|ch
operator|.
name|status
argument_list|)
else|:
name|combine
argument_list|(
name|s
argument_list|,
name|getStatus
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SpecialRegistrationStatus
argument_list|>
name|e
range|:
name|course2status
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|XCourseRequest
name|cr
init|=
name|student
operator|.
name|getRequestForCourseName
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cr
operator|!=
literal|null
condition|)
block|{
name|XCourseId
name|id
init|=
name|cr
operator|.
name|getCourseName
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|XOverride
name|override
init|=
name|cr
operator|.
name|getOverride
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|override
operator|!=
literal|null
operator|&&
name|r
operator|.
name|regRequestId
operator|.
name|equals
argument_list|(
name|override
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|&&
name|toStatus
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|!=
name|override
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|override
operator|.
name|setStatus
argument_list|(
name|toStatus
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CourseDemand
name|dbCourseDemand
init|=
name|CourseDemandDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|cr
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbCourseDemand
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CourseRequest
name|dbCourseRequest
range|:
name|dbCourseDemand
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|dbCourseRequest
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|dbCourseRequest
operator|.
name|setOverrideStatus
argument_list|(
name|toStatus
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbCourseRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|requestIds
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setMaxCreditOverride
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Student
name|dbStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbStudent
operator|!=
literal|null
condition|)
block|{
name|dbStudent
operator|.
name|setOverrideStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|dbStudent
operator|.
name|setOverrideMaxCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|dbStudent
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|dbStudent
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbStudent
argument_list|)
expr_stmt|;
block|}
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|XRequest
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|request
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|hasOverrides
argument_list|()
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|XCourseId
argument_list|,
name|XOverride
argument_list|>
argument_list|>
name|i
init|=
name|cr
operator|.
name|getOverrides
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|XCourseId
argument_list|,
name|XOverride
argument_list|>
name|e
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|requestIds
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|CourseDemand
name|dbCourseDemand
init|=
name|CourseDemandDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|cr
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbCourseDemand
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CourseRequest
name|dbCourseRequest
range|:
name|dbCourseDemand
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|dbCourseRequest
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|dbCourseRequest
operator|.
name|setOverrideStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|dbCourseRequest
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|dbCourseRequest
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|dbCourseRequest
operator|.
name|setOverrideIntent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbCourseRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|studentChanged
condition|)
block|{
name|server
operator|.
name|update
argument_list|(
name|student
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|ResponseStatus
operator|.
name|success
operator|==
name|response
operator|.
name|status
operator|&&
name|response
operator|.
name|data
operator|!=
literal|null
operator|&&
name|response
operator|.
name|data
operator|.
name|requests
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
argument_list|(
name|response
operator|.
name|data
operator|.
name|requests
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|specialRequest
range|:
name|response
operator|.
name|data
operator|.
name|requests
control|)
if|if
condition|(
name|specialRequest
operator|.
name|regRequestId
operator|!=
literal|null
operator|&&
operator|!
name|isCancelled
argument_list|(
name|specialRequest
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|specialRequest
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkEligibility
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|EligibilityCheck
name|check
parameter_list|,
name|XStudent
name|student
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|student
operator|==
literal|null
operator|||
operator|!
name|isSpecialRegistrationEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|)
condition|)
block|{
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_SPECREG
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
operator|&&
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.allowExtended"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_SPECREG
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckEligibility
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|CheckEligibilityResponse
name|response
init|=
operator|(
name|CheckEligibilityResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|CheckEligibilityResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|CheckEligibilityResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|check
operator|.
name|setOverrideRequestDisclaimer
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.disclaimer"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|ResponseStatus
operator|.
name|success
operator|==
name|response
operator|.
name|status
condition|)
block|{
name|boolean
name|eligible
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|data
operator|==
literal|null
operator|||
name|response
operator|.
name|data
operator|.
name|eligible
operator|==
literal|null
operator|||
operator|!
name|response
operator|.
name|data
operator|.
name|eligible
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|eligible
operator|=
literal|false
expr_stmt|;
block|}
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_SPECREG
argument_list|,
name|eligible
argument_list|)
expr_stmt|;
if|if
condition|(
name|eligible
condition|)
block|{
name|check
operator|.
name|setOverrides
argument_list|(
name|response
operator|.
name|overrides
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|SR_TIME_CONF
argument_list|,
name|check
operator|.
name|hasOverride
argument_list|(
literal|"TIME"
argument_list|)
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|SR_LIMIT_CONF
argument_list|,
name|check
operator|.
name|hasOverride
argument_list|(
literal|"CLOS"
argument_list|)
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_CHANGE_GRADE_MODE
argument_list|,
name|check
operator|.
name|hasOverride
argument_list|(
literal|"GMODE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_SPECREG
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|hasNonCanceledRequest
operator|!=
literal|null
operator|&&
name|response
operator|.
name|hasNonCanceledRequest
operator|.
name|booleanValue
argument_list|()
condition|)
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|HAS_SPECREG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|maxCredit
operator|!=
literal|null
operator|&&
operator|!
name|response
operator|.
name|maxCredit
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
condition|)
block|{
name|Student
name|dbStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbStudent
operator|!=
literal|null
condition|)
block|{
name|dbStudent
operator|.
name|setMaxCredit
argument_list|(
name|response
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbStudent
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|student
operator|.
name|setMaxCredit
argument_list|(
name|response
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
name|server
operator|.
name|update
argument_list|(
name|student
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|isSpecialRegistrationEnabled
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|StudentSectioningStatus
name|status
init|=
name|student
operator|.
name|getEffectiveStatus
argument_list|()
decl_stmt|;
return|return
name|status
operator|==
literal|null
operator|||
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|specreg
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isSpecialRegistrationEnabled
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|)
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|String
name|status
init|=
name|student
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
name|status
operator|=
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
literal|true
return|;
name|StudentSectioningStatus
name|dbStatus
init|=
name|StudentSectioningStatus
operator|.
name|getStatus
argument_list|(
name|status
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|dbStatus
operator|!=
literal|null
operator|&&
name|dbStatus
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|specreg
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CancelSpecialRegistrationResponse
name|cancelRegistration
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|CancelSpecialRegistrationRequest
name|request
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCancelSpecialRegistration
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"regRequestId"
argument_list|,
name|request
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"regRequestId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|request
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationCancelResponse
name|response
init|=
operator|(
name|SpecialRegistrationCancelResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationCancelResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationCancelResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|CancelSpecialRegistrationResponse
name|ret
init|=
operator|new
name|CancelSpecialRegistrationResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|setSuccess
argument_list|(
name|ResponseStatus
operator|.
name|success
operator|==
name|response
operator|.
name|status
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setMessage
argument_list|(
name|response
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUpdateUniTimeStatuses
argument_list|()
operator|&&
name|ret
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|boolean
name|studentChanged
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getRequestId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|)
block|{
name|XOverride
name|override
init|=
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
decl_stmt|;
name|student
operator|.
name|setMaxCreditOverride
argument_list|(
operator|new
name|XOverride
argument_list|(
name|override
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|override
operator|.
name|getTimeStamp
argument_list|()
argument_list|,
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Student
name|dbStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbStudent
operator|!=
literal|null
condition|)
block|{
name|dbStudent
operator|.
name|setOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbStudent
argument_list|)
expr_stmt|;
block|}
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|XRequest
name|xr
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|xr
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|xr
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|hasOverrides
argument_list|()
condition|)
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|XCourseId
argument_list|,
name|XOverride
argument_list|>
name|e
range|:
name|cr
operator|.
name|getOverrides
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getRequestId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|)
block|{
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|setStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|CourseDemand
name|dbCourseDemand
init|=
name|CourseDemandDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|cr
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbCourseDemand
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CourseRequest
name|dbCourseRequest
range|:
name|dbCourseDemand
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|dbCourseRequest
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|dbCourseRequest
operator|.
name|setOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbCourseRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|studentChanged
condition|)
block|{
name|server
operator|.
name|update
argument_list|(
name|student
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|String
name|getBannerSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.site"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerUser
parameter_list|(
name|boolean
name|admin
parameter_list|)
block|{
if|if
condition|(
name|admin
condition|)
block|{
name|String
name|user
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.admin.user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
return|return
name|user
return|;
block|}
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.user"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerPassword
parameter_list|(
name|boolean
name|admin
parameter_list|)
block|{
if|if
condition|(
name|admin
condition|)
block|{
name|String
name|pwd
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.admin.password"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pwd
operator|!=
literal|null
condition|)
return|return
name|pwd
return|;
block|}
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.password"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getAdminParameter
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.xe.adminParameter"
argument_list|,
literal|"persona"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RetrieveAvailableGradeModesResponse
name|retrieveAvailableGradeModes
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckStudentGradeModes
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationCheckGradeModesResponse
name|response
init|=
operator|(
name|SpecialRegistrationCheckGradeModesResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationCheckGradeModesResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationCheckGradeModesResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|response
operator|.
name|status
operator|||
name|response
operator|.
name|data
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|response
operator|.
name|message
operator|==
literal|null
operator|||
name|response
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to check availabel grade modes."
else|:
name|response
operator|.
name|message
argument_list|)
throw|;
name|RetrieveAvailableGradeModesResponse
name|ret
init|=
operator|new
name|RetrieveAvailableGradeModesResponse
argument_list|()
decl_stmt|;
name|String
name|honorsGradeMode
init|=
name|getResetGradeModesRegExp
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|data
operator|.
name|gradingModes
operator|!=
literal|null
condition|)
for|for
control|(
name|SpecialRegistrationCurrentGradeMode
name|m
range|:
name|response
operator|.
name|data
operator|.
name|gradingModes
control|)
block|{
name|SpecialRegistrationGradeModeChanges
name|mode
init|=
operator|new
name|SpecialRegistrationGradeModeChanges
argument_list|()
decl_stmt|;
name|mode
operator|.
name|setCurrentGradeMode
argument_list|(
operator|new
name|SpecialRegistrationGradeMode
argument_list|(
name|m
operator|.
name|gradingMode
argument_list|,
name|m
operator|.
name|gradingModeDescription
argument_list|,
name|honorsGradeMode
operator|!=
literal|null
operator|&&
operator|!
name|honorsGradeMode
operator|.
name|isEmpty
argument_list|()
operator|&&
name|m
operator|.
name|gradingMode
operator|.
name|matches
argument_list|(
name|honorsGradeMode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|availableGradingModes
operator|!=
literal|null
condition|)
for|for
control|(
name|SpecialRegistrationAvailableGradeMode
name|av
range|:
name|m
operator|.
name|availableGradingModes
control|)
block|{
name|SpecialRegistrationGradeMode
name|availableMode
init|=
operator|new
name|SpecialRegistrationGradeMode
argument_list|(
name|av
operator|.
name|gradingMode
argument_list|,
name|av
operator|.
name|gradingModeDescription
argument_list|,
name|honorsGradeMode
operator|!=
literal|null
operator|&&
operator|!
name|honorsGradeMode
operator|.
name|isEmpty
argument_list|()
operator|&&
name|av
operator|.
name|gradingMode
operator|.
name|matches
argument_list|(
name|honorsGradeMode
argument_list|)
argument_list|)
decl_stmt|;
name|availableMode
operator|.
name|setOriginalGradeMode
argument_list|(
name|m
operator|.
name|gradingMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|av
operator|.
name|approvals
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|ap
range|:
name|av
operator|.
name|approvals
control|)
name|availableMode
operator|.
name|addApproval
argument_list|(
name|ap
argument_list|)
expr_stmt|;
name|availableMode
operator|.
name|setDisclaimer
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.gradeModeDisclaimer."
operator|+
name|av
operator|.
name|gradingMode
argument_list|)
argument_list|)
expr_stmt|;
name|mode
operator|.
name|addAvailableChange
argument_list|(
name|availableMode
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|m
operator|.
name|crn
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|ChangeGradeModesResponse
name|changeGradeModes
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|ChangeGradeModesRequest
name|request
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ChangeGradeModesResponse
name|ret
init|=
operator|new
name|ChangeGradeModesResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasGradeModeChanges
argument_list|(
literal|false
argument_list|)
condition|)
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getBannerSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setChallengeResponse
argument_list|(
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
name|getBannerUser
argument_list|(
literal|true
argument_list|)
argument_list|,
name|getBannerPassword
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|XEInterface
operator|.
name|RegisterResponse
name|original
init|=
literal|null
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"bannerId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"bannerId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|param
init|=
name|getAdminParameter
argument_list|()
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
name|param
argument_list|,
literal|"SB"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|param
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"SB"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|code2desc
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|XEInterface
operator|.
name|ErrorResponse
name|response
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|ErrorResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|ErrorResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"exception"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|XEInterface
operator|.
name|Error
name|error
init|=
name|response
operator|.
name|getError
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|message
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|message
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|description
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|description
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|errorMessage
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|errorMessage
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|exception
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
finally|finally
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
name|current
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|List
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|TYPE_LIST
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"xe_get_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
operator|!
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
name|original
operator|=
name|current
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
operator|||
operator|!
name|original
operator|.
name|validStudent
condition|)
block|{
name|String
name|reason
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
operator|&&
name|original
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|m
range|:
name|original
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
name|reason
operator|=
name|m
expr_stmt|;
else|else
name|reason
operator|+=
literal|"\n"
operator|+
name|m
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reason
operator|==
literal|null
operator|||
name|reason
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reason
operator|=
literal|"Failed to check student registration eligility."
expr_stmt|;
block|}
throw|throw
operator|new
name|SectioningException
argument_list|(
name|reason
argument_list|)
throw|;
block|}
name|XEInterface
operator|.
name|RegisterRequest
name|req
init|=
operator|new
name|XEInterface
operator|.
name|RegisterRequest
argument_list|(
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|req
operator|.
name|courseReferenceNumbers
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseReferenceNumber
argument_list|>
argument_list|()
expr_stmt|;
name|req
operator|.
name|actionsAndOptions
operator|=
operator|new
name|ArrayList
argument_list|<
name|RegisterAction
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|original
operator|.
name|registrations
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|original
operator|.
name|registrations
control|)
block|{
if|if
condition|(
name|reg
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
name|req
operator|.
name|courseReferenceNumbers
operator|.
name|add
argument_list|(
operator|new
name|CourseReferenceNumber
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
argument_list|)
expr_stmt|;
name|SpecialRegistrationGradeModeChange
name|mode
init|=
name|request
operator|.
name|getChange
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
literal|null
operator|&&
operator|!
name|mode
operator|.
name|hasApprovals
argument_list|()
condition|)
block|{
name|boolean
name|allowed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|reg
operator|.
name|registrationGradingModes
operator|!=
literal|null
condition|)
for|for
control|(
name|RegistrationGradingMode
name|m
range|:
name|reg
operator|.
name|registrationGradingModes
control|)
if|if
condition|(
name|mode
operator|.
name|getSelectedGradeMode
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|gradingMode
argument_list|)
condition|)
block|{
name|allowed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|allowed
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|mode
operator|.
name|getSelectedGradeModeDescription
argument_list|()
operator|+
literal|" is not allowed for "
operator|+
name|reg
operator|.
name|courseReferenceNumber
operator|+
literal|"."
argument_list|)
throw|;
name|RegisterAction
name|action
init|=
operator|new
name|RegisterAction
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|)
decl_stmt|;
name|action
operator|.
name|selectedGradingMode
operator|=
name|mode
operator|.
name|getSelectedGradeMode
argument_list|()
expr_stmt|;
name|req
operator|.
name|actionsAndOptions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|code2desc
operator|.
name|put
argument_list|(
name|mode
operator|.
name|getSelectedGradeMode
argument_list|()
argument_list|,
name|mode
operator|.
name|getSelectedGradeModeDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|req
operator|.
name|actionsAndOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"xe_request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|RegisterRequest
argument_list|>
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|XEInterface
operator|.
name|ErrorResponse
name|response
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|ErrorResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|ErrorResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"exception"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|XEInterface
operator|.
name|Error
name|error
init|=
name|response
operator|.
name|getError
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|message
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|message
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|description
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|description
argument_list|)
throw|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|errorMessage
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|error
operator|.
name|errorMessage
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|exception
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
finally|finally
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
block|}
comment|// Finally, check the response
name|XEInterface
operator|.
name|RegisterResponse
name|response
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|XEInterface
operator|.
name|RegisterResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|RegisterResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"xe_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|==
literal|null
operator|||
operator|!
name|response
operator|.
name|validStudent
condition|)
block|{
name|String
name|reason
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|failureReasons
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|m
range|:
name|response
operator|.
name|failureReasons
control|)
block|{
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
name|reason
operator|=
name|m
expr_stmt|;
else|else
name|reason
operator|+=
literal|"\n"
operator|+
name|m
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SectioningException
argument_list|(
name|reason
operator|==
literal|null
condition|?
literal|"Failed to change grade modes."
else|:
name|reason
argument_list|)
throw|;
block|}
if|if
condition|(
name|response
operator|.
name|registrations
operator|!=
literal|null
condition|)
block|{
name|String
name|honorsGradeMode
init|=
name|getResetGradeModesRegExp
argument_list|()
decl_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|Registration
name|reg
range|:
name|response
operator|.
name|registrations
control|)
block|{
if|if
condition|(
literal|"Registered"
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|statusDescription
argument_list|)
condition|)
block|{
if|if
condition|(
name|reg
operator|.
name|gradingMode
operator|!=
literal|null
condition|)
block|{
name|String
name|desc
init|=
name|code2desc
operator|.
name|get
argument_list|(
name|reg
operator|.
name|gradingMode
argument_list|)
decl_stmt|;
name|ret
operator|.
name|addGradeMode
argument_list|(
name|reg
operator|.
name|courseReferenceNumber
argument_list|,
name|reg
operator|.
name|gradingMode
argument_list|,
name|desc
operator|!=
literal|null
condition|?
name|desc
else|:
name|reg
operator|.
name|gradingModeDescription
argument_list|,
name|honorsGradeMode
operator|!=
literal|null
operator|&&
operator|!
name|honorsGradeMode
operator|.
name|isEmpty
argument_list|()
operator|&&
name|reg
operator|.
name|gradingMode
operator|.
name|matches
argument_list|(
name|honorsGradeMode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasGradeModeChanges
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SpecialRegistrationRequest
name|req
init|=
operator|new
name|SpecialRegistrationRequest
argument_list|()
decl_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|req
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|req
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|req
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|req
operator|.
name|changes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
expr_stmt|;
comment|/* 				Set<String> crns = new HashSet<String>(); 				for (XRequest r: student.getRequests()) { 					if (r instanceof XCourseRequest) { 						XCourseRequest cr = (XCourseRequest)r; 						if (cr.getEnrollment() != null) { 							XEnrollment en = cr.getEnrollment(); 							XOffering offering = server.getOffering(en.getOfferingId()); 							XCourse course = offering.getCourse(en.getCourseId()); 							for (Long cid: en.getSectionIds()) { 								XSection section = offering.getSection(cid); 								String crn = section.getExternalId(en.getCourseId()); 								if (crn != null&& crns.add(crn)) {  									SpecialRegistrationGradeModeChange m = request.getChange(crn); 									if (m != null&& m.hasApprovals()) { 										Change ch = new Change(); 										ch.courseNbr = course.getCourseNumber(); 										ch.subject = course.getSubjectArea(); 										ch.crn = crn; 										ch.operation = ChangeOperation.CHGMODE; 										ch.credit = course.getCreditAbbv(); 										ch.errors = new ArrayList<ChangeError>(); 										ch.selectedGradeMode = m.getSelectedGradeMode(); 										ch.selectedGradeModeDescription = m.getSelectedGradeModeDescription(); 										ch.currentGradeMode = m.getOriginalGradeMode(); 										ChangeError err = new ChangeError(); 										err.code = "GMODE"; 										err.message = "Grade Mode Change: " + m.getSelectedGradeModeDescription(); 										ch.errors.add(err); 										req.changes.add(ch); 									} 								} 							} 						} 					} 				} 				*/
for|for
control|(
name|SpecialRegistrationGradeModeChange
name|change
range|:
name|request
operator|.
name|getChanges
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|change
operator|.
name|hasApprovals
argument_list|()
condition|)
continue|continue;
name|String
name|crns
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|crn
range|:
name|change
operator|.
name|getCRNs
argument_list|()
control|)
if|if
condition|(
name|crns
operator|==
literal|null
condition|)
name|crns
operator|=
name|crn
expr_stmt|;
else|else
name|crns
operator|+=
literal|","
operator|+
name|crn
expr_stmt|;
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|change
operator|.
name|getCourse
argument_list|()
expr_stmt|;
name|ch
operator|.
name|subject
operator|=
name|change
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
name|crns
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|CHGMODE
expr_stmt|;
name|ch
operator|.
name|credit
operator|=
name|change
operator|.
name|getCredit
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
operator|.
name|credit
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|credit
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
operator|>
literal|0
condition|)
name|ch
operator|.
name|credit
operator|=
name|ch
operator|.
name|credit
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ch
operator|.
name|credit
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|.
name|errors
operator|=
operator|new
name|ArrayList
argument_list|<
name|ChangeError
argument_list|>
argument_list|()
expr_stmt|;
name|ch
operator|.
name|selectedGradeMode
operator|=
name|change
operator|.
name|getSelectedGradeMode
argument_list|()
expr_stmt|;
name|ch
operator|.
name|selectedGradeModeDescription
operator|=
name|change
operator|.
name|getSelectedGradeModeDescription
argument_list|()
expr_stmt|;
name|ch
operator|.
name|currentGradeMode
operator|=
name|change
operator|.
name|getOriginalGradeMode
argument_list|()
expr_stmt|;
name|ChangeError
name|err
init|=
operator|new
name|ChangeError
argument_list|()
decl_stmt|;
name|err
operator|.
name|code
operator|=
literal|"GMODE"
expr_stmt|;
name|err
operator|.
name|message
operator|=
literal|"Grade Mode Change: "
operator|+
name|change
operator|.
name|getSelectedGradeModeDescription
argument_list|()
expr_stmt|;
name|ch
operator|.
name|errors
operator|.
name|add
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|req
operator|.
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
name|req
operator|.
name|mode
operator|=
name|getSpecialRegistrationMode
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|requestorId
operator|=
name|getRequestorId
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|requestorRole
operator|=
name|getRequestorType
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|req
operator|.
name|requestorNotes
operator|=
name|request
operator|.
name|getNote
argument_list|()
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|changes
operator|!=
literal|null
operator|&&
operator|!
name|req
operator|.
name|changes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteSubmitRegistration
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationRequest
argument_list|>
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationResponseList
name|response
init|=
operator|(
name|SpecialRegistrationResponseList
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationResponseList
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationResponseList
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreg_response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|data
operator|!=
literal|null
operator|&&
operator|!
name|response
operator|.
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|SubmitRegistrationResponse
name|r
range|:
name|response
operator|.
name|data
control|)
block|{
if|if
condition|(
name|r
operator|.
name|requestorNotes
operator|==
literal|null
condition|)
name|r
operator|.
name|requestorNotes
operator|=
name|request
operator|.
name|getNote
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
operator|&&
operator|!
name|ch
operator|.
name|errors
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ch
operator|.
name|status
operator|==
literal|null
condition|)
name|ch
operator|.
name|status
operator|=
name|ChangeStatus
operator|.
name|inProgress
expr_stmt|;
name|ret
operator|.
name|addRequest
argument_list|(
name|convert
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|response
operator|.
name|cancelledRequests
operator|!=
literal|null
condition|)
for|for
control|(
name|CancelledRequest
name|c
range|:
name|response
operator|.
name|cancelledRequests
control|)
name|ret
operator|.
name|addCancelRequestId
argument_list|(
name|c
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

