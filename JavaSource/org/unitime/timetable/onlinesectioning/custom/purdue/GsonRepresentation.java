begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|representation
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|representation
operator|.
name|WriterRepresentation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|stream
operator|.
name|JsonReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|stream
operator|.
name|JsonWriter
import|;
end_import

begin_class
specifier|public
class|class
name|GsonRepresentation
parameter_list|<
name|T
parameter_list|>
extends|extends
name|WriterRepresentation
block|{
specifier|private
name|GsonBuilder
name|iBuilder
init|=
literal|null
decl_stmt|;
specifier|private
name|Representation
name|iRepresentation
init|=
literal|null
decl_stmt|;
specifier|private
name|T
name|iObject
init|=
literal|null
decl_stmt|;
specifier|private
name|Type
name|iObjectType
init|=
literal|null
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|T
argument_list|>
name|iObjectClass
init|=
literal|null
decl_stmt|;
specifier|public
name|GsonRepresentation
parameter_list|(
name|Representation
name|representation
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|objectClass
parameter_list|)
block|{
name|super
argument_list|(
name|representation
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|iObject
operator|=
literal|null
expr_stmt|;
name|iObjectClass
operator|=
name|objectClass
expr_stmt|;
name|iRepresentation
operator|=
name|representation
expr_stmt|;
block|}
specifier|public
name|GsonRepresentation
parameter_list|(
name|Representation
name|representation
parameter_list|,
name|Type
name|objectType
parameter_list|)
block|{
name|super
argument_list|(
name|representation
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|iObject
operator|=
literal|null
expr_stmt|;
name|iObjectType
operator|=
name|objectType
expr_stmt|;
name|iRepresentation
operator|=
name|representation
expr_stmt|;
block|}
specifier|public
name|GsonRepresentation
parameter_list|(
name|T
name|object
parameter_list|)
block|{
name|super
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|iObject
operator|=
name|object
expr_stmt|;
name|iObjectClass
operator|=
operator|(
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
operator|(
operator|(
name|object
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|object
operator|.
name|getClass
argument_list|()
operator|)
operator|)
expr_stmt|;
block|}
specifier|public
name|GsonBuilder
name|getBuilder
parameter_list|()
block|{
if|if
condition|(
name|iBuilder
operator|==
literal|null
condition|)
block|{
name|iBuilder
operator|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|DateTime
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|toString
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DateTime
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|Date
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
operator|.
name|format
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Date
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
try|try
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
operator|.
name|parse
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JsonParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|iBuilder
return|;
block|}
specifier|public
name|T
name|getObject
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|iObject
operator|==
literal|null
operator|&&
name|iRepresentation
operator|!=
literal|null
operator|&&
name|iRepresentation
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|JsonReader
name|reader
init|=
operator|new
name|JsonReader
argument_list|(
name|iRepresentation
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|iObjectType
operator|!=
literal|null
condition|)
return|return
name|getBuilder
argument_list|()
operator|.
name|create
argument_list|()
operator|.
name|fromJson
argument_list|(
name|reader
argument_list|,
name|iObjectType
argument_list|)
return|;
else|else
return|return
name|getBuilder
argument_list|()
operator|.
name|create
argument_list|()
operator|.
name|fromJson
argument_list|(
name|reader
argument_list|,
name|iObjectClass
argument_list|)
return|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|iRepresentation
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|iObject
return|;
block|}
specifier|public
name|Class
argument_list|<
name|T
argument_list|>
name|getObjectClass
parameter_list|()
block|{
return|return
name|iObjectClass
return|;
block|}
specifier|public
name|void
name|setObjectClass
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|objectClass
parameter_list|)
block|{
name|iObjectClass
operator|=
name|objectClass
expr_stmt|;
block|}
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|iObjectType
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|iObjectType
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|void
name|setObject
parameter_list|(
name|T
name|object
parameter_list|)
block|{
name|iObject
operator|=
name|object
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|iRepresentation
operator|!=
literal|null
condition|)
block|{
name|iRepresentation
operator|.
name|write
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iObjectType
operator|!=
literal|null
condition|)
name|getBuilder
argument_list|()
operator|.
name|create
argument_list|()
operator|.
name|toJson
argument_list|(
name|iObject
argument_list|,
name|iObjectType
argument_list|,
operator|new
name|JsonWriter
argument_list|(
name|writer
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|getBuilder
argument_list|()
operator|.
name|create
argument_list|()
operator|.
name|toJson
argument_list|(
name|iObject
argument_list|,
name|iObjectClass
argument_list|,
operator|new
name|JsonWriter
argument_list|(
name|writer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

