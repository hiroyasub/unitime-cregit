begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AdvisorCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
operator|.
name|Critical
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CriticalCoursesProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XAdvisorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudentId
import|;
end_import

begin_class
specifier|public
class|class
name|AdvisorCriticalCourses
implements|implements
name|CriticalCoursesProvider
block|{
specifier|private
name|CriticalCoursesProvider
name|iParent
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AdvisorCriticalCourses
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|AdvisorCriticalCourses
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|String
name|fallback
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.advisorCriticalCourses.fallback"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fallback
operator|!=
literal|null
operator|&&
operator|!
name|fallback
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|iParent
operator|=
operator|(
name|CriticalCoursesProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|fallback
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create critical courses fallback."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|CriticalCourses
name|getCriticalCourses
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudentId
name|studentId
parameter_list|)
block|{
return|return
name|getCriticalCourses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|studentId
argument_list|,
name|helper
operator|.
name|getAction
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CriticalCourses
name|getCriticalCourses
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudentId
name|studentId
parameter_list|,
name|Builder
name|action
parameter_list|)
block|{
name|XStudent
name|student
init|=
operator|(
name|studentId
operator|instanceof
name|XStudent
condition|?
operator|(
name|XStudent
operator|)
name|studentId
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|studentId
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
operator|(
name|iParent
operator|==
literal|null
condition|?
literal|null
else|:
name|iParent
operator|.
name|getCriticalCourses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|action
argument_list|)
operator|)
return|;
name|CourseDemand
operator|.
name|Critical
name|critical
init|=
name|CourseDemand
operator|.
name|Critical
operator|.
name|fromText
argument_list|(
name|ApplicationProperty
operator|.
name|AdvisorCourseRequestsAllowCritical
operator|.
name|valueOfSession
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|CriticalCoursesImpl
name|cc
init|=
operator|new
name|CriticalCoursesImpl
argument_list|(
name|critical
argument_list|,
name|iParent
operator|==
literal|null
condition|?
literal|null
else|:
name|iParent
operator|.
name|getCriticalCourses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|action
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|.
name|hasAdvisorRequests
argument_list|()
condition|)
block|{
for|for
control|(
name|XAdvisorRequest
name|ar
range|:
name|student
operator|.
name|getAdvisorRequests
argument_list|()
control|)
block|{
switch|switch
condition|(
name|critical
condition|)
block|{
case|case
name|NORMAL
case|:
comment|// use no-subs
if|if
condition|(
name|ar
operator|.
name|isNoSub
argument_list|()
operator|&&
operator|!
name|ar
operator|.
name|isSubstitute
argument_list|()
operator|&&
name|ar
operator|.
name|hasCourseId
argument_list|()
operator|&&
name|ar
operator|.
name|getAlternative
argument_list|()
operator|==
literal|0
condition|)
block|{
name|cc
operator|.
name|addVital
argument_list|(
name|ar
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XAdvisorRequest
name|alt
range|:
name|student
operator|.
name|getAdvisorRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|alt
operator|.
name|getPriority
argument_list|()
operator|==
name|ar
operator|.
name|getPriority
argument_list|()
operator|&&
name|alt
operator|.
name|getAlternative
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|alt
operator|.
name|isSubstitute
argument_list|()
condition|)
block|{
name|cc
operator|.
name|addVital
argument_list|(
name|alt
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|CRITICAL
case|:
if|if
condition|(
name|ar
operator|.
name|isCritical
argument_list|()
operator|&&
operator|!
name|ar
operator|.
name|isSubstitute
argument_list|()
operator|&&
name|ar
operator|.
name|hasCourseId
argument_list|()
operator|&&
name|ar
operator|.
name|getAlternative
argument_list|()
operator|==
literal|0
condition|)
block|{
name|cc
operator|.
name|addCritical
argument_list|(
name|ar
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XAdvisorRequest
name|alt
range|:
name|student
operator|.
name|getAdvisorRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|alt
operator|.
name|getPriority
argument_list|()
operator|==
name|ar
operator|.
name|getPriority
argument_list|()
operator|&&
name|alt
operator|.
name|getAlternative
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|alt
operator|.
name|isSubstitute
argument_list|()
condition|)
block|{
name|cc
operator|.
name|addCritical
argument_list|(
name|alt
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|IMPORTANT
case|:
if|if
condition|(
name|ar
operator|.
name|isCritical
argument_list|()
operator|&&
operator|!
name|ar
operator|.
name|isSubstitute
argument_list|()
operator|&&
name|ar
operator|.
name|hasCourseId
argument_list|()
operator|&&
name|ar
operator|.
name|getAlternative
argument_list|()
operator|==
literal|0
condition|)
block|{
name|cc
operator|.
name|addImportant
argument_list|(
name|ar
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XAdvisorRequest
name|alt
range|:
name|student
operator|.
name|getAdvisorRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|alt
operator|.
name|getPriority
argument_list|()
operator|==
name|ar
operator|.
name|getPriority
argument_list|()
operator|&&
name|alt
operator|.
name|getAlternative
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|alt
operator|.
name|isSubstitute
argument_list|()
condition|)
block|{
name|cc
operator|.
name|addImportant
argument_list|(
name|alt
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|VITAL
case|:
if|if
condition|(
name|ar
operator|.
name|isCritical
argument_list|()
operator|&&
operator|!
name|ar
operator|.
name|isSubstitute
argument_list|()
operator|&&
name|ar
operator|.
name|hasCourseId
argument_list|()
operator|&&
name|ar
operator|.
name|getAlternative
argument_list|()
operator|==
literal|0
condition|)
block|{
name|cc
operator|.
name|addVital
argument_list|(
name|ar
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XAdvisorRequest
name|alt
range|:
name|student
operator|.
name|getAdvisorRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|alt
operator|.
name|getPriority
argument_list|()
operator|==
name|ar
operator|.
name|getPriority
argument_list|()
operator|&&
name|alt
operator|.
name|getAlternative
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|alt
operator|.
name|isSubstitute
argument_list|()
condition|)
block|{
name|cc
operator|.
name|addVital
argument_list|(
name|alt
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
block|}
block|}
block|}
return|return
name|cc
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
if|if
condition|(
name|iParent
operator|!=
literal|null
condition|)
name|iParent
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|static
class|class
name|CriticalCoursesImpl
implements|implements
name|CriticalCourses
implements|,
name|CriticalCoursesProvider
operator|.
name|AdvisorCriticalCourses
block|{
specifier|private
name|CourseDemand
operator|.
name|Critical
name|iCritical
init|=
literal|null
decl_stmt|;
specifier|private
name|CriticalCourses
name|iParent
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|iCriticalCourses
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|iVitalCourses
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|iImportantCourses
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|CriticalCoursesImpl
parameter_list|(
name|CourseDemand
operator|.
name|Critical
name|critical
parameter_list|,
name|CriticalCourses
name|parent
parameter_list|)
block|{
name|iCritical
operator|=
name|critical
expr_stmt|;
name|iParent
operator|=
name|parent
expr_stmt|;
block|}
name|CriticalCoursesImpl
parameter_list|()
block|{
name|this
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|NORMAL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|addCritical
parameter_list|(
name|XCourseId
name|course
parameter_list|)
block|{
return|return
name|iCriticalCourses
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|addVital
parameter_list|(
name|XCourseId
name|course
parameter_list|)
block|{
return|return
name|iVitalCourses
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|addImportant
parameter_list|(
name|XCourseId
name|course
parameter_list|)
block|{
return|return
name|iImportantCourses
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|iCriticalCourses
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|iParent
operator|==
literal|null
operator|||
name|iParent
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|int
name|combine
parameter_list|(
name|CourseDemand
operator|.
name|Critical
name|c1
parameter_list|,
name|CourseDemand
operator|.
name|Critical
name|c2
parameter_list|)
block|{
if|if
condition|(
name|c1
operator|==
literal|null
operator|&&
name|c2
operator|==
literal|null
condition|)
return|return
name|CourseDemand
operator|.
name|Critical
operator|.
name|NORMAL
operator|.
name|ordinal
argument_list|()
return|;
if|if
condition|(
name|c1
operator|==
literal|null
condition|)
return|return
name|c2
operator|.
name|ordinal
argument_list|()
return|;
if|if
condition|(
name|c2
operator|==
literal|null
condition|)
return|return
name|c1
operator|.
name|ordinal
argument_list|()
return|;
return|return
operator|(
name|c1
operator|.
name|toRequestPriority
argument_list|()
operator|.
name|ordinal
argument_list|()
operator|<=
name|c2
operator|.
name|toRequestPriority
argument_list|()
operator|.
name|ordinal
argument_list|()
condition|?
name|c1
operator|.
name|ordinal
argument_list|()
else|:
name|c2
operator|.
name|ordinal
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|isCritical
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
name|CourseDemand
operator|.
name|Critical
name|parent
init|=
operator|(
name|iParent
operator|==
literal|null
condition|?
name|CourseDemand
operator|.
name|Critical
operator|.
name|NORMAL
else|:
name|CourseDemand
operator|.
name|Critical
operator|.
name|values
argument_list|()
index|[
name|iParent
operator|.
name|isCritical
argument_list|(
name|course
argument_list|)
index|]
operator|)
decl_stmt|;
if|if
condition|(
name|iCriticalCourses
operator|.
name|containsKey
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|combine
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|CRITICAL
argument_list|,
name|parent
argument_list|)
return|;
block|}
if|if
condition|(
name|iVitalCourses
operator|.
name|containsKey
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|combine
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|VITAL
argument_list|,
name|parent
argument_list|)
return|;
block|}
if|if
condition|(
name|iImportantCourses
operator|.
name|containsKey
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|combine
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|IMPORTANT
argument_list|,
name|parent
argument_list|)
return|;
block|}
return|return
name|parent
operator|.
name|ordinal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|isCritical
parameter_list|(
name|XCourseId
name|course
parameter_list|)
block|{
name|CourseDemand
operator|.
name|Critical
name|parent
init|=
operator|(
name|iParent
operator|==
literal|null
condition|?
name|CourseDemand
operator|.
name|Critical
operator|.
name|NORMAL
else|:
name|CourseDemand
operator|.
name|Critical
operator|.
name|values
argument_list|()
index|[
name|iParent
operator|.
name|isCritical
argument_list|(
name|course
argument_list|)
index|]
operator|)
decl_stmt|;
if|if
condition|(
name|iCriticalCourses
operator|.
name|containsKey
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|combine
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|CRITICAL
argument_list|,
name|parent
argument_list|)
return|;
block|}
if|if
condition|(
name|iVitalCourses
operator|.
name|containsKey
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|combine
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|VITAL
argument_list|,
name|parent
argument_list|)
return|;
block|}
if|if
condition|(
name|iImportantCourses
operator|.
name|containsKey
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|combine
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|IMPORTANT
argument_list|,
name|parent
argument_list|)
return|;
block|}
return|return
name|parent
operator|.
name|ordinal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|courses
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|iCriticalCourses
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|courses
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|isCritical
parameter_list|(
name|AdvisorCourseRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|==
literal|null
operator|||
name|request
operator|.
name|isSubstitute
argument_list|()
condition|)
return|return
name|CourseDemand
operator|.
name|Critical
operator|.
name|NORMAL
operator|.
name|ordinal
argument_list|()
return|;
name|CourseDemand
operator|.
name|Critical
name|parent
init|=
operator|(
name|iParent
operator|==
literal|null
condition|?
name|CourseDemand
operator|.
name|Critical
operator|.
name|NORMAL
else|:
name|CourseDemand
operator|.
name|Critical
operator|.
name|values
argument_list|()
index|[
name|iParent
operator|.
name|isCritical
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
index|]
operator|)
decl_stmt|;
if|if
condition|(
name|iCritical
operator|==
name|Critical
operator|.
name|NORMAL
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|request
operator|.
name|isNoSub
argument_list|()
argument_list|)
condition|)
return|return
name|combine
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|VITAL
argument_list|,
name|parent
argument_list|)
return|;
else|else
return|return
name|parent
operator|.
name|ordinal
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|combine
argument_list|(
name|request
operator|.
name|getEffectiveCritical
argument_list|()
argument_list|,
name|parent
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

