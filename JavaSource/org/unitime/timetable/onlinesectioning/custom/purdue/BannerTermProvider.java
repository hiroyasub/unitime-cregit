begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|BannerTermProvider
implements|implements
name|ExternalTermProvider
block|{
annotation|@
name|Override
specifier|public
name|String
name|getExternalTerm
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
if|if
condition|(
name|session
operator|.
name|getTerm
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"spr"
argument_list|)
condition|)
return|return
name|session
operator|.
name|getYear
argument_list|()
operator|+
literal|"20"
return|;
if|if
condition|(
name|session
operator|.
name|getTerm
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"sum"
argument_list|)
condition|)
return|return
name|session
operator|.
name|getYear
argument_list|()
operator|+
literal|"30"
return|;
if|if
condition|(
name|session
operator|.
name|getTerm
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"fal"
argument_list|)
condition|)
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|session
operator|.
name|getYear
argument_list|()
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
literal|"10"
return|;
if|if
condition|(
name|session
operator|.
name|getTerm
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"win"
argument_list|)
condition|)
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|session
operator|.
name|getYear
argument_list|()
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
literal|"13"
return|;
return|return
name|session
operator|.
name|getYear
argument_list|()
operator|+
name|session
operator|.
name|getTerm
argument_list|()
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getExternalCampus
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|session
operator|.
name|getCampus
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getExternalSubject
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|,
name|String
name|subjectArea
parameter_list|,
name|String
name|courseNumber
parameter_list|)
block|{
return|return
name|subjectArea
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getExternalCourseNumber
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|,
name|String
name|subjectArea
parameter_list|,
name|String
name|courseNumber
parameter_list|)
block|{
return|return
name|courseNumber
operator|.
name|length
argument_list|()
operator|>
name|getCourseNumberLength
argument_list|()
condition|?
name|courseNumber
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|getCourseNumberLength
argument_list|()
argument_list|)
else|:
name|courseNumber
return|;
block|}
specifier|private
name|Integer
name|iCourseNumberLength
init|=
literal|null
decl_stmt|;
specifier|public
name|int
name|getCourseNumberLength
parameter_list|()
block|{
if|if
condition|(
name|iCourseNumberLength
operator|==
literal|null
condition|)
block|{
name|iCourseNumberLength
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.banner.courseNumberLength"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|iCourseNumberLength
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getExternalCourseCampus
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|,
name|String
name|subjectArea
parameter_list|,
name|String
name|courseNumber
parameter_list|)
block|{
return|return
name|session
operator|.
name|getCampus
argument_list|()
return|;
block|}
block|}
end_class

end_unit

