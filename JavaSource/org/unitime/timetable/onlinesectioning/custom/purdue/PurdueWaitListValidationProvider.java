begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|AssignmentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|SctAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PageAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|CheckCoursesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|CourseMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|WaitListMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseDemandDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|WaitListValidationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ApiMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|CheckEligibilityResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|CheckRestrictionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|CheckRestrictionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|CourseCredit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|DeniedMaxCredit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|DeniedRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|EligibilityProblem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|Problem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|RequestorRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|ResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationMultipleStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOverride
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|DatabaseServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|SectioningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|ReloadStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PurdueWaitListValidationProvider
implements|implements
name|WaitListValidationProvider
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|PurdueWaitListValidationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Format
argument_list|<
name|Number
argument_list|>
name|sCreditFormat
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.##"
argument_list|)
decl_stmt|;
specifier|private
name|Client
name|iClient
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|public
name|PurdueWaitListValidationProvider
parameter_list|()
block|{
name|List
argument_list|<
name|Protocol
argument_list|>
name|protocols
init|=
operator|new
name|ArrayList
argument_list|<
name|Protocol
argument_list|>
argument_list|()
decl_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
expr_stmt|;
name|iClient
operator|=
operator|new
name|Client
argument_list|(
name|protocols
argument_list|)
expr_stmt|;
name|Context
name|cx
init|=
operator|new
name|Context
argument_list|()
decl_stmt|;
name|cx
operator|.
name|getParameters
argument_list|()
operator|.
name|add
argument_list|(
literal|"readTimeout"
argument_list|,
name|getSpecialRegistrationApiReadTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|iClient
operator|.
name|setContext
argument_list|(
name|cx
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiReadTimeout
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.readTimeout"
argument_list|,
literal|"60000"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCheckEligibility
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.checkEligibility"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkEligibility"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiValidationSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.validation"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkRestrictions"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteSubmitRegistration
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.submitRegistration"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/submitRegistration"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.checkSpecialRegistrationStatus"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkSpecialRegistrationStatus"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiSiteCheckAllSpecialRegistrationStatus
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.site.checkAllSpecialRegistrationStatus"
argument_list|,
name|getSpecialRegistrationApiSite
argument_list|()
operator|+
literal|"/checkAllSpecialRegistrationStatus"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpecialRegistrationApiKey
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.apiKey"
argument_list|)
return|;
block|}
specifier|protected
name|ApiMode
name|getSpecialRegistrationApiMode
parameter_list|()
block|{
return|return
name|ApiMode
operator|.
name|valueOf
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.mode.waitlist"
argument_list|,
literal|"WAITL"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalUniqueId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getBannerTerm
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerCampus
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalCampus
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getRequestorId
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|id
init|=
name|user
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|RequestorRole
name|getRequestorType
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|,
name|XStudent
name|student
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
return|return
operator|(
name|user
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|?
name|RequestorRole
operator|.
name|STUDENT
else|:
name|RequestorRole
operator|.
name|MANAGER
operator|)
return|;
if|if
condition|(
name|user
operator|.
name|hasType
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|user
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|MANAGER
case|:
return|return
name|RequestorRole
operator|.
name|MANAGER
return|;
case|case
name|STUDENT
case|:
return|return
name|RequestorRole
operator|.
name|STUDENT
return|;
default|default:
return|return
name|RequestorRole
operator|.
name|MANAGER
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Gson
name|getGson
parameter_list|(
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|GsonBuilder
name|builder
init|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|DateTime
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|toString
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DateTime
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|Date
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
operator|.
name|format
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Date
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
try|try
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
operator|.
name|parse
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JsonParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|builder
operator|.
name|setPrettyPrinting
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|create
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getCRN
parameter_list|(
name|Section
name|section
parameter_list|,
name|Course
name|course
parameter_list|)
block|{
name|String
name|name
init|=
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
operator|>=
literal|0
condition|)
return|return
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
return|;
return|return
name|name
return|;
block|}
specifier|protected
name|boolean
name|isValidationEnabled
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|StudentSectioningStatus
name|status
init|=
name|student
operator|.
name|getEffectiveStatus
argument_list|()
decl_stmt|;
return|return
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|waitlist
argument_list|)
operator|&&
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|specreg
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isValidationEnabled
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|)
block|{
name|String
name|status
init|=
name|student
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
name|status
operator|=
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
literal|true
return|;
name|StudentSectioningStatus
name|dbStatus
init|=
name|StudentSectioningStatus
operator|.
name|getPresentStatus
argument_list|(
name|status
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|dbStatus
operator|!=
literal|null
operator|&&
name|dbStatus
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|waitlist
argument_list|)
operator|&&
name|dbStatus
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|specreg
argument_list|)
return|;
block|}
specifier|protected
name|Enrollment
name|firstEnrollment
parameter_list|(
name|CourseRequest
name|request
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Course
name|course
parameter_list|,
name|Config
name|config
parameter_list|,
name|HashSet
argument_list|<
name|Section
argument_list|>
name|sections
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|idx
condition|)
block|{
name|Enrollment
name|e
init|=
operator|new
name|Enrollment
argument_list|(
name|request
argument_list|,
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|indexOf
argument_list|(
name|course
argument_list|)
argument_list|,
literal|null
argument_list|,
name|config
argument_list|,
operator|new
name|HashSet
argument_list|<
name|SctAssignment
argument_list|>
argument_list|(
name|sections
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|isNotAllowed
argument_list|(
name|e
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
name|e
return|;
block|}
else|else
block|{
name|Subpart
name|subpart
init|=
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Section
argument_list|>
name|sectionsThisSubpart
init|=
name|subpart
operator|.
name|getSections
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Section
argument_list|>
name|matchingSectionsThisSubpart
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|sectionsThisSubpart
control|)
block|{
if|if
condition|(
name|section
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|sections
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|isOverlapping
argument_list|(
name|sections
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|request
operator|.
name|isNotAllowed
argument_list|(
name|course
argument_list|,
name|section
argument_list|)
condition|)
continue|continue;
name|matchingSectionsThisSubpart
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Section
name|section
range|:
name|matchingSectionsThisSubpart
control|)
block|{
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|Enrollment
name|e
init|=
name|firstEnrollment
argument_list|(
name|request
argument_list|,
name|assignment
argument_list|,
name|course
argument_list|,
name|config
argument_list|,
name|sections
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
return|return
name|e
return|;
name|sections
operator|.
name|remove
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|RequestedCourseStatus
name|status
parameter_list|(
name|ChangeStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
return|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|denied
case|:
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
return|;
case|case
name|approved
case|:
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
return|;
case|case
name|cancelled
case|:
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
return|;
default|default:
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
return|;
block|}
block|}
specifier|protected
name|RequestedCourseStatus
name|combine
parameter_list|(
name|RequestedCourseStatus
name|s1
parameter_list|,
name|RequestedCourseStatus
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|==
literal|null
condition|)
return|return
name|s2
return|;
if|if
condition|(
name|s2
operator|==
literal|null
condition|)
return|return
name|s1
return|;
if|if
condition|(
name|s1
operator|==
name|s2
condition|)
return|return
name|s1
return|;
if|if
condition|(
name|s1
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
operator|||
name|s2
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
condition|)
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
return|;
if|if
condition|(
name|s1
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
operator|||
name|s2
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
condition|)
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
return|;
if|if
condition|(
name|s1
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
operator|||
name|s2
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
condition|)
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
return|;
if|if
condition|(
name|s1
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
operator|||
name|s2
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
condition|)
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
return|;
return|return
name|s1
return|;
block|}
specifier|protected
name|RequestedCourseStatus
name|status
parameter_list|(
name|SpecialRegistration
name|request
parameter_list|,
name|boolean
name|credit
parameter_list|)
block|{
name|RequestedCourseStatus
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|request
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|status
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|credit
operator|&&
name|ch
operator|.
name|subject
operator|==
literal|null
operator|&&
name|ch
operator|.
name|courseNbr
operator|==
literal|null
condition|)
name|ret
operator|=
name|combine
argument_list|(
name|ret
argument_list|,
name|status
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|credit
operator|&&
name|ch
operator|.
name|subject
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|courseNbr
operator|!=
literal|null
condition|)
name|ret
operator|=
name|combine
argument_list|(
name|ret
argument_list|,
name|status
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
return|return
name|ret
return|;
if|if
condition|(
name|request
operator|.
name|completionStatus
operator|!=
literal|null
condition|)
switch|switch
condition|(
name|request
operator|.
name|completionStatus
condition|)
block|{
case|case
name|completed
case|:
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
return|;
case|case
name|cancelled
case|:
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
return|;
case|case
name|inProgress
case|:
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
return|;
block|}
return|return
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|,
name|CheckCoursesResponse
name|response
parameter_list|)
throws|throws
name|SectioningException
block|{
name|XStudent
name|original
init|=
operator|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|MESSAGES
operator|.
name|exceptionEnrollNotStudent
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
comment|// Do not validate when validation is disabled
if|if
condition|(
operator|!
name|isValidationEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|original
argument_list|)
condition|)
return|return;
name|Integer
name|CONF_NONE
init|=
literal|null
decl_stmt|;
name|Integer
name|CONF_BANNER
init|=
literal|1
decl_stmt|;
name|String
name|creditError
init|=
literal|null
decl_stmt|;
name|Float
name|maxCreditNeeded
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|line
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
comment|// only for wait-listed course requests
if|if
condition|(
name|line
operator|.
name|isWaitList
argument_list|()
operator|&&
name|line
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
comment|// skip enrolled courses
name|boolean
name|enrolled
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|line
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
condition|)
block|{
name|XCourseRequest
name|cr
init|=
name|original
operator|.
name|getRequestForCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cr
operator|!=
literal|null
operator|&&
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|enrolled
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|enrolled
condition|)
continue|continue;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|line
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
condition|)
block|{
name|XCourse
name|xcourse
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|xcourse
operator|==
literal|null
condition|)
continue|continue;
comment|// skip offerings that cannot be wait-listed
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|xcourse
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
operator|||
operator|!
name|offering
operator|.
name|isWaitList
argument_list|()
condition|)
continue|continue;
comment|// get possible enrollments into the course
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
init|=
operator|new
name|AssignmentMap
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|CourseRequest
name|courseRequest
init|=
name|SectioningRequest
operator|.
name|convert
argument_list|(
name|assignment
argument_list|,
operator|new
name|XCourseRequest
argument_list|(
name|original
argument_list|,
name|xcourse
argument_list|)
argument_list|,
name|server
argument_list|,
name|WaitListMode
operator|.
name|WaitList
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Enrollment
argument_list|>
name|enrls
init|=
name|courseRequest
operator|.
name|getEnrollmentsSkipSameTime
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
comment|// get a test enrollment (preferably a non-conflicting one)
name|Enrollment
name|testEnrollment
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|e
init|=
name|enrls
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|testEnrollment
operator|=
name|e
operator|.
name|next
argument_list|()
expr_stmt|;
name|boolean
name|overlaps
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Request
name|q
range|:
name|testEnrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|q
operator|.
name|equals
argument_list|(
name|courseRequest
argument_list|)
condition|)
continue|continue;
name|Enrollment
name|x
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|SctAssignment
argument_list|>
name|i
init|=
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SctAssignment
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|isOverlapping
argument_list|(
name|testEnrollment
operator|.
name|getAssignments
argument_list|()
argument_list|)
condition|)
block|{
name|overlaps
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|overlaps
condition|)
break|break;
block|}
comment|// no test enrollment, take first possible enrollment
if|if
condition|(
name|testEnrollment
operator|==
literal|null
condition|)
block|{
name|Course
name|c
init|=
name|courseRequest
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|c
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|courseRequest
operator|.
name|isNotAllowed
argument_list|(
name|c
argument_list|,
name|config
argument_list|)
condition|)
continue|continue;
name|testEnrollment
operator|=
name|firstEnrollment
argument_list|(
name|courseRequest
argument_list|,
name|assignment
argument_list|,
name|c
argument_list|,
name|config
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|// still no test enrollment -> ignore
if|if
condition|(
name|testEnrollment
operator|==
literal|null
condition|)
continue|continue;
comment|// create request
name|CheckRestrictionsRequest
name|req
init|=
operator|new
name|CheckRestrictionsRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|req
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|mode
operator|=
name|getSpecialRegistrationApiMode
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|crns
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|testEnrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|String
name|crn
init|=
name|getCRN
argument_list|(
name|section
argument_list|,
name|testEnrollment
operator|.
name|getCourse
argument_list|()
argument_list|)
decl_stmt|;
name|SpecialRegistrationHelper
operator|.
name|addWaitListCrn
argument_list|(
name|req
argument_list|,
name|crn
argument_list|)
expr_stmt|;
name|crns
operator|.
name|add
argument_list|(
name|crn
argument_list|)
expr_stmt|;
block|}
comment|// call validation
name|CheckRestrictionsResponse
name|resp
init|=
literal|null
decl_stmt|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiValidationSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"wl-req-"
operator|+
name|testEnrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|CheckRestrictionsRequest
argument_list|>
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
operator|(
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|hasApiPostTime
argument_list|()
condition|?
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|getApiPostTime
argument_list|()
else|:
literal|0
operator|)
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|resp
operator|=
operator|(
name|CheckRestrictionsResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|CheckRestrictionsResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|CheckRestrictionsResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"wl-resp-"
operator|+
name|testEnrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|resp
operator|.
name|status
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|resp
operator|.
name|message
operator|==
literal|null
operator|||
name|resp
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to check student eligibility ("
operator|+
name|resp
operator|.
name|status
operator|+
literal|")."
else|:
name|resp
operator|.
name|message
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|// student max credit
name|Float
name|maxCredit
init|=
name|resp
operator|.
name|maxCredit
decl_stmt|;
if|if
condition|(
name|maxCredit
operator|==
literal|null
condition|)
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
expr_stmt|;
name|Float
name|maxCreditDenied
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|deniedMaxCreditRequests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DeniedMaxCredit
name|r
range|:
name|resp
operator|.
name|deniedMaxCreditRequests
control|)
block|{
if|if
condition|(
name|req
operator|.
name|mode
operator|.
name|equals
argument_list|(
name|r
operator|.
name|mode
argument_list|)
operator|&&
name|r
operator|.
name|maxCredit
operator|!=
literal|null
operator|&&
name|r
operator|.
name|maxCredit
operator|>
name|maxCredit
operator|&&
operator|(
name|maxCreditDenied
operator|==
literal|null
operator|||
name|maxCreditDenied
operator|>
name|r
operator|.
name|maxCredit
operator|)
condition|)
name|maxCreditDenied
operator|=
name|r
operator|.
name|maxCredit
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RequestedCourseStatus
argument_list|>
argument_list|>
name|overrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RequestedCourseStatus
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Float
name|maxCreditOverride
init|=
literal|null
decl_stmt|;
name|RequestedCourseStatus
name|maxCreditOverrideStatus
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|cancelRegistrationRequests
operator|!=
literal|null
condition|)
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|resp
operator|.
name|cancelRegistrationRequests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|changes
operator|==
literal|null
operator|||
name|r
operator|.
name|changes
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|status
operator|==
name|ChangeStatus
operator|.
name|cancelled
operator|||
name|ch
operator|.
name|status
operator|==
name|ChangeStatus
operator|.
name|denied
condition|)
continue|continue;
if|if
condition|(
name|ch
operator|.
name|subject
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|courseNbr
operator|!=
literal|null
condition|)
block|{
name|String
name|course
init|=
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RequestedCourseStatus
argument_list|>
name|problems
init|=
name|overrides
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|problems
operator|==
literal|null
condition|)
block|{
name|problems
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RequestedCourseStatus
argument_list|>
argument_list|()
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|problems
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|err
range|:
name|ch
operator|.
name|errors
control|)
block|{
if|if
condition|(
name|err
operator|.
name|code
operator|!=
literal|null
condition|)
name|problems
operator|.
name|put
argument_list|(
name|err
operator|.
name|code
argument_list|,
name|status
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|r
operator|.
name|maxCredit
operator|!=
literal|null
operator|&&
operator|(
name|maxCreditOverride
operator|==
literal|null
operator|||
name|maxCreditOverride
operator|<
name|r
operator|.
name|maxCredit
operator|)
condition|)
block|{
name|maxCreditOverride
operator|=
name|r
operator|.
name|maxCredit
expr_stmt|;
name|maxCreditOverrideStatus
operator|=
name|status
argument_list|(
name|ch
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Float
name|neededCredit
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|outJson
operator|!=
literal|null
operator|&&
name|resp
operator|.
name|outJson
operator|.
name|maxHoursCalc
operator|!=
literal|null
condition|)
name|neededCredit
operator|=
name|resp
operator|.
name|outJson
operator|.
name|maxHoursCalc
expr_stmt|;
if|if
condition|(
name|neededCredit
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|maxCreditNeeded
operator|==
literal|null
operator|||
name|maxCreditNeeded
operator|<
name|neededCredit
condition|)
name|maxCreditNeeded
operator|=
name|neededCredit
expr_stmt|;
block|}
if|if
condition|(
name|maxCreditDenied
operator|!=
literal|null
operator|&&
name|neededCredit
operator|!=
literal|null
operator|&&
name|neededCredit
operator|>=
name|maxCreditDenied
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"WL-CREDIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|neededCredit
argument_list|)
argument_list|)
argument_list|,
name|CONF_NONE
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|neededCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{maxCreditDenied}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCreditDenied
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
argument_list|)
expr_stmt|;
name|creditError
operator|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCreditDeniedError"
argument_list|,
literal|"Maximum of {max} credit hours exceeded.\nThe request to increase the maximum credit hours to {maxCreditDenied} has been denied.\nYou may not be able to get a full schedule."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|neededCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{maxCreditDenied}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCreditDenied
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMaxCreditNeeded
argument_list|(
name|maxCreditNeeded
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|creditError
operator|==
literal|null
operator|&&
name|neededCredit
operator|!=
literal|null
operator|&&
name|maxCredit
operator|<
name|neededCredit
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"WL-CREDIT"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|neededCredit
argument_list|)
argument_list|)
argument_list|,
name|maxCreditOverride
operator|==
literal|null
operator|||
name|maxCreditOverride
operator|<
name|neededCredit
condition|?
name|CONF_BANNER
else|:
name|CONF_NONE
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|neededCredit
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|maxCreditOverrideStatus
operator|==
literal|null
operator|||
name|maxCreditOverride
operator|<
name|neededCredit
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
else|:
name|maxCreditOverrideStatus
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMaxCreditNeeded
argument_list|(
name|maxCreditNeeded
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|deniedOverrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|deniedRequests
operator|!=
literal|null
condition|)
for|for
control|(
name|DeniedRequest
name|r
range|:
name|resp
operator|.
name|deniedRequests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|mode
operator|!=
name|req
operator|.
name|mode
condition|)
continue|continue;
name|String
name|course
init|=
name|r
operator|.
name|subject
operator|+
literal|" "
operator|+
name|r
operator|.
name|courseNbr
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|problems
init|=
name|deniedOverrides
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|problems
operator|==
literal|null
condition|)
block|{
name|problems
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|deniedOverrides
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|problems
argument_list|)
expr_stmt|;
block|}
name|problems
operator|.
name|add
argument_list|(
name|r
operator|.
name|code
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resp
operator|.
name|outJson
operator|!=
literal|null
operator|&&
name|resp
operator|.
name|outJson
operator|.
name|message
operator|!=
literal|null
operator|&&
name|resp
operator|.
name|outJson
operator|.
name|status
operator|!=
literal|null
operator|&&
name|resp
operator|.
name|outJson
operator|.
name|status
operator|!=
name|ResponseStatus
operator|.
name|success
condition|)
block|{
name|response
operator|.
name|addError
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Failure"
argument_list|,
name|resp
operator|.
name|outJson
operator|.
name|message
argument_list|)
expr_stmt|;
name|response
operator|.
name|setErrorMessage
argument_list|(
name|resp
operator|.
name|outJson
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resp
operator|.
name|outJson
operator|!=
literal|null
operator|&&
name|resp
operator|.
name|outJson
operator|.
name|problems
operator|!=
literal|null
condition|)
for|for
control|(
name|Problem
name|problem
range|:
name|resp
operator|.
name|outJson
operator|.
name|problems
control|)
block|{
if|if
condition|(
literal|"HOLD"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
block|{
name|response
operator|.
name|addError
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|problem
operator|.
name|code
argument_list|,
name|problem
operator|.
name|message
argument_list|)
expr_stmt|;
name|response
operator|.
name|setErrorMessage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.holdError"
argument_list|,
name|problem
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
comment|//throw new SectioningException(problem.message);
block|}
if|if
condition|(
literal|"DUPL"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"CLOS"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"TIME"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|crns
operator|.
name|contains
argument_list|(
name|problem
operator|.
name|crn
argument_list|)
condition|)
continue|continue;
name|String
name|bc
init|=
name|xcourse
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|xcourse
operator|.
name|getCourseNumber
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RequestedCourseStatus
argument_list|>
name|problems
init|=
operator|(
name|bc
operator|==
literal|null
condition|?
literal|null
else|:
name|overrides
operator|.
name|get
argument_list|(
name|bc
argument_list|)
operator|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|denied
init|=
operator|(
name|bc
operator|==
literal|null
condition|?
literal|null
else|:
name|deniedOverrides
operator|.
name|get
argument_list|(
name|bc
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|denied
operator|!=
literal|null
operator|&&
name|denied
operator|.
name|contains
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
block|{
name|response
operator|.
name|addMessage
argument_list|(
name|xcourse
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|xcourse
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|problem
operator|.
name|code
argument_list|,
literal|"Denied "
operator|+
name|problem
operator|.
name|message
argument_list|,
name|CONF_NONE
argument_list|)
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RequestedCourseStatus
name|status
init|=
operator|(
name|problems
operator|==
literal|null
condition|?
literal|null
else|:
name|problems
operator|.
name|get
argument_list|(
name|problem
operator|.
name|code
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|resp
operator|.
name|overrides
operator|!=
literal|null
operator|&&
operator|!
name|resp
operator|.
name|overrides
operator|.
name|contains
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
block|{
name|response
operator|.
name|addError
argument_list|(
name|xcourse
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|xcourse
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|problem
operator|.
name|code
argument_list|,
literal|"Not Allowed "
operator|+
name|problem
operator|.
name|message
argument_list|)
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
argument_list|)
expr_stmt|;
name|response
operator|.
name|setErrorMessage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.waitlist.deniedOverrideError"
argument_list|,
literal|"One or more wait-listed courses require registration overrides which is not allowed.\nYou cannot wait-list these courses."
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|xcourse
operator|.
name|isOverrideEnabled
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
block|{
name|response
operator|.
name|addError
argument_list|(
name|xcourse
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|xcourse
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|problem
operator|.
name|code
argument_list|,
literal|"Not Allowed "
operator|+
name|problem
operator|.
name|message
argument_list|)
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
argument_list|)
expr_stmt|;
name|response
operator|.
name|setErrorMessage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.waitlist.deniedOverrideError"
argument_list|,
literal|"One or more wait-listed courses require registration overrides which is not allowed.\nYou cannot wait-list these courses."
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
name|response
operator|.
name|addMessage
argument_list|(
name|xcourse
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|xcourse
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|problem
operator|.
name|code
argument_list|,
name|problem
operator|.
name|message
argument_list|,
name|status
operator|==
literal|null
condition|?
name|CONF_BANNER
else|:
name|CONF_NONE
argument_list|)
operator|.
name|setStatus
argument_list|(
name|status
operator|==
literal|null
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
else|:
name|status
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|response
operator|.
name|hasMessages
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|response
operator|.
name|getMessages
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getCourse
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"this section"
argument_list|)
operator|>=
literal|0
condition|)
name|m
operator|.
name|setMessage
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
operator|.
name|replace
argument_list|(
literal|"this section"
argument_list|,
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getCourse
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|" (CRN "
argument_list|)
operator|>=
literal|0
condition|)
name|m
operator|.
name|setMessage
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|" \\(CRN [0-9][0-9][0-9][0-9][0-9]\\) "
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|response
operator|.
name|getConfirms
argument_list|()
operator|.
name|contains
argument_list|(
name|CONF_BANNER
argument_list|)
condition|)
block|{
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.waitlist.bannerProblemsFound"
argument_list|,
literal|"The following registration errors for the wait-listed courses have been detected:"
argument_list|)
argument_list|,
name|CONF_BANNER
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
name|note
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.waitlist.courseRequestNote"
argument_list|,
literal|"<b>Request Note:</b>"
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|note
operator|!=
literal|null
operator|&&
operator|!
name|note
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|response
operator|.
name|addConfirmation
argument_list|(
name|note
argument_list|,
name|CONF_BANNER
argument_list|,
name|idx
operator|++
argument_list|)
expr_stmt|;
name|response
operator|.
name|addConfirmation
argument_list|(
literal|""
argument_list|,
name|CONF_BANNER
argument_list|,
name|idx
operator|++
argument_list|)
operator|.
name|setCode
argument_list|(
literal|"REQUEST_NOTE"
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addConfirmation
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.waitlist.requestOverrides"
argument_list|,
literal|"\nIf you have already discussed these courses with your advisor and were advised to request "
operator|+
literal|"registration in them please select Request Overrides. If you arenât sure, click Cancel Submit and "
operator|+
literal|"consult with your advisor before wait-listing these courses."
argument_list|)
argument_list|,
name|CONF_BANNER
argument_list|,
name|idx
operator|++
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|conf
init|=
name|response
operator|.
name|getConfirms
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|contains
argument_list|(
name|CONF_BANNER
argument_list|)
condition|)
block|{
name|response
operator|.
name|setConfirmation
argument_list|(
name|CONF_BANNER
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.waitlist.bannerDialogName"
argument_list|,
literal|"Request Wait-List Overrides"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.waitlist.bannerYesButton"
argument_list|,
literal|"Request Overrides"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.waitlist.bannerNoButton"
argument_list|,
literal|"Cancel Submit"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.waitlist.bannerYesButtonTitle"
argument_list|,
literal|"Request overrides for the above registration errors"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.confirm.waitlist.bannerNoButtonTitle"
argument_list|,
literal|"Go back to Scheduling Assistant"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|submit
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|,
name|Float
name|neededCredit
parameter_list|)
throws|throws
name|SectioningException
block|{
name|XStudent
name|original
init|=
operator|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return;
comment|// Do not submit when validation is disabled
if|if
condition|(
operator|!
name|isValidationEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|original
argument_list|)
condition|)
return|return;
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|SAVED
argument_list|)
expr_stmt|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|overrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Float
name|maxCredit
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatusResponse
name|status
init|=
operator|(
name|SpecialRegistrationStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Status: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"wl-status"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|!=
literal|null
condition|)
block|{
name|maxCredit
operator|=
name|status
operator|.
name|data
operator|.
name|maxCredit
expr_stmt|;
name|request
operator|.
name|setMaxCredit
argument_list|(
name|status
operator|.
name|data
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxCredit
operator|==
literal|null
condition|)
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|.
name|requests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|status
operator|.
name|data
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|status
argument_list|(
name|ch
operator|.
name|status
argument_list|)
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
operator|&&
name|ch
operator|.
name|subject
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|courseNbr
operator|!=
literal|null
condition|)
block|{
name|String
name|course
init|=
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|problems
init|=
name|overrides
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|problems
operator|==
literal|null
condition|)
block|{
name|problems
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|problems
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|err
range|:
name|ch
operator|.
name|errors
control|)
block|{
if|if
condition|(
name|err
operator|.
name|code
operator|!=
literal|null
condition|)
name|problems
operator|.
name|add
argument_list|(
name|err
operator|.
name|code
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
name|SpecialRegistrationRequest
name|req
init|=
operator|new
name|SpecialRegistrationRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|req
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|mode
operator|=
name|getSpecialRegistrationApiMode
argument_list|()
expr_stmt|;
name|req
operator|.
name|changes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|requestorId
operator|=
name|getRequestorId
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|requestorRole
operator|=
name|getRequestorType
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasConfirmations
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseMessage
name|m
range|:
name|request
operator|.
name|getConfirmations
argument_list|()
control|)
block|{
if|if
condition|(
literal|"REQUEST_NOTE"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
operator|&&
name|m
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|m
operator|.
name|getMessage
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|req
operator|.
name|requestorNotes
operator|=
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|c
operator|.
name|isWaitList
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|c
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
name|XCourseId
name|cid
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|String
name|subject
init|=
name|course
operator|.
name|getSubjectArea
argument_list|()
decl_stmt|;
name|String
name|courseNbr
init|=
name|course
operator|.
name|getCourseNumber
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeError
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<
name|ChangeError
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseMessage
name|m
range|:
name|request
operator|.
name|getConfirmations
argument_list|()
control|)
block|{
if|if
condition|(
literal|"WL-CREDIT"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"NO_ALT"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"DROP_CRIT"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"WL-OVERLAP"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"NOT-ONLINE"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"NOT-RESIDENTIAL"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|m
operator|.
name|hasCourse
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|m
operator|.
name|isError
argument_list|()
operator|&&
operator|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|||
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|ChangeError
name|e
init|=
operator|new
name|ChangeError
argument_list|()
decl_stmt|;
name|e
operator|.
name|code
operator|=
name|m
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|e
operator|.
name|message
operator|=
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Change
name|ch
init|=
operator|new
name|Change
argument_list|()
decl_stmt|;
name|ch
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
name|ch
operator|.
name|courseNbr
operator|=
name|courseNbr
expr_stmt|;
name|ch
operator|.
name|crn
operator|=
literal|""
expr_stmt|;
name|ch
operator|.
name|errors
operator|=
name|errors
expr_stmt|;
name|ch
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|ADD
expr_stmt|;
name|req
operator|.
name|changes
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|remove
argument_list|(
name|subject
operator|+
literal|" "
operator|+
name|courseNbr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|req
operator|.
name|courseCreditHrs
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseCredit
argument_list|>
argument_list|()
expr_stmt|;
name|Float
name|wlCredit
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|isWaitList
argument_list|()
condition|)
block|{
name|CourseCredit
name|cc
init|=
literal|null
decl_stmt|;
name|Float
name|credit
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
name|XCourseId
name|cid
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|cc
operator|==
literal|null
condition|)
block|{
name|cc
operator|=
operator|new
name|CourseCredit
argument_list|()
expr_stmt|;
name|cc
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|cc
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|cc
operator|.
name|title
operator|=
name|course
operator|.
name|getTitle
argument_list|()
expr_stmt|;
name|cc
operator|.
name|creditHrs
operator|=
operator|(
name|course
operator|.
name|hasCredit
argument_list|()
condition|?
name|course
operator|.
name|getMinCredit
argument_list|()
else|:
literal|0f
operator|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cc
operator|.
name|alternatives
operator|==
literal|null
condition|)
name|cc
operator|.
name|alternatives
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseCredit
argument_list|>
argument_list|()
expr_stmt|;
name|CourseCredit
name|acc
init|=
operator|new
name|CourseCredit
argument_list|()
decl_stmt|;
name|acc
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|acc
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|acc
operator|.
name|title
operator|=
name|course
operator|.
name|getTitle
argument_list|()
expr_stmt|;
name|acc
operator|.
name|creditHrs
operator|=
operator|(
name|course
operator|.
name|hasCredit
argument_list|()
condition|?
name|course
operator|.
name|getMinCredit
argument_list|()
else|:
literal|0f
operator|)
expr_stmt|;
name|cc
operator|.
name|alternatives
operator|.
name|add
argument_list|(
name|acc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
operator|&&
operator|(
name|credit
operator|==
literal|null
operator|||
name|credit
operator|<
name|rc
operator|.
name|getCreditMin
argument_list|()
operator|)
condition|)
name|credit
operator|=
name|rc
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cc
operator|!=
literal|null
condition|)
name|req
operator|.
name|courseCreditHrs
operator|.
name|add
argument_list|(
name|cc
argument_list|)
expr_stmt|;
if|if
condition|(
name|credit
operator|!=
literal|null
operator|&&
operator|(
name|wlCredit
operator|==
literal|null
operator|||
name|wlCredit
operator|<
name|credit
operator|)
condition|)
name|wlCredit
operator|=
name|credit
expr_stmt|;
block|}
block|}
if|if
condition|(
name|neededCredit
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|maxCredit
operator|<
name|neededCredit
condition|)
block|{
name|req
operator|.
name|maxCredit
operator|=
name|neededCredit
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|wlCredit
operator|!=
literal|null
operator|&&
name|wlCredit
operator|.
name|floatValue
argument_list|()
operator|>
literal|0f
condition|)
block|{
name|float
name|total
init|=
name|wlCredit
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
name|total
operator|+=
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCredit
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxCredit
operator|<
name|total
condition|)
block|{
name|req
operator|.
name|maxCredit
operator|=
name|total
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|req
operator|.
name|changes
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|overrides
operator|.
name|isEmpty
argument_list|()
operator|||
name|req
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
block|{
name|resource
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteSubmitRegistration
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"wl-request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationRequest
argument_list|>
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiPostTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|SpecialRegistrationResponseList
name|response
init|=
operator|(
name|SpecialRegistrationResponseList
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationResponseList
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationResponseList
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"wl-response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|response
operator|.
name|status
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|response
operator|.
name|message
operator|==
literal|null
operator|||
name|response
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to request overrides ("
operator|+
name|response
operator|.
name|status
operator|+
literal|")."
else|:
name|response
operator|.
name|message
argument_list|)
throw|;
if|if
condition|(
name|response
operator|.
name|data
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|c
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
condition|)
block|{
name|rc
operator|.
name|setStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|XCourseId
name|cid
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|String
name|subject
init|=
name|course
operator|.
name|getSubjectArea
argument_list|()
decl_stmt|;
name|String
name|courseNbr
init|=
name|course
operator|.
name|getCourseNumber
argument_list|()
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|response
operator|.
name|data
control|)
block|{
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|subject
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|subject
argument_list|)
operator|&&
name|courseNbr
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|courseNbr
argument_list|)
condition|)
block|{
name|rc
operator|.
name|setOverrideTimeStamp
argument_list|(
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideExternalId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setStatus
argument_list|(
name|status
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setStatusNote
argument_list|(
name|SpecialRegistrationHelper
operator|.
name|note
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setRequestId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setRequestorNote
argument_list|(
name|r
operator|.
name|requestorNotes
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|c
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
condition|)
block|{
name|rc
operator|.
name|setStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|XCourseId
name|cid
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|String
name|subject
init|=
name|course
operator|.
name|getSubjectArea
argument_list|()
decl_stmt|;
name|String
name|courseNbr
init|=
name|course
operator|.
name|getCourseNumber
argument_list|()
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|response
operator|.
name|data
control|)
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|subject
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|subject
argument_list|)
operator|&&
name|courseNbr
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|courseNbr
argument_list|)
condition|)
block|{
name|rc
operator|.
name|setOverrideTimeStamp
argument_list|(
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideExternalId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setStatus
argument_list|(
name|status
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setStatusNote
argument_list|(
name|SpecialRegistrationHelper
operator|.
name|note
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|req
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|response
operator|.
name|data
control|)
block|{
if|if
condition|(
name|r
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setMaxCreditOverride
argument_list|(
name|r
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideExternalId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideTimeStamp
argument_list|(
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|status
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCreditWarning
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.maxCredit"
argument_list|,
literal|"Maximum of {max} credit hours exceeded."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{max}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{credit}"
argument_list|,
name|sCreditFormat
operator|.
name|format
argument_list|(
name|req
operator|.
name|maxCredit
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCreditNote
argument_list|(
name|SpecialRegistrationHelper
operator|.
name|note
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRequestorNote
argument_list|(
name|r
operator|.
name|requestorNotes
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRequestId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|SAVED
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasConfirmations
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseMessage
name|message
range|:
name|request
operator|.
name|getConfirmations
argument_list|()
control|)
block|{
if|if
condition|(
name|message
operator|.
name|getStatus
argument_list|()
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
condition|)
name|message
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|c
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
condition|)
block|{
name|rc
operator|.
name|setStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|c
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
condition|)
block|{
name|rc
operator|.
name|setStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|)
throws|throws
name|SectioningException
block|{
name|XStudent
name|original
init|=
operator|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return;
comment|// Do not check when validation is disabled
if|if
condition|(
operator|!
name|isValidationEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|original
argument_list|)
condition|)
return|return;
name|Map
argument_list|<
name|String
argument_list|,
name|RequestedCourse
argument_list|>
name|rcs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RequestedCourse
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|isWaitList
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
condition|)
name|rcs
operator|.
name|put
argument_list|(
name|rc
operator|.
name|getOverrideExternalId
argument_list|()
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|rcs
operator|.
name|put
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|rc
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
operator|&&
literal|"TBD"
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getOverrideExternalId
argument_list|()
argument_list|)
condition|)
block|{
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT_REQUESTED"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.waitlist.notRequested"
argument_list|,
literal|"Overrides not requested, wait-list inactive."
argument_list|)
argument_list|,
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|SAVED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rcs
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|request
operator|.
name|hasMaxCreditOverride
argument_list|()
condition|)
return|return;
name|Integer
name|ORD_BANNER
init|=
literal|1
decl_stmt|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatusResponse
name|status
init|=
operator|(
name|SpecialRegistrationStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Status: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"wl-status"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|Float
name|maxCredit
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|!=
literal|null
condition|)
block|{
name|maxCredit
operator|=
name|status
operator|.
name|data
operator|.
name|maxCredit
expr_stmt|;
name|request
operator|.
name|setMaxCredit
argument_list|(
name|status
operator|.
name|data
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxCredit
operator|==
literal|null
condition|)
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|!=
literal|null
operator|&&
name|status
operator|.
name|data
operator|.
name|requests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|status
operator|.
name|data
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|regRequestId
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|r
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setMaxCreditOverrideExternalId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|status
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverride
argument_list|(
name|r
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCreditNote
argument_list|(
name|SpecialRegistrationHelper
operator|.
name|note
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|warning
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
if|if
condition|(
name|ch
operator|.
name|subject
operator|==
literal|null
operator|&&
name|ch
operator|.
name|courseNbr
operator|==
literal|null
condition|)
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|er
range|:
name|ch
operator|.
name|errors
control|)
if|if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|er
operator|.
name|code
argument_list|)
operator|&&
name|er
operator|.
name|message
operator|!=
literal|null
condition|)
name|warning
operator|=
operator|(
name|warning
operator|==
literal|null
condition|?
literal|""
else|:
name|warning
operator|+
literal|"\n"
operator|)
operator|+
name|er
operator|.
name|message
expr_stmt|;
name|request
operator|.
name|setCreditWarning
argument_list|(
name|warning
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRequestorNote
argument_list|(
name|r
operator|.
name|requestorNotes
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRequestId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
block|}
name|RequestedCourse
name|rc
init|=
name|rcs
operator|.
name|get
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
if|if
condition|(
name|ch
operator|.
name|status
operator|==
name|ChangeStatus
operator|.
name|approved
condition|)
block|{
name|rc
operator|=
name|rcs
operator|.
name|get
argument_list|(
name|ch
operator|.
name|subject
operator|+
literal|" "
operator|+
name|ch
operator|.
name|courseNbr
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ChangeError
name|er
range|:
name|ch
operator|.
name|errors
control|)
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|er
operator|.
name|code
argument_list|,
name|er
operator|.
name|message
argument_list|,
name|status
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|,
name|ORD_BANNER
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|.
name|getRequestId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|rc
operator|.
name|setStatusNote
argument_list|(
name|SpecialRegistrationHelper
operator|.
name|note
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setRequestorNote
argument_list|(
name|r
operator|.
name|requestorNotes
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
name|RequestedCourseStatus
operator|.
name|ENROLLED
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
continue|continue;
block|}
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
name|RequestedCourseStatus
operator|.
name|ENROLLED
condition|)
block|{
name|rc
operator|.
name|setStatus
argument_list|(
name|status
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
if|if
condition|(
name|ch
operator|.
name|errors
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|courseNbr
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|subject
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|status
operator|!=
literal|null
condition|)
for|for
control|(
name|ChangeError
name|er
range|:
name|ch
operator|.
name|errors
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|status
operator|==
name|ChangeStatus
operator|.
name|denied
condition|)
block|{
name|request
operator|.
name|addConfirmationError
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|er
operator|.
name|code
argument_list|,
literal|"Denied "
operator|+
name|er
operator|.
name|message
argument_list|,
name|status
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|,
name|ORD_BANNER
argument_list|)
expr_stmt|;
name|request
operator|.
name|setErrorMessage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.messages.waitlist.deniedOverrideError"
argument_list|,
literal|"One or more wait-listed courses require registration overrides which have been denied.\nYou cannot wait-list these courses."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|er
operator|.
name|code
argument_list|,
name|er
operator|.
name|message
argument_list|,
name|status
argument_list|(
name|ch
operator|.
name|status
argument_list|)
argument_list|,
name|ORD_BANNER
argument_list|)
expr_stmt|;
block|}
block|}
name|rc
operator|.
name|setStatusNote
argument_list|(
name|SpecialRegistrationHelper
operator|.
name|note
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setRequestorNote
argument_list|(
name|r
operator|.
name|requestorNotes
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setRequestId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"Null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkEligibility
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|EligibilityCheck
name|check
parameter_list|,
name|XStudent
name|student
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return;
comment|// Do not check eligibility when validation is disabled
if|if
condition|(
operator|!
name|isValidationEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|)
condition|)
return|return;
if|if
condition|(
operator|!
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
condition|)
return|return;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckEligibility
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
operator|(
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|hasApiGetTime
argument_list|()
condition|?
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|getApiGetTime
argument_list|()
else|:
literal|0l
operator|)
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
name|CheckEligibilityResponse
name|eligibility
init|=
operator|(
name|CheckEligibilityResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|CheckEligibilityResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|CheckEligibilityResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Eligibility: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|eligibility
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"wl-eligibility"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|eligibility
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|eligibility
operator|.
name|status
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|eligibility
operator|.
name|message
operator|==
literal|null
operator|||
name|eligibility
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to check wait-list eligibility ("
operator|+
name|eligibility
operator|.
name|status
operator|+
literal|")."
else|:
name|eligibility
operator|.
name|message
argument_list|)
throw|;
if|if
condition|(
name|eligibility
operator|.
name|data
operator|!=
literal|null
operator|&&
name|eligibility
operator|.
name|data
operator|.
name|eligible
operator|!=
literal|null
operator|&&
name|eligibility
operator|.
name|data
operator|.
name|eligible
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|WAIT_LIST_VALIDATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|eligibility
operator|.
name|data
operator|!=
literal|null
operator|&&
name|eligibility
operator|.
name|data
operator|.
name|eligibilityProblems
operator|!=
literal|null
condition|)
block|{
name|String
name|m
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EligibilityProblem
name|p
range|:
name|eligibility
operator|.
name|data
operator|.
name|eligibilityProblems
control|)
if|if
condition|(
name|m
operator|==
literal|null
condition|)
name|m
operator|=
name|p
operator|.
name|message
expr_stmt|;
else|else
name|m
operator|+=
literal|"\n"
operator|+
name|p
operator|.
name|message
expr_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
name|check
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|exceptionFailedEligibilityCheck
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"Null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|hasOverride
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
block|{
if|if
condition|(
name|student
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|student
operator|.
name|getMaxCredit
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|true
return|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isWaitlist
argument_list|()
argument_list|)
operator|&&
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isAlternative
argument_list|()
argument_list|)
operator|&&
operator|!
name|cd
operator|.
name|isEnrolled
argument_list|()
condition|)
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|updateStudent
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|Student
name|student
parameter_list|,
name|Builder
name|action
parameter_list|)
throws|throws
name|SectioningException
block|{
comment|// No pending overrides -> nothing to do
if|if
condition|(
name|student
operator|==
literal|null
operator|||
operator|!
name|hasOverride
argument_list|(
name|student
argument_list|)
condition|)
return|return
literal|false
return|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
operator|(
name|server
operator|==
literal|null
condition|?
operator|new
name|AcademicSessionInfo
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
else|:
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|)
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|action
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatusResponse
name|status
init|=
operator|(
name|SpecialRegistrationStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Status: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"wl-status"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isWaitlist
argument_list|()
argument_list|)
operator|&&
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isAlternative
argument_list|()
argument_list|)
operator|&&
operator|!
name|cd
operator|.
name|isEnrolled
argument_list|()
condition|)
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"TBD"
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
argument_list|)
condition|)
block|{
name|SpecialRegistration
name|req
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|status
operator|.
name|data
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
condition|)
block|{
name|req
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|req
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|cr
operator|.
name|getCourseRequestOverrideStatus
argument_list|()
operator|!=
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
condition|)
block|{
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|Integer
name|oldStatus
init|=
name|cr
operator|.
name|getOverrideStatus
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|status
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
condition|)
block|{
case|case
name|OVERRIDE_REJECTED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|PENDING
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|oldStatus
operator|==
literal|null
operator|||
operator|!
name|oldStatus
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|getOverrideStatus
argument_list|()
argument_list|)
condition|)
block|{
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|boolean
name|studentChanged
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|data
operator|.
name|maxCredit
operator|!=
literal|null
operator|&&
operator|!
name|status
operator|.
name|data
operator|.
name|maxCredit
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setMaxCredit
argument_list|(
name|status
operator|.
name|data
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SpecialRegistration
name|req
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|status
operator|.
name|data
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|student
operator|.
name|getOverrideExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
condition|)
block|{
name|req
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|req
operator|==
literal|null
operator|&&
name|student
operator|.
name|getMaxCreditOverrideIntent
argument_list|()
operator|==
name|CourseRequestOverrideIntent
operator|.
name|WAITLIST
condition|)
block|{
name|student
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideMaxCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideIntent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|Integer
name|oldStatus
init|=
name|student
operator|.
name|getOverrideStatus
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|status
argument_list|(
name|req
argument_list|,
literal|true
argument_list|)
condition|)
block|{
case|case
name|OVERRIDE_REJECTED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|PENDING
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|oldStatus
operator|==
literal|null
operator|||
operator|!
name|oldStatus
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getOverrideStatus
argument_list|()
argument_list|)
condition|)
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|studentChanged
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
operator|||
name|studentChanged
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|changed
operator|||
name|studentChanged
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"Null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|hasNotApprovedCourseRequestOverride
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
block|{
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isWaitlist
argument_list|()
argument_list|)
operator|&&
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isAlternative
argument_list|()
argument_list|)
operator|&&
operator|!
name|cd
operator|.
name|isEnrolled
argument_list|()
condition|)
block|{
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
operator|&&
name|cr
operator|.
name|getCourseRequestOverrideStatus
argument_list|()
operator|!=
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revalidateStudent
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|Student
name|student
parameter_list|,
name|Builder
name|action
parameter_list|)
throws|throws
name|SectioningException
block|{
comment|// Do not re-validate when validation is disabled
if|if
condition|(
operator|!
name|isValidationEnabled
argument_list|(
name|student
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// When there is a pending override, try to update student first
name|boolean
name|studentUpdated
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|hasOverride
argument_list|(
name|student
argument_list|)
condition|)
name|studentUpdated
operator|=
name|updateStudent
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// All course requests are approved -> nothing to do
if|if
condition|(
operator|!
name|hasNotApprovedCourseRequestOverride
argument_list|(
name|student
argument_list|)
operator|&&
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.forceRevalidation"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
name|XStudent
name|original
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|SpecialRegistrationRequest
name|submitRequest
init|=
operator|new
name|SpecialRegistrationRequest
argument_list|()
decl_stmt|;
name|submitRequest
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|submitRequest
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|submitRequest
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|submitRequest
operator|.
name|mode
operator|=
name|getSpecialRegistrationApiMode
argument_list|()
expr_stmt|;
name|submitRequest
operator|.
name|changes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|submitRequest
operator|.
name|requestorId
operator|=
name|getRequestorId
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|submitRequest
operator|.
name|requestorRole
operator|=
name|getRequestorType
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
name|Float
name|maxCredit
init|=
literal|null
decl_stmt|;
name|Float
name|maxCreditNeeded
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isWaitlist
argument_list|()
argument_list|)
operator|&&
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isAlternative
argument_list|()
argument_list|)
operator|&&
operator|!
name|cd
operator|.
name|isEnrolled
argument_list|()
condition|)
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
comment|// skip courses that cannot be wait-listed
if|if
condition|(
operator|!
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|effectiveWaitList
argument_list|()
condition|)
continue|continue;
comment|// skip cases where the wait-list request was cancelled
if|if
condition|(
literal|"TBD"
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
argument_list|)
condition|)
continue|continue;
comment|// get possible enrollments into the course
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
init|=
operator|new
name|AssignmentMap
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|CourseRequest
name|courseRequest
init|=
name|SectioningRequest
operator|.
name|convert
argument_list|(
name|assignment
argument_list|,
operator|new
name|XCourseRequest
argument_list|(
name|student
argument_list|,
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|,
literal|0
argument_list|,
name|helper
argument_list|,
literal|null
argument_list|)
argument_list|,
name|server
argument_list|,
name|WaitListMode
operator|.
name|WaitList
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Enrollment
argument_list|>
name|enrls
init|=
name|courseRequest
operator|.
name|getEnrollmentsSkipSameTime
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
comment|// get a test enrollment (preferably a non-conflicting one)
name|Enrollment
name|testEnrollment
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|e
init|=
name|enrls
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|testEnrollment
operator|=
name|e
operator|.
name|next
argument_list|()
expr_stmt|;
name|boolean
name|overlaps
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Request
name|q
range|:
name|testEnrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|q
operator|.
name|equals
argument_list|(
name|courseRequest
argument_list|)
condition|)
continue|continue;
name|Enrollment
name|x
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|SctAssignment
argument_list|>
name|i
init|=
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SctAssignment
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|isOverlapping
argument_list|(
name|testEnrollment
operator|.
name|getAssignments
argument_list|()
argument_list|)
condition|)
block|{
name|overlaps
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|overlaps
condition|)
break|break;
block|}
comment|// no test enrollment, take first possible enrollment
if|if
condition|(
name|testEnrollment
operator|==
literal|null
condition|)
block|{
name|Course
name|c
init|=
name|courseRequest
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|c
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|courseRequest
operator|.
name|isNotAllowed
argument_list|(
name|c
argument_list|,
name|config
argument_list|)
condition|)
continue|continue;
name|testEnrollment
operator|=
name|firstEnrollment
argument_list|(
name|courseRequest
argument_list|,
name|assignment
argument_list|,
name|c
argument_list|,
name|config
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|// still no test enrollment -> ignore
if|if
condition|(
name|testEnrollment
operator|==
literal|null
condition|)
continue|continue;
comment|// create request
name|CheckRestrictionsRequest
name|req
init|=
operator|new
name|CheckRestrictionsRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|studentId
operator|=
name|getBannerId
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|req
operator|.
name|term
operator|=
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|campus
operator|=
name|getBannerCampus
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|mode
operator|=
name|getSpecialRegistrationApiMode
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|crns
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|testEnrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|String
name|crn
init|=
name|getCRN
argument_list|(
name|section
argument_list|,
name|testEnrollment
operator|.
name|getCourse
argument_list|()
argument_list|)
decl_stmt|;
name|SpecialRegistrationHelper
operator|.
name|addWaitListCrn
argument_list|(
name|req
argument_list|,
name|crn
argument_list|)
expr_stmt|;
name|crns
operator|.
name|add
argument_list|(
name|crn
argument_list|)
expr_stmt|;
block|}
comment|// call validation
name|CheckRestrictionsResponse
name|validation
init|=
literal|null
decl_stmt|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiValidationSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"wl-req-"
operator|+
name|testEnrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|CheckRestrictionsRequest
argument_list|>
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|setApiPostTime
argument_list|(
operator|(
name|action
operator|.
name|hasApiPostTime
argument_list|()
condition|?
name|action
operator|.
name|getApiPostTime
argument_list|()
else|:
literal|0
operator|)
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|validation
operator|=
operator|(
name|CheckRestrictionsResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|CheckRestrictionsResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|CheckRestrictionsResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|validation
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"wl-resp-"
operator|+
name|testEnrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|validation
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|validation
operator|.
name|status
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|validation
operator|.
name|message
operator|==
literal|null
operator|||
name|validation
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to check student eligibility ("
operator|+
name|validation
operator|.
name|status
operator|+
literal|")."
else|:
name|validation
operator|.
name|message
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|validation
operator|.
name|outJson
operator|!=
literal|null
operator|&&
name|validation
operator|.
name|outJson
operator|.
name|problems
operator|!=
literal|null
condition|)
name|problems
label|:
for|for
control|(
name|Problem
name|problem
range|:
name|validation
operator|.
name|outJson
operator|.
name|problems
control|)
block|{
if|if
condition|(
literal|"HOLD"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"DUPL"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"MAXI"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"CLOS"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"TIME"
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|code
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|crns
operator|.
name|contains
argument_list|(
name|problem
operator|.
name|crn
argument_list|)
condition|)
continue|continue;
name|Change
name|change
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Change
name|ch
range|:
name|submitRequest
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|subject
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
operator|&&
name|ch
operator|.
name|courseNbr
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
condition|)
block|{
name|change
operator|=
name|ch
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
name|change
operator|=
operator|new
name|Change
argument_list|()
expr_stmt|;
name|change
operator|.
name|subject
operator|=
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
expr_stmt|;
name|change
operator|.
name|courseNbr
operator|=
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
expr_stmt|;
name|change
operator|.
name|crn
operator|=
literal|""
expr_stmt|;
name|change
operator|.
name|errors
operator|=
operator|new
name|ArrayList
argument_list|<
name|ChangeError
argument_list|>
argument_list|()
expr_stmt|;
name|change
operator|.
name|operation
operator|=
name|ChangeOperation
operator|.
name|ADD
expr_stmt|;
name|submitRequest
operator|.
name|changes
operator|.
name|add
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|ChangeError
name|err
range|:
name|change
operator|.
name|errors
control|)
if|if
condition|(
name|problem
operator|.
name|code
operator|.
name|equals
argument_list|(
name|err
operator|.
name|code
argument_list|)
condition|)
continue|continue
name|problems
continue|;
block|}
name|ChangeError
name|err
init|=
operator|new
name|ChangeError
argument_list|()
decl_stmt|;
name|err
operator|.
name|code
operator|=
name|problem
operator|.
name|code
expr_stmt|;
name|err
operator|.
name|message
operator|=
name|problem
operator|.
name|message
expr_stmt|;
if|if
condition|(
name|err
operator|.
name|message
operator|!=
literal|null
operator|&&
name|err
operator|.
name|message
operator|.
name|indexOf
argument_list|(
literal|"this section"
argument_list|)
operator|>=
literal|0
condition|)
name|err
operator|.
name|message
operator|=
name|err
operator|.
name|message
operator|.
name|replace
argument_list|(
literal|"this section"
argument_list|,
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|.
name|message
operator|!=
literal|null
operator|&&
name|err
operator|.
name|message
operator|.
name|indexOf
argument_list|(
literal|" (CRN "
argument_list|)
operator|>=
literal|0
condition|)
name|err
operator|.
name|message
operator|=
name|err
operator|.
name|message
operator|.
name|replaceFirst
argument_list|(
literal|" \\(CRN [0-9][0-9][0-9][0-9][0-9]\\) "
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|change
operator|.
name|errors
operator|.
name|add
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxCredit
operator|==
literal|null
operator|&&
name|validation
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
name|maxCredit
operator|=
name|validation
operator|.
name|maxCredit
expr_stmt|;
if|if
condition|(
name|validation
operator|.
name|outJson
operator|.
name|maxHoursCalc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|maxCreditNeeded
operator|==
literal|null
operator|||
name|maxCreditNeeded
operator|<
name|validation
operator|.
name|outJson
operator|.
name|maxHoursCalc
condition|)
name|maxCreditNeeded
operator|=
name|validation
operator|.
name|outJson
operator|.
name|maxHoursCalc
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|maxCredit
operator|==
literal|null
condition|)
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.specreg.maxCreditDefault"
argument_list|,
literal|"18"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxCreditNeeded
operator|!=
literal|null
operator|&&
name|maxCreditNeeded
operator|>
name|maxCredit
condition|)
name|submitRequest
operator|.
name|maxCredit
operator|=
name|maxCreditNeeded
expr_stmt|;
name|submitRequest
operator|.
name|courseCreditHrs
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseCredit
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|CourseCredit
name|cc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
operator|!
name|cr
operator|.
name|isWaitlist
argument_list|()
operator|||
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
for|for
control|(
name|XCourseId
name|cid
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|XCourse
name|course
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|cc
operator|==
literal|null
condition|)
block|{
name|cc
operator|=
operator|new
name|CourseCredit
argument_list|()
expr_stmt|;
name|cc
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|cc
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|cc
operator|.
name|title
operator|=
name|course
operator|.
name|getTitle
argument_list|()
expr_stmt|;
name|cc
operator|.
name|creditHrs
operator|=
operator|(
name|course
operator|.
name|hasCredit
argument_list|()
condition|?
name|course
operator|.
name|getMinCredit
argument_list|()
else|:
literal|0f
operator|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cc
operator|.
name|alternatives
operator|==
literal|null
condition|)
name|cc
operator|.
name|alternatives
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseCredit
argument_list|>
argument_list|()
expr_stmt|;
name|CourseCredit
name|acc
init|=
operator|new
name|CourseCredit
argument_list|()
decl_stmt|;
name|acc
operator|.
name|subject
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|acc
operator|.
name|courseNbr
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|acc
operator|.
name|title
operator|=
name|course
operator|.
name|getTitle
argument_list|()
expr_stmt|;
name|acc
operator|.
name|creditHrs
operator|=
operator|(
name|course
operator|.
name|hasCredit
argument_list|()
condition|?
name|course
operator|.
name|getMinCredit
argument_list|()
else|:
literal|0f
operator|)
expr_stmt|;
name|cc
operator|.
name|alternatives
operator|.
name|add
argument_list|(
name|acc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|cc
operator|!=
literal|null
condition|)
name|submitRequest
operator|.
name|courseCreditHrs
operator|.
name|add
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
name|SpecialRegistrationResponseList
name|response
init|=
literal|null
decl_stmt|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteSubmitRegistration
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Submit Request: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|submitRequest
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"wl-request"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|submitRequest
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationRequest
argument_list|>
argument_list|(
name|submitRequest
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|setApiPostTime
argument_list|(
name|action
operator|.
name|getApiPostTime
argument_list|()
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
name|response
operator|=
operator|(
name|SpecialRegistrationResponseList
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationResponseList
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationResponseList
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Submit Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"wl-response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|response
operator|.
name|status
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|response
operator|.
name|message
operator|==
literal|null
operator|||
name|response
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to request overrides ("
operator|+
name|response
operator|.
name|status
operator|+
literal|")."
else|:
name|response
operator|.
name|message
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isWaitlist
argument_list|()
argument_list|)
operator|&&
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isAlternative
argument_list|()
argument_list|)
operator|&&
operator|!
name|cd
operator|.
name|isEnrolled
argument_list|()
condition|)
name|cr
label|:
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|data
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|response
operator|.
name|data
control|)
if|if
condition|(
name|r
operator|.
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|Change
name|ch
range|:
name|r
operator|.
name|changes
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|subject
argument_list|)
operator|&&
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|ch
operator|.
name|courseNbr
argument_list|)
condition|)
block|{
name|Integer
name|oldStatus
init|=
name|cr
operator|.
name|getOverrideStatus
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|status
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
condition|)
block|{
case|case
name|OVERRIDE_REJECTED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|PENDING
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|oldStatus
operator|==
literal|null
operator|||
operator|!
name|oldStatus
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|getOverrideStatus
argument_list|()
argument_list|)
condition|)
name|changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
condition|)
name|changed
operator|=
literal|true
expr_stmt|;
name|cr
operator|.
name|setOverrideExternalId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideTimeStamp
argument_list|(
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseRequestOverrideIntent
argument_list|(
name|CourseRequestOverrideIntent
operator|.
name|WAITLIST
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
continue|continue
name|cr
continue|;
block|}
block|}
block|}
if|if
condition|(
operator|!
literal|"TBD"
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
argument_list|)
operator|&&
operator|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
operator|||
name|cr
operator|.
name|getOverrideStatus
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|cr
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideIntent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|studentChanged
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|submitRequest
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|response
operator|.
name|data
control|)
block|{
if|if
condition|(
name|r
operator|.
name|maxCredit
operator|!=
literal|null
condition|)
block|{
name|Integer
name|oldStatus
init|=
name|student
operator|.
name|getOverrideStatus
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|status
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
condition|)
block|{
case|case
name|OVERRIDE_REJECTED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|PENDING
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|oldStatus
operator|==
literal|null
operator|||
operator|!
name|oldStatus
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getOverrideStatus
argument_list|()
argument_list|)
condition|)
name|studentChanged
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getOverrideMaxCredit
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|student
operator|.
name|getOverrideMaxCredit
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|maxCredit
argument_list|)
condition|)
name|studentChanged
operator|=
literal|true
expr_stmt|;
name|student
operator|.
name|setOverrideMaxCredit
argument_list|(
name|r
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getOverrideExternalId
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|student
operator|.
name|getOverrideExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
condition|)
name|studentChanged
operator|=
literal|true
expr_stmt|;
name|student
operator|.
name|setOverrideExternalId
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideTimeStamp
argument_list|(
name|r
operator|.
name|dateCreated
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|dateCreated
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setMaxCreditOverrideIntent
argument_list|(
name|CourseRequestOverrideIntent
operator|.
name|WAITLIST
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|else if
condition|(
name|student
operator|.
name|getMaxCreditOverrideIntent
argument_list|()
operator|==
name|CourseRequestOverrideIntent
operator|.
name|WAITLIST
condition|)
block|{
name|student
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideMaxCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideIntent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|studentChanged
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|changed
operator|||
name|studentChanged
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|changed
operator|||
name|studentChanged
operator|||
name|studentUpdated
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
try|try
block|{
name|iClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|updateStudents
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|List
argument_list|<
name|Student
argument_list|>
name|students
parameter_list|)
throws|throws
name|SectioningException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|id2student
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|reloadIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|batchNumber
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|students
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
init|=
name|students
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
operator|||
operator|!
name|hasOverride
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|isValidationEnabled
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
name|String
name|id
init|=
name|getBannerId
argument_list|(
name|student
argument_list|)
decl_stmt|;
name|id2student
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|id2student
operator|.
name|size
argument_list|()
operator|>=
literal|100
condition|)
block|{
name|checkStudentStatuses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|id2student
argument_list|,
name|reloadIds
argument_list|,
name|batchNumber
operator|++
argument_list|)
expr_stmt|;
name|id2student
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|id2student
operator|.
name|isEmpty
argument_list|()
condition|)
name|checkStudentStatuses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|id2student
argument_list|,
name|reloadIds
argument_list|,
name|batchNumber
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reloadIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|reloadIds
operator|.
name|isEmpty
argument_list|()
operator|&&
name|server
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|server
operator|instanceof
name|DatabaseServer
operator|)
condition|)
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|ReloadStudent
operator|.
name|class
argument_list|)
operator|.
name|forStudents
argument_list|(
name|reloadIds
argument_list|)
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reloadIds
return|;
block|}
specifier|protected
name|void
name|checkStudentStatuses
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|id2student
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|reloadIds
parameter_list|,
name|int
name|batchNumber
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckAllSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
operator|(
name|server
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|)
decl_stmt|;
name|String
name|studentIds
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|e
range|:
name|id2student
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
name|session
operator|=
operator|new
name|AcademicSessionInfo
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentIds
operator|==
literal|null
condition|)
name|studentIds
operator|=
name|e
operator|.
name|getKey
argument_list|()
expr_stmt|;
else|else
name|studentIds
operator|+=
literal|","
operator|+
name|e
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentIds"
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|helper
operator|.
name|getAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentIds-"
operator|+
name|batchNumber
argument_list|)
operator|.
name|setValue
argument_list|(
name|studentIds
argument_list|)
expr_stmt|;
block|}
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|setApiGetTime
argument_list|(
name|action
operator|.
name|getApiGetTime
argument_list|()
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
name|SpecialRegistrationMultipleStatusResponse
name|response
init|=
operator|(
name|SpecialRegistrationMultipleStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationMultipleStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationMultipleStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Response: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"wl-response-"
operator|+
name|batchNumber
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResponseStatus
operator|.
name|success
operator|!=
name|response
operator|.
name|status
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|response
operator|.
name|message
operator|==
literal|null
operator|||
name|response
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"Failed to check student statuses ("
operator|+
name|response
operator|.
name|status
operator|+
literal|")."
else|:
name|response
operator|.
name|message
argument_list|)
throw|;
if|if
condition|(
name|response
operator|.
name|data
operator|!=
literal|null
operator|&&
name|response
operator|.
name|data
operator|.
name|students
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SpecialRegistrationStatus
name|status
range|:
name|response
operator|.
name|data
operator|.
name|students
control|)
block|{
name|String
name|studentId
init|=
name|status
operator|.
name|studentId
decl_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
operator|&&
name|status
operator|.
name|requests
operator|!=
literal|null
condition|)
for|for
control|(
name|SpecialRegistration
name|req
range|:
name|status
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|req
operator|.
name|studentId
operator|!=
literal|null
condition|)
block|{
name|studentId
operator|=
name|req
operator|.
name|studentId
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
name|studentId
operator|=
name|ids
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
init|=
name|id2student
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isWaitlist
argument_list|()
argument_list|)
operator|&&
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isAlternative
argument_list|()
argument_list|)
operator|&&
operator|!
name|cd
operator|.
name|isEnrolled
argument_list|()
condition|)
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SpecialRegistration
name|req
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|status
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
condition|)
block|{
name|req
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|req
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|cr
operator|.
name|getCourseRequestOverrideStatus
argument_list|()
operator|!=
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
condition|)
block|{
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|Integer
name|oldStatus
init|=
name|cr
operator|.
name|getOverrideStatus
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|status
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
condition|)
block|{
case|case
name|OVERRIDE_REJECTED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|PENDING
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|oldStatus
operator|==
literal|null
operator|||
operator|!
name|oldStatus
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|getOverrideStatus
argument_list|()
argument_list|)
condition|)
block|{
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|boolean
name|studentChanged
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|maxCredit
operator|!=
literal|null
operator|&&
operator|!
name|status
operator|.
name|maxCredit
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setMaxCredit
argument_list|(
name|status
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|.
name|getOverrideExternalId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SpecialRegistration
name|req
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|status
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|student
operator|.
name|getOverrideExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|regRequestId
argument_list|)
condition|)
block|{
name|req
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|req
operator|==
literal|null
operator|&&
name|student
operator|.
name|getMaxCreditOverrideIntent
argument_list|()
operator|==
name|CourseRequestOverrideIntent
operator|.
name|WAITLIST
condition|)
block|{
name|student
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideMaxCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideIntent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|Integer
name|oldStatus
init|=
name|student
operator|.
name|getOverrideStatus
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|status
argument_list|(
name|req
argument_list|,
literal|true
argument_list|)
condition|)
block|{
case|case
name|OVERRIDE_REJECTED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|PENDING
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|oldStatus
operator|==
literal|null
operator|||
operator|!
name|oldStatus
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getOverrideStatus
argument_list|()
argument_list|)
condition|)
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|studentChanged
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
operator|||
name|studentChanged
condition|)
name|reloadIds
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateStudent
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|Builder
name|action
parameter_list|)
throws|throws
name|SectioningException
block|{
comment|// No pending overrides -> nothing to do
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getSpecialRegistrationApiSiteCheckSpecialRegistrationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|getBannerCampus
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"campus"
argument_list|,
name|campus
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"mode"
argument_list|,
name|getSpecialRegistrationApiMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"term"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|setValue
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"apiKey"
argument_list|,
name|getSpecialRegistrationApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|action
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
name|SpecialRegistrationStatusResponse
name|status
init|=
operator|(
name|SpecialRegistrationStatusResponse
operator|)
operator|new
name|GsonRepresentation
argument_list|<
name|SpecialRegistrationStatusResponse
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|SpecialRegistrationStatusResponse
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Status: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"wl-status"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|studentChanged
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|isWaitlist
argument_list|()
operator|&&
operator|!
name|cr
operator|.
name|isAlternative
argument_list|()
operator|&&
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
operator|&&
name|cr
operator|.
name|hasOverrides
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|XCourseId
argument_list|,
name|XOverride
argument_list|>
name|e
range|:
name|cr
operator|.
name|getOverrides
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|XCourseId
name|course
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|XOverride
name|override
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"TBD"
operator|.
name|equals
argument_list|(
name|override
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|SpecialRegistration
name|req
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|q
range|:
name|status
operator|.
name|data
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|override
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|q
operator|.
name|regRequestId
argument_list|)
condition|)
block|{
name|req
operator|=
name|q
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|req
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|override
operator|.
name|getStatus
argument_list|()
operator|!=
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|override
operator|.
name|setStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|CourseDemand
name|dbCourseDemand
init|=
name|CourseDemandDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|cr
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbCourseDemand
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|dbCourseRequest
range|:
name|dbCourseDemand
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|dbCourseRequest
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|dbCourseRequest
operator|.
name|setOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbCourseRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|Integer
name|oldStatus
init|=
name|override
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|Integer
name|newStatus
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|status
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
condition|)
block|{
case|case
name|OVERRIDE_REJECTED
case|:
name|newStatus
operator|=
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
operator|.
name|ordinal
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|newStatus
operator|=
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
operator|.
name|ordinal
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|newStatus
operator|=
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|newStatus
operator|=
name|CourseRequestOverrideStatus
operator|.
name|PENDING
operator|.
name|ordinal
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|newStatus
operator|!=
literal|null
operator|&&
operator|!
name|newStatus
operator|.
name|equals
argument_list|(
name|oldStatus
argument_list|)
condition|)
block|{
name|override
operator|.
name|setStatus
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
name|CourseDemand
name|dbCourseDemand
init|=
name|CourseDemandDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|cr
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbCourseDemand
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|dbCourseRequest
range|:
name|dbCourseDemand
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|dbCourseRequest
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|dbCourseRequest
operator|.
name|setOverrideStatus
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbCourseRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|status
operator|.
name|data
operator|.
name|maxCredit
operator|!=
literal|null
operator|&&
operator|!
name|status
operator|.
name|data
operator|.
name|maxCredit
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setMaxCredit
argument_list|(
name|status
operator|.
name|data
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
name|Student
name|dbStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbStudent
operator|!=
literal|null
condition|)
block|{
name|dbStudent
operator|.
name|setMaxCredit
argument_list|(
name|status
operator|.
name|data
operator|.
name|maxCredit
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbStudent
argument_list|)
expr_stmt|;
block|}
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SpecialRegistration
name|req
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SpecialRegistration
name|r
range|:
name|status
operator|.
name|data
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|regRequestId
operator|!=
literal|null
operator|&&
name|r
operator|.
name|regRequestId
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|)
block|{
name|req
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
block|{
name|Integer
name|oldStatus
init|=
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|Integer
name|newStatus
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|status
argument_list|(
name|req
argument_list|,
literal|true
argument_list|)
condition|)
block|{
case|case
name|OVERRIDE_REJECTED
case|:
name|newStatus
operator|=
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
operator|.
name|ordinal
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|newStatus
operator|=
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
operator|.
name|ordinal
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|newStatus
operator|=
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|newStatus
operator|=
name|CourseRequestOverrideStatus
operator|.
name|PENDING
operator|.
name|ordinal
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|newStatus
operator|==
literal|null
operator|||
operator|!
name|newStatus
operator|.
name|equals
argument_list|(
name|oldStatus
argument_list|)
condition|)
block|{
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|setStatus
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
name|Student
name|dbStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbStudent
operator|!=
literal|null
condition|)
block|{
name|dbStudent
operator|.
name|setOverrideStatus
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|dbStudent
argument_list|)
expr_stmt|;
block|}
name|studentChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|studentChanged
condition|)
block|{
name|server
operator|.
name|update
argument_list|(
name|student
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|studentChanged
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|studentChanged
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|action
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"Null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

