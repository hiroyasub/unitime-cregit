begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|ChallengeScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DegreePlanInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseRequestsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CriticalCoursesProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomCourseLookupHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|DegreePlansProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|XEInterface
operator|.
name|PlaceHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|StatusPageSuggestionsAction
operator|.
name|StudentMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|DegreeWorksCourseRequests
implements|implements
name|CourseRequestsProvider
implements|,
name|DegreePlansProvider
implements|,
name|CriticalCoursesProvider
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DegreeWorksCourseRequests
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningConstants
name|CONST
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Client
name|iClient
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|public
name|DegreeWorksCourseRequests
parameter_list|()
block|{
name|List
argument_list|<
name|Protocol
argument_list|>
name|protocols
init|=
operator|new
name|ArrayList
argument_list|<
name|Protocol
argument_list|>
argument_list|()
decl_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
expr_stmt|;
name|iClient
operator|=
operator|new
name|Client
argument_list|(
name|protocols
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getDegreeWorksApiSite
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.site"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getDegreeWorksApiUser
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.user"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getDegreeWorksApiPassword
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.password"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getDegreeWorksApiEffectiveOnly
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.effectiveOnly"
argument_list|,
literal|"false"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getDegreeWorksErrorPattern
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.errorPattern"
argument_list|,
literal|"<div class=\"exceptionMessage\">\n(.*)\n\n</div>"
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|getDegreeWorksActiveOnly
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.activeOnly"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getDegreeWorksNoPlansMessage
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.noPlansMessage"
argument_list|,
literal|"No active degree plan is available."
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getCreditSQL
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.creditSQL"
argument_list|,
literal|"select subject_code, course_numb, course_title, final_grade from timetable.szv_utm_apcredit where puid = :puid and final_grade != 'F'"
argument_list|)
return|;
block|}
specifier|protected
name|int
name|getDegreeWorksNrAttempts
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.nrAttempts"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|Query
name|getStudentFilter
parameter_list|()
block|{
name|String
name|filter
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.studentFilter"
argument_list|)
decl_stmt|;
return|return
operator|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|Query
argument_list|(
name|filter
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|XStudentId
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getBannerTerm
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
return|return
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|session
argument_list|)
return|;
block|}
specifier|protected
name|Gson
name|getGson
parameter_list|(
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|GsonBuilder
name|builder
init|=
operator|new
name|GsonBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|builder
operator|.
name|setPrettyPrinting
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|create
argument_list|()
return|;
block|}
specifier|protected
name|XCourseId
name|getCourse
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|XEInterface
operator|.
name|Course
name|course
parameter_list|)
block|{
name|Collection
argument_list|<
name|?
extends|extends
name|XCourseId
argument_list|>
name|courses
init|=
name|server
operator|.
name|findCourses
argument_list|(
name|course
operator|.
name|courseDiscipline
operator|+
literal|" "
operator|+
name|course
operator|.
name|courseNumber
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|XCourseId
name|c
range|:
name|courses
control|)
if|if
condition|(
name|c
operator|.
name|matchTitle
argument_list|(
name|course
operator|.
name|title
argument_list|)
condition|)
return|return
name|c
return|;
for|for
control|(
name|XCourseId
name|c
range|:
name|courses
control|)
if|if
condition|(
name|c
operator|.
name|getCourseName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|course
operator|.
name|courseDiscipline
operator|+
literal|" "
operator|+
name|course
operator|.
name|courseNumber
argument_list|)
condition|)
return|return
name|c
return|;
if|if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|||
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.firstSuffixedCourse"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
for|for
control|(
name|XCourseId
name|c
range|:
name|courses
control|)
return|return
name|c
return|;
if|if
condition|(
operator|!
name|courses
operator|.
name|isEmpty
argument_list|()
operator|||
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.includeNotOfferedCourses"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
return|return
operator|new
name|XCourseId
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|course
operator|.
name|courseDiscipline
operator|+
literal|" "
operator|+
name|course
operator|.
name|courseNumber
argument_list|)
return|;
return|return
literal|null
return|;
block|}
specifier|protected
name|OnlineSectioningLog
operator|.
name|Entity
name|toEntity
parameter_list|(
name|XEInterface
operator|.
name|Course
name|course
parameter_list|,
name|XCourseId
name|courseId
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|builder
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|courseId
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setUniqueId
argument_list|(
name|courseId
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|courseId
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExternalId
argument_list|(
name|course
operator|.
name|courseDiscipline
operator|+
literal|" "
operator|+
name|course
operator|.
name|courseNumber
operator|+
operator|(
name|course
operator|.
name|title
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|title
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" - "
operator|+
name|course
operator|.
name|title
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|protected
name|OnlineSectioningLog
operator|.
name|Entity
name|toEntity
parameter_list|(
name|XCourseId
name|courseId
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|builder
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|courseId
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setUniqueId
argument_list|(
name|courseId
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|courseId
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|protected
name|boolean
name|hasSelection
parameter_list|(
name|XEInterface
operator|.
name|Group
name|group
parameter_list|)
block|{
if|if
condition|(
literal|"CH"
operator|.
name|equals
argument_list|(
name|group
operator|.
name|groupType
operator|.
name|code
argument_list|)
condition|)
block|{
comment|// choice group -- there is at least one course or group selected
for|for
control|(
name|XEInterface
operator|.
name|Course
name|course
range|:
name|group
operator|.
name|plannedClasses
control|)
if|if
condition|(
name|course
operator|.
name|isGroupSelection
condition|)
return|return
literal|true
return|;
for|for
control|(
name|XEInterface
operator|.
name|Group
name|g
range|:
name|group
operator|.
name|groups
control|)
if|if
condition|(
name|hasSelection
argument_list|(
name|g
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|group
operator|.
name|isGroupSelection
return|;
block|}
block|}
specifier|protected
name|void
name|fillInRequests
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|,
name|XEInterface
operator|.
name|Group
name|group
parameter_list|)
block|{
if|if
condition|(
literal|"CH"
operator|.
name|equals
argument_list|(
name|group
operator|.
name|groupType
operator|.
name|code
argument_list|)
condition|)
block|{
comment|// choice group -- pick (at least) one
comment|// try selected courses and groups first
name|boolean
name|hasSelection
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|Course
name|course
range|:
name|group
operator|.
name|plannedClasses
control|)
block|{
if|if
condition|(
name|course
operator|.
name|isGroupSelection
condition|)
block|{
name|XCourseId
name|cid
init|=
name|getCourse
argument_list|(
name|server
argument_list|,
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|b
init|=
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addRequestBuilder
argument_list|()
operator|.
name|setPriority
argument_list|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|setAlternative
argument_list|(
literal|false
argument_list|)
operator|.
name|addCourse
argument_list|(
name|toEntity
argument_list|(
name|course
argument_list|,
name|cid
argument_list|)
argument_list|)
decl_stmt|;
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
decl_stmt|;
name|RequestedCourse
name|rc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setCourseId
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCourseName
argument_list|(
name|cid
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCourseTitle
argument_list|(
name|cid
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cid
operator|instanceof
name|XCourse
condition|)
block|{
name|rc
operator|.
name|setCredit
argument_list|(
operator|(
operator|(
name|XCourse
operator|)
name|cid
operator|)
operator|.
name|getMinCredit
argument_list|()
argument_list|,
operator|(
operator|(
name|XCourse
operator|)
name|cid
operator|)
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|cid
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XCourse
name|c
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
name|rc
operator|.
name|setCredit
argument_list|(
name|c
operator|.
name|getMinCredit
argument_list|()
argument_list|,
name|c
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|hasSelection
operator|=
literal|true
expr_stmt|;
comment|// add other courses as alternatives
for|for
control|(
name|XEInterface
operator|.
name|Course
name|other
range|:
name|group
operator|.
name|plannedClasses
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|isGroupSelection
condition|)
block|{
name|XCourseId
name|ocid
init|=
name|getCourse
argument_list|(
name|server
argument_list|,
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|ocid
operator|==
literal|null
operator|||
name|ocid
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|RequestedCourse
name|orc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|orc
operator|.
name|setCourseId
argument_list|(
name|ocid
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|orc
operator|.
name|setCourseName
argument_list|(
name|ocid
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|orc
operator|.
name|setCourseTitle
argument_list|(
name|ocid
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ocid
operator|instanceof
name|XCourse
condition|)
block|{
name|orc
operator|.
name|setCredit
argument_list|(
operator|(
operator|(
name|XCourse
operator|)
name|ocid
operator|)
operator|.
name|getMinCredit
argument_list|()
argument_list|,
operator|(
operator|(
name|XCourse
operator|)
name|ocid
operator|)
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ocid
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XCourse
name|c
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|ocid
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
name|orc
operator|.
name|setCredit
argument_list|(
name|c
operator|.
name|getMinCredit
argument_list|()
argument_list|,
name|c
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|orc
argument_list|)
expr_stmt|;
name|b
operator|.
name|addCourse
argument_list|(
name|toEntity
argument_list|(
name|other
argument_list|,
name|ocid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|XEInterface
operator|.
name|Group
name|g
range|:
name|group
operator|.
name|groups
control|)
block|{
if|if
condition|(
name|hasSelection
argument_list|(
name|g
argument_list|)
condition|)
block|{
name|fillInRequests
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|request
argument_list|,
name|g
argument_list|)
expr_stmt|;
name|hasSelection
operator|=
literal|true
expr_stmt|;
comment|// add other courses as alternatives
for|for
control|(
name|XEInterface
operator|.
name|Course
name|other
range|:
name|group
operator|.
name|plannedClasses
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|isGroupSelection
condition|)
block|{
name|XCourseId
name|ocid
init|=
name|getCourse
argument_list|(
name|server
argument_list|,
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|ocid
operator|==
literal|null
operator|||
name|ocid
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|RequestedCourse
name|orc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|orc
operator|.
name|setCourseId
argument_list|(
name|ocid
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|orc
operator|.
name|setCourseName
argument_list|(
name|ocid
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|orc
operator|.
name|setCourseTitle
argument_list|(
name|ocid
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ocid
operator|instanceof
name|XCourse
condition|)
block|{
name|orc
operator|.
name|setCredit
argument_list|(
operator|(
operator|(
name|XCourse
operator|)
name|ocid
operator|)
operator|.
name|getMinCredit
argument_list|()
argument_list|,
operator|(
operator|(
name|XCourse
operator|)
name|ocid
operator|)
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ocid
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XCourse
name|c
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|ocid
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
name|orc
operator|.
name|setCredit
argument_list|(
name|c
operator|.
name|getMinCredit
argument_list|()
argument_list|,
name|c
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
literal|null
decl_stmt|;
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|b
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|r
operator|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
expr_stmt|;
name|b
operator|=
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addRequestBuilder
argument_list|()
operator|.
name|setPriority
argument_list|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|setAlternative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|b
operator|=
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|getRequestBuilder
argument_list|(
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|getRequestCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|orc
argument_list|)
expr_stmt|;
name|b
operator|.
name|addCourse
argument_list|(
name|toEntity
argument_list|(
name|other
argument_list|,
name|ocid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasSelection
condition|)
block|{
comment|// no selection -> use the first three courses as alternatives
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
decl_stmt|;
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|b
init|=
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPriority
argument_list|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|setAlternative
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|Course
name|course
range|:
name|group
operator|.
name|plannedClasses
control|)
block|{
name|XCourseId
name|cid
init|=
name|getCourse
argument_list|(
name|server
argument_list|,
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
operator|||
name|cid
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|RequestedCourse
name|rc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setCourseId
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCourseName
argument_list|(
name|cid
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCourseTitle
argument_list|(
name|cid
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cid
operator|instanceof
name|XCourse
condition|)
block|{
name|rc
operator|.
name|setCredit
argument_list|(
operator|(
operator|(
name|XCourse
operator|)
name|cid
operator|)
operator|.
name|getMinCredit
argument_list|()
argument_list|,
operator|(
operator|(
name|XCourse
operator|)
name|cid
operator|)
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|cid
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XCourse
name|c
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
name|rc
operator|.
name|setCredit
argument_list|(
name|c
operator|.
name|getMinCredit
argument_list|()
argument_list|,
name|c
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|b
operator|.
name|addCourse
argument_list|(
name|toEntity
argument_list|(
name|course
argument_list|,
name|cid
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addRequest
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// union group -- take all courses (and sub-groups)
for|for
control|(
name|XEInterface
operator|.
name|Course
name|course
range|:
name|group
operator|.
name|plannedClasses
control|)
block|{
name|XCourseId
name|cid
init|=
name|getCourse
argument_list|(
name|server
argument_list|,
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
continue|continue;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addRequestBuilder
argument_list|()
operator|.
name|setPriority
argument_list|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|setAlternative
argument_list|(
literal|false
argument_list|)
operator|.
name|addCourse
argument_list|(
name|toEntity
argument_list|(
name|course
argument_list|,
name|cid
argument_list|)
argument_list|)
expr_stmt|;
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
decl_stmt|;
name|RequestedCourse
name|rc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setCourseId
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCourseName
argument_list|(
name|cid
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCourseTitle
argument_list|(
name|cid
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cid
operator|instanceof
name|XCourse
condition|)
block|{
name|rc
operator|.
name|setCredit
argument_list|(
operator|(
operator|(
name|XCourse
operator|)
name|cid
operator|)
operator|.
name|getMinCredit
argument_list|()
argument_list|,
operator|(
operator|(
name|XCourse
operator|)
name|cid
operator|)
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|cid
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XCourse
name|c
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
name|rc
operator|.
name|setCredit
argument_list|(
name|c
operator|.
name|getMinCredit
argument_list|()
argument_list|,
name|c
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|XEInterface
operator|.
name|Group
name|g
range|:
name|group
operator|.
name|groups
control|)
name|fillInRequests
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|request
argument_list|,
name|g
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|toString
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|8192
index|]
decl_stmt|;
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|reader
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CourseRequestInterface
name|getCourseRequests
parameter_list|(
specifier|final
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudentId
name|student
parameter_list|)
throws|throws
name|SectioningException
block|{
try|try
block|{
name|Query
name|q
init|=
name|getStudentFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|XStudent
name|s
init|=
operator|(
name|student
operator|instanceof
name|XStudent
condition|?
operator|(
name|XStudent
operator|)
name|student
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
operator|||
operator|!
name|q
operator|.
name|match
argument_list|(
operator|new
name|StudentMatcher
argument_list|(
name|s
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
argument_list|,
name|server
argument_list|,
literal|false
argument_list|)
argument_list|)
condition|)
return|return
literal|null
return|;
block|}
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|studentId
init|=
name|getBannerId
argument_list|(
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Retrieving student plan for "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" (term: "
operator|+
name|term
operator|+
literal|", id:"
operator|+
name|studentId
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|String
name|effectiveOnly
init|=
name|getDegreeWorksApiEffectiveOnly
argument_list|()
decl_stmt|;
if|if
condition|(
name|effectiveOnly
operator|!=
literal|null
condition|)
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"effectiveOnly"
argument_list|)
operator|.
name|setValue
argument_list|(
name|effectiveOnly
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XEInterface
operator|.
name|DegreePlan
argument_list|>
name|current
init|=
literal|null
decl_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|current
operator|=
name|getDegreePlans
argument_list|(
name|term
argument_list|,
name|studentId
argument_list|,
name|effectiveOnly
argument_list|,
name|getDegreeWorksNrAttempts
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
operator|!
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|DegreePlan
name|plan
range|:
name|current
control|)
block|{
comment|// skip in-active plans
if|if
condition|(
name|plan
operator|.
name|isActive
operator|==
literal|null
operator|||
operator|!
name|plan
operator|.
name|isActive
operator|.
name|value
condition|)
continue|continue;
if|if
condition|(
name|plan
operator|.
name|years
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XEInterface
operator|.
name|Year
name|y
range|:
name|plan
operator|.
name|years
control|)
block|{
if|if
condition|(
name|y
operator|.
name|terms
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XEInterface
operator|.
name|Term
name|t
range|:
name|y
operator|.
name|terms
control|)
block|{
if|if
condition|(
name|t
operator|.
name|term
operator|!=
literal|null
operator|&&
name|term
operator|.
name|equals
argument_list|(
name|t
operator|.
name|term
operator|.
name|code
argument_list|)
operator|&&
name|t
operator|.
name|group
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Current degree plan: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|t
operator|.
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|CourseRequestInterface
name|request
init|=
operator|new
name|CourseRequestInterface
argument_list|()
decl_stmt|;
name|request
operator|.
name|setAcademicSessionId
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
name|fillInRequests
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|request
argument_list|,
name|t
operator|.
name|group
argument_list|)
expr_stmt|;
for|for
control|(
name|PlaceHolder
name|ph
range|:
name|t
operator|.
name|group
operator|.
name|plannedPlaceholders
control|)
block|{
name|List
argument_list|<
name|XCourseId
argument_list|>
name|phc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|CustomCourseLookupHolder
operator|.
name|hasProvider
argument_list|()
condition|)
name|phc
operator|=
name|CustomCourseLookupHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|getCourses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|ph
operator|.
name|placeholderValue
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XCourse
argument_list|>
name|courses
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|phc
operator|!=
literal|null
operator|&&
operator|!
name|phc
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|courses
operator|=
operator|new
name|ArrayList
argument_list|<
name|XCourse
argument_list|>
argument_list|()
expr_stmt|;
name|String
name|lastSubject
init|=
literal|null
decl_stmt|,
name|lastCourse
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XCourseId
name|cid
range|:
name|phc
control|)
block|{
name|XCourse
name|c
init|=
operator|(
name|cid
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|cid
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|cid
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|lastSubject
operator|!=
literal|null
operator|&&
name|lastSubject
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
operator|&&
name|lastCourse
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getCourseNumber
argument_list|()
operator|.
name|startsWith
argument_list|(
name|lastCourse
argument_list|)
condition|)
continue|continue;
name|courses
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|lastSubject
operator|=
name|iExternalTermProvider
operator|.
name|getExternalSubject
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|c
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|c
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|lastCourse
operator|=
name|iExternalTermProvider
operator|.
name|getExternalCourseNumber
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|c
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|c
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|courses
operator|!=
literal|null
operator|&&
operator|!
name|courses
operator|.
name|isEmpty
argument_list|()
operator|&&
name|courses
operator|.
name|size
argument_list|()
operator|<=
name|CONST
operator|.
name|degreePlanMaxAlternatives
argument_list|()
condition|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
decl_stmt|;
name|r
operator|.
name|setFilter
argument_list|(
name|ph
operator|.
name|placeholderValue
argument_list|)
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|b
init|=
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPriority
argument_list|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|setAlternative
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|courses
argument_list|,
operator|new
name|Comparator
argument_list|<
name|XCourse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|XCourse
name|c1
parameter_list|,
name|XCourse
name|c2
parameter_list|)
block|{
name|int
name|av1
init|=
literal|4
operator|*
name|c1
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|r1
init|=
name|server
operator|.
name|getRequests
argument_list|(
name|c1
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r1
operator|!=
literal|null
condition|)
for|for
control|(
name|XCourseRequest
name|r
range|:
name|r1
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|c1
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
name|av1
operator|-=
literal|3
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
operator|&&
name|r
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
operator|&&
name|r
operator|.
name|getCourseIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|c1
argument_list|)
condition|)
name|av1
operator|--
expr_stmt|;
block|}
name|int
name|av2
init|=
literal|4
operator|*
name|c2
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|r2
init|=
name|server
operator|.
name|getRequests
argument_list|(
name|c2
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r2
operator|!=
literal|null
condition|)
for|for
control|(
name|XCourseRequest
name|r
range|:
name|r2
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|c2
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
name|av2
operator|-=
literal|3
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
operator|&&
name|r
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
operator|&&
name|r
operator|.
name|getCourseIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|c2
argument_list|)
condition|)
name|av2
operator|--
expr_stmt|;
block|}
return|return
name|av1
operator|>
name|av2
condition|?
operator|-
literal|1
else|:
name|av2
operator|>
name|av1
condition|?
literal|1
else|:
name|c1
operator|.
name|compareTo
argument_list|(
name|c2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|XCourse
name|c
range|:
name|courses
control|)
block|{
name|RequestedCourse
name|orc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|orc
operator|.
name|setCourseId
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|orc
operator|.
name|setCourseName
argument_list|(
name|c
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|orc
operator|.
name|setCourseTitle
argument_list|(
name|c
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|orc
operator|.
name|setCredit
argument_list|(
name|c
operator|.
name|getMinCredit
argument_list|()
argument_list|,
name|c
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|orc
argument_list|)
expr_stmt|;
name|b
operator|.
name|addCourse
argument_list|(
name|toEntity
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addRequest
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.includePlaceHolders"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
decl_stmt|;
name|RequestedCourse
name|rc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setCourseName
argument_list|(
name|ph
operator|.
name|placeholderValue
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Course Requests: "
operator|+
name|request
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"No degree plan has been returned."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
try|try
block|{
name|iClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|DegreePlanInterface
operator|.
name|DegreeGroupInterface
name|toGroup
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XEInterface
operator|.
name|Group
name|g
parameter_list|)
block|{
name|DegreePlanInterface
operator|.
name|DegreeGroupInterface
name|group
init|=
operator|new
name|DegreePlanInterface
operator|.
name|DegreeGroupInterface
argument_list|()
decl_stmt|;
name|group
operator|.
name|setChoice
argument_list|(
name|g
operator|.
name|groupType
operator|!=
literal|null
operator|&&
literal|"CH"
operator|.
name|equals
argument_list|(
name|g
operator|.
name|groupType
operator|.
name|code
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setDescription
argument_list|(
name|g
operator|.
name|summaryDescription
argument_list|)
expr_stmt|;
name|group
operator|.
name|setCritical
argument_list|(
name|g
operator|.
name|isCritical
argument_list|)
expr_stmt|;
name|group
operator|.
name|setId
argument_list|(
name|g
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|plannedClasses
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Course
name|c
range|:
name|g
operator|.
name|plannedClasses
control|)
block|{
if|if
condition|(
name|c
operator|.
name|courseDiscipline
operator|==
literal|null
operator|||
name|c
operator|.
name|courseNumber
operator|==
literal|null
condition|)
continue|continue;
name|DegreePlanInterface
operator|.
name|DegreeCourseInterface
name|course
init|=
operator|new
name|DegreePlanInterface
operator|.
name|DegreeCourseInterface
argument_list|()
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|isChoice
argument_list|()
condition|)
name|course
operator|.
name|setSelected
argument_list|(
name|c
operator|.
name|isGroupSelection
argument_list|)
expr_stmt|;
name|course
operator|.
name|setSubject
argument_list|(
name|c
operator|.
name|courseDiscipline
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourse
argument_list|(
name|c
operator|.
name|courseNumber
argument_list|)
expr_stmt|;
name|course
operator|.
name|setTitle
argument_list|(
name|c
operator|.
name|title
argument_list|)
expr_stmt|;
name|course
operator|.
name|setId
argument_list|(
name|c
operator|.
name|id
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCritical
argument_list|(
name|c
operator|.
name|isCritical
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|?
extends|extends
name|XCourseId
argument_list|>
name|ids
init|=
name|server
operator|.
name|findCourses
argument_list|(
name|c
operator|.
name|courseDiscipline
operator|+
literal|" "
operator|+
name|c
operator|.
name|courseNumber
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XCourseId
name|id
range|:
name|ids
control|)
block|{
name|XCourse
name|xc
init|=
operator|(
name|id
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|id
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|id
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|xc
operator|==
literal|null
condition|)
continue|continue;
name|CourseAssignment
name|ca
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|xc
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|xc
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|xc
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|xc
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setNote
argument_list|(
name|xc
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCreditAbbv
argument_list|(
name|xc
operator|.
name|getCreditAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCreditText
argument_list|(
name|xc
operator|.
name|getCreditText
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|xc
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setHasUniqueName
argument_list|(
name|xc
operator|.
name|hasUniqueName
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setLimit
argument_list|(
name|xc
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|firstChoiceReqs
init|=
literal|0
decl_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|;
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|server
operator|.
name|getRequests
argument_list|(
name|id
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
for|for
control|(
name|XCourseRequest
name|r
range|:
name|requests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
name|enrl
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
operator|&&
name|r
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
operator|&&
name|r
operator|.
name|getCourseIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
name|firstChoiceReqs
operator|++
expr_stmt|;
block|}
name|ca
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setProjected
argument_list|(
name|firstChoiceReqs
argument_list|)
expr_stmt|;
name|course
operator|.
name|addCourse
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|course
operator|.
name|hasCourses
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseAssignment
name|ca
range|:
name|course
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|ca
operator|.
name|getSubject
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|&&
name|ca
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
name|course
operator|.
name|setCourseId
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|addCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|g
operator|.
name|plannedPlaceholders
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|PlaceHolder
name|ph
range|:
name|g
operator|.
name|plannedPlaceholders
control|)
block|{
name|List
argument_list|<
name|XCourseId
argument_list|>
name|phc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|CustomCourseLookupHolder
operator|.
name|hasProvider
argument_list|()
condition|)
name|phc
operator|=
name|CustomCourseLookupHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|getCourses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|ph
operator|.
name|placeholderValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|phc
operator|!=
literal|null
operator|&&
operator|!
name|phc
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DegreePlanInterface
operator|.
name|DegreeGroupInterface
name|phg
init|=
operator|new
name|DegreePlanInterface
operator|.
name|DegreeGroupInterface
argument_list|()
decl_stmt|;
name|phg
operator|.
name|setChoice
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|phg
operator|.
name|setPlaceHolder
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|phg
operator|.
name|setDescription
argument_list|(
name|ph
operator|.
name|placeholderValue
argument_list|)
expr_stmt|;
name|phg
operator|.
name|setId
argument_list|(
name|ph
operator|.
name|id
argument_list|)
expr_stmt|;
name|DegreePlanInterface
operator|.
name|DegreeCourseInterface
name|course
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XCourseId
name|id
range|:
name|phc
control|)
block|{
name|XCourse
name|xc
init|=
operator|(
name|id
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|id
else|:
name|server
operator|.
name|getCourse
argument_list|(
name|id
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|xc
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|course
operator|==
literal|null
operator|||
operator|!
name|course
operator|.
name|getSubject
argument_list|()
operator|.
name|equals
argument_list|(
name|xc
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
operator|||
operator|!
name|xc
operator|.
name|getCourseNumber
argument_list|()
operator|.
name|startsWith
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
name|course
operator|=
operator|new
name|DegreePlanInterface
operator|.
name|DegreeCourseInterface
argument_list|()
expr_stmt|;
name|course
operator|.
name|setSubject
argument_list|(
name|iExternalTermProvider
operator|.
name|getExternalSubject
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|xc
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|xc
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourse
argument_list|(
name|iExternalTermProvider
operator|.
name|getExternalCourseNumber
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|xc
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|xc
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|course
operator|.
name|setTitle
argument_list|(
name|xc
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setId
argument_list|(
name|ph
operator|.
name|id
operator|+
literal|"-"
operator|+
name|xc
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseId
argument_list|(
name|xc
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|phg
operator|.
name|addCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
name|CourseAssignment
name|ca
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|xc
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|xc
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|xc
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|xc
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setNote
argument_list|(
name|xc
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCreditAbbv
argument_list|(
name|xc
operator|.
name|getCreditAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCreditText
argument_list|(
name|xc
operator|.
name|getCreditText
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|xc
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setHasUniqueName
argument_list|(
name|xc
operator|.
name|hasUniqueName
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setLimit
argument_list|(
name|xc
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|firstChoiceReqs
init|=
literal|0
decl_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|;
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|server
operator|.
name|getRequests
argument_list|(
name|id
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
for|for
control|(
name|XCourseRequest
name|r
range|:
name|requests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
name|enrl
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
operator|&&
name|r
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
operator|&&
name|r
operator|.
name|getCourseIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
name|firstChoiceReqs
operator|++
expr_stmt|;
block|}
name|ca
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setProjected
argument_list|(
name|firstChoiceReqs
argument_list|)
expr_stmt|;
name|course
operator|.
name|addCourse
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|addGroup
argument_list|(
name|phg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DegreePlanInterface
operator|.
name|DegreePlaceHolderInterface
name|placeHolder
init|=
operator|new
name|DegreePlanInterface
operator|.
name|DegreePlaceHolderInterface
argument_list|()
decl_stmt|;
name|placeHolder
operator|.
name|setType
argument_list|(
name|ph
operator|.
name|placeholderType
operator|==
literal|null
condition|?
literal|null
else|:
name|ph
operator|.
name|placeholderType
operator|.
name|description
argument_list|)
expr_stmt|;
name|placeHolder
operator|.
name|setName
argument_list|(
name|ph
operator|.
name|placeholderValue
argument_list|)
expr_stmt|;
name|placeHolder
operator|.
name|setId
argument_list|(
name|ph
operator|.
name|id
argument_list|)
expr_stmt|;
name|group
operator|.
name|addPlaceHolder
argument_list|(
name|placeHolder
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|g
operator|.
name|groups
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Group
name|ch
range|:
name|g
operator|.
name|groups
control|)
block|{
name|DegreePlanInterface
operator|.
name|DegreeGroupInterface
name|childGroup
init|=
name|toGroup
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|ch
argument_list|)
decl_stmt|;
if|if
condition|(
name|childGroup
operator|.
name|countItems
argument_list|()
operator|<=
literal|1
operator|||
name|childGroup
operator|.
name|isChoice
argument_list|()
operator|==
name|group
operator|.
name|isChoice
argument_list|()
condition|)
block|{
name|group
operator|.
name|merge
argument_list|(
name|childGroup
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|group
operator|.
name|isChoice
argument_list|()
condition|)
name|childGroup
operator|.
name|setSelected
argument_list|(
name|hasSelection
argument_list|(
name|ch
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|addGroup
argument_list|(
name|childGroup
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|group
return|;
block|}
specifier|protected
name|List
argument_list|<
name|XEInterface
operator|.
name|DegreePlan
argument_list|>
name|getDegreePlans
parameter_list|(
name|String
name|term
parameter_list|,
name|String
name|studentId
parameter_list|,
name|String
name|effectiveOnly
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
name|getDegreeWorksApiSite
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"terms"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"studentId"
argument_list|,
name|studentId
argument_list|)
expr_stmt|;
if|if
condition|(
name|effectiveOnly
operator|!=
literal|null
condition|)
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"effectiveOnly"
argument_list|,
name|effectiveOnly
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setChallengeResponse
argument_list|(
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
name|getDegreeWorksApiUser
argument_list|()
argument_list|,
name|getDegreeWorksApiPassword
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|exception
parameter_list|)
block|{
try|try
block|{
name|String
name|response
init|=
name|toString
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|getDegreeWorksErrorPattern
argument_list|()
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
operator||
name|Pattern
operator|.
name|MULTILINE
operator||
name|Pattern
operator|.
name|UNIX_LINES
argument_list|)
decl_stmt|;
name|Matcher
name|match
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|response
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|.
name|find
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|match
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|exception
throw|;
block|}
throw|throw
name|exception
throw|;
block|}
return|return
operator|new
name|GsonRepresentation
argument_list|<
name|List
argument_list|<
name|XEInterface
operator|.
name|DegreePlan
argument_list|>
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|XEInterface
operator|.
name|DegreePlan
operator|.
name|TYPE_LIST
argument_list|)
operator|.
name|getObject
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|List
argument_list|<
name|XEInterface
operator|.
name|DegreePlan
argument_list|>
name|getDegreePlans
parameter_list|(
name|String
name|term
parameter_list|,
name|String
name|studentId
parameter_list|,
name|String
name|effectiveOnly
parameter_list|,
name|int
name|nrAttempts
parameter_list|)
throws|throws
name|SectioningException
block|{
name|SectioningException
name|exception
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nrAttempts
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrAttempts
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
return|return
name|getDegreePlans
argument_list|(
name|term
argument_list|,
name|studentId
argument_list|,
name|effectiveOnly
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve degree plans for "
operator|+
name|studentId
operator|+
literal|" ["
operator|+
operator|(
literal|1
operator|+
name|i
operator|)
operator|+
literal|". attempt]: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|=
name|e
expr_stmt|;
block|}
block|}
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
throw|throw
name|exception
throw|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|getDegreePlans
argument_list|(
name|term
argument_list|,
name|studentId
argument_list|,
name|effectiveOnly
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|getDegreePlans
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|)
throws|throws
name|SectioningException
block|{
try|try
block|{
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|studentId
init|=
name|getBannerId
argument_list|(
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Retrieving degree plans for "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" (term: "
operator|+
name|term
operator|+
literal|", id:"
operator|+
name|studentId
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|String
name|effectiveOnly
init|=
name|getDegreeWorksApiEffectiveOnly
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|setValue
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"studentId"
argument_list|)
operator|.
name|setValue
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
if|if
condition|(
name|effectiveOnly
operator|!=
literal|null
condition|)
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"effectiveOnly"
argument_list|)
operator|.
name|setValue
argument_list|(
name|effectiveOnly
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XEInterface
operator|.
name|DegreePlan
argument_list|>
name|current
init|=
literal|null
decl_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|current
operator|=
name|getDegreePlans
argument_list|(
name|term
argument_list|,
name|studentId
argument_list|,
name|effectiveOnly
argument_list|,
name|getDegreeWorksNrAttempts
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|getDegreeWorksNoPlansMessage
argument_list|()
argument_list|)
operator|.
name|withTypeInfo
argument_list|()
throw|;
name|Gson
name|gson
init|=
name|getGson
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"response"
argument_list|)
operator|.
name|setValue
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Current degree plans: "
operator|+
name|gson
operator|.
name|toJson
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|plans
init|=
operator|new
name|ArrayList
argument_list|<
name|DegreePlanInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|DegreePlan
name|p
range|:
name|current
control|)
block|{
if|if
condition|(
name|getDegreeWorksActiveOnly
argument_list|()
operator|&&
operator|(
name|p
operator|.
name|isActive
operator|==
literal|null
operator|||
operator|!
name|p
operator|.
name|isActive
operator|.
name|value
operator|)
condition|)
continue|continue;
name|DegreePlanInterface
name|plan
init|=
operator|new
name|DegreePlanInterface
argument_list|()
decl_stmt|;
name|plan
operator|.
name|setSessionId
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setStudentId
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setId
argument_list|(
name|p
operator|.
name|id
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setDegree
argument_list|(
name|p
operator|.
name|degree
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|degree
operator|.
name|description
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setName
argument_list|(
name|p
operator|.
name|description
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setSchool
argument_list|(
name|p
operator|.
name|school
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|school
operator|.
name|description
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setLastModified
argument_list|(
name|p
operator|.
name|modifyDate
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setModifiedWho
argument_list|(
name|p
operator|.
name|modifyWho
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|modifyWho
operator|.
name|name
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setTrackingStatus
argument_list|(
name|p
operator|.
name|officialTrackingStatus
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|officialTrackingStatus
operator|.
name|description
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setActive
argument_list|(
name|p
operator|.
name|isActive
operator|!=
literal|null
operator|&&
name|p
operator|.
name|isActive
operator|.
name|value
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setLocked
argument_list|(
name|p
operator|.
name|isLocked
operator|!=
literal|null
operator|&&
name|p
operator|.
name|isLocked
operator|.
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|years
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Year
name|y
range|:
name|p
operator|.
name|years
control|)
block|{
if|if
condition|(
name|y
operator|.
name|terms
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Term
name|t
range|:
name|y
operator|.
name|terms
control|)
block|{
if|if
condition|(
name|t
operator|.
name|term
operator|!=
literal|null
operator|&&
name|term
operator|.
name|equals
argument_list|(
name|t
operator|.
name|term
operator|.
name|code
argument_list|)
operator|&&
name|t
operator|.
name|group
operator|!=
literal|null
condition|)
block|{
name|plan
operator|.
name|setGroup
argument_list|(
name|toGroup
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|t
operator|.
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|plan
operator|.
name|getGroup
argument_list|()
operator|!=
literal|null
condition|)
name|plans
operator|.
name|add
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|plans
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|getDegreeWorksNoPlansMessage
argument_list|()
argument_list|)
operator|.
name|withTypeInfo
argument_list|()
throw|;
return|return
name|plans
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getCriticalTerms
parameter_list|(
name|String
name|bannerTerm
parameter_list|)
block|{
if|if
condition|(
name|bannerTerm
operator|.
name|endsWith
argument_list|(
literal|"10"
argument_list|)
condition|)
block|{
return|return
name|bannerTerm
operator|+
literal|","
operator|+
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|bannerTerm
argument_list|)
operator|+
literal|10
operator|)
operator|+
literal|","
operator|+
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|bannerTerm
argument_list|)
operator|+
literal|20
operator|)
return|;
block|}
if|else if
condition|(
name|bannerTerm
operator|.
name|endsWith
argument_list|(
literal|"20"
argument_list|)
condition|)
block|{
return|return
name|bannerTerm
operator|+
literal|","
operator|+
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|bannerTerm
argument_list|)
operator|+
literal|10
operator|)
operator|+
literal|","
operator|+
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|bannerTerm
argument_list|)
operator|+
literal|90
operator|)
return|;
block|}
if|else if
condition|(
name|bannerTerm
operator|.
name|endsWith
argument_list|(
literal|"30"
argument_list|)
condition|)
block|{
return|return
name|bannerTerm
operator|+
literal|","
operator|+
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|bannerTerm
argument_list|)
operator|+
literal|80
operator|)
operator|+
literal|","
operator|+
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|bannerTerm
argument_list|)
operator|+
literal|90
operator|)
return|;
block|}
return|return
name|bannerTerm
return|;
block|}
annotation|@
name|Override
specifier|public
name|CriticalCourses
name|getCriticalCourses
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudentId
name|student
parameter_list|)
block|{
try|try
block|{
name|String
name|term
init|=
name|getBannerTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|studentId
init|=
name|getBannerId
argument_list|(
name|student
argument_list|)
decl_stmt|;
name|String
name|effectiveOnly
init|=
name|getDegreeWorksApiEffectiveOnly
argument_list|()
decl_stmt|;
name|String
name|criticalTerms
init|=
name|getCriticalTerms
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|effectiveOnly
operator|!=
literal|null
condition|)
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"effectiveOnly"
argument_list|)
operator|.
name|setValue
argument_list|(
name|effectiveOnly
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"criticalTerms"
argument_list|)
operator|.
name|setValue
argument_list|(
name|criticalTerms
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XEInterface
operator|.
name|DegreePlan
argument_list|>
name|current
init|=
literal|null
decl_stmt|;
try|try
block|{
name|current
operator|=
name|getDegreePlans
argument_list|(
name|getCriticalTerms
argument_list|(
name|term
argument_list|)
argument_list|,
name|studentId
argument_list|,
name|effectiveOnly
argument_list|,
name|getDegreeWorksNrAttempts
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|current
operator|=
name|getDegreePlans
argument_list|(
name|criticalTerms
argument_list|,
name|studentId
argument_list|,
name|effectiveOnly
argument_list|,
name|getDegreeWorksNrAttempts
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|hasApiException
argument_list|()
condition|)
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|hasApiGetTime
argument_list|()
condition|)
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|setApiGetTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|==
literal|null
operator|||
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"plans"
argument_list|)
operator|.
name|setValue
argument_list|(
name|getGson
argument_list|(
name|helper
argument_list|)
operator|.
name|toJson
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
name|CriticalCoursesImpl
name|courses
init|=
operator|new
name|CriticalCoursesImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|XEInterface
operator|.
name|DegreePlan
name|p
range|:
name|current
control|)
block|{
if|if
condition|(
name|getDegreeWorksActiveOnly
argument_list|()
operator|&&
operator|(
name|p
operator|.
name|isActive
operator|==
literal|null
operator|||
operator|!
name|p
operator|.
name|isActive
operator|.
name|value
operator|)
condition|)
continue|continue;
if|if
condition|(
name|p
operator|.
name|years
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Year
name|y
range|:
name|p
operator|.
name|years
control|)
block|{
if|if
condition|(
name|y
operator|.
name|terms
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Term
name|t
range|:
name|y
operator|.
name|terms
control|)
block|{
if|if
condition|(
name|t
operator|.
name|group
operator|!=
literal|null
operator|&&
name|t
operator|.
name|group
operator|.
name|plannedClasses
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Course
name|c
range|:
name|t
operator|.
name|group
operator|.
name|plannedClasses
control|)
if|if
condition|(
name|c
operator|.
name|isCritical
operator|!=
literal|null
operator|&&
name|c
operator|.
name|isCritical
condition|)
name|courses
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|group
operator|!=
literal|null
operator|&&
name|t
operator|.
name|group
operator|.
name|groups
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Group
name|g
range|:
name|t
operator|.
name|group
operator|.
name|groups
control|)
if|if
condition|(
name|g
operator|.
name|isCritical
operator|!=
literal|null
operator|&&
name|g
operator|.
name|isCritical
condition|)
block|{
if|if
condition|(
name|g
operator|.
name|plannedClasses
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Course
name|c
range|:
name|g
operator|.
name|plannedClasses
control|)
name|courses
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|groups
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Group
name|h
range|:
name|g
operator|.
name|groups
control|)
if|if
condition|(
name|h
operator|.
name|plannedClasses
operator|!=
literal|null
condition|)
for|for
control|(
name|XEInterface
operator|.
name|Course
name|c
range|:
name|h
operator|.
name|plannedClasses
control|)
if|if
condition|(
name|courses
operator|.
name|add
argument_list|(
name|c
argument_list|)
condition|)
name|helper
operator|.
name|info
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|": "
operator|+
name|c
operator|.
name|courseDiscipline
operator|+
literal|" "
operator|+
name|c
operator|.
name|courseNumber
operator|+
literal|" marked as critical"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|sql
init|=
name|getCreditSQL
argument_list|()
decl_stmt|;
if|if
condition|(
name|sql
operator|!=
literal|null
operator|&&
operator|!
name|sql
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createSQLQuery
argument_list|(
name|sql
argument_list|)
operator|.
name|setString
argument_list|(
literal|"puid"
argument_list|,
name|studentId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|subjectArea
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|String
name|courseNbr
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|courses
operator|.
name|remove
argument_list|(
name|subjectArea
argument_list|,
name|courseNbr
argument_list|)
condition|)
name|helper
operator|.
name|info
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|": "
operator|+
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNbr
operator|+
literal|" is not critical ("
operator|+
name|o
index|[
literal|2
index|]
operator|+
literal|" graded "
operator|+
name|o
index|[
literal|3
index|]
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"critical"
argument_list|)
operator|.
name|setValue
argument_list|(
name|courses
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|courses
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|CriticalCoursesImpl
implements|implements
name|CriticalCourses
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iCriticalCourses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|boolean
name|add
parameter_list|(
name|XEInterface
operator|.
name|Course
name|c
parameter_list|)
block|{
return|return
name|iCriticalCourses
operator|.
name|add
argument_list|(
name|c
operator|.
name|courseDiscipline
operator|+
literal|" "
operator|+
name|c
operator|.
name|courseNumber
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|remove
parameter_list|(
name|String
name|subjectArea
parameter_list|,
name|String
name|courseNbr
parameter_list|)
block|{
return|return
name|iCriticalCourses
operator|.
name|remove
argument_list|(
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNbr
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|iCriticalCourses
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCritical
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
for|for
control|(
name|String
name|c
range|:
name|iCriticalCourses
control|)
if|if
condition|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|c
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iCriticalCourses
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

