begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|GradeMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|VariableTitleCourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseDetailsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|Customization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|VariableTitleCourseProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PurdueVariableTitleCourseProvider
implements|implements
name|VariableTitleCourseProvider
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|PurdueVariableTitleCourseProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|public
name|PurdueVariableTitleCourseProvider
parameter_list|()
block|{
try|try
block|{
name|String
name|clazz
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
else|else
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create external term provider, using the default one instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iExternalTermProvider
operator|=
operator|new
name|BannerTermProvider
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getVariableTitleCourseSQL
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.vt.variableTitleCourseSQL"
argument_list|,
literal|"select c.subj_code, c.crse_numb, c.crse_title, c.credit_hr_ind, c.credit_hr_low, c.credit_hr_high, c.gmod_code, c.gmod_desc, c.gmod_default_ind "
operator|+
literal|"from timetable.szgv_reg_vartl_course c, timetable.subject_area sa where "
operator|+
literal|"concat(concat(c.subj_code, ' '), c.crse_numb) like :query and c.attr_code = 'VART' and "
operator|+
literal|"c.course_effective_term<= :term and :term< c.course_end_term and "
operator|+
literal|"c.attr_effective_term<= :term and :term< c.attr_end_term and "
operator|+
literal|"c.gmod_effective_term<= :term and :term< c.gmod_end_term and "
operator|+
literal|"c.subj_code = sa.subject_area_abbreviation and sa.session_id = :sessionId "
operator|+
literal|"order by c.subj_code, c.crse_numb, c.gmod_code"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getInstructorNameFormat
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.vt.instructorNameFormat"
argument_list|,
literal|"last-first-middle"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getDisclaimer
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.vt.disclaimer"
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|VariableTitleCourseInfo
argument_list|>
name|getVariableTitleCourses
parameter_list|(
name|String
name|query
parameter_list|,
name|int
name|limit
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Query
name|q
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createSQLQuery
argument_list|(
name|getVariableTitleCourseSQL
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
name|query
operator|.
name|indexOf
argument_list|(
literal|" - "
argument_list|)
operator|>=
literal|0
condition|)
name|query
operator|=
name|query
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|query
operator|.
name|indexOf
argument_list|(
literal|" - "
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setText
argument_list|(
literal|"query"
argument_list|,
name|query
operator|==
literal|null
condition|?
literal|"%"
else|:
name|query
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setText
argument_list|(
literal|"term"
argument_list|,
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
name|q
operator|.
name|setMaxResults
argument_list|(
literal|5
operator|*
name|limit
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|VariableTitleCourseInfo
argument_list|>
name|courses
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|VariableTitleCourseInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|line
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|q
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|subject
init|=
operator|(
name|String
operator|)
name|line
index|[
literal|0
index|]
decl_stmt|;
name|String
name|courseNbr
init|=
operator|(
name|String
operator|)
name|line
index|[
literal|1
index|]
decl_stmt|;
name|String
name|title
init|=
operator|(
name|String
operator|)
name|line
index|[
literal|2
index|]
decl_stmt|;
name|String
name|credInd
init|=
operator|(
name|String
operator|)
name|line
index|[
literal|3
index|]
decl_stmt|;
name|Number
name|credLo
init|=
operator|(
name|Number
operator|)
name|line
index|[
literal|4
index|]
decl_stmt|;
name|Number
name|credHi
init|=
operator|(
name|Number
operator|)
name|line
index|[
literal|5
index|]
decl_stmt|;
name|String
name|gmCode
init|=
operator|(
name|String
operator|)
name|line
index|[
literal|6
index|]
decl_stmt|;
name|String
name|gmDesc
init|=
operator|(
name|String
operator|)
name|line
index|[
literal|7
index|]
decl_stmt|;
name|String
name|gmInd
init|=
operator|(
name|String
operator|)
name|line
index|[
literal|8
index|]
decl_stmt|;
name|VariableTitleCourseInfo
name|info
init|=
name|courses
operator|.
name|get
argument_list|(
name|subject
operator|+
literal|" "
operator|+
name|courseNbr
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|limit
operator|>
literal|0
operator|&&
name|courses
operator|.
name|size
argument_list|()
operator|>=
name|limit
condition|)
break|break;
name|info
operator|=
operator|new
name|VariableTitleCourseInfo
argument_list|()
expr_stmt|;
name|info
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCourseNbr
argument_list|(
name|courseNbr
argument_list|)
expr_stmt|;
name|info
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|info
operator|.
name|setStartDate
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setEndDate
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultEndDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"TO"
operator|.
name|equals
argument_list|(
name|credInd
argument_list|)
condition|)
block|{
name|float
name|min
init|=
name|credLo
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|max
init|=
name|credHi
operator|.
name|floatValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|min
operator|-
name|Math
operator|.
name|floor
argument_list|(
name|min
argument_list|)
operator|)
operator|==
literal|0.5f
operator|||
operator|(
name|max
operator|-
name|Math
operator|.
name|floor
argument_list|(
name|max
argument_list|)
operator|)
operator|==
literal|0.5f
condition|)
block|{
for|for
control|(
name|float
name|credit
init|=
name|min
init|;
name|credit
operator|<=
name|max
operator|+
literal|0.001f
condition|;
name|credit
operator|+=
literal|0.5f
control|)
block|{
name|info
operator|.
name|addAvailableCredit
argument_list|(
name|credit
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|float
name|credit
init|=
name|min
init|;
name|credit
operator|<=
name|max
operator|+
literal|0.001f
condition|;
name|credit
operator|+=
literal|1f
control|)
block|{
name|info
operator|.
name|addAvailableCredit
argument_list|(
name|credit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
literal|"OR"
operator|.
name|equals
argument_list|(
name|credInd
argument_list|)
condition|)
block|{
name|info
operator|.
name|addAvailableCredit
argument_list|(
name|credLo
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|addAvailableCredit
argument_list|(
name|credHi
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|addAvailableCredit
argument_list|(
name|credLo
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|courses
operator|.
name|put
argument_list|(
name|subject
operator|+
literal|" "
operator|+
name|courseNbr
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gmCode
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|addGradeMode
argument_list|(
operator|new
name|GradeMode
argument_list|(
name|gmCode
argument_list|,
name|gmDesc
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"D"
operator|.
name|equals
argument_list|(
name|gmInd
argument_list|)
condition|)
name|info
operator|.
name|setDefaultGradeModeCode
argument_list|(
name|gmCode
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|TreeSet
argument_list|<
name|VariableTitleCourseInfo
argument_list|>
argument_list|(
name|courses
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|VariableTitleCourseInfo
name|getVariableTitleCourse
parameter_list|(
name|String
name|query
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Query
name|q
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createSQLQuery
argument_list|(
name|getVariableTitleCourseSQL
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
name|query
operator|.
name|indexOf
argument_list|(
literal|" - "
argument_list|)
operator|>=
literal|0
condition|)
name|query
operator|=
name|query
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|query
operator|.
name|indexOf
argument_list|(
literal|" - "
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setText
argument_list|(
literal|"query"
argument_list|,
name|query
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setText
argument_list|(
literal|"term"
argument_list|,
name|iExternalTermProvider
operator|.
name|getExternalTerm
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|NameFormat
name|nameFormat
init|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|getInstructorNameFormat
argument_list|()
argument_list|)
decl_stmt|;
name|VariableTitleCourseInfo
name|info
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|line
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|q
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|subject
init|=
operator|(
name|String
operator|)
name|line
index|[
literal|0
index|]
decl_stmt|;
name|String
name|courseNbr
init|=
operator|(
name|String
operator|)
name|line
index|[
literal|1
index|]
decl_stmt|;
name|String
name|title
init|=
operator|(
name|String
operator|)
name|line
index|[
literal|2
index|]
decl_stmt|;
name|String
name|credInd
init|=
operator|(
name|String
operator|)
name|line
index|[
literal|3
index|]
decl_stmt|;
name|Number
name|credLo
init|=
operator|(
name|Number
operator|)
name|line
index|[
literal|4
index|]
decl_stmt|;
name|Number
name|credHi
init|=
operator|(
name|Number
operator|)
name|line
index|[
literal|5
index|]
decl_stmt|;
name|String
name|gmCode
init|=
operator|(
name|String
operator|)
name|line
index|[
literal|6
index|]
decl_stmt|;
name|String
name|gmDesc
init|=
operator|(
name|String
operator|)
name|line
index|[
literal|7
index|]
decl_stmt|;
name|String
name|gmInd
init|=
operator|(
name|String
operator|)
name|line
index|[
literal|8
index|]
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|info
operator|=
operator|new
name|VariableTitleCourseInfo
argument_list|()
expr_stmt|;
name|info
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCourseNbr
argument_list|(
name|courseNbr
argument_list|)
expr_stmt|;
name|info
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|info
operator|.
name|setStartDate
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setEndDate
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultEndDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"TO"
operator|.
name|equals
argument_list|(
name|credInd
argument_list|)
condition|)
block|{
name|float
name|min
init|=
name|credLo
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|max
init|=
name|credHi
operator|.
name|floatValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|min
operator|-
name|Math
operator|.
name|floor
argument_list|(
name|min
argument_list|)
operator|)
operator|==
literal|0.5f
operator|||
operator|(
name|max
operator|-
name|Math
operator|.
name|floor
argument_list|(
name|max
argument_list|)
operator|)
operator|==
literal|0.5f
condition|)
block|{
for|for
control|(
name|float
name|credit
init|=
name|min
init|;
name|credit
operator|<=
name|max
operator|+
literal|0.001f
condition|;
name|credit
operator|+=
literal|0.5f
control|)
block|{
name|info
operator|.
name|addAvailableCredit
argument_list|(
name|credit
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|float
name|credit
init|=
name|min
init|;
name|credit
operator|<=
name|max
operator|+
literal|0.001f
condition|;
name|credit
operator|+=
literal|1f
control|)
block|{
name|info
operator|.
name|addAvailableCredit
argument_list|(
name|credit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
literal|"OR"
operator|.
name|equals
argument_list|(
name|credInd
argument_list|)
condition|)
block|{
name|info
operator|.
name|addAvailableCredit
argument_list|(
name|credLo
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|addAvailableCredit
argument_list|(
name|credHi
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|addAvailableCredit
argument_list|(
name|credLo
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DepartmentalInstructor
name|di
range|:
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select i from DepartmentalInstructor i inner join i.department.subjectAreas sa where "
operator|+
literal|"i.department.session = :sessionId and sa.subjectAreaAbbreviation = :subject and i.externalUniqueId is not null"
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"subject"
argument_list|,
name|subject
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|info
operator|.
name|addInstructor
argument_list|(
name|di
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|nameFormat
operator|.
name|format
argument_list|(
name|di
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Customization
operator|.
name|CourseDetailsProvider
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
name|CourseDetailsProvider
name|dp
init|=
name|Customization
operator|.
name|CourseDetailsProvider
operator|.
name|getProvider
argument_list|()
decl_stmt|;
try|try
block|{
name|info
operator|.
name|setDetails
argument_list|(
name|dp
operator|.
name|getDetails
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|subject
argument_list|,
name|courseNbr
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|info
operator|.
name|setDisclaimer
argument_list|(
name|getDisclaimer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gmCode
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|addGradeMode
argument_list|(
operator|new
name|GradeMode
argument_list|(
name|gmCode
argument_list|,
name|gmDesc
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"D"
operator|.
name|equals
argument_list|(
name|gmInd
argument_list|)
condition|)
name|info
operator|.
name|setDefaultGradeModeCode
argument_list|(
name|gmCode
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|info
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
block|}
block|}
end_class

end_unit

