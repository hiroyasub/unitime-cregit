begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DegreePlanInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|DegreePlansProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|CourseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_class
specifier|public
class|class
name|EduNavPilotPlansProvider
implements|implements
name|DegreePlansProvider
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|EduNavPilotPlansProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DegreePlansProvider
name|iEduNav
decl_stmt|;
specifier|private
name|DegreePlansProvider
name|iDGW
decl_stmt|;
specifier|private
name|DegreePlansProvider
name|iFallback
decl_stmt|;
specifier|public
name|EduNavPilotPlansProvider
parameter_list|()
block|{
name|iEduNav
operator|=
operator|new
name|EduNavPlansProvider
argument_list|()
expr_stmt|;
name|iDGW
operator|=
operator|new
name|DegreeWorksCourseRequests
argument_list|()
expr_stmt|;
name|iFallback
operator|=
name|iDGW
expr_stmt|;
try|try
block|{
name|String
name|clazz
init|=
name|getEduNavFallbackProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iFallback
operator|=
operator|(
name|CriticalCoursesExplorers
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to create fallback degree plan provider."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getEduNavFallbackProvider
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"edunav.pilot.fallbackProvider"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getCriticalPlaceholdersSQL
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"edunav.pilotSQL"
argument_list|,
literal|"select count(*) from timetable.szvensa where szvensa_id = :externalId"
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isMarkEduNavPlanActive
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"edunav.pilot.markActive"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isMarkAllEduNavPlansActive
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"edunav.pilot.markAllActive"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|getDegreeWorksActiveOnly
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"banner.dgw.activeOnly"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBannerId
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
name|String
name|id
init|=
name|student
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|)
name|id
operator|=
literal|"0"
operator|+
name|id
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|protected
name|boolean
name|isStudentInPilot
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createSQLQuery
argument_list|(
name|getCriticalPlaceholdersSQL
argument_list|()
argument_list|)
decl_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|getBannerId
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|getDegreePlans
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|CourseMatcher
name|matcher
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|isStudentInPilot
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|)
condition|)
block|{
name|boolean
name|activeOnly
init|=
name|getDegreeWorksActiveOnly
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|plans
init|=
operator|new
name|ArrayList
argument_list|<
name|DegreePlanInterface
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|eduNavPlans
init|=
name|iEduNav
operator|.
name|getDegreePlans
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|matcher
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|dgwPlans
init|=
name|iDGW
operator|.
name|getDegreePlans
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|matcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|eduNavPlans
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DegreePlanInterface
name|plan
range|:
name|eduNavPlans
control|)
block|{
name|plan
operator|.
name|setName
argument_list|(
literal|"EduNav: "
operator|+
name|plan
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|plans
operator|.
name|add
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|activeOnly
operator|&&
name|dgwPlans
operator|!=
literal|null
operator|&&
operator|!
name|dgwPlans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|plans
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|isMarkEduNavPlanActive
argument_list|()
condition|)
name|plans
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|plans
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|isMarkAllEduNavPlansActive
argument_list|()
condition|)
for|for
control|(
name|DegreePlanInterface
name|plan
range|:
name|plans
control|)
name|plan
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dgwPlans
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DegreePlanInterface
name|plan
range|:
name|dgwPlans
control|)
block|{
name|plan
operator|.
name|setName
argument_list|(
literal|"DegreeWorks: "
operator|+
name|plan
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|activeOnly
condition|)
name|plan
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|plans
operator|.
name|add
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|plans
return|;
block|}
else|else
block|{
return|return
name|iFallback
operator|.
name|getDegreePlans
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|matcher
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|iEduNav
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|iDGW
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

