begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|SectioningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|SectioningRequestComparator
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|DefaultSectioningRequestComparatorProvider
implements|implements
name|WaitListComparatorProvider
block|{
specifier|public
name|DefaultSectioningRequestComparatorProvider
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|Comparator
argument_list|<
name|SectioningRequest
argument_list|>
name|getComparator
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
return|return
operator|new
name|DefaultSectioningRequestComparator
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
return|;
block|}
specifier|public
class|class
name|DefaultSectioningRequestComparator
extends|extends
name|SectioningRequestComparator
block|{
specifier|private
name|boolean
name|iConsiderRequestPriority
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iConsiderStudentPriority
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iStudentPriorityIsMoreImportant
init|=
literal|false
decl_stmt|;
specifier|public
name|DefaultSectioningRequestComparator
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
comment|// Request Priority: critical courses first
name|iConsiderRequestPriority
operator|=
name|properties
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Sectioning.UseCriticalCoursesSelection"
argument_list|,
name|iConsiderRequestPriority
argument_list|)
expr_stmt|;
comment|// Student Priority: priority students first
name|iConsiderStudentPriority
operator|=
name|properties
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Sectioning.PriorityStudentsFirstSelection"
argument_list|,
name|iConsiderStudentPriority
argument_list|)
expr_stmt|;
comment|// Student Priority: priority is more important than critical (request priority is more important otherwise)
name|iStudentPriorityIsMoreImportant
operator|=
name|properties
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Sectioning.PriorityStudentsFirstSelection.AllIn"
argument_list|,
name|iStudentPriorityIsMoreImportant
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|compareBothAssignedOrNotAssigned
parameter_list|(
name|SectioningRequest
name|s
parameter_list|,
name|SectioningRequest
name|r
parameter_list|)
block|{
if|if
condition|(
name|iStudentPriorityIsMoreImportant
condition|)
block|{
if|if
condition|(
name|iConsiderStudentPriority
condition|)
block|{
comment|// Student Priority
if|if
condition|(
name|s
operator|.
name|getStudentPriority
argument_list|()
operator|!=
name|r
operator|.
name|getStudentPriority
argument_list|()
condition|)
return|return
name|s
operator|.
name|getStudentPriority
argument_list|()
operator|.
name|ordinal
argument_list|()
operator|<
name|r
operator|.
name|getStudentPriority
argument_list|()
operator|.
name|ordinal
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
if|if
condition|(
name|iConsiderRequestPriority
condition|)
block|{
comment|// Request Priority
if|if
condition|(
name|s
operator|.
name|getRequestPriority
argument_list|()
operator|!=
name|r
operator|.
name|getRequestPriority
argument_list|()
condition|)
return|return
name|s
operator|.
name|getRequestPriority
argument_list|()
operator|.
name|ordinal
argument_list|()
operator|<
name|r
operator|.
name|getRequestPriority
argument_list|()
operator|.
name|ordinal
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|iConsiderRequestPriority
condition|)
block|{
comment|// Request Priority
if|if
condition|(
name|s
operator|.
name|getRequestPriority
argument_list|()
operator|!=
name|r
operator|.
name|getRequestPriority
argument_list|()
condition|)
return|return
name|s
operator|.
name|getRequestPriority
argument_list|()
operator|.
name|ordinal
argument_list|()
operator|<
name|r
operator|.
name|getRequestPriority
argument_list|()
operator|.
name|ordinal
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
if|if
condition|(
name|iConsiderStudentPriority
condition|)
block|{
comment|// Student Priority
if|if
condition|(
name|s
operator|.
name|getStudentPriority
argument_list|()
operator|!=
name|r
operator|.
name|getStudentPriority
argument_list|()
condition|)
return|return
name|s
operator|.
name|getStudentPriority
argument_list|()
operator|.
name|ordinal
argument_list|()
operator|<
name|r
operator|.
name|getStudentPriority
argument_list|()
operator|.
name|ordinal
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

