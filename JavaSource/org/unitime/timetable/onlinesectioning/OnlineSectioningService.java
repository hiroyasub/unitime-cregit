begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|SectionLimitProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|SectionUrlProvider
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|OnlineSectioningService
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|OnlineSectioningService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|OnlineSectioningServer
argument_list|>
name|sInstances
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|OnlineSectioningServer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|OnlineSectioningServerUpdater
argument_list|>
name|sUpdaters
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|OnlineSectioningServerUpdater
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|SectionLimitProvider
name|sSectionLimitProvider
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|SectionUrlProvider
name|sSectionUrlProvider
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|sUpdateLimitsUsingSectionLimitProvider
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|ReentrantReadWriteLock
name|sGlobalLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.SectionLimitProvider"
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|sSectionLimitProvider
operator|=
operator|(
name|SectionLimitProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.SectionLimitProvider"
argument_list|)
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|fatal
argument_list|(
literal|"Unable to initialize section limit provider, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.SectionUrlProvider"
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|sSectionUrlProvider
operator|=
operator|(
name|SectionUrlProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.SectionUrlProvider"
argument_list|)
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|fatal
argument_list|(
literal|"Unable to initialize section URL provider, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|sUpdateLimitsUsingSectionLimitProvider
operator|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.SectionLimitProvider.updateLimits"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isEnabled
parameter_list|()
block|{
comment|// if autostart is enabled, just check whether there are some instances already loaded in
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.autostart"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
return|return
operator|!
name|sInstances
operator|.
name|isEmpty
argument_list|()
return|;
comment|// quick check for existing instances
if|if
condition|(
operator|!
name|sInstances
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// otherwise, look for a session that has sectioning enabled
name|String
name|year
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.term"
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.campus"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Session
argument_list|>
name|i
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Session
name|session
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|year
operator|!=
literal|null
operator|&&
operator|!
name|year
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|term
operator|!=
literal|null
operator|&&
operator|!
name|term
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|campus
operator|!=
literal|null
operator|&&
operator|!
name|campus
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canSectionAssistStudents
argument_list|()
operator|&&
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canOnlineSectionStudents
argument_list|()
condition|)
continue|continue;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isRegistrationEnabled
parameter_list|()
block|{
for|for
control|(
name|Session
name|session
range|:
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canOnlineSectionStudents
argument_list|()
operator|&&
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canSectionAssistStudents
argument_list|()
operator|&&
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canPreRegisterStudents
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|void
name|createInstance
parameter_list|(
name|Long
name|academicSessionId
parameter_list|)
block|{
name|sGlobalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|OnlineSectioningServer
name|s
init|=
operator|new
name|OnlineSectioningServerImpl
argument_list|(
name|academicSessionId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|sInstances
operator|.
name|put
argument_list|(
name|academicSessionId
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|OnlineSectioningServerUpdater
name|updater
init|=
operator|new
name|OnlineSectioningServerUpdater
argument_list|(
name|s
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|StudentSectioningQueue
operator|.
name|getLastTimeStamp
argument_list|(
name|hibSession
argument_list|,
name|academicSessionId
argument_list|)
argument_list|)
decl_stmt|;
name|sUpdaters
operator|.
name|put
argument_list|(
name|academicSessionId
argument_list|,
name|updater
argument_list|)
expr_stmt|;
name|updater
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sGlobalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|OnlineSectioningServer
name|getInstance
parameter_list|(
specifier|final
name|Long
name|academicSessionId
parameter_list|)
throws|throws
name|SectioningException
block|{
name|sGlobalLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|sInstances
operator|.
name|get
argument_list|(
name|academicSessionId
argument_list|)
return|;
block|}
finally|finally
block|{
name|sGlobalLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|TreeSet
argument_list|<
name|AcademicSessionInfo
argument_list|>
name|getAcademicSessions
parameter_list|()
block|{
name|sGlobalLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|TreeSet
argument_list|<
name|AcademicSessionInfo
argument_list|>
name|ret
init|=
operator|new
name|TreeSet
argument_list|<
name|AcademicSessionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OnlineSectioningServer
name|s
range|:
name|sInstances
operator|.
name|values
argument_list|()
control|)
name|ret
operator|.
name|add
argument_list|(
name|s
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|sGlobalLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|unload
parameter_list|(
name|Long
name|academicSessionId
parameter_list|)
block|{
name|sGlobalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|OnlineSectioningServerUpdater
name|u
init|=
name|sUpdaters
operator|.
name|get
argument_list|(
name|academicSessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|!=
literal|null
condition|)
name|u
operator|.
name|stopUpdating
argument_list|()
expr_stmt|;
name|OnlineSectioningServer
name|s
init|=
name|sInstances
operator|.
name|get
argument_list|(
name|academicSessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
name|s
operator|.
name|unload
argument_list|()
expr_stmt|;
name|sInstances
operator|.
name|remove
argument_list|(
name|academicSessionId
argument_list|)
expr_stmt|;
name|sUpdaters
operator|.
name|remove
argument_list|(
name|academicSessionId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sGlobalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|unloadAll
parameter_list|()
block|{
name|sGlobalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|OnlineSectioningServerUpdater
name|u
range|:
name|sUpdaters
operator|.
name|values
argument_list|()
control|)
block|{
name|u
operator|.
name|stopUpdating
argument_list|()
expr_stmt|;
if|if
condition|(
name|u
operator|.
name|getAcademicSession
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningServer
name|s
init|=
name|sInstances
operator|.
name|get
argument_list|(
name|u
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
name|s
operator|.
name|unload
argument_list|()
expr_stmt|;
block|}
block|}
name|sInstances
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sGlobalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

