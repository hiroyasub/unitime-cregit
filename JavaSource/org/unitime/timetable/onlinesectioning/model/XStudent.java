begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Externalizable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|AreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Instructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|marshall
operator|.
name|Externalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|marshall
operator|.
name|SerializeWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|WaitListMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Advisor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AdvisorCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentNote
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|SerializeWith
argument_list|(
name|XStudent
operator|.
name|XStudentSerializer
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XStudent
extends|extends
name|XStudentId
implements|implements
name|Externalizable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XAreaClassificationMajor
argument_list|>
name|iMajors
init|=
operator|new
name|ArrayList
argument_list|<
name|XAreaClassificationMajor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XAreaClassificationMajor
argument_list|>
name|iMinors
init|=
operator|new
name|ArrayList
argument_list|<
name|XAreaClassificationMajor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XGroup
argument_list|>
name|iGroups
init|=
operator|new
name|ArrayList
argument_list|<
name|XGroup
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XGroup
argument_list|>
name|iAccomodations
init|=
operator|new
name|ArrayList
argument_list|<
name|XGroup
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XRequest
argument_list|>
name|iRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|XRequest
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|iStatus
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iEmail
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iEmailTimeStamp
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XInstructorAssignment
argument_list|>
name|iInstructorAssignments
init|=
operator|new
name|ArrayList
argument_list|<
name|XInstructorAssignment
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|XStudentNote
name|iLastNote
init|=
literal|null
decl_stmt|;
specifier|private
name|Float
name|iMaxCredit
init|=
literal|null
decl_stmt|;
specifier|private
name|XOverride
name|iMaxCreditOverride
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iAllowDisabled
init|=
literal|false
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XAdvisor
argument_list|>
name|iAdvisors
init|=
operator|new
name|ArrayList
argument_list|<
name|XAdvisor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Date
name|iLastStudentChange
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XAdvisorRequest
argument_list|>
name|iAdvisorRequests
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iPin
decl_stmt|;
specifier|private
name|boolean
name|iPinReleased
init|=
literal|false
decl_stmt|;
specifier|public
name|XStudent
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|XStudent
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|super
argument_list|()
expr_stmt|;
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XStudent
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|String
name|externalId
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|studentId
argument_list|,
name|externalId
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XStudent
parameter_list|(
name|Student
name|student
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|BitSet
name|freeTimePattern
parameter_list|)
block|{
name|super
argument_list|(
name|student
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|iStatus
operator|=
name|student
operator|.
name|getSectioningStatus
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|student
operator|.
name|getSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
expr_stmt|;
name|iEmail
operator|=
name|student
operator|.
name|getEmail
argument_list|()
expr_stmt|;
name|iEmailTimeStamp
operator|=
name|student
operator|.
name|getScheduleEmailedDate
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|student
operator|.
name|getScheduleEmailedDate
argument_list|()
expr_stmt|;
name|iLastStudentChange
operator|=
name|student
operator|.
name|getLastChangedByStudent
argument_list|()
expr_stmt|;
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
block|{
name|iMajors
operator|.
name|add
argument_list|(
operator|new
name|XAreaClassificationMajor
argument_list|(
name|acm
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iMajors
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|iMajors
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentAreaClassificationMinor
name|acm
range|:
name|student
operator|.
name|getAreaClasfMinors
argument_list|()
control|)
block|{
name|iMinors
operator|.
name|add
argument_list|(
operator|new
name|XAreaClassificationMajor
argument_list|(
name|acm
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iMinors
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|iMinors
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentGroup
name|group
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|iGroups
operator|.
name|add
argument_list|(
operator|new
name|XGroup
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|StudentGroupType
name|type
init|=
name|group
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|getAllowDisabledSection
argument_list|()
operator|==
name|StudentGroupType
operator|.
name|AllowDisabledSection
operator|.
name|AlwaysAllowed
condition|)
name|iAllowDisabled
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|StudentAccomodation
name|accomodation
range|:
name|student
operator|.
name|getAccomodations
argument_list|()
control|)
name|iAccomodations
operator|.
name|add
argument_list|(
operator|new
name|XGroup
argument_list|(
name|accomodation
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Advisor
name|advisor
range|:
name|student
operator|.
name|getAdvisors
argument_list|()
control|)
name|iAdvisors
operator|.
name|add
argument_list|(
operator|new
name|XAdvisor
argument_list|(
name|advisor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|advisor
operator|.
name|getLastName
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|helper
operator|.
name|getInstructorNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|advisor
argument_list|)
argument_list|,
name|advisor
operator|.
name|getEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
name|demands
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|CourseDemand
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CourseDemand
name|d1
parameter_list|,
name|CourseDemand
name|d2
parameter_list|)
block|{
if|if
condition|(
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
operator|!
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|d1
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|d1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|demands
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getCourseDemands
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|demands
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iRequests
operator|.
name|add
argument_list|(
operator|new
name|XFreeTimeRequest
argument_list|(
name|cd
argument_list|,
name|freeTimePattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iRequests
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
name|cd
argument_list|,
name|helper
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
argument_list|>
name|unmatchedCourses
init|=
operator|new
name|HashMap
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|enrollment
range|:
name|student
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
name|getRequestForCourse
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
continue|continue;
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|classes
init|=
name|unmatchedCourses
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classes
operator|==
literal|null
condition|)
block|{
name|classes
operator|=
operator|new
name|ArrayList
argument_list|<
name|StudentClassEnrollment
argument_list|>
argument_list|()
expr_stmt|;
name|unmatchedCourses
operator|.
name|put
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
argument_list|,
name|classes
argument_list|)
expr_stmt|;
block|}
name|classes
operator|.
name|add
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|unmatchedCourses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|priority
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|iRequests
control|)
if|if
condition|(
operator|!
name|request
operator|.
name|isAlternative
argument_list|()
operator|&&
name|request
operator|.
name|getPriority
argument_list|()
operator|>
name|priority
condition|)
name|priority
operator|=
name|request
operator|.
name|getPriority
argument_list|()
expr_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
operator|new
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|(
name|unmatchedCourses
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|classes
init|=
name|unmatchedCourses
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|iRequests
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
name|student
argument_list|,
name|course
argument_list|,
operator|++
name|priority
argument_list|,
name|helper
argument_list|,
name|classes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|iRequests
argument_list|)
expr_stmt|;
name|StudentNote
name|note
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|student
operator|.
name|getNotes
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StudentNote
name|n
range|:
name|student
operator|.
name|getNotes
argument_list|()
control|)
block|{
if|if
condition|(
name|note
operator|==
literal|null
operator|||
name|note
operator|.
name|compareTo
argument_list|(
name|n
argument_list|)
operator|<
literal|0
condition|)
name|note
operator|=
name|n
expr_stmt|;
block|}
if|if
condition|(
name|note
operator|!=
literal|null
condition|)
name|iLastNote
operator|=
operator|new
name|XStudentNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|iMaxCredit
operator|=
name|student
operator|.
name|getMaxCredit
argument_list|()
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getOverrideMaxCredit
argument_list|()
operator|!=
literal|null
condition|)
name|iMaxCreditOverride
operator|=
operator|new
name|XOverride
argument_list|(
name|student
operator|.
name|getOverrideExternalId
argument_list|()
argument_list|,
name|student
operator|.
name|getOverrideTimeStamp
argument_list|()
argument_list|,
name|student
operator|.
name|getOverrideStatus
argument_list|()
argument_list|,
name|student
operator|.
name|getOverrideMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
name|setAdvisorRequests
argument_list|(
name|student
argument_list|,
name|helper
argument_list|,
name|freeTimePattern
argument_list|)
expr_stmt|;
name|iPin
operator|=
name|student
operator|.
name|getPin
argument_list|()
expr_stmt|;
name|iPinReleased
operator|=
operator|(
name|student
operator|.
name|isPinReleased
argument_list|()
operator|!=
literal|null
operator|&&
name|student
operator|.
name|isPinReleased
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
expr_stmt|;
block|}
specifier|public
name|void
name|setAdvisorRequests
parameter_list|(
name|Student
name|student
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|BitSet
name|freeTimePattern
parameter_list|)
block|{
if|if
condition|(
name|student
operator|.
name|getAdvisorCourseRequests
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|student
operator|.
name|getAdvisorCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iAdvisorRequests
operator|=
operator|new
name|ArrayList
argument_list|<
name|XAdvisorRequest
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|AdvisorCourseRequest
name|acr
range|:
name|student
operator|.
name|getAdvisorCourseRequests
argument_list|()
control|)
name|iAdvisorRequests
operator|.
name|add
argument_list|(
operator|new
name|XAdvisorRequest
argument_list|(
name|acr
argument_list|,
name|helper
argument_list|,
name|freeTimePattern
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|iAdvisorRequests
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iAdvisorRequests
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setAdvisorRequests
parameter_list|(
name|List
argument_list|<
name|AdvisorCourseRequest
argument_list|>
name|acrs
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|BitSet
name|freeTimePattern
parameter_list|)
block|{
if|if
condition|(
name|acrs
operator|!=
literal|null
operator|&&
operator|!
name|acrs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iAdvisorRequests
operator|=
operator|new
name|ArrayList
argument_list|<
name|XAdvisorRequest
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|AdvisorCourseRequest
name|acr
range|:
name|acrs
control|)
name|iAdvisorRequests
operator|.
name|add
argument_list|(
operator|new
name|XAdvisorRequest
argument_list|(
name|acr
argument_list|,
name|helper
argument_list|,
name|freeTimePattern
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|iAdvisorRequests
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iAdvisorRequests
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|XStudent
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
name|super
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|iStatus
operator|=
name|student
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|iEmail
operator|=
name|student
operator|.
name|getEmail
argument_list|()
expr_stmt|;
name|iEmailTimeStamp
operator|=
name|student
operator|.
name|getEmailTimeStamp
argument_list|()
expr_stmt|;
name|iLastStudentChange
operator|=
name|student
operator|.
name|getLastStudentChange
argument_list|()
expr_stmt|;
name|iMajors
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getMajors
argument_list|()
argument_list|)
expr_stmt|;
name|iMinors
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getMinors
argument_list|()
argument_list|)
expr_stmt|;
name|iGroups
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getGroups
argument_list|()
argument_list|)
expr_stmt|;
name|iAccomodations
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getAccomodations
argument_list|()
argument_list|)
expr_stmt|;
name|iRequests
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|iAllowDisabled
operator|=
name|student
operator|.
name|iAllowDisabled
expr_stmt|;
name|iAdvisors
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getAdvisors
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|hasAdvisorRequests
argument_list|()
condition|)
name|iAdvisorRequests
operator|=
operator|new
name|ArrayList
argument_list|<
name|XAdvisorRequest
argument_list|>
argument_list|(
name|student
operator|.
name|getAdvisorRequests
argument_list|()
argument_list|)
expr_stmt|;
name|iInstructorAssignments
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getInstructorAssignments
argument_list|()
argument_list|)
expr_stmt|;
name|iPin
operator|=
name|student
operator|.
name|iPin
expr_stmt|;
name|iPinReleased
operator|=
name|student
operator|.
name|iPinReleased
expr_stmt|;
name|iMaxCredit
operator|=
name|student
operator|.
name|iMaxCredit
expr_stmt|;
name|iMaxCreditOverride
operator|=
name|student
operator|.
name|iMaxCreditOverride
expr_stmt|;
name|iLastNote
operator|=
name|student
operator|.
name|iLastNote
expr_stmt|;
block|}
specifier|public
name|XStudent
parameter_list|(
name|XStudent
name|student
parameter_list|,
name|Collection
argument_list|<
name|CourseDemand
argument_list|>
name|demands
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|BitSet
name|freeTimePattern
parameter_list|)
block|{
name|super
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|iStatus
operator|=
name|student
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|iEmail
operator|=
name|student
operator|.
name|getEmail
argument_list|()
expr_stmt|;
name|iEmailTimeStamp
operator|=
name|student
operator|.
name|getEmailTimeStamp
argument_list|()
expr_stmt|;
name|iLastStudentChange
operator|=
name|student
operator|.
name|getLastStudentChange
argument_list|()
expr_stmt|;
name|iMajors
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getMajors
argument_list|()
argument_list|)
expr_stmt|;
name|iMinors
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getMinors
argument_list|()
argument_list|)
expr_stmt|;
name|iGroups
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getGroups
argument_list|()
argument_list|)
expr_stmt|;
name|iAccomodations
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getAccomodations
argument_list|()
argument_list|)
expr_stmt|;
name|iMaxCredit
operator|=
name|student
operator|.
name|getMaxCredit
argument_list|()
expr_stmt|;
name|iMaxCreditOverride
operator|=
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
expr_stmt|;
name|iAllowDisabled
operator|=
name|student
operator|.
name|iAllowDisabled
expr_stmt|;
name|iAdvisors
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getAdvisors
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|hasAdvisorRequests
argument_list|()
condition|)
name|iAdvisorRequests
operator|=
operator|new
name|ArrayList
argument_list|<
name|XAdvisorRequest
argument_list|>
argument_list|(
name|student
operator|.
name|getAdvisorRequests
argument_list|()
argument_list|)
expr_stmt|;
name|iInstructorAssignments
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getInstructorAssignments
argument_list|()
argument_list|)
expr_stmt|;
name|iPin
operator|=
name|student
operator|.
name|iPin
expr_stmt|;
name|iPinReleased
operator|=
name|student
operator|.
name|iPinReleased
expr_stmt|;
name|iMaxCredit
operator|=
name|student
operator|.
name|iMaxCredit
expr_stmt|;
name|iMaxCreditOverride
operator|=
name|student
operator|.
name|iMaxCreditOverride
expr_stmt|;
name|iLastNote
operator|=
name|student
operator|.
name|iLastNote
expr_stmt|;
if|if
condition|(
name|demands
operator|!=
literal|null
condition|)
for|for
control|(
name|CourseDemand
name|cd
range|:
name|demands
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iRequests
operator|.
name|add
argument_list|(
operator|new
name|XFreeTimeRequest
argument_list|(
name|cd
argument_list|,
name|freeTimePattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iRequests
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
name|cd
argument_list|,
name|helper
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|iRequests
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|XRequest
argument_list|>
name|loadRequests
parameter_list|(
name|Student
name|student
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|BitSet
name|freeTimePattern
parameter_list|)
block|{
name|List
argument_list|<
name|XRequest
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<
name|XRequest
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
name|demands
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|CourseDemand
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CourseDemand
name|d1
parameter_list|,
name|CourseDemand
name|d2
parameter_list|)
block|{
if|if
condition|(
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
operator|!
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|d1
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|d1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|demands
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getCourseDemands
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|demands
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|requests
operator|.
name|add
argument_list|(
operator|new
name|XFreeTimeRequest
argument_list|(
name|cd
argument_list|,
name|freeTimePattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requests
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
name|cd
argument_list|,
name|helper
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|requests
argument_list|)
expr_stmt|;
return|return
name|requests
return|;
block|}
specifier|public
name|XStudent
parameter_list|(
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|super
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|iStatus
operator|=
name|student
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|iAllowDisabled
operator|=
name|student
operator|.
name|isAllowDisabled
argument_list|()
expr_stmt|;
name|iEmailTimeStamp
operator|=
operator|(
name|student
operator|.
name|getEmailTimeStamp
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Date
argument_list|(
name|student
operator|.
name|getEmailTimeStamp
argument_list|()
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|hasMaxCredit
argument_list|()
condition|)
name|iMaxCredit
operator|=
name|student
operator|.
name|getMaxCredit
argument_list|()
expr_stmt|;
for|for
control|(
name|AreaClassificationMajor
name|acm
range|:
name|student
operator|.
name|getAreaClassificationMajors
argument_list|()
control|)
block|{
name|iMajors
operator|.
name|add
argument_list|(
operator|new
name|XAreaClassificationMajor
argument_list|(
name|acm
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iMajors
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|iMajors
argument_list|)
expr_stmt|;
for|for
control|(
name|AreaClassificationMajor
name|acm
range|:
name|student
operator|.
name|getAreaClassificationMinors
argument_list|()
control|)
block|{
name|iMinors
operator|.
name|add
argument_list|(
operator|new
name|XAreaClassificationMajor
argument_list|(
name|acm
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iMinors
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|iMinors
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|StudentGroup
name|gr
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
name|iGroups
operator|.
name|add
argument_list|(
operator|new
name|XGroup
argument_list|(
name|gr
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|acc
range|:
name|student
operator|.
name|getAccommodations
argument_list|()
control|)
name|iAccomodations
operator|.
name|add
argument_list|(
operator|new
name|XGroup
argument_list|(
name|acc
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Instructor
name|advisor
range|:
name|student
operator|.
name|getAdvisors
argument_list|()
control|)
name|iAdvisors
operator|.
name|add
argument_list|(
operator|new
name|XAdvisor
argument_list|(
name|advisor
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|advisor
operator|.
name|getName
argument_list|()
argument_list|,
name|advisor
operator|.
name|getEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|iRequests
operator|.
name|add
argument_list|(
operator|new
name|XFreeTimeRequest
argument_list|(
operator|(
name|FreeTimeRequest
operator|)
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
name|iRequests
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
operator|(
name|CourseRequest
operator|)
name|request
argument_list|,
name|assignment
operator|==
literal|null
condition|?
literal|null
else|:
name|assignment
operator|.
name|getValue
argument_list|(
name|request
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getPin
parameter_list|()
block|{
return|return
name|iPin
return|;
block|}
specifier|public
name|void
name|setPin
parameter_list|(
name|String
name|pin
parameter_list|)
block|{
name|iPin
operator|=
name|pin
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPinReleased
parameter_list|()
block|{
return|return
name|iPinReleased
return|;
block|}
specifier|public
name|void
name|setPinReleased
parameter_list|(
name|boolean
name|released
parameter_list|)
block|{
name|iPinReleased
operator|=
name|released
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasReleasedPin
parameter_list|()
block|{
return|return
name|isPinReleased
argument_list|()
operator|&&
name|getPin
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getPin
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getReleasedPin
parameter_list|()
block|{
return|return
operator|(
name|hasReleasedPin
argument_list|()
condition|?
name|getPin
argument_list|()
else|:
literal|null
operator|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|XInstructorAssignment
argument_list|>
name|getInstructorAssignments
parameter_list|()
block|{
return|return
name|iInstructorAssignments
return|;
block|}
specifier|public
name|boolean
name|hasInstructorAssignments
parameter_list|()
block|{
return|return
name|iInstructorAssignments
operator|!=
literal|null
operator|&&
operator|!
name|iInstructorAssignments
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|XStudentNote
name|getLastNote
parameter_list|()
block|{
return|return
name|iLastNote
return|;
block|}
specifier|public
name|boolean
name|hasLastNote
parameter_list|()
block|{
return|return
name|iLastNote
operator|!=
literal|null
operator|&&
name|iLastNote
operator|.
name|hasNote
argument_list|()
return|;
block|}
specifier|public
name|void
name|setLastNote
parameter_list|(
name|XStudentNote
name|note
parameter_list|)
block|{
name|iLastNote
operator|=
name|note
expr_stmt|;
block|}
specifier|public
name|XCourseRequest
name|getRequestForCourse
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
for|for
control|(
name|XRequest
name|request
range|:
name|iRequests
control|)
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|hasCourse
argument_list|(
name|courseId
argument_list|)
condition|)
return|return
operator|(
name|XCourseRequest
operator|)
name|request
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|XFreeTimeRequest
name|getRequestForFreeTime
parameter_list|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
parameter_list|)
block|{
for|for
control|(
name|XRequest
name|request
range|:
name|iRequests
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|ftRequest
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|request
decl_stmt|;
if|if
condition|(
name|ftRequest
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|ftRequest
operator|.
name|getTime
argument_list|()
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
condition|)
return|return
name|ftRequest
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|XCourseRequest
name|getRequestForCourseName
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
for|for
control|(
name|XRequest
name|request
range|:
name|iRequests
control|)
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|hasCourseName
argument_list|(
name|courseName
argument_list|)
condition|)
return|return
operator|(
name|XCourseRequest
operator|)
name|request
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|XAdvisorRequest
name|getAdvisorRequestForCourse
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
if|if
condition|(
name|iAdvisorRequests
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|XAdvisorRequest
name|request
range|:
name|iAdvisorRequests
control|)
if|if
condition|(
name|request
operator|.
name|hasCourseId
argument_list|()
operator|&&
name|request
operator|.
name|getCourseId
argument_list|()
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|courseId
argument_list|)
condition|)
return|return
name|request
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|XAdvisorRequest
name|getAdvisorRequestForFreeTime
parameter_list|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
parameter_list|)
block|{
if|if
condition|(
name|iAdvisorRequests
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|XAdvisorRequest
name|request
range|:
name|iAdvisorRequests
control|)
if|if
condition|(
name|request
operator|.
name|hasFreeTime
argument_list|()
operator|&&
name|request
operator|.
name|getFreeTime
argument_list|()
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
condition|)
return|return
name|request
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|Float
name|getMaxCredit
parameter_list|()
block|{
return|return
name|iMaxCredit
return|;
block|}
specifier|public
name|boolean
name|hasMaxCredit
parameter_list|()
block|{
return|return
name|iMaxCredit
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMaxCredit
parameter_list|(
name|Float
name|maxCredit
parameter_list|)
block|{
name|iMaxCredit
operator|=
name|maxCredit
expr_stmt|;
block|}
specifier|public
name|XOverride
name|getMaxCreditOverride
parameter_list|()
block|{
return|return
name|iMaxCreditOverride
return|;
block|}
specifier|public
name|boolean
name|isMaxCreditOverridePending
parameter_list|()
block|{
return|return
operator|(
name|iMaxCreditOverride
operator|==
literal|null
operator|||
name|iMaxCreditOverride
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|iMaxCreditOverride
operator|.
name|getStatus
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|CourseRequestOverrideStatus
operator|.
name|PENDING
operator|.
name|ordinal
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|setMaxCreditOverride
parameter_list|(
name|XOverride
name|maxCreditOverride
parameter_list|)
block|{
name|iMaxCreditOverride
operator|=
name|maxCreditOverride
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAllowDisabled
parameter_list|()
block|{
return|return
name|iAllowDisabled
return|;
block|}
specifier|public
name|void
name|setAllowDisabled
parameter_list|(
name|boolean
name|allowDisabled
parameter_list|)
block|{
name|iAllowDisabled
operator|=
name|allowDisabled
expr_stmt|;
block|}
comment|/**      * List of academic area, classification, and major codes ({@link XAreaClassificationMajor}) for the given student      */
specifier|public
name|List
argument_list|<
name|XAreaClassificationMajor
argument_list|>
name|getMajors
parameter_list|()
block|{
return|return
name|iMajors
return|;
block|}
comment|/**      * List of academic area, classification, and minor codes ({@link XAreaClassificationMajor}) for the given student      */
specifier|public
name|List
argument_list|<
name|XAreaClassificationMajor
argument_list|>
name|getMinors
parameter_list|()
block|{
return|return
name|iMinors
return|;
block|}
comment|/**      * List of group codes for the given student      */
specifier|public
name|List
argument_list|<
name|XGroup
argument_list|>
name|getGroups
parameter_list|()
block|{
return|return
name|iGroups
return|;
block|}
comment|/**      * List of group codes for the given student      */
specifier|public
name|List
argument_list|<
name|XGroup
argument_list|>
name|getAccomodations
parameter_list|()
block|{
return|return
name|iAccomodations
return|;
block|}
specifier|public
name|boolean
name|hasAccomodation
parameter_list|(
name|String
name|accomodation
parameter_list|)
block|{
if|if
condition|(
name|accomodation
operator|!=
literal|null
condition|)
for|for
control|(
name|XGroup
name|acc
range|:
name|iAccomodations
control|)
if|if
condition|(
name|accomodation
operator|.
name|equals
argument_list|(
name|acc
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|List
argument_list|<
name|XAdvisor
argument_list|>
name|getAdvisors
parameter_list|()
block|{
return|return
name|iAdvisors
return|;
block|}
specifier|public
name|boolean
name|hasAdvisorRequests
parameter_list|()
block|{
return|return
name|iAdvisorRequests
operator|!=
literal|null
operator|&&
operator|!
name|iAdvisorRequests
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|XAdvisorRequest
argument_list|>
name|getAdvisorRequests
parameter_list|()
block|{
return|return
name|iAdvisorRequests
return|;
block|}
comment|/**      * Get student status (online sectioning only)      */
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|iStatus
return|;
block|}
specifier|public
name|WaitListMode
name|getWaitListMode
parameter_list|(
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
name|WaitListMode
operator|.
name|None
return|;
name|StudentSectioningStatus
name|status
init|=
name|student
operator|.
name|getEffectiveStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
name|WaitListMode
operator|.
name|WaitList
return|;
if|if
condition|(
name|status
operator|.
name|hasOption
argument_list|(
name|Option
operator|.
name|waitlist
argument_list|)
condition|)
return|return
name|WaitListMode
operator|.
name|WaitList
return|;
if|if
condition|(
name|status
operator|.
name|hasOption
argument_list|(
name|Option
operator|.
name|nosubs
argument_list|)
condition|)
return|return
name|WaitListMode
operator|.
name|NoSubs
return|;
return|return
name|WaitListMode
operator|.
name|None
return|;
block|}
comment|/**      * Set student status      */
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|iStatus
operator|=
name|status
expr_stmt|;
block|}
comment|/**      * Get last email time stamp (online sectioning only)      */
specifier|public
name|Date
name|getEmailTimeStamp
parameter_list|()
block|{
return|return
name|iEmailTimeStamp
return|;
block|}
comment|/**      * Set last email time stamp      */
specifier|public
name|void
name|setEmailTimeStamp
parameter_list|(
name|Date
name|emailTimeStamp
parameter_list|)
block|{
name|iEmailTimeStamp
operator|=
name|emailTimeStamp
expr_stmt|;
block|}
specifier|public
name|Date
name|getLastStudentChange
parameter_list|()
block|{
return|return
name|iLastStudentChange
return|;
block|}
specifier|public
name|void
name|setLastStudentChange
parameter_list|(
name|Date
name|lastStudentChange
parameter_list|)
block|{
name|iLastStudentChange
operator|=
name|lastStudentChange
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|XRequest
argument_list|>
name|getRequests
parameter_list|()
block|{
return|return
name|iRequests
return|;
block|}
specifier|public
name|String
name|getEmail
parameter_list|()
block|{
return|return
name|iEmail
return|;
block|}
comment|/**      * True if the given request can be assigned to the student. A request      * cannot be assigned to a student when the student already has the desired      * number of requests assigned (i.e., number of non-alternative course      * requests).      **/
specifier|public
name|boolean
name|canAssign
parameter_list|(
name|XCourseRequest
name|request
parameter_list|,
name|WaitListMode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|request
operator|.
name|isAlternative
argument_list|()
operator|&&
name|request
operator|.
name|isWaitlist
argument_list|()
operator|&&
name|mode
operator|==
name|WaitListMode
operator|.
name|WaitList
condition|)
return|return
literal|true
return|;
name|int
name|alt
init|=
literal|0
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|iRequests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
name|found
operator|=
literal|true
expr_stmt|;
name|boolean
name|course
init|=
operator|(
name|r
operator|instanceof
name|XCourseRequest
operator|)
decl_stmt|;
name|boolean
name|assigned
init|=
operator|(
operator|!
name|course
operator|||
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|||
name|r
operator|.
name|equals
argument_list|(
name|request
argument_list|)
operator|)
decl_stmt|;
name|boolean
name|waitlist
init|=
operator|(
name|course
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|isWaitListOrNoSub
argument_list|(
name|mode
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
if|if
condition|(
name|assigned
operator|||
operator|(
operator|!
name|found
operator|&&
name|waitlist
operator|)
condition|)
name|alt
operator|--
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|course
operator|&&
operator|!
name|waitlist
operator|&&
operator|!
name|assigned
condition|)
name|alt
operator|++
expr_stmt|;
block|}
block|}
return|return
operator|(
name|alt
operator|>=
literal|0
operator|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getRequestedCourseIds
parameter_list|()
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
for|for
control|(
name|XCourseId
name|course
range|:
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourseIds
argument_list|()
control|)
name|courseIds
operator|.
name|add
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAdvisorRequests
argument_list|()
condition|)
for|for
control|(
name|XAdvisorRequest
name|request
range|:
name|getAdvisorRequests
argument_list|()
control|)
if|if
condition|(
name|request
operator|.
name|hasCourseId
argument_list|()
condition|)
name|courseIds
operator|.
name|add
argument_list|(
name|request
operator|.
name|getCourseId
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|courseIds
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getAdvisorWaitListedCourseIds
parameter_list|(
name|boolean
name|useWaitList
parameter_list|,
name|boolean
name|useNoSubs
parameter_list|)
block|{
if|if
condition|(
operator|!
name|useWaitList
operator|&&
operator|!
name|useNoSubs
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|hasAdvisorRequests
argument_list|()
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XAdvisorRequest
name|request
range|:
name|getAdvisorRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|useWaitList
operator|&&
name|request
operator|.
name|hasCourseId
argument_list|()
operator|&&
name|request
operator|.
name|isWaitList
argument_list|()
operator|&&
operator|!
name|request
operator|.
name|isSubstitute
argument_list|()
condition|)
name|courseIds
operator|.
name|add
argument_list|(
name|request
operator|.
name|getCourseId
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|useNoSubs
operator|&&
name|request
operator|.
name|hasCourseId
argument_list|()
operator|&&
name|request
operator|.
name|isNoSub
argument_list|()
operator|&&
operator|!
name|request
operator|.
name|isSubstitute
argument_list|()
condition|)
name|courseIds
operator|.
name|add
argument_list|(
name|request
operator|.
name|getCourseId
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|courseIds
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getAdvisorWaitListedCourseIds
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|)
block|{
return|return
name|getAdvisorWaitListedCourseIds
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.UseAdvisorWaitLists"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.UseAdvisorNoSubs"
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|getExternalId
argument_list|()
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|super
operator|.
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|nrMajors
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|iMajors
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrMajors
condition|;
name|i
operator|++
control|)
name|iMajors
operator|.
name|add
argument_list|(
operator|new
name|XAreaClassificationMajor
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nrMinors
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|iMinors
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrMinors
condition|;
name|i
operator|++
control|)
name|iMinors
operator|.
name|add
argument_list|(
operator|new
name|XAreaClassificationMajor
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nrGroups
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|iGroups
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrGroups
condition|;
name|i
operator|++
control|)
name|iGroups
operator|.
name|add
argument_list|(
operator|new
name|XGroup
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nrAccomodations
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|iAccomodations
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrAccomodations
condition|;
name|i
operator|++
control|)
name|iAccomodations
operator|.
name|add
argument_list|(
operator|new
name|XGroup
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nrRequests
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|iRequests
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrRequests
condition|;
name|i
operator|++
control|)
name|iRequests
operator|.
name|add
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|?
operator|new
name|XCourseRequest
argument_list|(
name|in
argument_list|)
else|:
operator|new
name|XFreeTimeRequest
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|iStatus
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iEmail
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iEmailTimeStamp
operator|=
operator|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|?
operator|new
name|Date
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
else|:
literal|null
operator|)
expr_stmt|;
name|iLastStudentChange
operator|=
operator|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|?
operator|new
name|Date
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
else|:
literal|null
operator|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
name|iLastNote
operator|=
operator|new
name|XStudentNote
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|iAllowDisabled
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|int
name|nrAdvisors
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|iAdvisors
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrAdvisors
condition|;
name|i
operator|++
control|)
name|iAdvisors
operator|.
name|add
argument_list|(
operator|new
name|XAdvisor
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nrAdvisorRequests
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|nrAdvisorRequests
operator|<
literal|0
condition|)
block|{
name|iAdvisorRequests
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|iAdvisorRequests
operator|=
operator|new
name|ArrayList
argument_list|<
name|XAdvisorRequest
argument_list|>
argument_list|(
name|nrAdvisorRequests
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrAdvisorRequests
condition|;
name|i
operator|++
control|)
name|iAdvisorRequests
operator|.
name|add
argument_list|(
operator|new
name|XAdvisorRequest
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iPin
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iPinReleased
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iMajors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XAreaClassificationMajor
name|major
range|:
name|iMajors
control|)
name|major
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iMinors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XAreaClassificationMajor
name|minor
range|:
name|iMinors
control|)
name|minor
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iGroups
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XGroup
name|group
range|:
name|iGroups
control|)
name|group
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iAccomodations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XGroup
name|accomodation
range|:
name|iAccomodations
control|)
name|accomodation
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|iRequests
control|)
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
operator|(
operator|(
name|XFreeTimeRequest
operator|)
name|request
operator|)
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeObject
argument_list|(
name|iStatus
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iEmail
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|iEmailTimeStamp
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEmailTimeStamp
operator|!=
literal|null
condition|)
name|out
operator|.
name|writeLong
argument_list|(
name|iEmailTimeStamp
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|iLastStudentChange
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLastStudentChange
operator|!=
literal|null
condition|)
name|out
operator|.
name|writeLong
argument_list|(
name|iLastStudentChange
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|iLastNote
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLastNote
operator|!=
literal|null
condition|)
name|iLastNote
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|iAllowDisabled
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iAdvisors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XAdvisor
name|advisor
range|:
name|iAdvisors
control|)
name|advisor
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAdvisorRequests
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|iAdvisorRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XAdvisorRequest
name|ar
range|:
name|iAdvisorRequests
control|)
name|ar
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeObject
argument_list|(
name|iPin
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|iPinReleased
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|XStudentSerializer
implements|implements
name|Externalizer
argument_list|<
name|XStudent
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|ObjectOutput
name|output
parameter_list|,
name|XStudent
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|writeExternal
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|XStudent
name|readObject
parameter_list|(
name|ObjectInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
return|return
operator|new
name|XStudent
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
annotation|@
name|SerializeWith
argument_list|(
name|XStudent
operator|.
name|XGroupSerializer
operator|.
name|class
argument_list|)
specifier|public
specifier|static
class|class
name|XGroup
implements|implements
name|Externalizable
block|{
specifier|public
name|String
name|iType
decl_stmt|,
name|iAbbreaviation
decl_stmt|,
name|iTitle
decl_stmt|;
specifier|public
name|XGroup
parameter_list|(
name|StudentGroup
name|g
parameter_list|)
block|{
name|iType
operator|=
operator|(
name|g
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|g
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|)
expr_stmt|;
name|iAbbreaviation
operator|=
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
expr_stmt|;
name|iTitle
operator|=
operator|(
name|g
operator|.
name|getGroupName
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|g
operator|.
name|getGroupName
argument_list|()
operator|)
expr_stmt|;
block|}
specifier|public
name|XGroup
parameter_list|(
name|StudentAccomodation
name|a
parameter_list|)
block|{
name|iAbbreaviation
operator|=
name|a
operator|.
name|getAbbreviation
argument_list|()
expr_stmt|;
name|iTitle
operator|=
name|a
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
specifier|public
name|XGroup
parameter_list|(
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|StudentGroup
name|g
parameter_list|)
block|{
name|iType
operator|=
operator|(
name|g
operator|.
name|getType
argument_list|()
operator|==
literal|null
operator|||
name|g
operator|.
name|getType
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|g
operator|.
name|getType
argument_list|()
operator|)
expr_stmt|;
name|iAbbreaviation
operator|=
name|g
operator|.
name|getReference
argument_list|()
expr_stmt|;
name|iTitle
operator|=
operator|(
name|g
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|g
operator|.
name|getName
argument_list|()
operator|)
expr_stmt|;
block|}
specifier|public
name|XGroup
parameter_list|(
name|String
name|abbv
parameter_list|,
name|String
name|title
parameter_list|)
block|{
name|iAbbreaviation
operator|=
name|abbv
expr_stmt|;
name|iTitle
operator|=
name|title
expr_stmt|;
block|}
specifier|public
name|XGroup
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|super
argument_list|()
expr_stmt|;
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
specifier|public
name|String
name|getAbbreviation
parameter_list|()
block|{
return|return
name|iAbbreaviation
return|;
block|}
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|iTitle
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
name|iType
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
else|else
name|iType
operator|=
literal|null
expr_stmt|;
name|iAbbreaviation
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iTitle
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|iType
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeObject
argument_list|(
name|iAbbreaviation
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iTitle
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getAbbreviation
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|XGroup
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getAbbreviation
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|XGroup
operator|)
name|o
operator|)
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|XGroupSerializer
implements|implements
name|Externalizer
argument_list|<
name|XGroup
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|ObjectOutput
name|output
parameter_list|,
name|XGroup
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|writeExternal
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|XGroup
name|readObject
parameter_list|(
name|ObjectInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
return|return
operator|new
name|XGroup
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
annotation|@
name|SerializeWith
argument_list|(
name|XStudent
operator|.
name|XAdvisorSerializer
operator|.
name|class
argument_list|)
specifier|public
specifier|static
class|class
name|XAdvisor
implements|implements
name|Externalizable
block|{
specifier|public
name|String
name|iExternalId
decl_stmt|,
name|iName
decl_stmt|,
name|iEmail
decl_stmt|;
specifier|public
name|XAdvisor
parameter_list|(
name|String
name|externalId
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|email
parameter_list|)
block|{
name|iExternalId
operator|=
name|externalId
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iEmail
operator|=
name|email
expr_stmt|;
block|}
specifier|public
name|XAdvisor
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|super
argument_list|()
expr_stmt|;
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getExternalId
parameter_list|()
block|{
return|return
name|iExternalId
return|;
block|}
specifier|public
name|String
name|getEmail
parameter_list|()
block|{
return|return
name|iEmail
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|iExternalId
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iName
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iEmail
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeObject
argument_list|(
name|iExternalId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iEmail
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iExternalId
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|XAdvisor
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|XAdvisor
operator|)
name|o
operator|)
operator|.
name|getExternalId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|XAdvisorSerializer
implements|implements
name|Externalizer
argument_list|<
name|XAdvisor
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|ObjectOutput
name|output
parameter_list|,
name|XAdvisor
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|writeExternal
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|XAdvisor
name|readObject
parameter_list|(
name|ObjectInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
return|return
operator|new
name|XAdvisor
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

