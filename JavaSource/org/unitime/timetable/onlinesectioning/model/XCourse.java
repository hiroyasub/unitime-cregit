begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|marshall
operator|.
name|Externalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|marshall
operator|.
name|SerializeWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseDetailsProvider
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|SerializeWith
argument_list|(
name|XCourse
operator|.
name|XCourseSerializer
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XCourse
extends|extends
name|XCourseId
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iSubjectArea
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iCourseNumber
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iDepartment
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iConsentLabel
init|=
literal|null
decl_stmt|,
name|iConsentAbbv
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iNote
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iDetails
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iLimit
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iProjected
init|=
literal|0
decl_stmt|;
specifier|private
name|Integer
name|iWkEnroll
init|=
literal|null
decl_stmt|,
name|iWkChange
init|=
literal|null
decl_stmt|,
name|iWkDrop
init|=
literal|null
decl_stmt|;
specifier|public
name|XCourse
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|XCourse
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XCourse
parameter_list|(
name|CourseOffering
name|course
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|this
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XCourse
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
name|super
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|iSubjectArea
operator|=
name|course
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|iCourseNumber
operator|=
name|course
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|iNote
operator|=
name|course
operator|.
name|getScheduleBookNote
argument_list|()
expr_stmt|;
name|iDepartment
operator|=
operator|(
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|==
literal|null
condition|?
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
else|:
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|)
expr_stmt|;
name|boolean
name|unlimited
init|=
literal|false
decl_stmt|;
name|iLimit
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|config
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
name|iLimit
operator|+=
name|config
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|iLimit
operator|=
name|course
operator|.
name|getReservation
argument_list|()
expr_stmt|;
if|if
condition|(
name|iLimit
operator|>=
literal|9999
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|unlimited
condition|)
name|iLimit
operator|=
operator|-
literal|1
expr_stmt|;
name|iProjected
operator|=
operator|(
name|course
operator|.
name|getProjectedDemand
argument_list|()
operator|!=
literal|null
condition|?
name|course
operator|.
name|getProjectedDemand
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
name|course
operator|.
name|getDemand
argument_list|()
operator|!=
literal|null
condition|?
name|course
operator|.
name|getDemand
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|iWkEnroll
operator|=
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getLastWeekToEnroll
argument_list|()
expr_stmt|;
name|iWkChange
operator|=
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getLastWeekToChange
argument_list|()
expr_stmt|;
name|iWkDrop
operator|=
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getLastWeekToDrop
argument_list|()
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iConsentLabel
operator|=
name|course
operator|.
name|getConsentType
argument_list|()
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|iConsentAbbv
operator|=
name|course
operator|.
name|getConsentType
argument_list|()
operator|.
name|getAbbv
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|XCourse
parameter_list|(
name|Course
name|course
parameter_list|)
block|{
name|super
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|iSubjectArea
operator|=
name|course
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|iCourseNumber
operator|=
name|course
operator|.
name|getCourseNumber
argument_list|()
expr_stmt|;
name|iNote
operator|=
name|course
operator|.
name|getNote
argument_list|()
expr_stmt|;
name|iLimit
operator|=
name|course
operator|.
name|getLimit
argument_list|()
expr_stmt|;
name|iProjected
operator|=
name|course
operator|.
name|getProjected
argument_list|()
expr_stmt|;
block|}
comment|/** Subject area */
specifier|public
name|String
name|getSubjectArea
parameter_list|()
block|{
return|return
name|iSubjectArea
return|;
block|}
comment|/** Course number */
specifier|public
name|String
name|getCourseNumber
parameter_list|()
block|{
return|return
name|iCourseNumber
return|;
block|}
comment|/** Course offering limit */
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|int
name|getProjected
parameter_list|()
block|{
return|return
name|iProjected
return|;
block|}
specifier|public
name|Integer
name|getLastWeekToEnroll
parameter_list|()
block|{
return|return
name|iWkEnroll
return|;
block|}
specifier|public
name|Integer
name|getLastWeekToChange
parameter_list|()
block|{
return|return
name|iWkChange
return|;
block|}
specifier|public
name|Integer
name|getLastWeekToDrop
parameter_list|()
block|{
return|return
name|iWkDrop
return|;
block|}
specifier|public
name|String
name|getDepartment
parameter_list|()
block|{
return|return
name|iDepartment
return|;
block|}
specifier|public
name|String
name|getConsentLabel
parameter_list|()
block|{
return|return
name|iConsentLabel
return|;
block|}
specifier|public
name|String
name|getConsentAbbv
parameter_list|()
block|{
return|return
name|iConsentAbbv
return|;
block|}
comment|/** Course note */
specifier|public
name|String
name|getNote
parameter_list|()
block|{
return|return
name|iNote
return|;
block|}
specifier|public
name|String
name|getDetails
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|,
name|CourseDetailsProvider
name|provider
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|iDetails
operator|==
literal|null
operator|&&
name|provider
operator|!=
literal|null
condition|)
name|iDetails
operator|=
name|provider
operator|.
name|getDetails
argument_list|(
name|session
argument_list|,
name|getSubjectArea
argument_list|()
argument_list|,
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iDetails
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|super
operator|.
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|iSubjectArea
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iCourseNumber
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iDepartment
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iConsentLabel
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iConsentAbbv
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iNote
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iDetails
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iLimit
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|iProjected
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|iWkEnroll
operator|=
operator|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|?
name|in
operator|.
name|readInt
argument_list|()
else|:
literal|null
operator|)
expr_stmt|;
name|iWkChange
operator|=
operator|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|?
name|in
operator|.
name|readInt
argument_list|()
else|:
literal|null
operator|)
expr_stmt|;
name|iWkDrop
operator|=
operator|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|?
name|in
operator|.
name|readInt
argument_list|()
else|:
literal|null
operator|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iSubjectArea
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iCourseNumber
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iDepartment
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iConsentLabel
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iConsentAbbv
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iNote
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iDetails
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iLimit
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iProjected
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|iWkEnroll
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iWkEnroll
operator|!=
literal|null
condition|)
name|out
operator|.
name|writeInt
argument_list|(
name|iWkEnroll
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|iWkChange
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iWkChange
operator|!=
literal|null
condition|)
name|out
operator|.
name|writeInt
argument_list|(
name|iWkChange
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|iWkDrop
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iWkDrop
operator|!=
literal|null
condition|)
name|out
operator|.
name|writeInt
argument_list|(
name|iWkDrop
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|XCourseSerializer
implements|implements
name|Externalizer
argument_list|<
name|XCourse
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|ObjectOutput
name|output
parameter_list|,
name|XCourse
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|writeExternal
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|XCourse
name|readObject
parameter_list|(
name|ObjectInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
return|return
operator|new
name|XCourse
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

