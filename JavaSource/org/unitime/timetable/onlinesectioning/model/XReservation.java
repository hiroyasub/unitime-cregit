begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|XReservation
extends|extends
name|XReservationId
implements|implements
name|Comparable
argument_list|<
name|XReservation
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Date
name|iExpirationDate
decl_stmt|,
name|iStartDate
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|iConfigs
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|iSections
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|iIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iLimitCap
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|double
name|iRestrictivity
init|=
literal|1.0
decl_stmt|;
specifier|private
name|int
name|iPriority
init|=
literal|1000
decl_stmt|;
specifier|private
name|int
name|iFlags
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|iInclusive
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|Flags
block|{
name|MustBeUsed
block|,
name|CanAssignOverLimit
block|,
name|AllowOverlap
block|,
name|AllowDiabled
block|,
name|AlwaysExpired
block|,     	;
specifier|public
name|int
name|flag
parameter_list|()
block|{
return|return
literal|1
operator|<<
name|ordinal
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|in
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
return|return
operator|(
name|flags
operator|&
name|flag
argument_list|()
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
name|int
name|set
parameter_list|(
name|int
name|flags
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
return|return
name|flags
operator||
name|flag
argument_list|()
return|;
else|else
return|return
name|flags
operator|&
operator|~
name|flag
argument_list|()
return|;
block|}
block|}
specifier|public
name|XReservation
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|XReservation
parameter_list|(
name|XReservationType
name|type
parameter_list|,
name|XOffering
name|offering
parameter_list|,
name|Reservation
name|reservation
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
name|offering
argument_list|,
name|reservation
argument_list|,
name|ApplicationProperty
operator|.
name|ReservationsAreInclusive
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XReservation
parameter_list|(
name|XReservationType
name|type
parameter_list|,
name|XOffering
name|offering
parameter_list|,
name|Reservation
name|reservation
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|,
operator|(
name|reservation
operator|==
literal|null
condition|?
operator|-
literal|1l
else|:
name|reservation
operator|.
name|getUniqueId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|!=
literal|null
condition|)
block|{
name|iExpirationDate
operator|=
name|reservation
operator|.
name|getExpirationDate
argument_list|()
expr_stmt|;
name|iStartDate
operator|=
name|reservation
operator|.
name|getStartDate
argument_list|()
expr_stmt|;
name|iInclusive
operator|=
name|inclusive
expr_stmt|;
if|if
condition|(
name|inclusive
condition|)
block|{
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|reservation
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
name|iConfigs
operator|.
name|add
argument_list|(
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|iIds
operator|.
name|add
argument_list|(
operator|-
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class_
name|clazz
range|:
name|reservation
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|iIds
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|iConfigs
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|sections
init|=
name|iSections
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
block|{
name|sections
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|iSections
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|=
name|clazz
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|reservation
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
name|iConfigs
operator|.
name|add
argument_list|(
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|iIds
operator|.
name|add
argument_list|(
operator|-
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class_
name|clazz
range|:
name|reservation
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|iIds
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|sections
init|=
name|iSections
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
block|{
name|sections
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|iSections
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Individual
case|:
name|setPriority
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationPriorityIndividual
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|setCanAssignOverLimit
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationCanOverLimitIndividual
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|setMustBeUsed
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationMustBeUsedIndividual
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|setAllowOverlap
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationAllowOverlapIndividual
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Group
case|:
name|setPriority
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationPriorityGroup
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|setCanAssignOverLimit
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationCanOverLimitGroup
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|setMustBeUsed
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationMustBeUsedGroup
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|setAllowOverlap
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationAllowOverlapGroup
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LearningCommunity
case|:
name|setPriority
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationPriorityLearningCommunity
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|setCanAssignOverLimit
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationCanOverLimitLearningCommunity
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|setMustBeUsed
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationMustBeUsedLearningCommunity
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|setAllowOverlap
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationAllowOverlapLearningCommunity
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Curriculum
case|:
name|setPriority
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationPriorityCurriculum
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|setCanAssignOverLimit
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationCanOverLimitCurriculum
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|setMustBeUsed
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationMustBeUsedCurriculum
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|setAllowOverlap
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationAllowOverlapCurriculum
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Course
case|:
name|setPriority
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationPriorityCourse
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|setCanAssignOverLimit
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationCanOverLimitCourse
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|setMustBeUsed
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationMustBeUsedCourse
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|setAllowOverlap
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationAllowOverlapCourse
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|IndividualOverride
case|:
case|case
name|GroupOverride
case|:
name|setPriority
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationPriorityOverride
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Dummy
case|:
name|setPriority
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationPriorityDummy
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|iInclusive
condition|)
block|{
if|if
condition|(
operator|!
name|iConfigs
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|canAssignOverLimit
argument_list|()
condition|)
block|{
comment|// config cap
name|int
name|cap
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|iConfigs
operator|.
name|contains
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
condition|)
name|cap
operator|=
name|add
argument_list|(
name|cap
argument_list|,
name|config
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|XConfig
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|sections
init|=
name|iSections
operator|.
name|get
argument_list|(
name|subpart
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
continue|continue;
comment|// subpart cap
name|int
name|subpartCap
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|sections
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
name|subpartCap
operator|=
name|add
argument_list|(
name|subpartCap
argument_list|,
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
comment|// minimize
name|cap
operator|=
name|min
argument_list|(
name|cap
argument_list|,
name|subpartCap
argument_list|)
expr_stmt|;
block|}
block|}
name|iLimitCap
operator|=
name|cap
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|(
operator|!
name|iConfigs
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|iSections
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|!
name|canAssignOverLimit
argument_list|()
condition|)
block|{
name|int
name|cap
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|iConfigs
operator|.
name|contains
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
condition|)
block|{
name|cap
operator|=
name|add
argument_list|(
name|cap
argument_list|,
name|config
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|sections
init|=
name|iSections
operator|.
name|get
argument_list|(
name|subpart
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
continue|continue;
name|int
name|subpartCap
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|sections
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
name|subpartCap
operator|=
name|add
argument_list|(
name|subpartCap
argument_list|,
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|cap
operator|=
name|add
argument_list|(
name|cap
argument_list|,
name|subpartCap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iLimitCap
operator|=
name|cap
expr_stmt|;
block|}
block|}
name|iRestrictivity
operator|=
name|computeRestrictivity
argument_list|(
name|offering
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XReservation
parameter_list|(
name|XReservationType
name|type
parameter_list|,
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|Reservation
name|reservation
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|reservation
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|reservation
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|iLimitCap
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|reservation
operator|.
name|getLimitCap
argument_list|()
argument_list|)
expr_stmt|;
name|iRestrictivity
operator|=
name|reservation
operator|.
name|getRestrictivity
argument_list|()
expr_stmt|;
name|iExpirationDate
operator|=
operator|(
name|reservation
operator|.
name|isExpired
argument_list|()
condition|?
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
else|:
literal|null
operator|)
expr_stmt|;
name|iStartDate
operator|=
literal|null
expr_stmt|;
name|iInclusive
operator|=
name|reservation
operator|.
name|areRestrictionsInclusive
argument_list|()
expr_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|reservation
operator|.
name|getConfigs
argument_list|()
control|)
block|{
name|iConfigs
operator|.
name|add
argument_list|(
name|config
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|iIds
operator|.
name|add
argument_list|(
operator|-
name|config
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Subpart
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|entry
range|:
name|reservation
operator|.
name|getSections
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|sections
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|sections
operator|.
name|add
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|iIds
operator|.
name|add
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iSections
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iInclusive
condition|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|reservation
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|iIds
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|iIds
operator|.
name|remove
argument_list|(
operator|-
name|config
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Section
name|parent
init|=
name|section
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|iIds
operator|.
name|remove
argument_list|(
name|parent
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|setPriority
argument_list|(
name|reservation
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|setMustBeUsed
argument_list|(
name|reservation
operator|.
name|mustBeUsed
argument_list|()
argument_list|)
expr_stmt|;
name|setCanAssignOverLimit
argument_list|(
name|reservation
operator|.
name|canAssignOverLimit
argument_list|()
argument_list|)
expr_stmt|;
name|setAllowOverlap
argument_list|(
name|reservation
operator|.
name|isAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|setAllowDisabled
argument_list|(
name|reservation
operator|.
name|isAllowDisabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reservation limit      */
specifier|public
specifier|abstract
name|int
name|getReservationLimit
parameter_list|()
function_decl|;
comment|/** Reservation priority (e.g., individual reservations first) */
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|iPriority
return|;
block|}
specifier|public
name|void
name|setPriority
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
name|iPriority
operator|=
name|priority
expr_stmt|;
block|}
comment|/**      * Returns true if the student is applicable for the reservation      * @param student a student       * @return true if student can use the reservation to get into the course / configuration / section      */
specifier|public
specifier|abstract
name|boolean
name|isApplicable
parameter_list|(
name|XStudent
name|student
parameter_list|,
name|XCourseId
name|course
parameter_list|)
function_decl|;
comment|/**      * One or more configurations on which the reservation is set (optional).      */
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getConfigsIds
parameter_list|()
block|{
return|return
name|iConfigs
return|;
block|}
specifier|public
name|boolean
name|hasConfigRestriction
parameter_list|(
name|Long
name|configId
parameter_list|)
block|{
return|return
name|iIds
operator|.
name|contains
argument_list|(
operator|-
name|configId
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasSectionRestriction
parameter_list|(
name|Long
name|sectionId
parameter_list|)
block|{
return|return
name|iIds
operator|.
name|contains
argument_list|(
name|sectionId
argument_list|)
return|;
block|}
comment|/**      * One or more sections on which the reservation is set (optional).      */
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|getSections
parameter_list|()
block|{
return|return
name|iSections
return|;
block|}
comment|/**      * One or more sections on which the reservation is set (optional).      */
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getSectionIds
parameter_list|(
name|Long
name|subpartId
parameter_list|)
block|{
return|return
name|iSections
operator|.
name|get
argument_list|(
name|subpartId
argument_list|)
return|;
block|}
comment|/**      * True if can go over the course / config / section limit. Only to be used in the online sectioning.        */
specifier|public
name|boolean
name|canAssignOverLimit
parameter_list|()
block|{
return|return
name|Flags
operator|.
name|CanAssignOverLimit
operator|.
name|in
argument_list|(
name|iFlags
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCanAssignOverLimit
parameter_list|(
name|boolean
name|canAssignOverLimit
parameter_list|)
block|{
name|iFlags
operator|=
name|Flags
operator|.
name|CanAssignOverLimit
operator|.
name|set
argument_list|(
name|iFlags
argument_list|,
name|canAssignOverLimit
argument_list|)
expr_stmt|;
if|if
condition|(
name|canAssignOverLimit
condition|)
name|iLimitCap
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/**      * If true, student must use the reservation (if applicable)      */
specifier|public
name|boolean
name|mustBeUsed
parameter_list|()
block|{
return|return
name|Flags
operator|.
name|MustBeUsed
operator|.
name|in
argument_list|(
name|iFlags
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMustBeUsed
parameter_list|(
name|boolean
name|mustBeUsed
parameter_list|)
block|{
name|iFlags
operator|=
name|Flags
operator|.
name|MustBeUsed
operator|.
name|set
argument_list|(
name|iFlags
argument_list|,
name|mustBeUsed
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return minimum of two limits where -1 counts as unlimited (any limit is smaller)      */
specifier|private
specifier|static
name|int
name|min
parameter_list|(
name|int
name|l1
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
return|return
operator|(
name|l1
operator|<
literal|0
condition|?
name|l2
else|:
name|l2
operator|<
literal|0
condition|?
name|l1
else|:
name|Math
operator|.
name|min
argument_list|(
name|l1
argument_list|,
name|l2
argument_list|)
operator|)
return|;
block|}
comment|/**      * Add two limits where -1 counts as unlimited (unlimited plus anything is unlimited)      */
specifier|private
specifier|static
name|int
name|add
parameter_list|(
name|int
name|l1
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
return|return
operator|(
name|l1
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
name|l2
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
name|l1
operator|+
name|l2
operator|)
return|;
block|}
comment|/**      * Reservation limit capped the limit cap (see {@link Reservation#getLimitCap()})      */
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|min
argument_list|(
name|iLimitCap
argument_list|,
name|getReservationLimit
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * True if holding this reservation allows a student to have attend overlapping class.       */
specifier|public
name|boolean
name|isAllowOverlap
parameter_list|()
block|{
return|return
name|Flags
operator|.
name|AllowOverlap
operator|.
name|in
argument_list|(
name|iFlags
argument_list|)
return|;
block|}
specifier|public
name|void
name|setAllowOverlap
parameter_list|(
name|boolean
name|allowOverlap
parameter_list|)
block|{
name|iFlags
operator|=
name|Flags
operator|.
name|AllowOverlap
operator|.
name|set
argument_list|(
name|iFlags
argument_list|,
name|allowOverlap
argument_list|)
expr_stmt|;
block|}
comment|/**      * True if holding this reservation allows a student to have attend a class that is disabled for student scheduling.       */
specifier|public
name|boolean
name|isAllowDisabled
parameter_list|()
block|{
return|return
name|Flags
operator|.
name|AllowDiabled
operator|.
name|in
argument_list|(
name|iFlags
argument_list|)
return|;
block|}
specifier|public
name|void
name|setAllowDisabled
parameter_list|(
name|boolean
name|allowDisabled
parameter_list|)
block|{
name|iFlags
operator|=
name|Flags
operator|.
name|AllowDiabled
operator|.
name|set
argument_list|(
name|iFlags
argument_list|,
name|allowDisabled
argument_list|)
expr_stmt|;
block|}
comment|/**      * True if the reservation is expired. If a reservation is expired, it works as ordinary reservation      * (especially the flags mutBeUsed and isAllowOverlap), except it does not block other students      * of getting into the offering / config / section.      */
specifier|public
name|boolean
name|isExpired
parameter_list|()
block|{
if|if
condition|(
name|iExpirationDate
operator|==
literal|null
operator|&&
name|iStartDate
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|iStartDate
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getTime
argument_list|()
operator|.
name|before
argument_list|(
name|iStartDate
argument_list|)
operator|)
operator|||
operator|(
name|iExpirationDate
operator|!=
literal|null
operator|&&
name|iExpirationDate
operator|.
name|before
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|)
operator|)
return|;
block|}
comment|/**      * Return true if the given enrollment meets the reservation.      */
specifier|public
name|boolean
name|isIncluded
parameter_list|(
name|Long
name|configId
parameter_list|,
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
parameter_list|)
block|{
if|if
condition|(
name|iInclusive
condition|)
block|{
comment|// If there are configurations, check the configuration
if|if
condition|(
operator|!
name|iConfigs
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|iConfigs
operator|.
name|contains
argument_list|(
name|configId
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Check all the sections of the enrollment
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|reserved
init|=
name|iSections
operator|.
name|get
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reserved
operator|!=
literal|null
operator|&&
operator|!
name|reserved
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// No restriction>> true
if|if
condition|(
name|iConfigs
operator|.
name|isEmpty
argument_list|()
operator|&&
name|iSections
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// Configuration match>> true
if|if
condition|(
name|iConfigs
operator|.
name|contains
argument_list|(
name|configId
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// Section match>> true
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|reserved
init|=
name|iSections
operator|.
name|get
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reserved
operator|!=
literal|null
operator|&&
name|reserved
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
comment|// No match>> false
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|isIncluded
parameter_list|(
name|XOffering
name|offering
parameter_list|,
name|Long
name|configId
parameter_list|,
name|XSection
name|section
parameter_list|)
block|{
if|if
condition|(
name|iInclusive
condition|)
block|{
if|if
condition|(
operator|!
name|iConfigs
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|iConfigs
operator|.
name|contains
argument_list|(
name|configId
argument_list|)
condition|)
return|return
literal|false
return|;
name|XSection
name|s
init|=
name|section
decl_stmt|;
while|while
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|reserved
init|=
name|iSections
operator|.
name|get
argument_list|(
name|s
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reserved
operator|!=
literal|null
operator|&&
operator|!
name|reserved
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
name|s
operator|=
operator|(
name|s
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|offering
operator|.
name|getSection
argument_list|(
name|s
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// No restriction>> true
if|if
condition|(
name|iConfigs
operator|.
name|isEmpty
argument_list|()
operator|&&
name|iSections
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// Configuration match>> true
if|if
condition|(
name|iConfigs
operator|.
name|contains
argument_list|(
name|configId
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// Section match>> true
name|XSection
name|s
init|=
name|section
decl_stmt|;
while|while
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|reserved
init|=
name|iSections
operator|.
name|get
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reserved
operator|!=
literal|null
operator|&&
name|reserved
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
name|s
operator|=
operator|(
name|s
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|offering
operator|.
name|getSection
argument_list|(
name|s
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
comment|// No match>> false
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Reservation restrictivity (estimated percentage of enrollments that include this reservation, 1.0 reservation on the whole offering)      */
specifier|public
name|double
name|getRestrictivity
parameter_list|()
block|{
return|return
name|iRestrictivity
return|;
block|}
specifier|private
name|double
name|computeRestrictivity
parameter_list|(
name|XOffering
name|offering
parameter_list|)
block|{
if|if
condition|(
name|iConfigs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|1.0
return|;
name|int
name|nrChoices
init|=
literal|0
decl_stmt|,
name|nrMatchingChoices
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
name|int
name|x
index|[]
init|=
name|nrChoices
argument_list|(
name|config
argument_list|,
literal|0
argument_list|,
operator|new
name|HashSet
argument_list|<
name|XSection
argument_list|>
argument_list|()
argument_list|,
name|iConfigs
operator|.
name|contains
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|nrChoices
operator|+=
name|x
index|[
literal|0
index|]
expr_stmt|;
name|nrMatchingChoices
operator|+=
name|x
index|[
literal|1
index|]
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|double
operator|)
name|nrMatchingChoices
operator|)
operator|/
name|nrChoices
return|;
block|}
comment|/** Number of choices and number of chaing choices in the given sub enrollment */
specifier|private
name|int
index|[]
name|nrChoices
parameter_list|(
name|XConfig
name|config
parameter_list|,
name|int
name|idx
parameter_list|,
name|HashSet
argument_list|<
name|XSection
argument_list|>
name|sections
parameter_list|,
name|boolean
name|matching
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|idx
condition|)
block|{
return|return
operator|new
name|int
index|[]
block|{
literal|1
block|,
name|matching
condition|?
literal|1
else|:
literal|0
block|}
return|;
block|}
else|else
block|{
name|XSubpart
name|subpart
init|=
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|matchingSections
init|=
name|iSections
operator|.
name|get
argument_list|(
name|subpart
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|choicesThisSubpart
init|=
literal|0
decl_stmt|;
name|int
name|matchingChoicesThisSubpart
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getParentId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XSection
name|parent
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XSection
name|s
range|:
name|sections
control|)
if|if
condition|(
name|s
operator|.
name|getSectionId
argument_list|()
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getParentId
argument_list|()
argument_list|)
condition|)
block|{
name|parent
operator|=
name|s
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
continue|continue;
block|}
if|if
condition|(
name|section
operator|.
name|isOverlapping
argument_list|(
literal|null
argument_list|,
name|sections
argument_list|)
condition|)
continue|continue;
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|boolean
name|m
init|=
operator|(
name|iInclusive
condition|?
name|matching
operator|&&
operator|(
name|matchingSections
operator|==
literal|null
operator|||
name|matchingSections
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
operator|)
else|:
name|matching
operator|||
operator|(
name|matchingSections
operator|!=
literal|null
operator|&&
name|matchingSections
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
operator|)
operator|)
decl_stmt|;
name|int
index|[]
name|x
init|=
name|nrChoices
argument_list|(
name|config
argument_list|,
literal|1
operator|+
name|idx
argument_list|,
name|sections
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|choicesThisSubpart
operator|+=
name|x
index|[
literal|0
index|]
expr_stmt|;
name|matchingChoicesThisSubpart
operator|+=
name|x
index|[
literal|1
index|]
expr_stmt|;
name|sections
operator|.
name|remove
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|int
index|[]
block|{
name|choicesThisSubpart
block|,
name|matchingChoicesThisSubpart
block|}
return|;
block|}
block|}
comment|/**      * Priority first, than restrictivity (more restrictive first), than id       */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|XReservation
name|r
parameter_list|)
block|{
if|if
condition|(
name|getPriority
argument_list|()
operator|!=
name|r
operator|.
name|getPriority
argument_list|()
condition|)
block|{
return|return
operator|(
name|getPriority
argument_list|()
operator|<
name|r
operator|.
name|getPriority
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|getRestrictivity
argument_list|()
argument_list|,
name|r
operator|.
name|getRestrictivity
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getReservationId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getReservationId
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Available reserved space      * @param excludeRequest excluding given request (if not null)      **/
specifier|public
name|int
name|getReservedAvailableSpace
parameter_list|(
name|XEnrollments
name|enrollments
parameter_list|)
block|{
comment|// Unlimited
if|if
condition|(
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
return|return
name|getLimit
argument_list|()
operator|-
name|enrollments
operator|.
name|countEnrollmentsForReservation
argument_list|(
name|getReservationId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|super
operator|.
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|iExpirationDate
operator|=
operator|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|?
operator|new
name|Date
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
else|:
literal|null
operator|)
expr_stmt|;
name|int
name|nrConfigs
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|iConfigs
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrConfigs
condition|;
name|i
operator|++
control|)
name|iConfigs
operator|.
name|add
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|nrSubparts
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|iSections
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrSubparts
condition|;
name|i
operator|++
control|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|sections
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|iSections
operator|.
name|put
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|,
name|sections
argument_list|)
expr_stmt|;
name|int
name|nrSection
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nrSection
condition|;
name|j
operator|++
control|)
block|{
name|sections
operator|.
name|add
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iLimitCap
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|iRestrictivity
operator|=
name|in
operator|.
name|readDouble
argument_list|()
expr_stmt|;
name|iPriority
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|iFlags
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|iIds
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|nrIds
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrIds
condition|;
name|i
operator|++
control|)
name|iIds
operator|.
name|add
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|iInclusive
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|iExpirationDate
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iExpirationDate
operator|!=
literal|null
condition|)
name|out
operator|.
name|writeLong
argument_list|(
name|iExpirationDate
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iConfigs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|config
range|:
name|iConfigs
control|)
name|out
operator|.
name|writeLong
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|entries
init|=
name|iSections
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
name|out
operator|.
name|writeLong
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|iLimitCap
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeDouble
argument_list|(
name|iRestrictivity
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iPriority
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iFlags
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|iIds
control|)
name|out
operator|.
name|writeLong
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|iInclusive
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

