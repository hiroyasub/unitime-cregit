begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Externalizable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|marshall
operator|.
name|Externalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|marshall
operator|.
name|SerializeWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FreeTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|SerializeWith
argument_list|(
name|XTime
operator|.
name|XTimeSerializer
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XTime
implements|implements
name|Serializable
implements|,
name|Externalizable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|iSlot
decl_stmt|;
specifier|private
name|int
name|iLength
decl_stmt|;
specifier|private
name|int
name|iBreakTime
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iDays
decl_stmt|;
specifier|private
name|BitSet
name|iWeeks
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iDatePatternId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iDatePatternName
init|=
literal|null
decl_stmt|;
specifier|public
name|XTime
parameter_list|()
block|{
block|}
specifier|public
name|XTime
parameter_list|(
name|ObjectInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|readExternal
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XTime
parameter_list|(
name|Assignment
name|assignment
parameter_list|,
name|XExactTimeConversion
name|conversion
parameter_list|)
block|{
name|iDays
operator|=
name|assignment
operator|.
name|getDays
argument_list|()
expr_stmt|;
name|iSlot
operator|=
name|assignment
operator|.
name|getStartSlot
argument_list|()
expr_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
block|{
name|iLength
operator|=
name|conversion
operator|.
name|getLength
argument_list|(
name|assignment
operator|.
name|getDays
argument_list|()
argument_list|,
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|)
expr_stmt|;
name|iBreakTime
operator|=
name|conversion
operator|.
name|getBreakTime
argument_list|(
name|assignment
operator|.
name|getDays
argument_list|()
argument_list|,
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iLength
operator|=
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getSlotsPerMtg
argument_list|()
expr_stmt|;
name|iBreakTime
operator|=
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getBreakTime
argument_list|()
expr_stmt|;
block|}
name|iDatePatternId
operator|=
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iDatePatternName
operator|=
name|datePatternName
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|iWeeks
operator|=
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|XTime
parameter_list|(
name|FreeTime
name|free
parameter_list|,
name|BitSet
name|freeTimePattern
parameter_list|)
block|{
name|iSlot
operator|=
name|free
operator|.
name|getStartSlot
argument_list|()
expr_stmt|;
name|iLength
operator|=
name|free
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|iDays
operator|=
name|free
operator|.
name|getDayCode
argument_list|()
expr_stmt|;
name|iWeeks
operator|=
name|freeTimePattern
expr_stmt|;
block|}
specifier|public
name|XTime
parameter_list|(
name|TimeLocation
name|time
parameter_list|)
block|{
name|iDays
operator|=
name|time
operator|.
name|getDayCode
argument_list|()
expr_stmt|;
name|iSlot
operator|=
name|time
operator|.
name|getStartSlot
argument_list|()
expr_stmt|;
name|iLength
operator|=
name|time
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|iBreakTime
operator|=
name|time
operator|.
name|getBreakTime
argument_list|()
expr_stmt|;
name|iDatePatternId
operator|=
name|time
operator|.
name|getDatePatternId
argument_list|()
expr_stmt|;
name|iDatePatternName
operator|=
name|time
operator|.
name|getDatePatternName
argument_list|()
expr_stmt|;
name|iWeeks
operator|=
name|time
operator|.
name|getWeekCode
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getSlot
parameter_list|()
block|{
return|return
name|iSlot
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|iLength
return|;
block|}
specifier|public
name|int
name|getDays
parameter_list|()
block|{
return|return
name|iDays
return|;
block|}
specifier|public
name|int
name|getBreakTime
parameter_list|()
block|{
return|return
name|iBreakTime
return|;
block|}
specifier|public
name|BitSet
name|getWeeks
parameter_list|()
block|{
return|return
name|iWeeks
return|;
block|}
specifier|public
name|Long
name|getDatePatternId
parameter_list|()
block|{
return|return
name|iDatePatternId
return|;
block|}
specifier|public
name|String
name|getDatePatternName
parameter_list|()
block|{
return|return
name|iDatePatternName
return|;
block|}
specifier|public
name|String
name|toDaysString
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|getDays
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|ret
operator|+=
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|toStartString
parameter_list|()
block|{
name|int
name|min
init|=
name|getSlot
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|int
name|h
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|m
init|=
name|min
operator|%
literal|60
decl_stmt|;
return|return
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|h
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
block|}
specifier|public
name|String
name|toStopString
parameter_list|()
block|{
name|int
name|min
init|=
operator|(
name|getSlot
argument_list|()
operator|+
name|getLength
argument_list|()
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|-
name|getBreakTime
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|m
init|=
name|min
operator|%
literal|60
decl_stmt|;
return|return
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|h
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
block|}
specifier|public
name|boolean
name|shareHours
parameter_list|(
name|XTime
name|other
parameter_list|)
block|{
return|return
operator|(
name|getSlot
argument_list|()
operator|+
name|getLength
argument_list|()
operator|>
name|other
operator|.
name|getSlot
argument_list|()
operator|)
operator|&&
operator|(
name|other
operator|.
name|getSlot
argument_list|()
operator|+
name|other
operator|.
name|getLength
argument_list|()
operator|>
name|getSlot
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|shareDays
parameter_list|(
name|XTime
name|other
parameter_list|)
block|{
return|return
operator|(
name|getDays
argument_list|()
operator|&
name|other
operator|.
name|getDays
argument_list|()
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
name|boolean
name|shareWeeks
parameter_list|(
name|XTime
name|other
parameter_list|)
block|{
return|return
name|getWeeks
argument_list|()
operator|==
literal|null
condition|?
literal|true
else|:
name|other
operator|.
name|getWeeks
argument_list|()
operator|==
literal|null
condition|?
literal|true
else|:
name|getWeeks
argument_list|()
operator|.
name|intersects
argument_list|(
name|other
operator|.
name|getWeeks
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasIntersection
parameter_list|(
name|XTime
name|other
parameter_list|)
block|{
return|return
name|shareDays
argument_list|(
name|other
argument_list|)
operator|&&
name|shareHours
argument_list|(
name|other
argument_list|)
operator|&&
name|shareWeeks
argument_list|(
name|other
argument_list|)
return|;
block|}
comment|/** Used slots */
specifier|public
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|getSlots
parameter_list|()
block|{
return|return
operator|new
name|SlotsEnum
argument_list|()
return|;
block|}
comment|/** Used start slots (for each meeting) */
specifier|public
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|getStartSlots
parameter_list|()
block|{
return|return
operator|new
name|StartSlotsEnum
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|o
operator|instanceof
name|XTime
condition|)
block|{
name|XTime
name|x
init|=
operator|(
name|XTime
operator|)
name|o
decl_stmt|;
return|return
name|getDays
argument_list|()
operator|==
name|x
operator|.
name|getDays
argument_list|()
operator|&&
name|getSlot
argument_list|()
operator|==
name|x
operator|.
name|getSlot
argument_list|()
operator|&&
name|getLength
argument_list|()
operator|==
name|x
operator|.
name|getLength
argument_list|()
operator|&&
name|getWeeks
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getWeeks
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|TimeLocation
condition|)
block|{
name|TimeLocation
name|t
init|=
operator|(
name|TimeLocation
operator|)
name|o
decl_stmt|;
return|return
name|getDays
argument_list|()
operator|==
name|t
operator|.
name|getDayCode
argument_list|()
operator|&&
name|getSlot
argument_list|()
operator|==
name|t
operator|.
name|getStartSlot
argument_list|()
operator|&&
name|getLength
argument_list|()
operator|==
name|t
operator|.
name|getLength
argument_list|()
operator|&&
name|getWeeks
argument_list|()
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getWeekCode
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|getDatePatternName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getDatePatternName
argument_list|()
operator|+
literal|" "
operator|)
operator|+
name|toDaysString
argument_list|()
operator|+
literal|" "
operator|+
name|toStartString
argument_list|()
operator|+
literal|" - "
operator|+
name|toStopString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|datePatternName
parameter_list|(
name|Assignment
name|assignment
parameter_list|)
block|{
name|BitSet
name|weekCode
init|=
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|weekCode
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
return|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Date
name|start
init|=
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|session
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|,
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|weekCode
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|Date
name|first
init|=
literal|null
decl_stmt|;
name|int
name|dayCode
init|=
name|assignment
operator|.
name|getDays
argument_list|()
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|weekCode
operator|.
name|size
argument_list|()
operator|&&
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|weekCode
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
return|return
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
return|;
name|cal
operator|.
name|setTime
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|idx
operator|=
name|weekCode
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|Date
name|last
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
operator|&&
name|last
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|weekCode
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
return|return
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
return|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dpf
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_PATTERN
argument_list|)
decl_stmt|;
return|return
name|dpf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
operator|(
name|first
operator|.
name|equals
argument_list|(
name|last
argument_list|)
condition|?
literal|""
else|:
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|last
argument_list|)
operator|)
return|;
block|}
specifier|private
class|class
name|StartSlotsEnum
implements|implements
name|Enumeration
argument_list|<
name|Integer
argument_list|>
block|{
name|int
name|day
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|hasNext
init|=
literal|false
decl_stmt|;
specifier|private
name|StartSlotsEnum
parameter_list|()
block|{
name|hasNext
operator|=
name|nextDay
argument_list|()
expr_stmt|;
block|}
name|boolean
name|nextDay
parameter_list|()
block|{
do|do
block|{
name|day
operator|++
expr_stmt|;
if|if
condition|(
name|day
operator|>=
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|)
return|return
literal|false
return|;
block|}
do|while
condition|(
operator|(
name|Constants
operator|.
name|DAY_CODES
index|[
name|day
index|]
operator|&
name|iDays
operator|)
operator|==
literal|0
condition|)
do|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|hasNext
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|nextElement
parameter_list|()
block|{
name|int
name|slot
init|=
operator|(
name|day
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|)
operator|+
name|iSlot
decl_stmt|;
name|hasNext
operator|=
name|nextDay
argument_list|()
expr_stmt|;
return|return
name|slot
return|;
block|}
block|}
specifier|private
class|class
name|SlotsEnum
extends|extends
name|StartSlotsEnum
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
specifier|private
name|SlotsEnum
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|nextSlot
parameter_list|()
block|{
if|if
condition|(
name|pos
operator|+
literal|1
operator|<
name|iLength
condition|)
block|{
name|pos
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|nextDay
argument_list|()
condition|)
block|{
name|pos
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|nextElement
parameter_list|()
block|{
name|int
name|slot
init|=
operator|(
name|day
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|)
operator|+
name|iSlot
operator|+
name|pos
decl_stmt|;
name|hasNext
operator|=
name|nextSlot
argument_list|()
expr_stmt|;
return|return
name|slot
return|;
block|}
block|}
specifier|public
name|TimeLocation
name|toTimeLocation
parameter_list|()
block|{
return|return
operator|new
name|TimeLocation
argument_list|(
name|getDays
argument_list|()
argument_list|,
name|getSlot
argument_list|()
argument_list|,
name|getLength
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0.0
argument_list|,
name|getDatePatternId
argument_list|()
argument_list|,
name|getDatePatternName
argument_list|()
argument_list|,
name|getWeeks
argument_list|()
argument_list|,
name|getBreakTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|XTimeSerializer
implements|implements
name|Externalizer
argument_list|<
name|XTime
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|ObjectOutput
name|output
parameter_list|,
name|XTime
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|writeExternal
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|XTime
name|readObject
parameter_list|(
name|ObjectInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
return|return
operator|new
name|XTime
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|iSlot
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|iLength
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|iBreakTime
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|iDays
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|iWeeks
operator|=
operator|(
name|BitSet
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iDatePatternId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|iDatePatternId
operator|<
literal|0
condition|)
name|iDatePatternId
operator|=
literal|null
expr_stmt|;
name|iDatePatternName
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|iSlot
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iBreakTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iDays
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iWeeks
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|iDatePatternId
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|iDatePatternId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iDatePatternName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

