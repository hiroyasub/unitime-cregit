begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Externalizable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|marshall
operator|.
name|Externalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|marshall
operator|.
name|SerializeWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|SerializeWith
argument_list|(
name|XSubpart
operator|.
name|XSubpartSerializer
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XSubpart
implements|implements
name|Serializable
implements|,
name|Externalizable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|DecimalFormat
name|sF3Z
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"000"
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iUniqueId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iInstructionalType
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iName
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XSection
argument_list|>
name|iSections
init|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Long
name|iConfigId
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iParentId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iCreditAbbv
init|=
literal|null
decl_stmt|,
name|iCreditText
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iAllowOverlap
init|=
literal|false
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|String
index|[]
argument_list|>
name|iCreditByCourse
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|XSubpart
parameter_list|()
block|{
block|}
specifier|public
name|XSubpart
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XSubpart
parameter_list|(
name|SchedulingSubpart
name|subpart
parameter_list|,
name|boolean
name|courseCredit
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|iUniqueId
operator|=
name|subpart
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iInstructionalType
operator|=
name|sF3Z
operator|.
name|format
argument_list|(
name|subpart
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
operator|+
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
name|iAllowOverlap
operator|=
name|subpart
operator|.
name|isStudentAllowOverlap
argument_list|()
expr_stmt|;
name|iName
operator|=
name|subpart
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|iConfigId
operator|=
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iParentId
operator|=
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iCreditAbbv
operator|=
name|subpart
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
expr_stmt|;
name|iCreditText
operator|=
name|subpart
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|courseCredit
condition|)
block|{
for|for
control|(
name|CourseOffering
name|co
range|:
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|co
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
name|iCreditByCourse
operator|.
name|put
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|co
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
block|,
name|co
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
name|iSections
operator|.
name|add
argument_list|(
operator|new
name|XSection
argument_list|(
name|clazz
argument_list|,
name|helper
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|iSections
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XSubpart
parameter_list|(
name|Subpart
name|subpart
parameter_list|)
block|{
name|iUniqueId
operator|=
name|subpart
operator|.
name|getId
argument_list|()
expr_stmt|;
name|iInstructionalType
operator|=
name|subpart
operator|.
name|getInstructionalType
argument_list|()
expr_stmt|;
name|iAllowOverlap
operator|=
name|subpart
operator|.
name|isAllowOverlap
argument_list|()
expr_stmt|;
name|iName
operator|=
name|subpart
operator|.
name|getName
argument_list|()
expr_stmt|;
name|iConfigId
operator|=
name|subpart
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|iParentId
operator|=
operator|(
name|subpart
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|subpart
operator|.
name|getParent
argument_list|()
operator|.
name|getId
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|cred
init|=
name|subpart
operator|.
name|getCredit
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|iCreditAbbv
operator|=
name|cred
index|[
literal|0
index|]
expr_stmt|;
name|iCreditText
operator|=
name|cred
index|[
literal|1
index|]
expr_stmt|;
block|}
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
name|iSections
operator|.
name|add
argument_list|(
operator|new
name|XSection
argument_list|(
name|section
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Subpart id */
specifier|public
name|Long
name|getSubpartId
parameter_list|()
block|{
return|return
name|iUniqueId
return|;
block|}
comment|/** Instructional type, e.g., Lecture, Recitation or Laboratory */
specifier|public
name|String
name|getInstructionalType
parameter_list|()
block|{
return|return
name|iInstructionalType
return|;
block|}
comment|/** Subpart name */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
comment|/** Instructional offering configuration to which this subpart belongs */
specifier|public
name|Long
name|getConfigId
parameter_list|()
block|{
return|return
name|iConfigId
return|;
block|}
comment|/** List of sections */
specifier|public
name|List
argument_list|<
name|XSection
argument_list|>
name|getSections
parameter_list|()
block|{
return|return
name|iSections
return|;
block|}
comment|/** Parent subpart, if parent-child relation is defined between subparts */
specifier|public
name|Long
name|getParentId
parameter_list|()
block|{
return|return
name|iParentId
return|;
block|}
comment|/** Return true if overlaps are allowed, but the number of overlapping slots should be minimized. */
specifier|public
name|boolean
name|isAllowOverlap
parameter_list|()
block|{
return|return
name|iAllowOverlap
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
comment|/** Return total of section limits of this subpart */
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
name|int
name|limit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
return|return
operator|-
literal|1
return|;
name|limit
operator|+=
name|section
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
return|return
name|limit
return|;
block|}
comment|/**      * Get credit (Online Student Scheduling only)      */
specifier|public
name|String
name|getCreditAbbv
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
name|String
index|[]
name|credit
init|=
operator|(
name|courseId
operator|!=
literal|null
condition|?
name|iCreditByCourse
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
return|return
operator|(
name|credit
operator|!=
literal|null
condition|?
name|credit
index|[
literal|0
index|]
else|:
name|iCreditAbbv
operator|)
return|;
block|}
specifier|public
name|String
name|getCreditText
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
name|String
index|[]
name|credit
init|=
operator|(
name|courseId
operator|!=
literal|null
condition|?
name|iCreditByCourse
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
return|return
operator|(
name|credit
operator|!=
literal|null
condition|?
name|credit
index|[
literal|1
index|]
else|:
name|iCreditText
operator|)
return|;
block|}
specifier|public
name|String
name|getCredit
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
if|if
condition|(
name|courseId
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|credit
init|=
name|iCreditByCourse
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
return|return
name|credit
index|[
literal|0
index|]
operator|+
literal|"|"
operator|+
name|credit
index|[
literal|1
index|]
return|;
block|}
return|return
name|iCreditAbbv
operator|==
literal|null
condition|?
literal|null
else|:
name|iCreditAbbv
operator|+
literal|"|"
operator|+
name|iCreditText
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|XSubpart
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getSubpartId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|XSubpart
operator|)
name|o
operator|)
operator|.
name|getSubpartId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
operator|(
name|getSubpartId
argument_list|()
operator|^
operator|(
name|getSubpartId
argument_list|()
operator|>>>
literal|32
operator|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|iUniqueId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|iInstructionalType
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iName
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|int
name|nrSections
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|iSections
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrSections
condition|;
name|i
operator|++
control|)
name|iSections
operator|.
name|add
argument_list|(
operator|new
name|XSection
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|iConfigId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|iParentId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|iParentId
operator|<
literal|0
condition|)
name|iParentId
operator|=
literal|null
expr_stmt|;
name|iCreditAbbv
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iCreditText
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iAllowOverlap
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|int
name|nrCredits
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|iCreditByCourse
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrCredits
condition|;
name|i
operator|++
control|)
name|iCreditByCourse
operator|.
name|put
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
block|,
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|iUniqueId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iInstructionalType
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iSections
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|iSections
control|)
name|section
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|iConfigId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|iParentId
operator|==
literal|null
condition|?
operator|-
literal|1l
else|:
name|iParentId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iCreditAbbv
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iCreditText
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|iAllowOverlap
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iCreditByCourse
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|String
index|[]
argument_list|>
name|entry
range|:
name|iCreditByCourse
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|XSubpartSerializer
implements|implements
name|Externalizer
argument_list|<
name|XSubpart
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|ObjectOutput
name|output
parameter_list|,
name|XSubpart
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|writeExternal
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|XSubpart
name|readObject
parameter_list|(
name|ObjectInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
return|return
operator|new
name|XSubpart
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

