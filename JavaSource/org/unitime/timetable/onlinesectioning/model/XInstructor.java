begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Externalizable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|marshall
operator|.
name|Externalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|marshall
operator|.
name|SerializeWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingClassRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|SerializeWith
argument_list|(
name|XInstructor
operator|.
name|XInstructorSerializer
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XInstructor
implements|implements
name|Serializable
implements|,
name|Externalizable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iUniqueId
decl_stmt|;
specifier|private
name|String
name|iExternalId
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|String
name|iEmail
decl_stmt|;
specifier|private
name|boolean
name|iAllowOverlap
decl_stmt|;
specifier|private
name|boolean
name|iDisplay
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iInstructing
init|=
literal|false
decl_stmt|;
specifier|public
name|XInstructor
parameter_list|()
block|{
block|}
specifier|public
name|XInstructor
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XInstructor
parameter_list|(
name|ClassInstructor
name|instructor
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|iUniqueId
operator|=
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iExternalId
operator|=
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
name|iName
operator|=
name|helper
operator|.
name|getInstructorNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|iEmail
operator|=
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
expr_stmt|;
name|iDisplay
operator|=
name|instructor
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|isDisplayInstructor
argument_list|()
expr_stmt|;
name|iAllowOverlap
operator|=
literal|false
expr_stmt|;
name|iInstructing
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getTeachingRequest
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|TeachingClassRequest
name|tcr
range|:
name|instructor
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getClassRequests
argument_list|()
control|)
if|if
condition|(
name|tcr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getClassInstructing
argument_list|()
argument_list|)
condition|)
block|{
name|iAllowOverlap
operator|=
name|tcr
operator|.
name|isCanOverlap
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
specifier|public
name|XInstructor
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|TeachingClassRequest
name|tcr
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|iUniqueId
operator|=
name|instructor
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iExternalId
operator|=
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
name|iName
operator|=
name|helper
operator|.
name|getInstructorNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|iEmail
operator|=
name|instructor
operator|.
name|getEmail
argument_list|()
expr_stmt|;
name|iDisplay
operator|=
literal|false
expr_stmt|;
name|iAllowOverlap
operator|=
name|tcr
operator|.
name|isCanOverlap
argument_list|()
expr_stmt|;
name|iInstructing
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|XInstructor
parameter_list|(
name|Long
name|uniqueId
parameter_list|,
name|String
name|externalId
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|email
parameter_list|,
name|boolean
name|display
parameter_list|,
name|boolean
name|allowOverlap
parameter_list|,
name|boolean
name|instructing
parameter_list|)
block|{
name|iUniqueId
operator|=
name|uniqueId
expr_stmt|;
name|iExternalId
operator|=
name|externalId
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iEmail
operator|=
name|email
expr_stmt|;
name|iDisplay
operator|=
name|display
expr_stmt|;
name|iAllowOverlap
operator|=
name|allowOverlap
expr_stmt|;
name|iInstructing
operator|=
name|instructing
expr_stmt|;
block|}
specifier|public
name|Long
name|getIntructorId
parameter_list|()
block|{
return|return
name|iUniqueId
return|;
block|}
specifier|public
name|String
name|getExternalId
parameter_list|()
block|{
return|return
name|iExternalId
return|;
block|}
specifier|public
name|boolean
name|hasExternalId
parameter_list|()
block|{
return|return
name|iExternalId
operator|!=
literal|null
operator|&&
operator|!
name|iExternalId
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|String
name|getEmail
parameter_list|()
block|{
return|return
name|iEmail
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isAllowOverlap
parameter_list|()
block|{
return|return
name|iAllowOverlap
return|;
block|}
specifier|public
name|boolean
name|isAllowDisplay
parameter_list|()
block|{
return|return
name|iDisplay
return|;
block|}
specifier|public
name|boolean
name|isInstructing
parameter_list|()
block|{
return|return
name|iInstructing
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|XInstructor
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getIntructorId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|XInstructor
operator|)
name|o
operator|)
operator|.
name|getIntructorId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|Long
argument_list|(
name|getIntructorId
argument_list|()
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|iUniqueId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|iExternalId
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iName
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iEmail
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iAllowOverlap
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|iDisplay
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|iInstructing
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|iUniqueId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iExternalId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iEmail
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|iAllowOverlap
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|iDisplay
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|iInstructing
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|XInstructorSerializer
implements|implements
name|Externalizer
argument_list|<
name|XInstructor
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|ObjectOutput
name|output
parameter_list|,
name|XInstructor
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|writeExternal
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|XInstructor
name|readObject
parameter_list|(
name|ObjectInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
return|return
operator|new
name|XInstructor
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

