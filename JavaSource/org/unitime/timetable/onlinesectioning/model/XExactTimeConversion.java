begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExactTimeMins
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExactTimeMinsDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|XExactTimeConversion
block|{
specifier|private
name|int
index|[]
name|iBreakTimes
decl_stmt|,
name|iLength
decl_stmt|;
specifier|public
name|XExactTimeConversion
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|List
argument_list|<
name|ExactTimeMins
argument_list|>
name|list
init|=
name|ExactTimeMinsDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|int
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExactTimeMins
name|e
range|:
name|list
control|)
if|if
condition|(
name|e
operator|.
name|getMinsPerMtgMax
argument_list|()
operator|>
name|max
condition|)
name|max
operator|=
name|e
operator|.
name|getMinsPerMtgMax
argument_list|()
expr_stmt|;
name|iBreakTimes
operator|=
operator|new
name|int
index|[
literal|1
operator|+
name|max
index|]
expr_stmt|;
name|iLength
operator|=
operator|new
name|int
index|[
literal|1
operator|+
name|max
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|max
condition|;
name|i
operator|++
control|)
block|{
name|iLength
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|iBreakTimes
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|ExactTimeMins
name|e
range|:
name|list
control|)
for|for
control|(
name|int
name|i
init|=
name|e
operator|.
name|getMinsPerMtgMin
argument_list|()
init|;
name|i
operator|<=
name|e
operator|.
name|getMinsPerMtgMax
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|iBreakTimes
index|[
name|i
index|]
operator|=
name|e
operator|.
name|getBreakTime
argument_list|()
expr_stmt|;
name|iLength
index|[
name|i
index|]
operator|=
name|e
operator|.
name|getNrSlots
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|int
name|getDefaultLength
parameter_list|(
name|int
name|minutesPerMeeting
parameter_list|)
block|{
name|int
name|len
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
literal|6.0
operator|/
literal|5.0
operator|)
operator|*
name|minutesPerMeeting
operator|/
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|minutesPerMeeting
operator|<
literal|30
condition|)
name|len
operator|=
name|Math
operator|.
name|min
argument_list|(
literal|6
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|len
return|;
block|}
specifier|public
specifier|static
name|int
name|getDefaultBreakTime
parameter_list|(
name|int
name|minutesPerMeeting
parameter_list|)
block|{
name|int
name|len
init|=
name|getDefaultLength
argument_list|(
name|minutesPerMeeting
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|<=
literal|6
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|len
operator|%
literal|12
operator|==
literal|0
condition|)
return|return
literal|10
return|;
return|return
literal|15
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|(
name|int
name|minutesPerMeeting
parameter_list|)
block|{
if|if
condition|(
name|minutesPerMeeting
operator|<
name|iLength
operator|.
name|length
condition|)
block|{
name|int
name|len
init|=
name|iLength
index|[
name|minutesPerMeeting
index|]
decl_stmt|;
if|if
condition|(
name|len
operator|>=
literal|0
condition|)
return|return
name|len
return|;
block|}
return|return
name|getDefaultLength
argument_list|(
name|minutesPerMeeting
argument_list|)
return|;
block|}
specifier|public
name|int
name|getBreakTime
parameter_list|(
name|int
name|minutesPerMeeting
parameter_list|)
block|{
if|if
condition|(
name|minutesPerMeeting
operator|<
name|iBreakTimes
operator|.
name|length
condition|)
block|{
name|int
name|breakTime
init|=
name|iBreakTimes
index|[
name|minutesPerMeeting
index|]
decl_stmt|;
if|if
condition|(
name|breakTime
operator|>=
literal|0
condition|)
return|return
name|breakTime
return|;
block|}
return|return
name|getDefaultBreakTime
argument_list|(
name|minutesPerMeeting
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|toMinutesPerMeeting
parameter_list|(
name|int
name|days
parameter_list|,
name|int
name|minPerWeek
parameter_list|)
block|{
name|int
name|nrDays
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|NR_DAYS
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|days
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|nrDays
operator|++
expr_stmt|;
return|return
name|minPerWeek
operator|/
operator|(
name|nrDays
operator|==
literal|0
condition|?
literal|1
else|:
name|nrDays
operator|)
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|(
name|int
name|days
parameter_list|,
name|int
name|minPerWeek
parameter_list|)
block|{
return|return
name|getLength
argument_list|(
name|toMinutesPerMeeting
argument_list|(
name|days
argument_list|,
name|minPerWeek
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|getBreakTime
parameter_list|(
name|int
name|days
parameter_list|,
name|int
name|minPerWeek
parameter_list|)
block|{
return|return
name|getBreakTime
argument_list|(
name|toMinutesPerMeeting
argument_list|(
name|days
argument_list|,
name|minPerWeek
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|getDefaultLength
parameter_list|(
name|int
name|days
parameter_list|,
name|int
name|minPerWeek
parameter_list|)
block|{
return|return
name|getDefaultLength
argument_list|(
name|toMinutesPerMeeting
argument_list|(
name|days
argument_list|,
name|minPerWeek
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|getDefaultBreakTime
parameter_list|(
name|int
name|days
parameter_list|,
name|int
name|minPerWeek
parameter_list|)
block|{
return|return
name|getDefaultBreakTime
argument_list|(
name|toMinutesPerMeeting
argument_list|(
name|days
argument_list|,
name|minPerWeek
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

