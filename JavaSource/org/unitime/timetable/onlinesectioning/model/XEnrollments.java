begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Externalizable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|marshall
operator|.
name|Externalizer
import|;
end_import

begin_class
specifier|public
class|class
name|XEnrollments
implements|implements
name|Serializable
implements|,
name|Externalizable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iOfferingId
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XCourseRequest
argument_list|>
name|iRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|XCourseRequest
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|iEnrollments
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XEnrollment
argument_list|>
argument_list|>
name|iConfig2Enrl
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XEnrollment
argument_list|>
argument_list|>
name|iCourse2Enrl
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XEnrollment
argument_list|>
argument_list|>
name|iSection2Enrl
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XEnrollment
argument_list|>
argument_list|>
name|iReservation2Enrl
init|=
literal|null
decl_stmt|;
specifier|public
name|XEnrollments
parameter_list|()
block|{
block|}
specifier|public
name|XEnrollments
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XEnrollments
parameter_list|(
name|Long
name|offeringId
parameter_list|,
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
parameter_list|)
block|{
name|iOfferingId
operator|=
name|offeringId
expr_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
name|iRequests
operator|.
name|addAll
argument_list|(
name|requests
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
name|iEnrollments
operator|=
operator|new
name|ArrayList
argument_list|<
name|XEnrollment
argument_list|>
argument_list|()
expr_stmt|;
name|iConfig2Enrl
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XEnrollment
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|iCourse2Enrl
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XEnrollment
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|iSection2Enrl
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XEnrollment
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|iReservation2Enrl
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XEnrollment
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|XCourseRequest
name|request
range|:
name|iRequests
control|)
block|{
name|XEnrollment
name|enrollment
init|=
name|request
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getOfferingId
argument_list|()
operator|.
name|equals
argument_list|(
name|iOfferingId
argument_list|)
condition|)
block|{
name|iEnrollments
operator|.
name|add
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|cfgEnrl
init|=
name|iConfig2Enrl
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getConfigId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfgEnrl
operator|==
literal|null
condition|)
block|{
name|cfgEnrl
operator|=
operator|new
name|ArrayList
argument_list|<
name|XEnrollment
argument_list|>
argument_list|()
expr_stmt|;
name|iConfig2Enrl
operator|.
name|put
argument_list|(
name|enrollment
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|cfgEnrl
argument_list|)
expr_stmt|;
block|}
name|cfgEnrl
operator|.
name|add
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|coEnrl
init|=
name|iCourse2Enrl
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|coEnrl
operator|==
literal|null
condition|)
block|{
name|coEnrl
operator|=
operator|new
name|ArrayList
argument_list|<
name|XEnrollment
argument_list|>
argument_list|()
expr_stmt|;
name|iCourse2Enrl
operator|.
name|put
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|coEnrl
argument_list|)
expr_stmt|;
block|}
name|coEnrl
operator|.
name|add
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|resEnrl
init|=
name|iReservation2Enrl
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|.
name|getReservationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resEnrl
operator|==
literal|null
condition|)
block|{
name|resEnrl
operator|=
operator|new
name|ArrayList
argument_list|<
name|XEnrollment
argument_list|>
argument_list|()
expr_stmt|;
name|iReservation2Enrl
operator|.
name|put
argument_list|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|.
name|getReservationId
argument_list|()
argument_list|,
name|resEnrl
argument_list|)
expr_stmt|;
block|}
name|resEnrl
operator|.
name|add
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Long
name|sectionId
range|:
name|enrollment
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|enrl
init|=
name|iSection2Enrl
operator|.
name|get
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrl
operator|==
literal|null
condition|)
block|{
name|enrl
operator|=
operator|new
name|ArrayList
argument_list|<
name|XEnrollment
argument_list|>
argument_list|()
expr_stmt|;
name|iSection2Enrl
operator|.
name|put
argument_list|(
name|sectionId
argument_list|,
name|enrl
argument_list|)
expr_stmt|;
block|}
name|enrl
operator|.
name|add
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|List
argument_list|<
name|XCourseRequest
argument_list|>
name|getRequests
parameter_list|()
block|{
return|return
name|iRequests
return|;
block|}
specifier|public
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|getEnrollments
parameter_list|()
block|{
return|return
name|iEnrollments
return|;
block|}
specifier|public
name|int
name|countEnrollments
parameter_list|()
block|{
return|return
name|iEnrollments
operator|==
literal|null
condition|?
literal|0
else|:
name|iEnrollments
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|getEnrollmentsForSection
parameter_list|(
name|Long
name|sectionId
parameter_list|)
block|{
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|ret
init|=
name|iSection2Enrl
operator|.
name|get
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
return|return
name|ret
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|XEnrollment
argument_list|>
argument_list|()
else|:
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|getEnrollmentsForCourse
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|ret
init|=
name|iCourse2Enrl
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
return|return
name|ret
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|XEnrollment
argument_list|>
argument_list|()
else|:
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|getEnrollmentsForConfig
parameter_list|(
name|Long
name|configId
parameter_list|)
block|{
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|ret
init|=
name|iConfig2Enrl
operator|.
name|get
argument_list|(
name|configId
argument_list|)
decl_stmt|;
return|return
name|ret
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|XEnrollment
argument_list|>
argument_list|()
else|:
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|getEnrollmentsForReservation
parameter_list|(
name|Long
name|reservationId
parameter_list|)
block|{
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|ret
init|=
name|iReservation2Enrl
operator|.
name|get
argument_list|(
name|reservationId
argument_list|)
decl_stmt|;
return|return
name|ret
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|XEnrollment
argument_list|>
argument_list|()
else|:
name|ret
return|;
block|}
specifier|public
name|int
name|countEnrollmentsForSection
parameter_list|(
name|Long
name|sectionId
parameter_list|)
block|{
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|ret
init|=
name|iSection2Enrl
operator|.
name|get
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
return|return
name|ret
operator|==
literal|null
condition|?
literal|0
else|:
name|ret
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|countEnrollmentsForCourse
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|ret
init|=
name|iCourse2Enrl
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
return|return
name|ret
operator|==
literal|null
condition|?
literal|0
else|:
name|ret
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|countEnrollmentsForConfig
parameter_list|(
name|Long
name|configId
parameter_list|)
block|{
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|ret
init|=
name|iConfig2Enrl
operator|.
name|get
argument_list|(
name|configId
argument_list|)
decl_stmt|;
return|return
name|ret
operator|==
literal|null
condition|?
literal|0
else|:
name|ret
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|countEnrollmentsForReservation
parameter_list|(
name|Long
name|reservationId
parameter_list|)
block|{
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|ret
init|=
name|iReservation2Enrl
operator|.
name|get
argument_list|(
name|reservationId
argument_list|)
decl_stmt|;
return|return
name|ret
operator|==
literal|null
condition|?
literal|0
else|:
name|ret
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|contain
parameter_list|(
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|enrollments
parameter_list|,
name|Long
name|studentId
parameter_list|)
block|{
if|if
condition|(
name|studentId
operator|==
literal|null
operator|||
name|enrollments
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|studentId
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|countEnrollmentsForSection
parameter_list|(
name|Long
name|sectionId
parameter_list|,
name|Long
name|excludeStudentId
parameter_list|)
block|{
name|List
argument_list|<
name|XEnrollment
argument_list|>
name|ret
init|=
name|iSection2Enrl
operator|.
name|get
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
return|return
name|ret
operator|==
literal|null
condition|?
literal|0
else|:
name|contain
argument_list|(
name|ret
argument_list|,
name|excludeStudentId
argument_list|)
condition|?
name|ret
operator|.
name|size
argument_list|()
operator|-
literal|1
else|:
name|ret
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|iOfferingId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|int
name|nrRequests
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|iRequests
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrRequests
condition|;
name|i
operator|++
control|)
name|iRequests
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|iOfferingId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XCourseRequest
name|request
range|:
name|iRequests
control|)
name|request
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|XEnrollmentsSerializer
implements|implements
name|Externalizer
argument_list|<
name|XEnrollments
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|ObjectOutput
name|output
parameter_list|,
name|XEnrollments
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|writeExternal
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|XEnrollments
name|readObject
parameter_list|(
name|ObjectInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
return|return
operator|new
name|XEnrollments
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

