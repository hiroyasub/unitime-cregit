begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Externalizable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|constraint
operator|.
name|LinkedSections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|OnlineConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|OnlineReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|OnlineSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|DummyReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|GroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|ReservationOverride
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|marshall
operator|.
name|Externalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|marshall
operator|.
name|SerializeWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OverrideReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|SerializeWith
argument_list|(
name|XOffering
operator|.
name|XOfferingSerializer
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XOffering
implements|implements
name|Serializable
implements|,
name|Externalizable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iUniqueId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iName
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XConfig
argument_list|>
name|iConfigs
init|=
operator|new
name|ArrayList
argument_list|<
name|XConfig
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XCourse
argument_list|>
name|iCourses
init|=
operator|new
name|ArrayList
argument_list|<
name|XCourse
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XReservation
argument_list|>
name|iReservations
init|=
operator|new
name|ArrayList
argument_list|<
name|XReservation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|XDistribution
argument_list|>
name|iDistrubutions
init|=
operator|new
name|ArrayList
argument_list|<
name|XDistribution
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|XOffering
parameter_list|()
block|{
block|}
specifier|public
name|XOffering
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XOffering
parameter_list|(
name|InstructionalOffering
name|offering
parameter_list|,
name|Collection
argument_list|<
name|XDistribution
argument_list|>
name|distributions
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|iUniqueId
operator|=
name|offering
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iName
operator|=
name|offering
operator|.
name|getCourseName
argument_list|()
expr_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|offering
operator|.
name|getCourseOfferings
argument_list|()
control|)
name|iCourses
operator|.
name|add
argument_list|(
operator|new
name|XCourse
argument_list|(
name|course
argument_list|,
name|helper
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
name|iConfigs
operator|.
name|add
argument_list|(
operator|new
name|XConfig
argument_list|(
name|config
argument_list|,
name|helper
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Reservation
name|reservation
range|:
name|offering
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|instanceof
name|OverrideReservation
condition|)
block|{
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XIndividualReservation
argument_list|(
name|this
argument_list|,
operator|(
name|OverrideReservation
operator|)
name|reservation
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|IndividualReservation
condition|)
block|{
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XIndividualReservation
argument_list|(
name|this
argument_list|,
operator|(
name|IndividualReservation
operator|)
name|reservation
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XGroupReservation
argument_list|(
name|this
argument_list|,
operator|(
name|StudentGroupReservation
operator|)
name|reservation
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|CurriculumReservation
condition|)
block|{
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XCurriculumReservation
argument_list|(
name|this
argument_list|,
operator|(
name|CurriculumReservation
operator|)
name|reservation
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|CourseReservation
condition|)
block|{
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XCourseReservation
argument_list|(
name|this
argument_list|,
operator|(
name|CourseReservation
operator|)
name|reservation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|offering
operator|.
name|isByReservationOnly
argument_list|()
condition|)
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XDummyReservation
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|distributions
operator|!=
literal|null
condition|)
name|iDistrubutions
operator|.
name|addAll
argument_list|(
name|distributions
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|iConfigs
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XOffering
parameter_list|(
name|Offering
name|offering
parameter_list|,
name|Collection
argument_list|<
name|LinkedSections
argument_list|>
name|links
parameter_list|)
block|{
name|iUniqueId
operator|=
name|offering
operator|.
name|getId
argument_list|()
expr_stmt|;
name|iName
operator|=
name|offering
operator|.
name|getName
argument_list|()
expr_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
name|iCourses
operator|.
name|add
argument_list|(
operator|new
name|XCourse
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
name|iConfigs
operator|.
name|add
argument_list|(
operator|new
name|XConfig
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|Reservation
name|reservation
range|:
name|offering
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|instanceof
name|ReservationOverride
condition|)
block|{
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XIndividualReservation
argument_list|(
operator|(
name|ReservationOverride
operator|)
name|reservation
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|GroupReservation
condition|)
block|{
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XIndividualReservation
argument_list|(
operator|(
name|GroupReservation
operator|)
name|reservation
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|IndividualReservation
condition|)
block|{
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XIndividualReservation
argument_list|(
operator|(
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|IndividualReservation
operator|)
name|reservation
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CurriculumReservation
condition|)
block|{
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XCurriculumReservation
argument_list|(
operator|(
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CurriculumReservation
operator|)
name|reservation
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CourseReservation
condition|)
block|{
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XCourseReservation
argument_list|(
operator|(
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CourseReservation
operator|)
name|reservation
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|DummyReservation
condition|)
block|{
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XDummyReservation
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|ignConf
init|=
operator|new
name|HashSet
argument_list|<
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|id
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|links
operator|!=
literal|null
condition|)
for|for
control|(
name|LinkedSections
name|link
range|:
name|links
control|)
if|if
condition|(
name|link
operator|.
name|getOfferings
argument_list|()
operator|.
name|contains
argument_list|(
name|offering
argument_list|)
condition|)
name|iDistrubutions
operator|.
name|add
argument_list|(
operator|new
name|XDistribution
argument_list|(
name|link
argument_list|,
name|id
operator|++
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getIgnoreConflictWithSectionIds
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|section
operator|.
name|getIgnoreConflictWithSectionIds
argument_list|()
argument_list|)
decl_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|ignConf
operator|.
name|add
argument_list|(
name|ids
argument_list|)
condition|)
name|iDistrubutions
operator|.
name|add
argument_list|(
operator|new
name|XDistribution
argument_list|(
name|XDistributionType
operator|.
name|IngoreConflicts
argument_list|,
name|id
operator|++
argument_list|,
name|offering
operator|.
name|getId
argument_list|()
argument_list|,
name|ids
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Offering id */
specifier|public
name|Long
name|getOfferingId
parameter_list|()
block|{
return|return
name|iUniqueId
return|;
block|}
comment|/** Offering name */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
comment|/** Possible configurations */
specifier|public
name|List
argument_list|<
name|XConfig
argument_list|>
name|getConfigs
parameter_list|()
block|{
return|return
name|iConfigs
return|;
block|}
comment|/**      * List of courses. One instructional offering can contain multiple courses      * (names under which it is offered)      */
specifier|public
name|List
argument_list|<
name|XCourse
argument_list|>
name|getCourses
parameter_list|()
block|{
return|return
name|iCourses
return|;
block|}
comment|/** Course of this offering with the given id */
specifier|public
name|XCourse
name|getCourse
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
if|if
condition|(
name|courseId
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|XCourse
name|course
range|:
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|.
name|equals
argument_list|(
name|getName
argument_list|()
argument_list|)
condition|)
return|return
name|course
return|;
return|return
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
for|for
control|(
name|XCourse
name|course
range|:
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|courseId
argument_list|)
condition|)
return|return
name|course
return|;
return|return
literal|null
return|;
block|}
comment|/** Course of this offering with the given id */
specifier|public
name|XCourse
name|getCourse
parameter_list|(
name|XCourseId
name|courseId
parameter_list|)
block|{
for|for
control|(
name|XCourse
name|course
range|:
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|courseId
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
return|return
name|course
return|;
return|return
literal|null
return|;
block|}
comment|/** List of sections of the given enrollment */
specifier|public
name|List
argument_list|<
name|XSection
argument_list|>
name|getSections
parameter_list|(
name|XEnrollment
name|enrollment
parameter_list|)
block|{
if|if
condition|(
name|enrollment
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|XSection
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|sections
return|;
block|}
comment|/**      * Return section of the given id, if it is part of one of this offering      * configurations.      */
specifier|public
name|XSection
name|getSection
parameter_list|(
name|Long
name|sectionId
parameter_list|)
block|{
if|if
condition|(
name|sectionId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|XConfig
name|config
range|:
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|XSection
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getSectionId
argument_list|()
operator|.
name|equals
argument_list|(
name|sectionId
argument_list|)
condition|)
return|return
name|section
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Return sections of the given external id, if it is part of one of this offering      * configurations.      */
specifier|public
name|List
argument_list|<
name|XSection
argument_list|>
name|getSections
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|String
name|externalId
parameter_list|)
block|{
name|List
argument_list|<
name|XSection
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|XSection
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|externalId
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getExternalId
argument_list|(
name|courseId
argument_list|)
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Return subpart of the given id, if it is part of this offering configuraions.      */
specifier|public
name|XSubpart
name|getSubpart
parameter_list|(
name|Long
name|subpartId
parameter_list|)
block|{
if|if
condition|(
name|subpartId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|XConfig
name|config
range|:
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|subpart
operator|.
name|getSubpartId
argument_list|()
operator|.
name|equals
argument_list|(
name|subpartId
argument_list|)
condition|)
return|return
name|subpart
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Return config of the given id, if it is part of this offering configuraions.      */
specifier|public
name|XConfig
name|getConfig
parameter_list|(
name|Long
name|configId
parameter_list|)
block|{
if|if
condition|(
name|configId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|XConfig
name|config
range|:
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|config
operator|.
name|getConfigId
argument_list|()
operator|.
name|equals
argument_list|(
name|configId
argument_list|)
condition|)
return|return
name|config
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Return set of instructional types, union over all configurations. */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getInstructionalTypes
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|instructionalTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
name|instructionalTypes
operator|.
name|add
argument_list|(
name|subpart
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|instructionalTypes
return|;
block|}
comment|/**      * Return list of all subparts of the given isntructional type for this      * offering.      */
specifier|public
name|Set
argument_list|<
name|XSubpart
argument_list|>
name|getSubparts
parameter_list|(
name|String
name|instructionalType
parameter_list|)
block|{
name|Set
argument_list|<
name|XSubpart
argument_list|>
name|subparts
init|=
operator|new
name|HashSet
argument_list|<
name|XSubpart
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|instructionalType
operator|.
name|equals
argument_list|(
name|subpart
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
name|subparts
operator|.
name|add
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|subparts
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
comment|/** Reservations associated with this offering */
specifier|public
name|List
argument_list|<
name|XReservation
argument_list|>
name|getReservations
parameter_list|()
block|{
return|return
name|iReservations
return|;
block|}
comment|/**      * Get reservations that require this section      */
specifier|public
name|List
argument_list|<
name|XReservation
argument_list|>
name|getSectionReservations
parameter_list|(
name|Long
name|sectionId
parameter_list|)
block|{
name|List
argument_list|<
name|XReservation
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|XReservation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XReservation
name|reservation
range|:
name|iReservations
control|)
for|for
control|(
name|Set
argument_list|<
name|Long
argument_list|>
name|sectionIds
range|:
name|reservation
operator|.
name|getSections
argument_list|()
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|sectionIds
operator|.
name|contains
argument_list|(
name|sectionId
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**      * Get reservations that require this config      */
specifier|public
name|List
argument_list|<
name|XReservation
argument_list|>
name|getConfigReservations
parameter_list|(
name|Long
name|configId
parameter_list|)
block|{
name|List
argument_list|<
name|XReservation
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|XReservation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XReservation
name|reservation
range|:
name|iReservations
control|)
if|if
condition|(
name|reservation
operator|.
name|getConfigsIds
argument_list|()
operator|.
name|contains
argument_list|(
name|configId
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getUnreservedSectionSpace
parameter_list|(
name|Long
name|sectionId
parameter_list|,
name|XEnrollments
name|enrollments
parameter_list|)
block|{
name|XSection
name|section
init|=
name|getSection
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
comment|// section is unlimited -> there is unreserved space unless there is an unlimited reservation too
comment|// (in which case there is no unreserved space)
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
block|{
comment|// exclude reservations that are not directly set on this section
for|for
control|(
name|XReservation
name|r
range|:
name|getSectionReservations
argument_list|(
name|sectionId
argument_list|)
control|)
block|{
comment|// ignore expired reservations
if|if
condition|(
name|r
operator|.
name|isExpired
argument_list|()
condition|)
continue|continue;
comment|// there is an unlimited reservation -> no unreserved space
if|if
condition|(
name|r
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|0
return|;
block|}
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
name|int
name|available
init|=
name|section
operator|.
name|getLimit
argument_list|()
operator|-
name|enrollments
operator|.
name|countEnrollmentsForSection
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
comment|// exclude reservations that are not directly set on this section
for|for
control|(
name|XReservation
name|r
range|:
name|getSectionReservations
argument_list|(
name|sectionId
argument_list|)
control|)
block|{
comment|// ignore expired reservations
if|if
condition|(
name|r
operator|.
name|isExpired
argument_list|()
condition|)
continue|continue;
comment|// unlimited reservation -> all the space is reserved
if|if
condition|(
name|r
operator|.
name|getLimit
argument_list|()
operator|<
literal|0.0
condition|)
return|return
literal|0
return|;
comment|// compute space that can be potentially taken by this reservation
name|int
name|reserved
init|=
name|r
operator|.
name|getReservedAvailableSpace
argument_list|(
name|enrollments
argument_list|)
decl_stmt|;
comment|// deduct the space from available space
name|available
operator|-=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|reserved
argument_list|)
expr_stmt|;
block|}
return|return
name|available
return|;
block|}
specifier|public
name|int
name|getUnreservedConfigSpace
parameter_list|(
name|Long
name|configId
parameter_list|,
name|XEnrollments
name|enrollments
parameter_list|)
block|{
name|XConfig
name|config
init|=
name|getConfig
argument_list|(
name|configId
argument_list|)
decl_stmt|;
comment|// configuration is unlimited -> there is unreserved space unless there is an unlimited reservation too
comment|// (in which case there is no unreserved space)
if|if
condition|(
name|config
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
block|{
comment|// exclude reservations that are not directly set on this section
for|for
control|(
name|XReservation
name|r
range|:
name|getConfigReservations
argument_list|(
name|configId
argument_list|)
control|)
block|{
comment|// ignore expired reservations
if|if
condition|(
name|r
operator|.
name|isExpired
argument_list|()
condition|)
continue|continue;
comment|// there is an unlimited reservation -> no unreserved space
if|if
condition|(
name|r
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|0
return|;
block|}
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
name|int
name|available
init|=
name|config
operator|.
name|getLimit
argument_list|()
operator|-
name|enrollments
operator|.
name|countEnrollmentsForConfig
argument_list|(
name|configId
argument_list|)
decl_stmt|;
comment|// exclude reservations that are not directly set on this section
for|for
control|(
name|XReservation
name|r
range|:
name|getConfigReservations
argument_list|(
name|configId
argument_list|)
control|)
block|{
comment|// ignore expired reservations
if|if
condition|(
name|r
operator|.
name|isExpired
argument_list|()
condition|)
continue|continue;
comment|// unlimited reservation -> all the space is reserved
if|if
condition|(
name|r
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|0
return|;
comment|// compute space that can be potentially taken by this reservation
name|double
name|reserved
init|=
name|r
operator|.
name|getReservedAvailableSpace
argument_list|(
name|enrollments
argument_list|)
decl_stmt|;
comment|// deduct the space from available space
name|available
operator|-=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|reserved
argument_list|)
expr_stmt|;
block|}
return|return
name|available
return|;
block|}
specifier|public
name|int
name|getUnreservedSpace
parameter_list|(
name|XEnrollments
name|enrollments
parameter_list|)
block|{
comment|// compute available space
name|int
name|available
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|getConfigs
argument_list|()
control|)
block|{
name|available
operator|+=
name|config
operator|.
name|getLimit
argument_list|()
operator|-
name|enrollments
operator|.
name|countEnrollmentsForConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
expr_stmt|;
comment|// offering is unlimited -> there is unreserved space unless there is an unlimited reservation too
comment|// (in which case there is no unreserved space)
if|if
condition|(
name|config
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
block|{
for|for
control|(
name|XReservation
name|r
range|:
name|getReservations
argument_list|()
control|)
block|{
comment|// ignore expired reservations
if|if
condition|(
name|r
operator|.
name|isExpired
argument_list|()
condition|)
continue|continue;
comment|// there is an unlimited reservation -> no unreserved space
if|if
condition|(
name|r
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|0
return|;
block|}
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
block|}
comment|// compute reserved space (out of the available space)
name|int
name|reserved
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XReservation
name|r
range|:
name|getReservations
argument_list|()
control|)
block|{
comment|// ignore expired reservations
if|if
condition|(
name|r
operator|.
name|isExpired
argument_list|()
condition|)
continue|continue;
comment|// unlimited reservation -> no unreserved space
if|if
condition|(
name|r
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|0
return|;
name|reserved
operator|+=
name|Math
operator|.
name|max
argument_list|(
literal|0.0
argument_list|,
name|r
operator|.
name|getReservedAvailableSpace
argument_list|(
name|enrollments
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|available
operator|-
name|reserved
return|;
block|}
comment|/** True if there are reservations for this offering */
specifier|public
name|boolean
name|hasReservations
parameter_list|()
block|{
return|return
operator|!
name|iReservations
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|XOffering
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getOfferingId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|XOffering
operator|)
name|o
operator|)
operator|.
name|getOfferingId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
operator|(
name|getOfferingId
argument_list|()
operator|^
operator|(
name|getOfferingId
argument_list|()
operator|>>>
literal|32
operator|)
operator|)
return|;
block|}
specifier|public
name|XReservationId
name|guessReservation
parameter_list|(
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|other
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|XEnrollment
name|enrollment
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enrollment
operator|.
name|getOfferingId
argument_list|()
operator|.
name|equals
argument_list|(
name|getOfferingId
argument_list|()
argument_list|)
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|XReservation
argument_list|>
name|reservations
init|=
operator|new
name|TreeSet
argument_list|<
name|XReservation
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|mustBeUsed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XReservation
name|reservation
range|:
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|isApplicable
argument_list|(
name|student
argument_list|)
condition|)
block|{
if|if
condition|(
name|reservation
operator|.
name|equals
argument_list|(
name|enrollment
operator|.
name|getReservation
argument_list|()
argument_list|)
operator|&&
name|reservation
operator|.
name|isIncluded
argument_list|(
name|enrollment
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|getSections
argument_list|(
name|enrollment
argument_list|)
argument_list|)
condition|)
return|return
name|reservation
return|;
if|if
condition|(
operator|!
name|mustBeUsed
operator|&&
name|reservation
operator|.
name|mustBeUsed
argument_list|()
condition|)
block|{
name|reservations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mustBeUsed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|mustBeUsed
operator|&&
operator|!
name|reservation
operator|.
name|mustBeUsed
argument_list|()
condition|)
continue|continue;
name|reservations
operator|.
name|add
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reservations
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|getSections
argument_list|(
name|enrollment
argument_list|)
decl_stmt|;
for|for
control|(
name|XReservation
name|reservation
range|:
name|reservations
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|isIncluded
argument_list|(
name|enrollment
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|sections
argument_list|)
condition|)
block|{
if|if
condition|(
name|reservation
operator|.
name|getLimit
argument_list|()
operator|<
literal|0.0
operator|||
name|other
operator|==
literal|null
condition|)
return|return
operator|new
name|XReservationId
argument_list|(
name|reservation
operator|.
name|getType
argument_list|()
argument_list|,
name|getOfferingId
argument_list|()
argument_list|,
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
return|;
name|int
name|used
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XCourseRequest
name|r
range|:
name|other
control|)
if|if
condition|(
name|r
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
operator|.
name|equals
argument_list|(
name|getOfferingId
argument_list|()
argument_list|)
operator|&&
operator|!
name|enrollment
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|&&
name|reservation
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
argument_list|)
condition|)
name|used
operator|++
expr_stmt|;
if|if
condition|(
name|used
operator|<
name|reservation
operator|.
name|getLimit
argument_list|()
condition|)
return|return
operator|new
name|XReservationId
argument_list|(
name|reservation
operator|.
name|getType
argument_list|()
argument_list|,
name|getOfferingId
argument_list|()
argument_list|,
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|distance
parameter_list|(
name|DistanceMetric
name|m
parameter_list|,
name|Section
name|s1
parameter_list|,
name|Section
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|.
name|getPlacement
argument_list|()
operator|==
literal|null
operator|||
name|s2
operator|.
name|getPlacement
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|TimeLocation
name|t1
init|=
name|s1
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|TimeLocation
name|t2
init|=
name|s2
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|t1
operator|.
name|shareDays
argument_list|(
name|t2
argument_list|)
operator|||
operator|!
name|t1
operator|.
name|shareWeeks
argument_list|(
name|t2
argument_list|)
condition|)
return|return
literal|0
return|;
name|int
name|a1
init|=
name|t1
operator|.
name|getStartSlot
argument_list|()
decl_stmt|,
name|a2
init|=
name|t2
operator|.
name|getStartSlot
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|doComputeDistanceConflictsBetweenNonBTBClasses
argument_list|()
condition|)
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|<=
name|a2
condition|)
block|{
name|int
name|dist
init|=
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|m
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dist
operator|>
name|t1
operator|.
name|getBreakTime
argument_list|()
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|a2
operator|-
name|a1
operator|-
name|t1
operator|.
name|getLength
argument_list|()
operator|)
condition|)
return|return
name|dist
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|==
name|a2
condition|)
return|return
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|m
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
specifier|static
class|class
name|EnrollmentSectionComparator
implements|implements
name|Comparator
argument_list|<
name|Section
argument_list|>
block|{
specifier|public
name|boolean
name|isParent
parameter_list|(
name|Section
name|s1
parameter_list|,
name|Section
name|s2
parameter_list|)
block|{
name|Section
name|p1
init|=
name|s1
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|isParent
argument_list|(
name|p1
argument_list|,
name|s2
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Section
name|a
parameter_list|,
name|Section
name|b
parameter_list|)
block|{
if|if
condition|(
name|isParent
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|isParent
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|a
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|b
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|,
name|b
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|Course
name|toCourse
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|XExpectations
name|expectations
parameter_list|,
name|Collection
argument_list|<
name|XDistribution
argument_list|>
name|distributions
parameter_list|,
name|XEnrollments
name|enrollments
parameter_list|)
block|{
name|Offering
name|clonedOffering
init|=
operator|new
name|Offering
argument_list|(
name|getOfferingId
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|XCourse
name|course
init|=
name|getCourse
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
name|int
name|courseLimit
init|=
name|course
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|courseLimit
operator|>=
literal|0
condition|)
block|{
name|courseLimit
operator|-=
name|enrollments
operator|.
name|countEnrollmentsForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseLimit
operator|<
literal|0
condition|)
name|courseLimit
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|XEnrollment
name|enrollment
range|:
name|enrollments
operator|.
name|getEnrollmentsForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|courseLimit
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Course
name|clonedCourse
init|=
operator|new
name|Course
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|clonedOffering
argument_list|,
name|courseLimit
argument_list|,
name|course
operator|.
name|getProjected
argument_list|()
argument_list|)
decl_stmt|;
name|clonedCourse
operator|.
name|setNote
argument_list|(
name|course
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Config
argument_list|>
name|configs
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Config
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Subpart
argument_list|>
name|subparts
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Subpart
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|sections
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|getConfigs
argument_list|()
control|)
block|{
name|int
name|configLimit
init|=
name|config
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|int
name|configEnrl
init|=
name|enrollments
operator|.
name|countEnrollmentsForConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|configStudent
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|enrollment
range|:
name|enrollments
operator|.
name|getEnrollmentsForConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|enrollment
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|configEnrl
operator|--
expr_stmt|;
name|configStudent
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|configLimit
operator|>=
literal|0
condition|)
block|{
name|configLimit
operator|-=
name|configEnrl
expr_stmt|;
if|if
condition|(
name|configLimit
operator|<
literal|0
condition|)
name|configLimit
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|configStudent
operator|&&
name|configLimit
operator|==
literal|0
condition|)
name|configLimit
operator|=
literal|1
expr_stmt|;
block|}
name|OnlineConfig
name|clonedConfig
init|=
operator|new
name|OnlineConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|configLimit
argument_list|,
name|config
operator|.
name|getName
argument_list|()
argument_list|,
name|clonedOffering
argument_list|)
decl_stmt|;
name|clonedConfig
operator|.
name|setEnrollment
argument_list|(
name|configEnrl
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|clonedConfig
argument_list|)
expr_stmt|;
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
name|Subpart
name|clonedSubpart
init|=
operator|new
name|Subpart
argument_list|(
name|subpart
operator|.
name|getSubpartId
argument_list|()
argument_list|,
name|subpart
operator|.
name|getInstructionalType
argument_list|()
argument_list|,
name|subpart
operator|.
name|getName
argument_list|()
argument_list|,
name|clonedConfig
argument_list|,
operator|(
name|subpart
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|subparts
operator|.
name|get
argument_list|(
name|subpart
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|)
argument_list|)
decl_stmt|;
name|clonedSubpart
operator|.
name|setAllowOverlap
argument_list|(
name|subpart
operator|.
name|isAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|clonedSubpart
operator|.
name|setCredit
argument_list|(
name|subpart
operator|.
name|getCredit
argument_list|(
name|courseId
argument_list|)
argument_list|)
expr_stmt|;
name|subparts
operator|.
name|put
argument_list|(
name|subpart
operator|.
name|getSubpartId
argument_list|()
argument_list|,
name|clonedSubpart
argument_list|)
expr_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
name|int
name|limit
init|=
name|section
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|int
name|enrl
init|=
name|enrollments
operator|.
name|countEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|std
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|enrollment
range|:
name|enrollments
operator|.
name|getEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|enrollment
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|enrl
operator|--
expr_stmt|;
name|std
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|limit
operator|>=
literal|0
condition|)
block|{
comment|// limited section, deduct enrollments
name|limit
operator|-=
name|enrl
expr_stmt|;
if|if
condition|(
name|limit
operator|<
literal|0
condition|)
name|limit
operator|=
literal|0
expr_stmt|;
comment|// over-enrolled, but not unlimited
if|if
condition|(
name|std
operator|&&
name|limit
operator|==
literal|0
condition|)
name|limit
operator|=
literal|1
expr_stmt|;
comment|// allow enrolled student in
block|}
name|String
name|instructorIds
init|=
literal|""
decl_stmt|;
name|String
name|instructorNames
init|=
literal|""
decl_stmt|;
for|for
control|(
name|XInstructor
name|instructor
range|:
name|section
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|instructorIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|instructorIds
operator|+=
literal|":"
expr_stmt|;
name|instructorNames
operator|+=
literal|":"
expr_stmt|;
block|}
name|instructorIds
operator|+=
name|instructor
operator|.
name|getIntructorId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|instructorNames
operator|+=
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"|"
operator|+
operator|(
name|instructor
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|instructor
operator|.
name|getEmail
argument_list|()
operator|)
expr_stmt|;
block|}
name|OnlineSection
name|clonedSection
init|=
operator|new
name|OnlineSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|,
name|limit
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|clonedSubpart
argument_list|,
name|section
operator|.
name|toPlacement
argument_list|()
argument_list|,
name|instructorIds
argument_list|,
name|instructorNames
argument_list|,
operator|(
name|section
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|sections
operator|.
name|get
argument_list|(
name|section
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|)
argument_list|)
decl_stmt|;
name|clonedSection
operator|.
name|setName
argument_list|(
operator|-
literal|1l
argument_list|,
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setSpaceExpected
argument_list|(
name|expectations
operator|==
literal|null
condition|?
literal|0.0
else|:
name|expectations
operator|.
name|getExpectedSpace
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setCancelled
argument_list|(
name|section
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|distributions
operator|!=
literal|null
condition|)
for|for
control|(
name|XDistribution
name|distribution
range|:
name|distributions
control|)
if|if
condition|(
name|distribution
operator|.
name|getDistributionType
argument_list|()
operator|==
name|XDistributionType
operator|.
name|IngoreConflicts
operator|&&
name|distribution
operator|.
name|hasSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
for|for
control|(
name|Long
name|id
range|:
name|distribution
operator|.
name|getSectionIds
argument_list|()
control|)
if|if
condition|(
operator|!
name|id
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
name|clonedSection
operator|.
name|addIgnoreConflictWith
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
block|{
name|double
name|available
init|=
name|Math
operator|.
name|round
argument_list|(
name|clonedSection
operator|.
name|getSpaceExpected
argument_list|()
operator|-
name|limit
argument_list|)
decl_stmt|;
name|clonedSection
operator|.
name|setPenalty
argument_list|(
name|available
operator|/
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|put
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|,
name|clonedSection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|XReservation
name|reservation
range|:
name|getReservations
argument_list|()
control|)
block|{
name|int
name|reservationLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|reservation
operator|.
name|getLimit
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservationLimit
operator|>=
literal|0
condition|)
block|{
name|reservationLimit
operator|-=
name|enrollments
operator|.
name|countEnrollmentsForReservation
argument_list|(
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservationLimit
operator|<
literal|0
condition|)
name|reservationLimit
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|XEnrollment
name|enrollment
range|:
name|enrollments
operator|.
name|getEnrollmentsForReservation
argument_list|(
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|reservationLimit
operator|++
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|reservationLimit
operator|<=
literal|0
operator|&&
operator|!
name|reservation
operator|.
name|mustBeUsed
argument_list|()
condition|)
continue|continue;
block|}
name|boolean
name|applicable
init|=
name|reservation
operator|.
name|isApplicable
argument_list|(
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|XCourseReservation
condition|)
name|applicable
operator|=
operator|(
operator|(
name|XCourseReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|courseId
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|XDummyReservation
condition|)
block|{
comment|// Ignore by reservation only flag (dummy reservation) when the student is already enrolled in the course
for|for
control|(
name|XEnrollment
name|enrollment
range|:
name|enrollments
operator|.
name|getEnrollmentsForCourse
argument_list|(
name|courseId
argument_list|)
control|)
if|if
condition|(
name|enrollment
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|applicable
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|Reservation
name|clonedReservation
init|=
operator|new
name|OnlineReservation
argument_list|(
name|reservation
operator|.
name|getType
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|,
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|,
name|clonedOffering
argument_list|,
name|reservation
operator|.
name|getPriority
argument_list|()
argument_list|,
name|reservation
operator|.
name|canAssignOverLimit
argument_list|()
argument_list|,
name|reservationLimit
argument_list|,
name|applicable
argument_list|,
name|reservation
operator|.
name|mustBeUsed
argument_list|()
argument_list|,
name|reservation
operator|.
name|isAllowOverlap
argument_list|()
argument_list|,
name|reservation
operator|.
name|isExpired
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|configId
range|:
name|reservation
operator|.
name|getConfigsIds
argument_list|()
control|)
name|clonedReservation
operator|.
name|addConfig
argument_list|(
name|configs
operator|.
name|get
argument_list|(
name|configId
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|reservation
operator|.
name|getSections
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|clonedSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|sectionId
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
name|clonedSections
operator|.
name|add
argument_list|(
name|sections
operator|.
name|get
argument_list|(
name|sectionId
argument_list|)
argument_list|)
expr_stmt|;
name|clonedReservation
operator|.
name|getSections
argument_list|()
operator|.
name|put
argument_list|(
name|subparts
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|clonedSections
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|clonedCourse
return|;
block|}
specifier|public
name|void
name|addDistribution
parameter_list|(
name|XDistribution
name|distribution
parameter_list|)
block|{
name|iDistrubutions
operator|.
name|add
argument_list|(
name|distribution
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|XDistribution
argument_list|>
name|getDistributions
parameter_list|()
block|{
return|return
name|iDistrubutions
return|;
block|}
specifier|public
name|boolean
name|isAllowOverlap
parameter_list|(
name|XEnrollment
name|enrollment
parameter_list|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|XReservation
name|reservation
range|:
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|equals
argument_list|(
name|enrollment
operator|.
name|getReservation
argument_list|()
argument_list|)
operator|&&
name|reservation
operator|.
name|isAllowOverlap
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isAllowOverlap
parameter_list|(
name|XStudent
name|student
parameter_list|,
name|Long
name|configId
parameter_list|,
name|List
argument_list|<
name|XSection
argument_list|>
name|assignment
parameter_list|)
block|{
for|for
control|(
name|XReservation
name|reservation
range|:
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|isAllowOverlap
argument_list|()
operator|&&
name|reservation
operator|.
name|isApplicable
argument_list|(
name|student
argument_list|)
operator|&&
name|reservation
operator|.
name|isIncluded
argument_list|(
name|configId
argument_list|,
name|assignment
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|iUniqueId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|iName
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|int
name|nrConfigs
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|iConfigs
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrConfigs
condition|;
name|i
operator|++
control|)
name|iConfigs
operator|.
name|add
argument_list|(
operator|new
name|XConfig
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nrCourses
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrCourses
condition|;
name|i
operator|++
control|)
name|iCourses
operator|.
name|add
argument_list|(
operator|new
name|XCourse
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nrReservations
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrReservations
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|XReservationType
operator|.
name|values
argument_list|()
index|[
name|in
operator|.
name|readInt
argument_list|()
index|]
condition|)
block|{
case|case
name|Course
case|:
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XCourseReservation
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Curriculum
case|:
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XCurriculumReservation
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Dummy
case|:
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XDummyReservation
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Group
case|:
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XGroupReservation
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Individual
case|:
case|case
name|Override
case|:
name|iReservations
operator|.
name|add
argument_list|(
operator|new
name|XIndividualReservation
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|int
name|nrDistributions
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrDistributions
condition|;
name|i
operator|++
control|)
name|iDistrubutions
operator|.
name|add
argument_list|(
operator|new
name|XDistribution
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|iUniqueId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iConfigs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|iConfigs
control|)
name|config
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iCourses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XCourse
name|course
range|:
name|iCourses
control|)
name|course
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iReservations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XReservation
name|reservation
range|:
name|iReservations
control|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|reservation
operator|.
name|getType
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|reservation
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|iDistrubutions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XDistribution
name|distribution
range|:
name|iDistrubutions
control|)
name|distribution
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|XOfferingSerializer
implements|implements
name|Externalizer
argument_list|<
name|XOffering
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|ObjectOutput
name|output
parameter_list|,
name|XOffering
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|writeExternal
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|XOffering
name|readObject
parameter_list|(
name|ObjectInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
return|return
operator|new
name|XOffering
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

