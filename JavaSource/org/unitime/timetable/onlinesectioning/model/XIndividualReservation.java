begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|GroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|marshall
operator|.
name|Externalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|marshall
operator|.
name|SerializeWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_class
annotation|@
name|SerializeWith
argument_list|(
name|XIndividualReservation
operator|.
name|XIndividualReservationSerializer
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XIndividualReservation
extends|extends
name|XReservation
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|iStudentIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Integer
name|iLimit
init|=
literal|null
decl_stmt|;
specifier|public
name|XIndividualReservation
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|XIndividualReservation
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|super
argument_list|()
expr_stmt|;
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XIndividualReservation
parameter_list|(
name|XOffering
name|offering
parameter_list|,
name|IndividualReservation
name|reservation
parameter_list|)
block|{
name|super
argument_list|(
name|XReservationType
operator|.
name|Individual
argument_list|,
name|offering
argument_list|,
name|reservation
argument_list|)
expr_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|reservation
operator|.
name|getStudents
argument_list|()
control|)
name|iStudentIds
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XIndividualReservation
parameter_list|(
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|IndividualReservation
name|reservation
parameter_list|)
block|{
name|super
argument_list|(
name|XReservationType
operator|.
name|Individual
argument_list|,
name|reservation
argument_list|)
expr_stmt|;
name|iStudentIds
operator|.
name|addAll
argument_list|(
name|reservation
operator|.
name|getStudentIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XIndividualReservation
parameter_list|(
name|GroupReservation
name|reservation
parameter_list|)
block|{
name|super
argument_list|(
name|XReservationType
operator|.
name|Group
argument_list|,
name|reservation
argument_list|)
expr_stmt|;
name|iStudentIds
operator|.
name|addAll
argument_list|(
name|reservation
operator|.
name|getStudentIds
argument_list|()
argument_list|)
expr_stmt|;
name|iLimit
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|reservation
operator|.
name|getReservationLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Individual reservations are the only reservations that can be assigned over the limit.      */
annotation|@
name|Override
specifier|public
name|boolean
name|canAssignOverLimit
parameter_list|()
block|{
switch|switch
condition|(
name|getType
argument_list|()
condition|)
block|{
case|case
name|Individual
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Individual or group reservation must be used (unless it is expired)      * @return true if not expired, false if expired      */
annotation|@
name|Override
specifier|public
name|boolean
name|mustBeUsed
parameter_list|()
block|{
return|return
operator|!
name|isExpired
argument_list|()
return|;
block|}
comment|/**      * Individual reservations are of the top priority      */
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
switch|switch
condition|(
name|getType
argument_list|()
condition|)
block|{
case|case
name|Individual
case|:
return|return
literal|0
return|;
default|default:
return|return
literal|1
return|;
block|}
block|}
comment|/**      * Reservation is applicable for all students in the reservation      */
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
return|return
name|iStudentIds
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Students in the reservation      */
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getStudentIds
parameter_list|()
block|{
return|return
name|iStudentIds
return|;
block|}
comment|/**      * Reservation limit == number of students in the reservation      */
annotation|@
name|Override
specifier|public
name|int
name|getReservationLimit
parameter_list|()
block|{
return|return
operator|(
name|iLimit
operator|==
literal|null
condition|?
name|iStudentIds
operator|.
name|size
argument_list|()
else|:
name|iLimit
operator|)
return|;
block|}
comment|/**      * Overlaps are allowed for individual reservations.       */
annotation|@
name|Override
specifier|public
name|boolean
name|isAllowOverlap
parameter_list|()
block|{
switch|switch
condition|(
name|getType
argument_list|()
condition|)
block|{
case|case
name|Individual
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|super
operator|.
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|nrStudents
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|iStudentIds
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrStudents
condition|;
name|i
operator|++
control|)
name|iStudentIds
operator|.
name|add
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|iLimit
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|iLimit
operator|==
operator|-
literal|2
condition|)
name|iLimit
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iStudentIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|studentId
range|:
name|iStudentIds
control|)
name|out
operator|.
name|writeLong
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|iLimit
operator|==
literal|null
condition|?
operator|-
literal|2
else|:
name|iLimit
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|XIndividualReservationSerializer
implements|implements
name|Externalizer
argument_list|<
name|XIndividualReservation
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|ObjectOutput
name|output
parameter_list|,
name|XIndividualReservation
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|writeExternal
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|XIndividualReservation
name|readObject
parameter_list|(
name|ObjectInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
return|return
operator|new
name|XIndividualReservation
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

