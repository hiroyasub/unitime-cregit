begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Externalizable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|marshall
operator|.
name|Externalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|marshall
operator|.
name|SerializeWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|SerializeWith
argument_list|(
name|XCredit
operator|.
name|XCreditSerializer
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XCredit
implements|implements
name|Serializable
implements|,
name|Externalizable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iId
decl_stmt|;
specifier|private
name|String
name|iAbbreviation
decl_stmt|;
specifier|private
name|String
name|iText
decl_stmt|;
specifier|private
name|float
name|iMin
init|=
literal|0f
decl_stmt|;
specifier|private
name|float
name|iMax
init|=
literal|0f
decl_stmt|;
specifier|private
specifier|static
name|Pattern
name|sCreditPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(^| )(\\d+\\.?\\d*)([,-]?(\\d+\\.?\\d*))?($| )"
argument_list|)
decl_stmt|;
specifier|public
name|XCredit
parameter_list|()
block|{
block|}
specifier|public
name|XCredit
parameter_list|(
name|CourseCreditUnitConfig
name|credit
parameter_list|)
block|{
name|iId
operator|=
name|credit
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iAbbreviation
operator|=
name|credit
operator|.
name|creditAbbv
argument_list|()
expr_stmt|;
name|iText
operator|=
name|credit
operator|.
name|creditText
argument_list|()
expr_stmt|;
name|iMin
operator|=
name|credit
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
name|iMax
operator|=
name|credit
operator|.
name|getMaxCredit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|XCredit
parameter_list|(
name|String
name|credit
parameter_list|)
block|{
name|int
name|split
init|=
name|credit
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|>=
literal|0
condition|)
block|{
name|iAbbreviation
operator|=
name|credit
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|split
argument_list|)
expr_stmt|;
name|iText
operator|=
name|credit
operator|.
name|substring
argument_list|(
name|split
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iAbbreviation
operator|=
name|credit
expr_stmt|;
name|iText
operator|=
name|credit
expr_stmt|;
block|}
name|Matcher
name|m
init|=
name|sCreditPattern
operator|.
name|matcher
argument_list|(
name|iAbbreviation
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|iMin
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|!=
literal|null
condition|)
name|iMax
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iMax
operator|=
name|iMin
expr_stmt|;
block|}
block|}
specifier|public
name|XCredit
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|String
name|getAbbreviation
parameter_list|()
block|{
return|return
name|iAbbreviation
return|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|iText
return|;
block|}
specifier|public
name|Float
name|getMinCredit
parameter_list|()
block|{
return|return
name|iMin
return|;
block|}
specifier|public
name|Float
name|getMaxCredit
parameter_list|()
block|{
return|return
name|iMax
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|XCredit
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getAbbreviation
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|XCredit
operator|)
name|o
operator|)
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getAbbreviation
argument_list|()
operator|+
literal|"|"
operator|+
name|getText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getAbbreviation
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|iId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|iId
operator|<
literal|0
condition|)
name|iId
operator|=
literal|null
expr_stmt|;
name|iAbbreviation
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iText
operator|=
operator|(
name|String
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|iMin
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|iMax
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|iId
operator|==
literal|null
condition|?
operator|-
literal|1l
else|:
name|iId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iAbbreviation
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|iText
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|iMin
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|iMax
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|XCreditSerializer
implements|implements
name|Externalizer
argument_list|<
name|XCredit
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|ObjectOutput
name|output
parameter_list|,
name|XCredit
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|writeExternal
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|XCredit
name|readObject
parameter_list|(
name|ObjectInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
return|return
operator|new
name|XCredit
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
index|[]
name|test
init|=
operator|new
name|String
index|[]
block|{
literal|"AH"
block|,
literal|"2"
block|,
literal|"1.5"
block|,
literal|"1.4 EQV"
block|,
literal|"1.4,2.5 EQV"
block|,
literal|"M/X 2-3 MS"
block|,
literal|"XX 2,3.5 PhD"
block|,
literal|"VR 1,2"
block|,
literal|"2-4.333 SH"
block|, 		}
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|test
control|)
block|{
name|XCredit
name|c
init|=
operator|new
name|XCredit
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|c
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|": "
operator|+
name|c
operator|.
name|getMinCredit
argument_list|()
operator|+
literal|" .. "
operator|+
name|c
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

