begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|CheckMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|CheckMaster
operator|.
name|Master
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|CheckMaster
argument_list|(
name|Master
operator|.
name|REQUIRED
argument_list|)
specifier|public
class|class
name|ExpireReservationsAction
extends|extends
name|CheckOfferingAction
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Boolean
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|recheck
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|helper
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|helper
operator|.
name|info
argument_list|(
literal|"Checking for expired reservations..."
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|XOffering
argument_list|,
name|List
argument_list|<
name|XReservation
argument_list|>
argument_list|>
name|reservations2expire
init|=
operator|new
name|Hashtable
argument_list|<
name|XOffering
argument_list|,
name|List
argument_list|<
name|XReservation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
name|expiredReservation
range|:
operator|(
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select r from Reservation r where "
operator|+
literal|"r.instructionalOffering.session.uniqueId = :sessionId and "
operator|+
literal|"r.expirationDate is not null and r.expirationDate< current_timestamp()"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|expiredReservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
continue|continue;
name|XReservation
name|reservation
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XReservation
name|r
range|:
name|offering
operator|.
name|getReservations
argument_list|()
control|)
if|if
condition|(
name|r
operator|.
name|getReservationId
argument_list|()
operator|.
name|equals
argument_list|(
name|expiredReservation
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|reservation
operator|=
name|r
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|reservation
operator|==
literal|null
operator|||
name|reservation
operator|.
name|isExpired
argument_list|()
condition|)
continue|continue;
comment|// already expired
name|List
argument_list|<
name|XReservation
argument_list|>
name|reservations
init|=
name|reservations2expire
operator|.
name|get
argument_list|(
name|offering
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservations
operator|==
literal|null
condition|)
block|{
name|reservations
operator|=
operator|new
name|ArrayList
argument_list|<
name|XReservation
argument_list|>
argument_list|()
expr_stmt|;
name|reservations2expire
operator|.
name|put
argument_list|(
name|offering
argument_list|,
name|reservations
argument_list|)
expr_stmt|;
block|}
name|reservations
operator|.
name|add
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|XOffering
argument_list|,
name|List
argument_list|<
name|XReservation
argument_list|>
argument_list|>
name|entry
range|:
name|reservations2expire
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|expireReservation
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|recheck
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|recheck
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|helper
operator|.
name|info
argument_list|(
literal|"Re-checking "
operator|+
name|recheck
operator|.
name|size
argument_list|()
operator|+
literal|" offerings..."
argument_list|)
expr_stmt|;
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|CheckOfferingAction
operator|.
name|class
argument_list|)
operator|.
name|forOfferings
argument_list|(
name|recheck
argument_list|)
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|expireReservation
parameter_list|(
name|XOffering
name|offering
parameter_list|,
name|List
argument_list|<
name|XReservation
argument_list|>
name|reservations
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|recheckOfferingIds
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
comment|// offering is locked -> assuming that the offering will get checked when it is unlocked
if|if
condition|(
name|server
operator|.
name|isOfferingLocked
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
return|return;
name|Lock
name|lock
init|=
name|server
operator|.
name|lockOffering
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|name
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Expire reservations
comment|// no longer needed
for|for
control|(
name|XReservation
name|reservation
range|:
name|reservations
control|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOther
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|RESERVATION
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|debug
argument_list|(
literal|"Expiring reservation "
operator|+
name|reservation
operator|.
name|getReservationId
argument_list|()
operator|+
literal|"..."
argument_list|)
expr_stmt|;
assert|assert
name|reservation
operator|.
name|isExpired
argument_list|()
assert|;
block|}
if|if
condition|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
condition|)
block|{
comment|// Re-check offering
name|checkOffering
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|offering
argument_list|,
name|recheckOfferingIds
argument_list|)
expr_stmt|;
comment|// Update enrollment counters
comment|// updateEnrollmentCounters(server, helper, offering);
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"expire-reservations"
return|;
block|}
block|}
end_class

end_unit

