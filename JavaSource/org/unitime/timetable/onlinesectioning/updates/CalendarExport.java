begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|CourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|CourseDetailsBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|CalendarExport
implements|implements
name|OnlineSectioningAction
argument_list|<
name|String
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iClassIds
decl_stmt|;
specifier|private
name|String
name|iFts
decl_stmt|;
specifier|public
name|CalendarExport
parameter_list|(
name|String
name|classIds
parameter_list|,
name|String
name|fts
parameter_list|)
block|{
name|iClassIds
operator|=
name|classIds
expr_stmt|;
name|iFts
operator|=
name|fts
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
try|try
block|{
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|iClassIds
operator|!=
literal|null
operator|&&
operator|!
name|iClassIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|classId
range|:
name|iClassIds
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|classId
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|String
index|[]
name|courseAndClassId
init|=
name|classId
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseAndClassId
operator|.
name|length
operator|!=
literal|2
condition|)
continue|continue;
name|CourseInfo
name|course
init|=
name|server
operator|.
name|getCourseInfo
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|courseAndClassId
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Section
name|section
init|=
name|server
operator|.
name|getSection
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|courseAndClassId
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
operator|||
name|section
operator|==
literal|null
condition|)
continue|continue;
name|printSection
argument_list|(
name|server
argument_list|,
name|course
argument_list|,
name|section
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iFts
operator|!=
literal|null
operator|&&
operator|!
name|iFts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Date
name|dpFirstDate
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDatePatternFirstDate
argument_list|()
decl_stmt|;
name|BitSet
name|weekCode
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ft
range|:
name|iFts
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|ft
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|String
index|[]
name|daysStartLen
init|=
name|ft
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|daysStartLen
operator|.
name|length
operator|!=
literal|3
condition|)
continue|continue;
name|printFreeTime
argument_list|(
name|dpFirstDate
argument_list|,
name|weekCode
argument_list|,
name|daysStartLen
index|[
literal|0
index|]
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|daysStartLen
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|daysStartLen
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getCalendar
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"BEGIN:VCALENDAR"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"VERSION:2.0"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"CALSCALE:GREGORIAN"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"METHOD:PUBLISH"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"X-WR-CALNAME:UniTime Schedule"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"X-WR-TIMEZONE:"
operator|+
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"PRODID:-//UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|"/Schedule Calendar//NONSGML v1.0//EN"
argument_list|)
expr_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|request
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|enrollment
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|CourseInfo
name|course
init|=
name|server
operator|.
name|getCourseInfo
argument_list|(
name|enrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
name|printSection
argument_list|(
name|server
argument_list|,
name|course
argument_list|,
name|section
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FreeTimeRequest
name|ft
init|=
operator|(
name|FreeTimeRequest
operator|)
name|request
decl_stmt|;
name|printFreeTime
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDatePatternFirstDate
argument_list|()
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|,
name|DayCode
operator|.
name|toString
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
argument_list|,
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"END:VCALENDAR"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|printSection
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|CourseInfo
name|course
parameter_list|,
name|Section
name|section
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|TimeLocation
name|time
init|=
name|section
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|==
literal|null
operator|||
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd"
argument_list|)
decl_stmt|;
name|df
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|tf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HHmmss"
argument_list|)
decl_stmt|;
name|tf
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDatePatternFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|first
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|size
argument_list|()
operator|&&
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
return|return;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|time
operator|.
name|getLength
argument_list|()
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|firstEnd
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|fidx
init|=
name|idx
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDatePatternFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|=
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|time
operator|.
name|getLength
argument_list|()
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|last
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
operator|&&
name|last
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|--
expr_stmt|;
block|}
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
return|return;
name|cal
operator|.
name|setTime
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDatePatternFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|=
name|fidx
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"BEGIN:VEVENT"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"DTSTART:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"DTEND:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|firstEnd
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|firstEnd
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"RRULE:FREQ=WEEKLY;BYDAY="
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DayCode
argument_list|>
name|i
init|=
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|out
operator|.
name|print
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|";WKST=MO;UNTIL="
operator|+
name|df
operator|.
name|format
argument_list|(
name|last
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|last
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|extra
init|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
name|boolean
name|offered
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|offered
condition|)
block|{
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
continue|continue;
block|}
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|tf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|.
name|equals
argument_list|(
name|tf
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|x
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|extra
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|x
operator|.
name|add
argument_list|(
literal|"RECURRENCE-ID:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|x
operator|.
name|add
argument_list|(
literal|"DTSTART:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|time
operator|.
name|getLength
argument_list|()
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|add
argument_list|(
literal|"DTEND:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"EXDATE:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|printMeetingRest
argument_list|(
name|server
argument_list|,
name|course
argument_list|,
name|section
argument_list|,
name|out
argument_list|)
expr_stmt|;
for|for
control|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|x
range|:
name|extra
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"BEGIN:VEVENT"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|x
control|)
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|printMeetingRest
argument_list|(
name|server
argument_list|,
name|course
argument_list|,
name|section
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|void
name|printMeetingRest
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|CourseInfo
name|course
parameter_list|,
name|Section
name|section
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|println
argument_list|(
literal|"UID:"
operator|+
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"SEQUENCE:0"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"SUMMARY:"
operator|+
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|desc
init|=
operator|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|course
operator|.
name|getTitle
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getConsent
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|getConsent
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|desc
operator|+=
literal|" ("
operator|+
name|course
operator|.
name|getConsent
argument_list|()
operator|+
literal|")"
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"DESCRIPTION:"
operator|+
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|loc
init|=
literal|""
decl_stmt|;
for|for
control|(
name|RoomLocation
name|r
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|loc
operator|.
name|isEmpty
argument_list|()
condition|)
name|loc
operator|+=
literal|", "
expr_stmt|;
name|loc
operator|+=
name|r
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"LOCATION:"
operator|+
name|loc
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|URL
name|url
init|=
name|CourseDetailsBackend
operator|.
name|getCourseUrl
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"URL:"
operator|+
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|boolean
name|org
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|instructors
init|=
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|instructor
range|:
name|instructors
control|)
block|{
name|String
index|[]
name|nameEmail
init|=
name|instructor
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
comment|//out.println("CONTACT:" + nameEmail[0] + (nameEmail[1].isEmpty() ? "" : "<" + nameEmail[1]) + ">");
if|if
condition|(
operator|!
name|org
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"ORGANIZER;ROLE=CHAIR;CN=\""
operator|+
name|nameEmail
index|[
literal|0
index|]
operator|+
literal|"\":MAILTO:"
operator|+
operator|(
name|nameEmail
operator|.
name|length
operator|>
literal|1
condition|?
name|nameEmail
index|[
literal|1
index|]
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|org
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"ATTENDEE;ROLE=CHAIR;CN=\""
operator|+
name|nameEmail
index|[
literal|0
index|]
operator|+
literal|"\":MAILTO:"
operator|+
operator|(
name|nameEmail
operator|.
name|length
operator|>
literal|1
condition|?
name|nameEmail
index|[
literal|1
index|]
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"STATUS:CONFIRMED"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"END:VEVENT"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printFreeTime
parameter_list|(
name|Date
name|dpFirstDate
parameter_list|,
name|BitSet
name|weekCode
parameter_list|,
name|String
name|days
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd"
argument_list|)
decl_stmt|;
name|df
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|tf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HHmmss"
argument_list|)
decl_stmt|;
name|tf
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|weekCode
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|first
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|weekCode
operator|.
name|size
argument_list|()
operator|&&
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|weekCode
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|MON
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|TUE
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|WED
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|THU
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|FRI
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SAT
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SUN
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
return|return;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|idx
operator|=
name|weekCode
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|len
argument_list|)
expr_stmt|;
name|Date
name|last
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
operator|&&
name|last
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|weekCode
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|MON
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|TUE
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|WED
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|THU
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|FRI
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SAT
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SUN
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
return|return;
name|out
operator|.
name|println
argument_list|(
literal|"BEGIN:VFREEBUSY"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"DTSTART:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|len
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"DTEND:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|last
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|last
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"COMMENT:Free Time"
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|idx
operator|=
name|weekCode
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
while|while
condition|(
name|idx
operator|<
name|weekCode
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
name|weekCode
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
name|boolean
name|offered
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|MON
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|TUE
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|WED
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|THU
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|FRI
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SAT
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SUN
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|offered
condition|)
block|{
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"FREEBUSY:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|len
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/"
operator|+
name|df
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"END:VFREEBUSY"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"calendar"
return|;
block|}
block|}
end_class

end_unit

