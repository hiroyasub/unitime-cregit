begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XFreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRoom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|CourseDetailsBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|Biweekly
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|ICalendar
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|component
operator|.
name|VEvent
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|component
operator|.
name|VFreeBusy
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|parameter
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Attendee
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|CalendarScale
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|DateEnd
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|DateStart
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|ExceptionDates
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Organizer
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|util
operator|.
name|Recurrence
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|util
operator|.
name|Recurrence
operator|.
name|DayOfWeek
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|util
operator|.
name|Recurrence
operator|.
name|Frequency
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CalendarExport
implements|implements
name|OnlineSectioningAction
argument_list|<
name|String
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iClassIds
decl_stmt|;
specifier|private
name|String
name|iFts
decl_stmt|;
specifier|public
name|CalendarExport
name|withParams
parameter_list|(
name|String
name|classIds
parameter_list|,
name|String
name|fts
parameter_list|)
block|{
name|iClassIds
operator|=
name|classIds
expr_stmt|;
name|iFts
operator|=
name|fts
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
try|try
block|{
name|ICalendar
name|ical
init|=
operator|new
name|ICalendar
argument_list|()
decl_stmt|;
name|ical
operator|.
name|setVersion
argument_list|(
name|Version
operator|.
name|v2_0
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setCalendarScale
argument_list|(
name|CalendarScale
operator|.
name|gregorian
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setMethod
argument_list|(
operator|new
name|Method
argument_list|(
literal|"PUBLISH"
argument_list|)
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setExperimentalProperty
argument_list|(
literal|"X-WR-CALNAME"
argument_list|,
literal|"UniTime Schedule"
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setExperimentalProperty
argument_list|(
literal|"X-WR-TIMEZONE"
argument_list|,
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setProductId
argument_list|(
literal|"-//UniTime LLC/UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" Schedule//EN"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iClassIds
operator|!=
literal|null
operator|&&
operator|!
name|iClassIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|classId
range|:
name|iClassIds
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|classId
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|String
index|[]
name|courseAndClassId
init|=
name|classId
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseAndClassId
operator|.
name|length
operator|!=
literal|2
condition|)
continue|continue;
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|courseAndClassId
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|XOffering
name|offering
init|=
operator|(
name|course
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getOffering
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|XSection
name|section
init|=
operator|(
name|offering
operator|==
literal|null
condition|?
literal|null
else|:
name|offering
operator|.
name|getSection
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|courseAndClassId
index|[
literal|1
index|]
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
operator|||
name|section
operator|==
literal|null
condition|)
continue|continue;
name|printSection
argument_list|(
name|server
argument_list|,
name|course
argument_list|,
name|section
argument_list|,
name|ical
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iFts
operator|!=
literal|null
operator|&&
operator|!
name|iFts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Date
name|dpFirstDate
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDatePatternFirstDate
argument_list|()
decl_stmt|;
name|BitSet
name|weekCode
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ft
range|:
name|iFts
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|ft
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|String
index|[]
name|daysStartLen
init|=
name|ft
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|daysStartLen
operator|.
name|length
operator|!=
literal|3
condition|)
continue|continue;
name|printFreeTime
argument_list|(
name|dpFirstDate
argument_list|,
name|weekCode
argument_list|,
name|daysStartLen
index|[
literal|0
index|]
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|daysStartLen
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|daysStartLen
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|ical
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Biweekly
operator|.
name|write
argument_list|(
name|ical
argument_list|)
operator|.
name|go
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getCalendar
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|XStudent
name|student
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ICalendar
name|ical
init|=
operator|new
name|ICalendar
argument_list|()
decl_stmt|;
name|ical
operator|.
name|setVersion
argument_list|(
name|Version
operator|.
name|v2_0
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setCalendarScale
argument_list|(
name|CalendarScale
operator|.
name|gregorian
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setMethod
argument_list|(
operator|new
name|Method
argument_list|(
literal|"PUBLISH"
argument_list|)
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setExperimentalProperty
argument_list|(
literal|"X-WR-CALNAME"
argument_list|,
literal|"UniTime Schedule"
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setExperimentalProperty
argument_list|(
literal|"X-WR-TIMEZONE"
argument_list|,
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setProductId
argument_list|(
literal|"-//UniTime LLC/UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" Schedule//EN"
argument_list|)
expr_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|request
decl_stmt|;
name|XEnrollment
name|enrollment
init|=
name|cr
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
operator|&&
name|offering
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
name|enrollment
argument_list|)
control|)
name|printSection
argument_list|(
name|server
argument_list|,
name|course
argument_list|,
name|section
argument_list|,
name|ical
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|ft
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|request
decl_stmt|;
name|printFreeTime
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDatePatternFirstDate
argument_list|()
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|,
name|DayCode
operator|.
name|toString
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|,
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|,
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
name|ical
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Biweekly
operator|.
name|write
argument_list|(
name|ical
argument_list|)
operator|.
name|go
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|printSection
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|XCourse
name|course
parameter_list|,
name|XSection
name|section
parameter_list|,
name|ICalendar
name|ical
parameter_list|)
throws|throws
name|IOException
block|{
name|XTime
name|time
init|=
name|section
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|==
literal|null
operator|||
name|time
operator|.
name|getWeeks
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDatePatternFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|time
operator|.
name|getWeeks
argument_list|()
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|time
operator|.
name|getSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|time
operator|.
name|getSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|first
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|time
operator|.
name|getWeeks
argument_list|()
operator|.
name|size
argument_list|()
operator|&&
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeeks
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
return|return;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|time
operator|.
name|getLength
argument_list|()
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|firstEnd
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|fidx
init|=
name|idx
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDatePatternFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|=
name|time
operator|.
name|getWeeks
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|time
operator|.
name|getSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|time
operator|.
name|getSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|time
operator|.
name|getLength
argument_list|()
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|last
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
operator|&&
name|last
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeeks
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|--
expr_stmt|;
block|}
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
return|return;
name|cal
operator|.
name|setTime
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDatePatternFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|=
name|fidx
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|time
operator|.
name|getSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|time
operator|.
name|getSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|VEvent
name|vevent
init|=
operator|new
name|VEvent
argument_list|()
decl_stmt|;
name|DateStart
name|dstart
init|=
operator|new
name|DateStart
argument_list|(
name|first
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dstart
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dstart
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setDateStart
argument_list|(
name|dstart
argument_list|)
expr_stmt|;
name|DateEnd
name|dend
init|=
operator|new
name|DateEnd
argument_list|(
name|firstEnd
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dend
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dend
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setDateEnd
argument_list|(
name|dend
argument_list|)
expr_stmt|;
name|Recurrence
operator|.
name|Builder
name|recur
init|=
operator|new
name|Recurrence
operator|.
name|Builder
argument_list|(
name|Frequency
operator|.
name|WEEKLY
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DayCode
argument_list|>
name|i
init|=
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|time
operator|.
name|getDays
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|i
operator|.
name|next
argument_list|()
condition|)
block|{
case|case
name|MON
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|MONDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|TUE
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|TUESDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|WED
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|WEDNESDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|THU
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|THURSDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|FRI
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|FRIDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|SAT
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|SATURDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUN
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|SUNDAY
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|recur
operator|.
name|workweekStarts
argument_list|(
name|DayOfWeek
operator|.
name|MONDAY
argument_list|)
operator|.
name|until
argument_list|(
name|last
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setRecurrenceRule
argument_list|(
name|recur
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ExceptionDates
name|exdates
init|=
operator|new
name|ExceptionDates
argument_list|(
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|time
operator|.
name|getWeeks
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
name|boolean
name|offered
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDays
argument_list|()
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|offered
condition|)
block|{
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
continue|continue;
block|}
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|time
operator|.
name|getSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|time
operator|.
name|getSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|time
operator|.
name|getWeeks
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|exdates
operator|.
name|addValue
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exdates
operator|.
name|getValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|vevent
operator|.
name|addExceptionDates
argument_list|(
name|exdates
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setUid
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setSequence
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setSummary
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNumber
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getSubpartName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|desc
init|=
operator|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|course
operator|.
name|getTitle
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|getConsentLabel
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|desc
operator|+=
literal|" ("
operator|+
name|course
operator|.
name|getConsentLabel
argument_list|()
operator|+
literal|")"
expr_stmt|;
name|vevent
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|loc
init|=
literal|""
decl_stmt|;
for|for
control|(
name|XRoom
name|r
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|loc
operator|.
name|isEmpty
argument_list|()
condition|)
name|loc
operator|+=
literal|", "
expr_stmt|;
name|loc
operator|+=
name|r
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|vevent
operator|.
name|setLocation
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|URL
name|url
init|=
name|CourseDetailsBackend
operator|.
name|getCourseUrl
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
name|vevent
operator|.
name|setUrl
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getInstructors
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|XInstructor
name|instructor
range|:
name|section
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|vevent
operator|.
name|getOrganizer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Organizer
name|organizer
init|=
operator|new
name|Organizer
argument_list|(
literal|"mailto:"
operator|+
operator|(
name|instructor
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|?
name|instructor
operator|.
name|getEmail
argument_list|()
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|organizer
operator|.
name|setCommonName
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setOrganizer
argument_list|(
name|organizer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Attendee
name|attendee
init|=
operator|new
name|Attendee
argument_list|(
literal|"mailto:"
operator|+
operator|(
name|instructor
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|?
name|instructor
operator|.
name|getEmail
argument_list|()
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|attendee
operator|.
name|setCommonName
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attendee
operator|.
name|setRole
argument_list|(
name|Role
operator|.
name|CHAIR
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|addAttendee
argument_list|(
name|attendee
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|vevent
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|confirmed
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|addEvent
argument_list|(
name|vevent
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printFreeTime
parameter_list|(
name|Date
name|dpFirstDate
parameter_list|,
name|BitSet
name|weekCode
parameter_list|,
name|String
name|days
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|,
name|ICalendar
name|ical
parameter_list|)
throws|throws
name|IOException
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|weekCode
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|first
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|weekCode
operator|.
name|size
argument_list|()
operator|&&
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|weekCode
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|MON
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|TUE
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|WED
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|THU
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|FRI
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SAT
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SUN
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
return|return;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|idx
operator|=
name|weekCode
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|len
argument_list|)
expr_stmt|;
name|Date
name|last
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
operator|&&
name|last
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|weekCode
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|MON
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|TUE
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|WED
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|THU
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|FRI
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SAT
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SUN
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
return|return;
name|VFreeBusy
name|vfree
init|=
operator|new
name|VFreeBusy
argument_list|()
decl_stmt|;
name|DateStart
name|dstart
init|=
operator|new
name|DateStart
argument_list|(
name|first
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dstart
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dstart
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|vfree
operator|.
name|setDateStart
argument_list|(
name|dstart
argument_list|)
expr_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|len
argument_list|)
expr_stmt|;
name|DateEnd
name|dend
init|=
operator|new
name|DateEnd
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dend
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dend
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|vfree
operator|.
name|setDateEnd
argument_list|(
name|dend
argument_list|)
expr_stmt|;
name|vfree
operator|.
name|addComment
argument_list|(
literal|"Free Time"
argument_list|)
expr_stmt|;
name|ical
operator|.
name|addFreeBusy
argument_list|(
name|vfree
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|idx
operator|=
name|weekCode
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
while|while
condition|(
name|idx
operator|<
name|weekCode
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
name|weekCode
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
name|boolean
name|offered
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|MON
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|TUE
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|WED
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|THU
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|FRI
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SAT
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SUN
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|offered
condition|)
block|{
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|vfree
operator|=
operator|new
name|VFreeBusy
argument_list|()
expr_stmt|;
name|dstart
operator|=
operator|new
name|DateStart
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dstart
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dstart
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|vfree
operator|.
name|setDateStart
argument_list|(
name|dstart
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|len
argument_list|)
expr_stmt|;
name|dend
operator|=
operator|new
name|DateEnd
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dend
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dend
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|vfree
operator|.
name|setDateEnd
argument_list|(
name|dend
argument_list|)
expr_stmt|;
name|vfree
operator|.
name|addComment
argument_list|(
literal|"Free Time"
argument_list|)
expr_stmt|;
name|ical
operator|.
name|addFreeBusy
argument_list|(
name|vfree
argument_list|)
expr_stmt|;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"calendar"
return|;
block|}
block|}
end_class

end_unit

