begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|ServerCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|CheckMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|CheckMaster
operator|.
name|Master
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|CheckMaster
argument_list|(
name|Master
operator|.
name|REQUIRED
argument_list|)
specifier|public
class|class
name|NotifyStudentAction
implements|implements
name|OnlineSectioningAction
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iStudentId
decl_stmt|;
specifier|private
name|XOffering
name|iOldOffering
decl_stmt|;
specifier|private
name|XCourseId
name|iOldCourseId
decl_stmt|;
specifier|private
name|XEnrollment
name|iOldEnrollment
decl_stmt|;
specifier|private
name|XStudent
name|iOldStudent
decl_stmt|;
specifier|private
name|String
name|iSourceAction
init|=
literal|"other"
decl_stmt|;
specifier|private
name|XOffering
name|iFailedOffering
decl_stmt|;
specifier|private
name|XCourseId
name|iFailedCourseId
decl_stmt|;
specifier|private
name|XEnrollment
name|iFailedEnrollment
decl_stmt|;
specifier|private
name|XEnrollment
name|iDropEnrollment
decl_stmt|;
specifier|private
name|SectioningException
name|iFailure
decl_stmt|;
specifier|public
name|NotifyStudentAction
name|forStudent
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|iStudentId
operator|=
name|studentId
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|NotifyStudentAction
name|fromAction
parameter_list|(
name|String
name|actionName
parameter_list|)
block|{
name|iSourceAction
operator|=
name|actionName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|NotifyStudentAction
name|oldEnrollment
parameter_list|(
name|XOffering
name|oldOffering
parameter_list|,
name|XCourseId
name|oldCourseId
parameter_list|,
name|XEnrollment
name|oldEnrollment
parameter_list|)
block|{
name|iOldOffering
operator|=
name|oldOffering
expr_stmt|;
name|iOldCourseId
operator|=
name|oldCourseId
expr_stmt|;
name|iOldEnrollment
operator|=
name|oldEnrollment
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|NotifyStudentAction
name|failedEnrollment
parameter_list|(
name|XOffering
name|failedOffering
parameter_list|,
name|XCourseId
name|failedCourseId
parameter_list|,
name|XEnrollment
name|failedEnrollment
parameter_list|,
name|Exception
name|failure
parameter_list|)
block|{
name|iFailedOffering
operator|=
name|failedOffering
expr_stmt|;
name|iFailedCourseId
operator|=
name|failedCourseId
expr_stmt|;
name|iFailedEnrollment
operator|=
name|failedEnrollment
expr_stmt|;
name|iFailure
operator|=
operator|(
name|failure
operator|==
literal|null
condition|?
literal|null
else|:
name|failure
operator|instanceof
name|SectioningException
condition|?
operator|(
name|SectioningException
operator|)
name|failure
else|:
operator|new
name|SectioningException
argument_list|(
name|failure
operator|.
name|getMessage
argument_list|()
argument_list|,
name|failure
argument_list|)
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|NotifyStudentAction
name|dropEnrollment
parameter_list|(
name|XEnrollment
name|dropEnrollment
parameter_list|)
block|{
name|iDropEnrollment
operator|=
name|dropEnrollment
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|NotifyStudentAction
name|oldStudent
parameter_list|(
name|XStudent
name|oldStudent
parameter_list|)
block|{
name|iOldStudent
operator|=
name|oldStudent
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Long
name|getStudentId
parameter_list|()
block|{
return|return
name|iStudentId
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
specifier|final
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iFailedOffering
operator|!=
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"Student "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|student
operator|.
name|getStudentId
argument_list|()
operator|+
literal|") not changed."
decl_stmt|;
name|String
name|courseName
init|=
operator|(
name|iFailedCourseId
operator|!=
literal|null
condition|?
name|iFailedCourseId
operator|.
name|getCourseName
argument_list|()
else|:
name|iFailedEnrollment
operator|==
literal|null
condition|?
name|iFailedOffering
operator|.
name|getName
argument_list|()
else|:
name|iFailedOffering
operator|.
name|getCourse
argument_list|(
name|iFailedEnrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|.
name|getCourseName
argument_list|()
operator|)
decl_stmt|;
name|XCourseRequest
name|request
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
name|XCourseId
name|id
init|=
name|cr
operator|.
name|getCourseIdByOfferingId
argument_list|(
name|iFailedOffering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|(
name|iFailedCourseId
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|iFailedCourseId
argument_list|)
operator|)
operator|&&
operator|(
name|iFailedEnrollment
operator|==
literal|null
operator|||
name|id
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|iFailedEnrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|courseName
operator|=
name|id
operator|.
name|getCourseName
argument_list|()
expr_stmt|;
name|request
operator|=
name|cr
expr_stmt|;
break|break;
block|}
block|}
block|}
name|message
operator|+=
literal|"\n  Failed assignment:"
expr_stmt|;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|iFailedOffering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
operator|||
name|request
operator|==
literal|null
operator|||
name|request
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|message
operator|+=
literal|"\n    "
operator|+
operator|(
name|request
operator|==
literal|null
condition|?
name|iFailedOffering
operator|.
name|toString
argument_list|()
else|:
name|request
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|" NOT ASSIGNED"
expr_stmt|;
block|}
else|else
block|{
name|message
operator|+=
literal|"\n    "
operator|+
name|request
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|!=
literal|null
condition|)
name|message
operator|+=
literal|" (approved by "
operator|+
name|request
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
expr_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
name|request
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
block|{
name|message
operator|+=
literal|"\n      "
operator|+
name|courseName
operator|+
literal|" "
operator|+
name|section
operator|.
name|toString
argument_list|(
name|request
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iFailure
operator|!=
literal|null
condition|)
block|{
name|message
operator|+=
literal|"\n  Error: "
operator|+
name|iFailure
operator|.
name|getMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|iFailure
operator|.
name|hasErrors
argument_list|()
condition|)
for|for
control|(
name|ErrorMessage
name|error
range|:
name|iFailure
operator|.
name|getErrors
argument_list|()
control|)
name|message
operator|+=
literal|"\n    "
operator|+
name|error
expr_stmt|;
block|}
name|helper
operator|.
name|debug
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEmailEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|)
condition|)
block|{
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|StudentEmail
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|fromAction
argument_list|(
name|iSourceAction
argument_list|)
operator|.
name|failedEnrollment
argument_list|(
name|iFailedOffering
argument_list|,
name|iFailedCourseId
argument_list|,
name|iFailedEnrollment
argument_list|,
name|iFailure
argument_list|)
operator|.
name|dropEnrollment
argument_list|(
name|iDropEnrollment
argument_list|)
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
argument_list|,
operator|new
name|ServerCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|error
argument_list|(
literal|"Failed to notify student: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|iOldOffering
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iOldEnrollment
operator|!=
literal|null
operator|&&
operator|!
name|iOldOffering
operator|.
name|getOfferingId
argument_list|()
operator|.
name|equals
argument_list|(
name|iOldEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
name|iOldOffering
operator|=
name|server
operator|.
name|getOffering
argument_list|(
name|iOldEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"Student "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|student
operator|.
name|getStudentId
argument_list|()
operator|+
literal|") changed."
decl_stmt|;
name|String
name|courseName
init|=
operator|(
name|iOldCourseId
operator|!=
literal|null
condition|?
name|iOldCourseId
operator|.
name|getCourseName
argument_list|()
else|:
name|iOldEnrollment
operator|==
literal|null
condition|?
name|iOldOffering
operator|.
name|getName
argument_list|()
else|:
name|iOldOffering
operator|.
name|getCourse
argument_list|(
name|iOldEnrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|.
name|getCourseName
argument_list|()
operator|)
decl_stmt|;
name|XCourseRequest
name|request
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
name|XCourseId
name|id
init|=
name|cr
operator|.
name|getCourseIdByOfferingId
argument_list|(
name|iOldOffering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|(
name|iOldCourseId
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|iOldCourseId
argument_list|)
operator|)
operator|&&
operator|(
name|iOldEnrollment
operator|==
literal|null
operator|||
name|id
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|iOldEnrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|courseName
operator|=
name|id
operator|.
name|getCourseName
argument_list|()
expr_stmt|;
name|request
operator|=
name|cr
expr_stmt|;
break|break;
block|}
block|}
block|}
name|message
operator|+=
literal|"\n  Previous assignment:"
expr_stmt|;
if|if
condition|(
name|iOldEnrollment
operator|!=
literal|null
condition|)
block|{
name|message
operator|+=
literal|"\n    "
operator|+
operator|(
name|request
operator|==
literal|null
condition|?
name|iOldOffering
operator|.
name|toString
argument_list|()
else|:
name|request
operator|.
name|toString
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|iOldEnrollment
operator|.
name|getApproval
argument_list|()
operator|!=
literal|null
condition|)
name|message
operator|+=
literal|" (approved by "
operator|+
name|iOldEnrollment
operator|.
name|getApproval
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
expr_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|iOldOffering
operator|.
name|getSections
argument_list|(
name|iOldEnrollment
argument_list|)
control|)
name|message
operator|+=
literal|"\n      "
operator|+
name|courseName
operator|+
literal|" "
operator|+
name|section
operator|.
name|toString
argument_list|(
name|iOldEnrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|+=
literal|"\n    "
operator|+
operator|(
name|request
operator|==
literal|null
condition|?
name|iOldOffering
operator|.
name|toString
argument_list|()
else|:
name|request
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|" NOT ASSIGNED"
expr_stmt|;
block|}
name|message
operator|+=
literal|"\n  New assignment:"
expr_stmt|;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|iOldOffering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
operator|||
name|request
operator|==
literal|null
operator|||
name|request
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|message
operator|+=
literal|"\n    "
operator|+
operator|(
name|request
operator|==
literal|null
condition|?
name|iOldOffering
operator|.
name|toString
argument_list|()
else|:
name|request
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|" NOT ASSIGNED"
expr_stmt|;
block|}
else|else
block|{
name|message
operator|+=
literal|"\n    "
operator|+
name|request
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|!=
literal|null
condition|)
name|message
operator|+=
literal|" (approved by "
operator|+
name|request
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
expr_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
name|request
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
block|{
name|message
operator|+=
literal|"\n      "
operator|+
name|courseName
operator|+
literal|" "
operator|+
name|section
operator|.
name|toString
argument_list|(
name|request
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|helper
operator|.
name|debug
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEmailEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|)
condition|)
block|{
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|StudentEmail
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|fromAction
argument_list|(
name|iSourceAction
argument_list|)
operator|.
name|oldEnrollment
argument_list|(
name|iOldOffering
argument_list|,
name|iOldCourseId
argument_list|,
name|iOldEnrollment
argument_list|)
operator|.
name|dropEnrollment
argument_list|(
name|iDropEnrollment
argument_list|)
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
argument_list|,
operator|new
name|ServerCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|error
argument_list|(
literal|"Failed to notify student: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
name|String
name|message
init|=
literal|"Student "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|student
operator|.
name|getStudentId
argument_list|()
operator|+
literal|") changed."
decl_stmt|;
if|if
condition|(
name|iOldStudent
operator|!=
literal|null
condition|)
block|{
name|message
operator|+=
literal|"\n  Previous schedule:"
expr_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|iOldStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|message
operator|+=
literal|"\n    "
operator|+
name|r
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|)
name|message
operator|+=
literal|" NOT ASSIGNED"
expr_stmt|;
else|else
block|{
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|!=
literal|null
condition|)
name|message
operator|+=
literal|" (approved by "
operator|+
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
expr_stmt|;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
block|{
name|XCourse
name|course
init|=
name|offering
operator|.
name|getCourse
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
name|message
operator|+=
literal|"\n      "
operator|+
operator|(
name|course
operator|==
literal|null
condition|?
name|offering
operator|.
name|getName
argument_list|()
else|:
name|course
operator|.
name|getCourseName
argument_list|()
operator|)
operator|+
literal|" "
operator|+
name|section
operator|.
name|toString
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|message
operator|+=
literal|"\n  New schedule:"
expr_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|message
operator|+=
literal|"\n    "
operator|+
name|r
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|)
name|message
operator|+=
literal|" NOT ASSIGNED"
expr_stmt|;
else|else
block|{
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|!=
literal|null
condition|)
name|message
operator|+=
literal|" (approved by "
operator|+
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
expr_stmt|;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
block|{
name|XCourse
name|course
init|=
name|offering
operator|.
name|getCourse
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
name|message
operator|+=
literal|"\n      "
operator|+
operator|(
name|course
operator|==
literal|null
condition|?
name|offering
operator|.
name|getName
argument_list|()
else|:
name|course
operator|.
name|getCourseName
argument_list|()
operator|)
operator|+
literal|" "
operator|+
name|section
operator|.
name|toString
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|helper
operator|.
name|debug
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEmailEnabled
argument_list|(
name|server
argument_list|,
name|helper
argument_list|)
condition|)
block|{
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|StudentEmail
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|fromAction
argument_list|(
name|iSourceAction
argument_list|)
operator|.
name|oldStudent
argument_list|(
name|iOldStudent
argument_list|)
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
argument_list|,
operator|new
name|ServerCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|error
argument_list|(
literal|"Failed to notify student: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|boolean
name|isEmailEnabled
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
specifier|final
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|String
name|override
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingEmailConfirmationOverride
operator|.
name|value
argument_list|(
name|iSourceAction
argument_list|)
decl_stmt|;
if|if
condition|(
name|override
operator|!=
literal|null
condition|)
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|override
argument_list|)
return|;
return|return
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
operator|&&
name|ApplicationProperty
operator|.
name|OnlineSchedulingEmailConfirmation
operator|.
name|isTrue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"notify"
return|;
block|}
block|}
end_class

end_unit

