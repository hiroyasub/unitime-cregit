begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2011 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BasicStroke
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|RenderingHints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Stroke
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Email
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XFreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRoom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|CheckMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|CheckMaster
operator|.
name|Master
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
operator|.
name|Format
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|CheckMaster
argument_list|(
name|Master
operator|.
name|REQUIRED
argument_list|)
specifier|public
class|class
name|StudentEmail
implements|implements
name|OnlineSectioningAction
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningConstants
name|CONST
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|GwtMessages
name|GWT
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Date
name|iTimeStamp
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Format
argument_list|<
name|Date
argument_list|>
name|sTimeStampFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_TIME_STAMP
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Format
argument_list|<
name|Date
argument_list|>
name|sConsentApprovalDateFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_REQUEST
argument_list|)
decl_stmt|;
specifier|private
name|String
name|iSubject
init|=
name|MSG
operator|.
name|emailDeafultSubject
argument_list|()
decl_stmt|,
name|iSubjectExt
init|=
literal|null
decl_stmt|,
name|iMessage
init|=
literal|null
decl_stmt|,
name|iCC
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|sLastMessage
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|byte
index|[]
name|iTimetableImage
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iStudentId
decl_stmt|;
specifier|private
name|XOffering
name|iOldOffering
decl_stmt|;
specifier|private
name|XEnrollment
name|iOldEnrollment
decl_stmt|;
specifier|private
name|XStudent
name|iOldStudent
decl_stmt|;
specifier|private
name|XStudent
name|iStudent
decl_stmt|;
specifier|public
name|StudentEmail
name|forStudent
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|iStudentId
operator|=
name|studentId
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|StudentEmail
name|oldEnrollment
parameter_list|(
name|XOffering
name|oldOffering
parameter_list|,
name|XEnrollment
name|oldEnrollment
parameter_list|)
block|{
name|iOldOffering
operator|=
name|oldOffering
expr_stmt|;
name|iOldEnrollment
operator|=
name|oldEnrollment
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|StudentEmail
name|oldStudent
parameter_list|(
name|XStudent
name|oldStudent
parameter_list|)
block|{
name|iOldStudent
operator|=
name|oldStudent
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Long
name|getStudentId
parameter_list|()
block|{
return|return
name|iStudentId
return|;
block|}
specifier|public
name|Date
name|getTimeStamp
parameter_list|()
block|{
return|return
name|iTimeStamp
return|;
block|}
specifier|private
name|String
name|getSubject
parameter_list|()
block|{
return|return
name|iSubject
return|;
block|}
specifier|private
name|void
name|setSubject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
name|iSubject
operator|=
name|subject
expr_stmt|;
block|}
specifier|public
name|String
name|getEmailSubject
parameter_list|()
block|{
return|return
name|iSubjectExt
return|;
block|}
specifier|public
name|void
name|setEmailSubject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
name|iSubjectExt
operator|=
name|subject
expr_stmt|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|iMessage
return|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iMessage
operator|=
name|message
expr_stmt|;
block|}
specifier|public
name|String
name|getCC
parameter_list|()
block|{
return|return
name|iCC
return|;
block|}
specifier|public
name|void
name|setCC
parameter_list|(
name|String
name|cc
parameter_list|)
block|{
name|iCC
operator|=
name|cc
expr_stmt|;
block|}
specifier|public
name|XEnrollment
name|getOldEnrollment
parameter_list|()
block|{
return|return
name|iOldEnrollment
return|;
block|}
specifier|public
name|XOffering
name|getOldOffering
parameter_list|()
block|{
return|return
name|iOldOffering
return|;
block|}
specifier|public
name|XStudent
name|getOldStudent
parameter_list|()
block|{
return|return
name|iOldStudent
return|;
block|}
specifier|public
name|XStudent
name|getStudent
parameter_list|()
block|{
return|return
name|iStudent
return|;
block|}
specifier|public
name|void
name|setStudent
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
name|iStudent
operator|=
name|student
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|execute
parameter_list|(
specifier|final
name|OnlineSectioningServer
name|server
parameter_list|,
specifier|final
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|server
operator|.
name|lockStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|helper
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|action
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getOldEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|enrollment
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|enrollment
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|PREVIOUS
argument_list|)
expr_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|getOldOffering
argument_list|()
operator|.
name|getSections
argument_list|(
name|getOldEnrollment
argument_list|()
argument_list|)
control|)
name|enrollment
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
name|getOldEnrollment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addEnrollment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|getOldStudent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|enrollment
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|enrollment
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|PREVIOUS
argument_list|)
expr_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|getOldStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|XEnrollment
name|e
init|=
operator|(
name|r
operator|instanceof
name|XCourseRequest
condition|?
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|server
operator|.
name|getOffering
argument_list|(
name|e
operator|.
name|getOfferingId
argument_list|()
argument_list|)
operator|.
name|getSections
argument_list|(
name|e
argument_list|)
control|)
name|enrollment
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|action
operator|.
name|getStudentBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|enrollment
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|enrollment
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|STORED
argument_list|)
expr_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|action
operator|.
name|addRequest
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|XEnrollment
name|e
init|=
operator|(
name|r
operator|instanceof
name|XCourseRequest
condition|?
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|server
operator|.
name|getOffering
argument_list|(
name|e
operator|.
name|getOfferingId
argument_list|()
argument_list|)
operator|.
name|getSections
argument_list|(
name|e
argument_list|)
control|)
name|enrollment
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|dbStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbStudent
operator|!=
literal|null
operator|&&
name|dbStudent
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|dbStudent
operator|.
name|getEmail
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|action
operator|.
name|getStudentBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbStudent
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|emailEnabled
init|=
literal|true
decl_stmt|;
name|StudentSectioningStatus
name|status
init|=
name|dbStudent
operator|.
name|getSectioningStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
name|status
operator|=
name|dbStudent
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
operator|!
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|email
argument_list|)
condition|)
block|{
name|emailEnabled
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|emailEnabled
condition|)
block|{
specifier|final
name|String
name|html
init|=
name|generateMessage
argument_list|(
name|dbStudent
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|html
operator|!=
literal|null
condition|)
block|{
name|Email
name|email
init|=
name|Email
operator|.
name|createEmail
argument_list|()
decl_stmt|;
name|email
operator|.
name|addRecipient
argument_list|(
name|dbStudent
operator|.
name|getEmail
argument_list|()
argument_list|,
name|dbStudent
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFirstMiddle
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getCC
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getCC
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|helper
operator|.
name|logOption
argument_list|(
literal|"cc"
argument_list|,
name|getCC
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|getCC
argument_list|()
argument_list|,
literal|",;"
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|email
operator|.
name|addRecipientCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getEmailSubject
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getEmailSubject
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|email
operator|.
name|setSubject
argument_list|(
name|getEmailSubject
argument_list|()
operator|.
name|replace
argument_list|(
literal|"%session%"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|logOption
argument_list|(
literal|"subject"
argument_list|,
name|getEmailSubject
argument_list|()
operator|.
name|replace
argument_list|(
literal|"%session%"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|email
operator|.
name|setSubject
argument_list|(
name|getSubject
argument_list|()
operator|.
name|replace
argument_list|(
literal|"%session%"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getMessage
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|helper
operator|.
name|logOption
argument_list|(
literal|"message"
argument_list|,
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
operator|&&
name|getOldEnrollment
argument_list|()
operator|==
literal|null
operator|&&
name|getOldStudent
argument_list|()
operator|==
literal|null
condition|)
block|{
name|TimetableManager
name|manager
init|=
operator|(
name|TimetableManager
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from TimetableManager where externalUniqueId = :id"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"id"
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|!=
literal|null
operator|&&
name|manager
operator|.
name|getEmailAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|email
operator|.
name|setReplyTo
argument_list|(
name|manager
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|manager
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|logOption
argument_list|(
literal|"reply-to"
argument_list|,
name|manager
operator|.
name|getName
argument_list|()
operator|+
literal|"<"
operator|+
name|manager
operator|.
name|getEmailAddress
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|generateTimetable
argument_list|(
name|out
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|email
operator|.
name|addAttachement
argument_list|(
operator|new
name|DataSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No output stream."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"message.html"
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|html
operator|.
name|replace
argument_list|(
literal|"<img src='cid:timetable.png' border='0' alt='Timetable Image'/>"
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|"text/html; charset=UTF-8"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTimetableImage
operator|!=
literal|null
condition|)
block|{
name|email
operator|.
name|addAttachement
argument_list|(
operator|new
name|DataSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No output stream."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"timetable.png"
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|iTimetableImage
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|"image/png"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|String
name|calendar
init|=
name|CalendarExport
operator|.
name|getCalendar
argument_list|(
name|server
argument_list|,
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
name|calendar
operator|!=
literal|null
condition|)
name|email
operator|.
name|addAttachement
argument_list|(
operator|new
name|DataSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No output stream."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"timetable.ics"
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|calendar
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|"text/calendar; charset=UTF-8"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"Unable to create calendar for student "
operator|+
name|student
operator|.
name|getStudentId
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|lastMessageId
init|=
name|sLastMessage
operator|.
name|get
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastMessageId
operator|!=
literal|null
condition|)
name|email
operator|.
name|setInReplyTo
argument_list|(
name|lastMessageId
argument_list|)
expr_stmt|;
name|email
operator|.
name|setHTML
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|helper
operator|.
name|logOption
argument_list|(
literal|"email"
argument_list|,
name|html
operator|.
name|replace
argument_list|(
literal|"<img src='cid:timetable.png' border='0' alt='Timetable Image'/>"
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|email
operator|.
name|send
argument_list|()
expr_stmt|;
name|String
name|messageId
init|=
name|email
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageId
operator|!=
literal|null
condition|)
name|sLastMessage
operator|.
name|put
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|messageId
argument_list|)
expr_stmt|;
name|Date
name|ts
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|dbStudent
operator|.
name|setScheduleEmailedDate
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|student
operator|.
name|setEmailTimeStamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|dbStudent
argument_list|)
expr_stmt|;
name|server
operator|.
name|update
argument_list|(
name|student
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|helper
operator|.
name|debug
argument_list|(
literal|"Email notification failed to generate for student "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|helper
operator|.
name|debug
argument_list|(
literal|"Email notification is disabled for student "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|helper
operator|.
name|debug
argument_list|(
literal|"Student "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" has no email address on file."
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"student-email"
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|sColor1
init|=
operator|new
name|String
index|[]
block|{
literal|"2952A3"
block|,
comment|//"A32929",
literal|"B1365F"
block|,
literal|"7A367A"
block|,
literal|"5229A3"
block|,
literal|"29527A"
block|,
literal|"1B887A"
block|,
literal|"28754E"
block|,
literal|"0D7813"
block|,
literal|"528800"
block|,
literal|"88880E"
block|,
literal|"AB8B00"
block|,
literal|"BE6D00"
block|,
literal|"B1440E"
block|,
literal|"865A5A"
block|,
literal|"705770"
block|,
literal|"4E5D6C"
block|,
literal|"5A6986"
block|,
literal|"4A716C"
block|,
literal|"6E6E41"
block|,
literal|"8D6F47"
block|}
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|sColor2
init|=
operator|new
name|String
index|[]
block|{
literal|"668CD9"
block|,
comment|//"D96666",
literal|"E67399"
block|,
literal|"B373B3"
block|,
literal|"8C66D9"
block|,
literal|"668CB3"
block|,
literal|"59BFB3"
block|,
literal|"65AD89"
block|,
literal|"4CB052"
block|,
literal|"8CBF40"
block|,
literal|"BFBF4D"
block|,
literal|"E0C240"
block|,
literal|"F2A640"
block|,
literal|"E6804D"
block|,
literal|"BE9494"
block|,
literal|"A992A9"
block|,
literal|"8997A5"
block|,
literal|"94A2bE"
block|,
literal|"85AAA5"
block|,
literal|"A7A77D"
block|,
literal|"C4A883"
block|}
decl_stmt|;
specifier|private
name|String
name|generateMessage
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<html>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<head>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<meta http-equiv='Content-Type' content='text/html; charset=UTF-8'>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getEmailSubject
argument_list|()
operator|==
literal|null
operator|||
name|getEmailSubject
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<title>"
operator|+
name|MSG
operator|.
name|emailDeafultTitle
argument_list|()
operator|+
literal|"</title>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<title>"
operator|+
name|getEmailSubject
argument_list|()
operator|.
name|replace
argument_list|(
literal|"%session%"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"</title>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</head>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<body style=\"font-family: sans-serif, verdana, arial;\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<table style=\"border: 1px solid #9CB0CE; padding: 5px; margin-top: 10px; min-width: 800px;\" align=\"center\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td><table width=\"100%\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td rowspan=\"2\"><img src=\"http://www.unitime.org/include/unitime.png\" border=\"0\" height=\"100px\"/></td>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getEmailSubject
argument_list|()
operator|==
literal|null
operator|||
name|getEmailSubject
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<td colspan=\"2\" style=\"font-size: x-large; font-weight: bold; color: #333333; text-align: right; padding: 20px 30px 10px 10px;\">"
operator|+
name|MSG
operator|.
name|emailDeafultTitle
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<td colspan=\"2\" style=\"font-size: x-large; font-weight: bold; color: #333333; text-align: right; padding: 20px 30px 10px 10px;\">"
operator|+
name|getEmailSubject
argument_list|()
operator|.
name|replace
argument_list|(
literal|"%session%"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style=\"color: #333333; text-align: right; vertical-align: top; padding: 10px 5px 5px 5px;\">"
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFirstMiddle
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style=\"color: #333333; text-align: right; vertical-align: top; padding: 10px 5px 5px 5px;\">"
operator|+
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getTerm
argument_list|()
operator|+
literal|" "
operator|+
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getYear
argument_list|()
operator|+
literal|" ("
operator|+
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getCampus
argument_list|()
operator|+
literal|")</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</table></td></tr>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getMessage
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td "
operator|+
literal|"style=\"width: 100%; border-bottom: 1px solid #9CB0CE; padding-top: 5px; font-size: large; font-weight: bold; color: black; text-align: left;\">"
operator|+
name|MSG
operator|.
name|emailMessage
argument_list|()
operator|+
literal|"</td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|getMessage
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
block|}
name|generateChange
argument_list|(
name|out
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td "
operator|+
literal|"style=\"width: 100%; border-bottom: 1px solid #9CB0CE; padding-top: 5px; font-size: large; font-weight: bold; color: black; text-align: left;\">"
operator|+
name|MSG
operator|.
name|emailClassList
argument_list|()
operator|+
literal|"</td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td>"
argument_list|)
expr_stmt|;
name|generateListOfClasses
argument_list|(
name|out
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td "
operator|+
literal|"style=\"width: 100%; border-bottom: 1px solid #9CB0CE; padding-top: 5px; font-size: large; font-weight: bold; color: black; text-align: left;\">"
operator|+
name|MSG
operator|.
name|emailTimetable
argument_list|()
operator|+
literal|"</td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td>"
argument_list|)
expr_stmt|;
try|try
block|{
name|iTimetableImage
operator|=
name|generateTimetableImage
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|error
argument_list|(
literal|"Unable to create PDF timetable: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|generateTimetable
argument_list|(
name|out
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iTimetableImage
operator|!=
literal|null
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"<img src='cid:timetable.png' border='0' alt='Timetable Image'/>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
operator|&&
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
condition|)
block|{
if|if
condition|(
name|getOldEnrollment
argument_list|()
operator|==
literal|null
operator|&&
name|getOldStudent
argument_list|()
operator|==
literal|null
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td>"
operator|+
name|MSG
operator|.
name|emailSentBy
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"</td></tr>"
argument_list|)
expr_stmt|;
else|else
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td>"
operator|+
name|MSG
operator|.
name|emailChangesMadeBy
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"</td></tr>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<table style=\"width: 800px; margin-top: -3px;\" align=\"center\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td width=\"33%\" align=\"left\" style=\"font-size: 9pt; vertical-align: top; font-style: italic; color: #9CB0CE; white-space: nowrap;\">"
operator|+
name|GWT
operator|.
name|pageVersion
argument_list|(
name|Constants
operator|.
name|getVersion
argument_list|()
argument_list|,
name|Constants
operator|.
name|getReleaseDate
argument_list|()
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td width=\"34%\" align=\"center\" style=\"font-size: 9pt; vertical-align: top; font-style: italic; color: #9CB0CE; white-space: nowrap;\">"
operator|+
name|GWT
operator|.
name|pageCopyright
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td width=\"33%\" align=\"right\" style=\"font-size: 9pt; vertical-align: top; font-style: italic; color: #9CB0CE; white-space: nowrap;\">"
operator|+
name|sTimeStampFormat
operator|.
name|format
argument_list|(
name|getTimeStamp
argument_list|()
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</body>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</html>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|buffer
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|generateListOfClassesHeader
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<table width=\"100%\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|String
name|style
init|=
literal|"white-space: nowrap; font-weight: bold; padding-top: 5px;"
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style=\""
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|MSG
operator|.
name|colSubject
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style=\""
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|MSG
operator|.
name|colCourse
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style=\""
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|MSG
operator|.
name|colSubpart
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style=\""
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|MSG
operator|.
name|colClass
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style=\""
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|MSG
operator|.
name|colDays
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style=\""
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|MSG
operator|.
name|colStart
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style=\""
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|MSG
operator|.
name|colEnd
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style=\""
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|MSG
operator|.
name|colDate
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style=\""
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|MSG
operator|.
name|colRoom
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style=\""
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|MSG
operator|.
name|colInstructor
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style=\""
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|MSG
operator|.
name|colParent
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style=\""
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|MSG
operator|.
name|colNote
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style=\""
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|MSG
operator|.
name|colCredit
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateListOfClassesFooter
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|boolean
name|link
parameter_list|)
block|{
if|if
condition|(
name|link
condition|)
block|{
name|String
name|url
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td colspan=\"12\" style=\"font-size: 9pt; font-style: italic; color: #9CB0CE; text-align: right; margin-top: -2px; white-space: nowrap;\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"		"
operator|+
name|MSG
operator|.
name|emailLinkToUniTime
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|XSection
name|a
parameter_list|,
name|XSection
name|b
parameter_list|)
block|{
return|return
name|ToolBox
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|b
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getTime
argument_list|()
argument_list|,
name|b
operator|.
name|getTime
argument_list|()
argument_list|)
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getRooms
argument_list|()
argument_list|,
name|b
operator|.
name|getRooms
argument_list|()
argument_list|)
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getInstructors
argument_list|()
argument_list|,
name|b
operator|.
name|getInstructors
argument_list|()
argument_list|)
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getParentId
argument_list|()
argument_list|,
name|b
operator|.
name|getParentId
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|time
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|int
name|h
init|=
name|slot
operator|/
literal|12
decl_stmt|;
name|int
name|m
init|=
literal|5
operator|*
operator|(
name|slot
operator|%
literal|12
operator|)
decl_stmt|;
if|if
condition|(
name|CONST
operator|.
name|useAmPm
argument_list|()
condition|)
return|return
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|h
operator|==
literal|24
condition|?
literal|"a"
else|:
name|h
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
else|else
return|return
name|h
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
return|;
block|}
specifier|private
name|String
name|startTime
parameter_list|(
name|XTime
name|time
parameter_list|)
block|{
return|return
name|time
argument_list|(
name|time
operator|.
name|getSlot
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|endTime
parameter_list|(
name|XTime
name|time
parameter_list|)
block|{
return|return
name|time
argument_list|(
name|time
operator|.
name|getSlot
argument_list|()
operator|+
name|time
operator|.
name|getLength
argument_list|()
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|generateListOfClassesLine
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|XOffering
name|offering
parameter_list|,
name|XCourse
name|course
parameter_list|,
name|XSection
name|section
parameter_list|,
name|String
name|style
parameter_list|,
name|String
name|consent
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|course
operator|.
name|getCourseNumber
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|section
operator|.
name|getSubpartName
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\" colspan=\"4\">"
operator|+
name|MSG
operator|.
name|emailArrangeHours
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|DayCode
operator|.
name|toString
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|startTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|endTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
operator|||
name|section
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">&nbsp;</td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|rooms
init|=
literal|""
decl_stmt|;
for|for
control|(
name|XRoom
name|room
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|rooms
operator|.
name|isEmpty
argument_list|()
condition|)
name|rooms
operator|+=
literal|", "
expr_stmt|;
name|rooms
operator|+=
name|room
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|rooms
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">&nbsp;</td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|html
init|=
literal|""
decl_stmt|;
for|for
control|(
name|XInstructor
name|instructor
range|:
name|section
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|html
operator|.
name|isEmpty
argument_list|()
condition|)
name|html
operator|+=
literal|", "
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|)
block|{
name|html
operator|+=
name|instructor
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|html
operator|+=
literal|"<a href='mailto:"
operator|+
name|instructor
operator|.
name|getEmail
argument_list|()
operator|+
literal|"' style=\"color: inherit; background-color : transparent; text-decoration: none;\">"
operator|+
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"</a>"
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \""
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|html
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
name|XSection
name|parent
init|=
operator|(
name|section
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|offering
operator|.
name|getSection
argument_list|(
name|section
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \""
operator|+
name|style
operator|+
literal|"\">"
operator|+
operator|(
name|parent
operator|==
literal|null
condition|?
name|consent
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|consent
else|:
name|parent
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|String
name|note
init|=
name|course
operator|.
name|getNote
argument_list|()
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
condition|)
name|note
operator|=
operator|(
name|note
operator|==
literal|null
operator|||
name|note
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|note
operator|+
literal|"<br>"
operator|)
operator|+
name|section
operator|.
name|getNote
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \""
operator|+
name|style
operator|+
literal|"\">"
operator|+
operator|(
name|note
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|note
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
operator|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|XSubpart
name|subpart
init|=
name|offering
operator|.
name|getSubpart
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \""
operator|+
name|style
operator|+
literal|"\" title= \""
operator|+
name|creditText
argument_list|(
name|subpart
argument_list|)
operator|+
literal|"\">"
operator|+
name|creditAbbv
argument_list|(
name|subpart
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|diff
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|a
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|(
name|b
operator|==
literal|null
operator|||
name|b
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"<span style='text-decoration: none;'>&nbsp;</span>"
else|:
name|b
operator|)
return|;
if|if
condition|(
name|b
operator|==
literal|null
operator|||
name|b
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|"<span style='text-decoration: line-through;'>"
operator|+
name|a
operator|+
literal|"</span>"
return|;
if|if
condition|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
condition|)
return|return
name|a
return|;
return|return
literal|"<span style='text-decoration: line-through;'>"
operator|+
name|a
operator|+
literal|"</span>&rarr; "
operator|+
name|b
return|;
block|}
specifier|private
name|void
name|generateListOfClassesDiff
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|XOffering
name|oldOffering
parameter_list|,
name|XOffering
name|offering
parameter_list|,
name|XCourse
name|course
parameter_list|,
name|XSection
name|old
parameter_list|,
name|XSection
name|section
parameter_list|,
name|String
name|style
parameter_list|,
name|String
name|consent
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|course
operator|.
name|getCourseNumber
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|section
operator|.
name|getSubpartName
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|diff
argument_list|(
name|old
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\" colspan=\"4\">"
operator|+
name|diff
argument_list|(
name|old
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
name|MSG
operator|.
name|emailArrangeHours
argument_list|()
else|:
name|DayCode
operator|.
name|toString
argument_list|(
name|old
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|startTime
argument_list|(
name|old
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
name|MSG
operator|.
name|emailArrangeHours
argument_list|()
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|diff
argument_list|(
name|old
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|DayCode
operator|.
name|toString
argument_list|(
name|old
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|,
name|DayCode
operator|.
name|toString
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|diff
argument_list|(
name|old
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|startTime
argument_list|(
name|old
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
name|startTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|diff
argument_list|(
name|old
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|endTime
argument_list|(
name|old
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
name|endTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|diff
argument_list|(
name|old
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|old
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
name|String
name|oldRooms
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|old
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|old
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|XRoom
name|room
range|:
name|old
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|oldRooms
operator|.
name|isEmpty
argument_list|()
condition|)
name|oldRooms
operator|+=
literal|", "
expr_stmt|;
name|oldRooms
operator|+=
name|room
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|rooms
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|XRoom
name|room
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|rooms
operator|.
name|isEmpty
argument_list|()
condition|)
name|rooms
operator|+=
literal|", "
expr_stmt|;
name|rooms
operator|+=
name|room
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|diff
argument_list|(
name|oldRooms
argument_list|,
name|rooms
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|String
name|oldInstructors
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|old
operator|.
name|getInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|XInstructor
name|instructor
range|:
name|old
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|oldInstructors
operator|.
name|isEmpty
argument_list|()
condition|)
name|oldInstructors
operator|+=
literal|", "
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|)
block|{
name|oldInstructors
operator|+=
name|instructor
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|oldInstructors
operator|+=
literal|"<a href='mailto:"
operator|+
name|instructor
operator|.
name|getEmail
argument_list|()
operator|+
literal|"' style=\"color: inherit; background-color : transparent; text-decoration: none;\">"
operator|+
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"</a>"
expr_stmt|;
block|}
block|}
block|}
name|String
name|instructors
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|section
operator|.
name|getInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|XInstructor
name|instructor
range|:
name|section
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|instructors
operator|.
name|isEmpty
argument_list|()
condition|)
name|instructors
operator|+=
literal|", "
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|)
block|{
name|instructors
operator|+=
name|instructor
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|instructors
operator|+=
literal|"<a href='mailto:"
operator|+
name|instructor
operator|.
name|getEmail
argument_list|()
operator|+
literal|"' style=\"color: inherit; background-color : transparent; text-decoration: none;\">"
operator|+
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"</a>"
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|diff
argument_list|(
name|oldInstructors
argument_list|,
name|instructors
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|XSection
name|oldParent
init|=
operator|(
name|old
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|oldOffering
operator|.
name|getSection
argument_list|(
name|old
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|XSection
name|parent
init|=
operator|(
name|section
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|offering
operator|.
name|getSection
argument_list|(
name|section
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \""
operator|+
name|style
operator|+
literal|"\">"
operator|+
operator|(
name|oldParent
operator|==
literal|null
operator|&&
name|parent
operator|==
literal|null
condition|?
name|consent
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|consent
else|:
name|diff
argument_list|(
name|oldParent
operator|==
literal|null
condition|?
literal|null
else|:
name|oldParent
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|parent
operator|==
literal|null
condition|?
literal|null
else|:
name|parent
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
operator|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \""
operator|+
name|style
operator|+
literal|"\">"
operator|+
operator|(
name|course
operator|.
name|getNote
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|course
operator|.
name|getNote
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
operator|+
literal|"<br>"
operator|)
operator|+
name|diff
argument_list|(
name|old
operator|.
name|getNote
argument_list|()
argument_list|,
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|XSubpart
name|oldSubpart
init|=
name|oldOffering
operator|.
name|getSubpart
argument_list|(
name|old
operator|.
name|getSectionId
argument_list|()
argument_list|)
decl_stmt|;
name|XSubpart
name|subpart
init|=
name|offering
operator|.
name|getSubpart
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \""
operator|+
name|style
operator|+
literal|"\" title= \""
operator|+
name|creditText
argument_list|(
name|subpart
argument_list|)
operator|+
literal|"\">"
operator|+
name|diff
argument_list|(
name|creditAbbv
argument_list|(
name|oldSubpart
argument_list|)
argument_list|,
name|creditAbbv
argument_list|(
name|subpart
argument_list|)
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|creditAbbv
parameter_list|(
name|XSubpart
name|subpart
parameter_list|)
block|{
name|String
name|credit
init|=
operator|(
name|subpart
operator|==
literal|null
condition|?
literal|null
else|:
name|subpart
operator|.
name|getCredit
argument_list|()
operator|)
decl_stmt|;
return|return
name|credit
operator|==
literal|null
condition|?
literal|""
else|:
name|credit
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
operator|<
literal|0
condition|?
name|credit
else|:
name|credit
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|credit
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|creditText
parameter_list|(
name|XSubpart
name|subpart
parameter_list|)
block|{
name|String
name|credit
init|=
operator|(
name|subpart
operator|==
literal|null
condition|?
literal|null
else|:
name|subpart
operator|.
name|getCredit
argument_list|()
operator|)
decl_stmt|;
return|return
name|credit
operator|==
literal|null
condition|?
literal|""
else|:
name|credit
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
operator|<
literal|0
condition|?
name|credit
else|:
name|credit
operator|.
name|substring
argument_list|(
literal|1
operator|+
name|credit
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|generateListOfClassesLine
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|XRequest
name|request
parameter_list|,
name|String
name|consent
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|)
block|{
name|XEnrollment
name|enrollment
init|=
operator|(
name|request
operator|instanceof
name|XCourseRequest
condition|?
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|enrollment
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|request
decl_stmt|;
if|if
condition|(
operator|!
name|getStudent
argument_list|()
operator|.
name|canAssign
argument_list|(
name|cr
argument_list|)
condition|)
return|return;
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|cr
operator|.
name|getCourseIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|String
name|style
init|=
literal|"color: red; border-top: 1px dashed #9CB0CE;"
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|course
operator|.
name|getCourseNumber
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">&nbsp;</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">&nbsp;</td>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|isAlternative
argument_list|()
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\" colspan=\"9\" align=\"center\">"
operator|+
operator|(
name|cr
operator|.
name|isWaitlist
argument_list|()
condition|?
name|MSG
operator|.
name|emailWaitListedAlternativeRequest
argument_list|()
else|:
name|MSG
operator|.
name|emailNotEnrolledAlternativeRequest
argument_list|()
operator|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
else|else
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\" colspan=\"9\" align=\"center\">"
operator|+
operator|(
name|cr
operator|.
name|isWaitlist
argument_list|()
condition|?
name|MSG
operator|.
name|emailWaitListedRequest
argument_list|()
else|:
name|MSG
operator|.
name|emailNotEnrolledRequest
argument_list|()
operator|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
else|else
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|XCourse
name|course
init|=
name|offering
operator|.
name|getCourse
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|,
name|firstNoParent
init|=
literal|true
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
name|enrollment
argument_list|)
control|)
block|{
name|String
name|style
init|=
operator|(
name|first
condition|?
literal|" border-top: 1px dashed #9CB0CE;"
else|:
literal|""
operator|)
decl_stmt|;
name|generateListOfClassesLine
argument_list|(
name|out
argument_list|,
name|offering
argument_list|,
name|course
argument_list|,
name|section
argument_list|,
name|style
argument_list|,
name|firstNoParent
condition|?
name|consent
else|:
literal|null
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|)
name|firstNoParent
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|fr
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|request
decl_stmt|;
name|String
name|style
init|=
literal|"border-top: 1px dashed #9CB0CE;"
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|MSG
operator|.
name|freeTimeSubject
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|MSG
operator|.
name|freeTimeCourse
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">&nbsp;</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">&nbsp;</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|DayCode
operator|.
name|toString
argument_list|(
name|fr
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|startTime
argument_list|(
name|fr
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\">"
operator|+
name|endTime
argument_list|(
name|fr
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td style= \"white-space: nowrap; "
operator|+
name|style
operator|+
literal|"\" colspan=\"6\">&nbsp;</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|protected
name|void
name|generateListOfClasses
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<table width=\"100%\"><tr><td class=\"unitime-ErrorMessage\">"
operator|+
name|MSG
operator|.
name|emailNoSchedule
argument_list|()
operator|+
literal|"</td></tr></table>"
argument_list|)
expr_stmt|;
return|return;
block|}
name|generateListOfClassesHeader
argument_list|(
name|out
argument_list|)
expr_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|XEnrollment
name|enrollment
init|=
operator|(
name|request
operator|instanceof
name|XCourseRequest
condition|?
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|generateListOfClassesLine
argument_list|(
name|out
argument_list|,
name|request
argument_list|,
name|consent
argument_list|(
name|server
argument_list|,
name|enrollment
argument_list|)
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
name|generateListOfClassesFooter
argument_list|(
name|out
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|consent
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|XEnrollment
name|enrollment
parameter_list|)
block|{
if|if
condition|(
name|enrollment
operator|==
literal|null
operator|||
name|enrollment
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|XCourse
name|info
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
operator|||
name|info
operator|.
name|getConsentLabel
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|enrollment
operator|.
name|getApproval
argument_list|()
operator|==
literal|null
condition|)
return|return
name|MSG
operator|.
name|consentWaiting
argument_list|(
name|info
operator|.
name|getConsentLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
else|else
return|return
name|MSG
operator|.
name|consentApproved
argument_list|(
name|sConsentApprovalDateFormat
operator|.
name|format
argument_list|(
name|enrollment
operator|.
name|getApproval
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|generateChange
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
name|getOldOffering
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XCourseRequest
name|newRequest
init|=
literal|null
decl_stmt|;
name|XOffering
name|newOffering
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getCourseIdByOfferingId
argument_list|(
name|getOldOffering
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|newRequest
operator|=
operator|(
name|XCourseRequest
operator|)
name|r
expr_stmt|;
name|newOffering
operator|=
name|server
operator|.
name|getOffering
argument_list|(
name|getOldOffering
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|getOldEnrollment
argument_list|()
operator|==
literal|null
operator|&&
name|newRequest
operator|!=
literal|null
operator|&&
name|newRequest
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XCourse
name|course
init|=
name|newOffering
operator|.
name|getCourse
argument_list|(
name|newRequest
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|setSubject
argument_list|(
name|MSG
operator|.
name|emailEnrollmentNew
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td "
operator|+
literal|"style=\"width: 100%; border-bottom: 1px solid #9CB0CE; padding-top: 5px; font-size: large; font-weight: bold; color: black; text-align: left;\">"
operator|+
name|MSG
operator|.
name|emailCourseEnrollment
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
operator|+
literal|"</td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td>"
argument_list|)
expr_stmt|;
name|generateListOfClassesHeader
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|generateListOfClassesLine
argument_list|(
name|out
argument_list|,
name|newRequest
argument_list|,
name|consent
argument_list|(
name|server
argument_list|,
name|newRequest
operator|.
name|getEnrollment
argument_list|()
argument_list|)
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|generateListOfClassesFooter
argument_list|(
name|out
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|getOldEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|newRequest
operator|!=
literal|null
operator|&&
name|newRequest
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XCourse
name|course
init|=
name|newOffering
operator|.
name|getCourse
argument_list|(
name|newRequest
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|setSubject
argument_list|(
name|MSG
operator|.
name|emailEnrollmentChanged
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td "
operator|+
literal|"style=\"width: 100%; border-bottom: 1px solid #9CB0CE; padding-top: 5px; font-size: large; font-weight: bold; color: black; text-align: left;\">"
operator|+
name|MSG
operator|.
name|emailCourseEnrollment
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
operator|+
literal|"</td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td>"
argument_list|)
expr_stmt|;
name|generateListOfClassesHeader
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|,
name|firstWithNoParent
init|=
literal|true
decl_stmt|;
name|sections
label|:
for|for
control|(
name|XSection
name|section
range|:
name|newOffering
operator|.
name|getSections
argument_list|(
name|newRequest
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|XSection
name|old
range|:
name|getOldOffering
argument_list|()
operator|.
name|getSections
argument_list|(
name|getOldEnrollment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|old
operator|.
name|getSubpartId
argument_list|()
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|style
init|=
operator|(
name|first
condition|?
literal|" border-top: 1px dashed #9CB0CE;"
else|:
literal|""
operator|)
decl_stmt|;
name|generateListOfClassesDiff
argument_list|(
name|out
argument_list|,
name|getOldOffering
argument_list|()
argument_list|,
name|newOffering
argument_list|,
name|course
argument_list|,
name|old
argument_list|,
name|section
argument_list|,
name|style
argument_list|,
name|firstWithNoParent
condition|?
name|consent
argument_list|(
name|server
argument_list|,
name|newRequest
operator|.
name|getEnrollment
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
operator|&&
name|old
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|)
name|firstWithNoParent
operator|=
literal|false
expr_stmt|;
continue|continue
name|sections
continue|;
block|}
block|}
name|String
name|style
init|=
operator|(
name|first
condition|?
literal|" border-top: 1px dashed #9CB0CE;"
else|:
literal|""
operator|)
decl_stmt|;
name|generateListOfClassesLine
argument_list|(
name|out
argument_list|,
name|newOffering
argument_list|,
name|course
argument_list|,
name|section
argument_list|,
name|style
argument_list|,
name|firstWithNoParent
condition|?
name|consent
argument_list|(
name|server
argument_list|,
name|newRequest
operator|.
name|getEnrollment
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|)
name|firstWithNoParent
operator|=
literal|false
expr_stmt|;
block|}
name|sections
label|:
for|for
control|(
name|XSection
name|old
range|:
name|getOldOffering
argument_list|()
operator|.
name|getSections
argument_list|(
name|getOldEnrollment
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|XSection
name|section
range|:
name|newOffering
operator|.
name|getSections
argument_list|(
name|newRequest
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|old
operator|.
name|getSubpartId
argument_list|()
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
condition|)
continue|continue
name|sections
continue|;
name|String
name|style
init|=
literal|"text-decoration: line-through;"
operator|+
operator|(
name|first
condition|?
literal|" border-top: 1px dashed #9CB0CE;"
else|:
literal|""
operator|)
decl_stmt|;
name|generateListOfClassesLine
argument_list|(
name|out
argument_list|,
name|getOldOffering
argument_list|()
argument_list|,
name|course
argument_list|,
name|old
argument_list|,
name|style
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|generateListOfClassesFooter
argument_list|(
name|out
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|getOldEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|newRequest
operator|==
literal|null
operator|||
name|newRequest
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
name|XCourse
name|course
init|=
name|getOldOffering
argument_list|()
operator|.
name|getCourse
argument_list|(
name|getOldEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|setSubject
argument_list|(
name|newRequest
operator|==
literal|null
condition|?
name|MSG
operator|.
name|emailCourseDropReject
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
else|:
name|MSG
operator|.
name|emailCourseDropChange
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td "
operator|+
literal|"style=\"width: 100%; border-bottom: 1px solid #9CB0CE; padding-top: 5px; font-size: large; font-weight: bold; color: black; text-align: left;\">"
operator|+
name|MSG
operator|.
name|emailCourseEnrollment
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
operator|+
literal|"</td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td>"
argument_list|)
expr_stmt|;
name|XCourse
name|info
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|consent
init|=
operator|(
name|info
operator|==
literal|null
condition|?
literal|null
else|:
name|info
operator|.
name|getConsentLabel
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|newRequest
operator|!=
literal|null
operator|&&
name|getStudent
argument_list|()
operator|.
name|canAssign
argument_list|(
name|newRequest
argument_list|)
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"<table width=\"100%\"><tr><td class=\"unitime-ErrorMessage\">"
operator|+
operator|(
name|newRequest
operator|.
name|isAlternative
argument_list|()
condition|?
name|newRequest
operator|.
name|isWaitlist
argument_list|()
condition|?
name|MSG
operator|.
name|emailCourseWaitListedAlternative
argument_list|()
else|:
name|MSG
operator|.
name|emailCourseNotEnrolledAlternative
argument_list|()
else|:
name|newRequest
operator|.
name|isWaitlist
argument_list|()
condition|?
name|MSG
operator|.
name|emailCourseWaitListed
argument_list|()
else|:
name|MSG
operator|.
name|emailCourseNotEnrolled
argument_list|()
operator|)
operator|+
literal|"</td></tr></table>"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|newRequest
operator|==
literal|null
operator|&&
name|consent
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<table width=\"100%\"><tr><td class=\"unitime-ErrorMessage\">"
operator|+
name|MSG
operator|.
name|emailConsentRejected
argument_list|(
name|consent
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|+
literal|"</td></tr></table>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|getOldStudent
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getOldStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|somethingWasAssigned
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XRequest
name|or
range|:
name|getOldStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|or
operator|instanceof
name|XCourseRequest
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|or
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|somethingWasAssigned
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|somethingWasAssigned
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td "
operator|+
literal|"style=\"width: 100%; border-bottom: 1px solid #9CB0CE; padding-top: 5px; font-size: large; font-weight: bold; color: black; text-align: left;\">"
operator|+
name|MSG
operator|.
name|emailEnrollmentChanges
argument_list|()
operator|+
literal|"</td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td>"
argument_list|)
expr_stmt|;
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
name|generateListOfClassesHeader
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|requests
label|:
for|for
control|(
name|XRequest
name|nr
range|:
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|nr
operator|instanceof
name|XFreeTimeRequest
condition|)
continue|continue;
name|XCourseRequest
name|ncr
init|=
operator|(
name|XCourseRequest
operator|)
name|nr
decl_stmt|;
for|for
control|(
name|XRequest
name|or
range|:
name|getOldStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|or
operator|instanceof
name|XFreeTimeRequest
condition|)
continue|continue;
name|XCourseRequest
name|ocr
init|=
operator|(
name|XCourseRequest
operator|)
name|or
decl_stmt|;
if|if
condition|(
name|or
operator|.
name|getRequestId
argument_list|()
operator|.
name|equals
argument_list|(
name|nr
operator|.
name|getRequestId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|ocr
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ncr
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
comment|// both unassigned
comment|// was assigned
name|boolean
name|first
init|=
literal|true
decl_stmt|,
name|firstWithNoParent
init|=
literal|true
decl_stmt|;
name|XOffering
name|no
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|ncr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|no
operator|.
name|getSections
argument_list|(
name|ncr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
block|{
name|String
name|style
init|=
operator|(
name|first
condition|?
literal|" border-top: 1px dashed #9CB0CE;"
else|:
literal|""
operator|)
decl_stmt|;
name|generateListOfClassesLine
argument_list|(
name|out
argument_list|,
name|no
argument_list|,
name|no
operator|.
name|getCourse
argument_list|(
name|ncr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|section
argument_list|,
name|style
argument_list|,
name|firstWithNoParent
condition|?
name|consent
argument_list|(
name|server
argument_list|,
name|ncr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|)
name|firstWithNoParent
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|ncr
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|XOffering
name|oo
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|ocr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
comment|// was un-assigned
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|oo
operator|.
name|getSections
argument_list|(
name|ocr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
block|{
name|String
name|style
init|=
literal|"text-decoration: line-through;"
operator|+
operator|(
name|first
condition|?
literal|" border-top: 1px dashed #9CB0CE;"
else|:
literal|""
operator|)
decl_stmt|;
name|generateListOfClassesLine
argument_list|(
name|out
argument_list|,
name|oo
argument_list|,
name|oo
operator|.
name|getCourse
argument_list|(
name|ocr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|section
argument_list|,
name|style
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|XOffering
name|no
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|ncr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|XOffering
name|oo
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|ocr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
comment|// both assigned
name|boolean
name|first
init|=
literal|true
decl_stmt|,
name|firstWithNoParent
init|=
literal|true
decl_stmt|;
name|sections
label|:
for|for
control|(
name|XSection
name|section
range|:
name|no
operator|.
name|getSections
argument_list|(
name|ncr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|XSection
name|old
range|:
name|oo
operator|.
name|getSections
argument_list|(
name|ocr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|old
operator|.
name|getSubpartId
argument_list|()
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|equals
argument_list|(
name|section
argument_list|,
name|old
argument_list|)
condition|)
continue|continue
name|sections
continue|;
name|String
name|style
init|=
operator|(
name|first
condition|?
literal|" border-top: 1px dashed #9CB0CE;"
else|:
literal|""
operator|)
decl_stmt|;
name|generateListOfClassesDiff
argument_list|(
name|out
argument_list|,
name|oo
argument_list|,
name|no
argument_list|,
name|no
operator|.
name|getCourse
argument_list|(
name|ncr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|old
argument_list|,
name|section
argument_list|,
name|style
argument_list|,
name|firstWithNoParent
condition|?
name|consent
argument_list|(
name|server
argument_list|,
name|ncr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
operator|&&
name|old
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|)
name|firstWithNoParent
operator|=
literal|false
expr_stmt|;
continue|continue
name|sections
continue|;
block|}
block|}
name|String
name|style
init|=
operator|(
name|first
condition|?
literal|" border-top: 1px dashed #9CB0CE;"
else|:
literal|""
operator|)
decl_stmt|;
name|generateListOfClassesLine
argument_list|(
name|out
argument_list|,
name|no
argument_list|,
name|no
operator|.
name|getCourse
argument_list|(
name|ncr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|section
argument_list|,
name|style
argument_list|,
name|firstWithNoParent
condition|?
name|consent
argument_list|(
name|server
argument_list|,
name|ncr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|)
name|firstWithNoParent
operator|=
literal|false
expr_stmt|;
block|}
name|sections
label|:
for|for
control|(
name|XSection
name|old
range|:
name|oo
operator|.
name|getSections
argument_list|(
name|ocr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|XSection
name|section
range|:
name|no
operator|.
name|getSections
argument_list|(
name|ncr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|old
operator|.
name|getSubpartId
argument_list|()
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
condition|)
continue|continue
name|sections
continue|;
name|String
name|style
init|=
literal|"text-decoration: line-through;"
operator|+
operator|(
name|first
condition|?
literal|" border-top: 1px dashed #9CB0CE;"
else|:
literal|""
operator|)
decl_stmt|;
name|generateListOfClassesLine
argument_list|(
name|out
argument_list|,
name|oo
argument_list|,
name|oo
operator|.
name|getCourse
argument_list|(
name|ocr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|old
argument_list|,
name|style
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
continue|continue
name|requests
continue|;
block|}
block|}
comment|// old request not found
if|if
condition|(
name|ncr
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XOffering
name|no
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|ncr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|,
name|firstWithNoParent
init|=
literal|true
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|no
operator|.
name|getSections
argument_list|(
name|ncr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
block|{
name|String
name|style
init|=
operator|(
name|first
condition|?
literal|" border-top: 1px dashed #9CB0CE;"
else|:
literal|""
operator|)
decl_stmt|;
name|generateListOfClassesLine
argument_list|(
name|out
argument_list|,
name|no
argument_list|,
name|no
operator|.
name|getCourse
argument_list|(
name|ncr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|section
argument_list|,
name|style
argument_list|,
name|firstWithNoParent
condition|?
name|consent
argument_list|(
name|server
argument_list|,
name|ncr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|)
name|firstWithNoParent
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
name|requests
label|:
for|for
control|(
name|XRequest
name|or
range|:
name|getOldStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|or
operator|instanceof
name|XFreeTimeRequest
operator|||
operator|(
operator|(
name|XCourseRequest
operator|)
name|or
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|XRequest
name|nr
range|:
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|or
operator|instanceof
name|XFreeTimeRequest
condition|)
continue|continue;
if|if
condition|(
name|or
operator|.
name|getRequestId
argument_list|()
operator|.
name|equals
argument_list|(
name|nr
operator|.
name|getRequestId
argument_list|()
argument_list|)
condition|)
continue|continue
name|requests
continue|;
block|}
comment|// new request not found
name|boolean
name|first
init|=
literal|true
decl_stmt|,
name|firstWithNoParent
init|=
literal|true
decl_stmt|;
name|XOffering
name|oo
init|=
name|server
operator|.
name|getOffering
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|or
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|oo
operator|.
name|getSections
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|or
operator|)
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
block|{
name|String
name|style
init|=
literal|"text-decoration: line-through; "
operator|+
operator|(
name|first
condition|?
literal|" border-top: 1px dashed #9CB0CE;"
else|:
literal|""
operator|)
decl_stmt|;
name|generateListOfClassesLine
argument_list|(
name|out
argument_list|,
name|oo
argument_list|,
name|oo
operator|.
name|getCourse
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|or
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|section
argument_list|,
name|style
argument_list|,
name|firstWithNoParent
condition|?
name|consent
argument_list|(
name|server
argument_list|,
operator|(
operator|(
name|XCourseRequest
operator|)
name|or
operator|)
operator|.
name|getEnrollment
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|)
name|firstWithNoParent
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nrLines
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|getMessage
argument_list|()
operator|==
literal|null
operator|||
name|getMessage
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td colspan='11'><i>"
operator|+
name|MSG
operator|.
name|emailNoChange
argument_list|()
operator|+
literal|"</i></td></tr>"
argument_list|)
expr_stmt|;
block|}
name|generateListOfClassesFooter
argument_list|(
name|out
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setSubject
argument_list|(
name|MSG
operator|.
name|emailSubjectNotification
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setSubject
argument_list|(
name|MSG
operator|.
name|emailSubjectNotification
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|generateTimetable
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|int
name|nrDays
init|=
literal|5
decl_stmt|,
name|firstHour
init|=
literal|7
decl_stmt|,
name|lastHour
init|=
literal|18
decl_stmt|;
name|boolean
name|hasSat
init|=
literal|false
decl_stmt|,
name|hasSun
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|table
index|[]
index|[]
init|=
operator|new
name|List
index|[
name|Constants
operator|.
name|NR_DAYS
index|]
index|[
name|Constants
operator|.
name|SLOTS_PER_DAY
index|]
decl_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|ft
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|request
decl_stmt|;
name|int
name|dayCode
init|=
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
operator|)
operator|!=
literal|0
condition|)
name|hasSat
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
operator|)
operator|!=
literal|0
condition|)
name|hasSun
operator|=
literal|true
expr_stmt|;
name|int
name|startHour
init|=
operator|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
literal|60
decl_stmt|;
if|if
condition|(
name|startHour
operator|<
name|firstHour
condition|)
name|firstHour
operator|=
name|startHour
expr_stmt|;
name|int
name|endHour
init|=
operator|(
operator|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|+
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|+
literal|59
operator|)
operator|/
literal|60
decl_stmt|;
if|if
condition|(
name|endHour
operator|>
name|lastHour
condition|)
name|lastHour
operator|=
name|endHour
expr_stmt|;
block|}
if|else if
condition|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|int
name|dayCode
init|=
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
operator|)
operator|!=
literal|0
condition|)
name|hasSat
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
operator|)
operator|!=
literal|0
condition|)
name|hasSun
operator|=
literal|true
expr_stmt|;
name|int
name|startHour
init|=
operator|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
literal|60
decl_stmt|;
if|if
condition|(
name|startHour
operator|<
name|firstHour
condition|)
name|firstHour
operator|=
name|startHour
expr_stmt|;
name|int
name|endHour
init|=
operator|(
operator|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|+
literal|59
operator|)
operator|/
literal|60
decl_stmt|;
if|if
condition|(
name|endHour
operator|>
name|lastHour
condition|)
name|lastHour
operator|=
name|endHour
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|e
init|=
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlots
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
name|slot
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|int
name|day
init|=
name|slot
operator|/
name|Constants
operator|.
name|SLOTS_PER_DAY
decl_stmt|;
name|int
name|time
init|=
name|slot
operator|%
name|Constants
operator|.
name|SLOTS_PER_DAY
decl_stmt|;
if|if
condition|(
name|table
index|[
name|day
index|]
index|[
name|time
index|]
operator|==
literal|null
condition|)
name|table
index|[
name|day
index|]
index|[
name|time
index|]
operator|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
expr_stmt|;
name|table
index|[
name|day
index|]
index|[
name|time
index|]
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|hasSat
condition|)
name|nrDays
operator|=
literal|6
expr_stmt|;
if|if
condition|(
name|hasSun
condition|)
name|nrDays
operator|=
literal|7
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<table cellspacing='0' cellpadding='0'>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td align='left' style='vertical-align: top;'><table cellspacing='0' cellpadding='0'><tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td align='left' style='vertical-align: top;'><div style='font-size: x-small; text-align: center; color: #6991CE; display: block; width: 30px;'></div></td>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrDays
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<td align='center' style='vertical-align: top;'><div style='font-size: x-small; text-align: center; color: #6991CE; display: block; width: 180px; '>"
operator|+
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"</div></td>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</tr></table></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td align='left' style='vertical-align: top;'><div style='width: "
operator|+
operator|(
literal|35
operator|+
literal|180
operator|*
name|nrDays
operator|)
operator|+
literal|"px; '>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<table cellspacing='0' cellpadding='0'><tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td align='left' style='vertical-align: top; '><div style='position: relative; overflow-x: hidden; overflow-y: hidden; width: 30px; height: "
operator|+
operator|(
literal|50
operator|*
operator|(
name|lastHour
operator|-
name|firstHour
operator|)
operator|)
operator|+
literal|"px; '>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|h
init|=
name|firstHour
init|;
name|h
operator|<
name|lastHour
condition|;
name|h
operator|++
control|)
block|{
name|int
name|top
init|=
literal|50
operator|*
operator|(
name|h
operator|-
name|firstHour
operator|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<div style='font-size: x-small; text-align: center; padding-right: 2px; color: #6991CE; display: block; border-top: 1px solid transparent; height: 100%; width: 28px; white-space: nowrap; "
operator|+
literal|"position: absolute; left: 0px; top: "
operator|+
name|top
operator|+
literal|"px;'>"
operator|+
operator|(
name|CONST
operator|.
name|useAmPm
argument_list|()
condition|?
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
operator|(
name|h
operator|<
literal|12
condition|?
literal|"am"
else|:
literal|"pm"
operator|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|h
argument_list|)
operator|)
operator|+
literal|"</div>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<div style='font-size: x-small; text-align: center; padding-right: 2px; color: #6991CE; display: block; border-top: 1px solid transparent; height: 100%; width: 28px;"
operator|+
literal|"position: absolute; left: 0px; top: "
operator|+
operator|(
literal|25
operator|+
name|top
operator|)
operator|+
literal|"px; '></div>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</div></td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td align='left' style='vertical-align: top; '>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<div style='border-bottom: 1px solid #DDDDDD; position: relative; overflow-x: hidden; overflow-y: hidden; width: "
operator|+
operator|(
literal|5
operator|+
literal|180
operator|*
name|nrDays
operator|)
operator|+
literal|"px; height: "
operator|+
operator|(
literal|50
operator|*
operator|(
name|lastHour
operator|-
name|firstHour
operator|)
operator|)
operator|+
literal|"px; '>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<div style='position: relative; overflow-x: hidden; overflow-y: hidden; width: 100%; height: 100%; '>"
argument_list|)
expr_stmt|;
comment|// working hours
name|out
operator|.
name|println
argument_list|(
literal|"<div style='background: #FFFDDD; width: "
operator|+
operator|(
literal|2
operator|+
literal|180
operator|*
name|nrDays
operator|)
operator|+
literal|"px; height: 500px; position: absolute; left: 0px; top: "
operator|+
operator|(
literal|25
operator|+
literal|50
operator|*
operator|(
literal|7
operator|-
name|firstHour
operator|)
operator|)
operator|+
literal|"px;'></div>"
argument_list|)
expr_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|fr
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|request
decl_stmt|;
for|for
control|(
name|DayCode
name|dow
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|fr
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|dow
operator|.
name|getIndex
argument_list|()
operator|>=
name|nrDays
condition|)
continue|continue;
if|if
condition|(
name|fr
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|+
name|fr
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|<
literal|12
operator|*
name|firstHour
condition|)
continue|continue;
if|if
condition|(
name|fr
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|>
literal|12
operator|*
name|lastHour
condition|)
continue|continue;
name|out
operator|.
name|println
argument_list|(
literal|"<div style='background: #FFE1DD; width: 100%; color: #BA5353; font-size: x-small; text-align: left; white-space: nowrap; overflow: hidden;"
operator|+
literal|"width: 183px; height: "
operator|+
operator|(
literal|125
operator|*
name|fr
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|/
literal|30
operator|)
operator|+
literal|"px; "
operator|+
literal|"position: absolute; left: "
operator|+
operator|(
literal|180
operator|*
name|dow
operator|.
name|getIndex
argument_list|()
operator|)
operator|+
literal|"px;"
operator|+
literal|"top: "
operator|+
operator|(
literal|125
operator|*
name|fr
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|/
literal|30
operator|-
literal|50
operator|*
name|firstHour
operator|)
operator|+
literal|"px; '>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<div style='padding-left: 5px; white-space: nowrap; '>Free "
operator|+
name|DayCode
operator|.
name|toString
argument_list|(
name|fr
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|startTime
argument_list|(
name|fr
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|endTime
argument_list|(
name|fr
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"</div>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</div>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|h
init|=
name|firstHour
init|;
name|h
operator|<
name|lastHour
condition|;
name|h
operator|++
control|)
block|{
name|int
name|top
init|=
literal|50
operator|*
operator|(
name|h
operator|-
name|firstHour
operator|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<div style='display: block; border-top: 1px solid #DDDDDD; width: 100%; position: absolute; left: 0px; top: "
operator|+
name|top
operator|+
literal|"px; '></div>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<div style='display: block; border-top: 1px dotted #DDDDDD; width: 100%; position: absolute; left: 0px; top: "
operator|+
operator|(
literal|25
operator|+
name|top
operator|)
operator|+
literal|"px; '></div>"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|nrDays
condition|;
name|i
operator|++
control|)
block|{
name|int
name|left
init|=
literal|180
operator|*
name|i
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<div style='height: 100%; position: absolute; top: 0px; left: 0%; border-left: 1px solid #DDDDDD; border-right: 1px solid #DDDDDD; width: 2px; "
operator|+
literal|"position: absolute; left: "
operator|+
name|left
operator|+
literal|"px; top: 0px; '></div>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</div>"
argument_list|)
expr_stmt|;
name|int
name|color
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|XCourse
name|course
init|=
name|offering
operator|.
name|getCourse
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|DayCode
name|dow
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
block|{
name|int
name|col
init|=
literal|0
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|col
operator|=
name|Math
operator|.
name|max
argument_list|(
name|col
argument_list|,
name|table
index|[
name|dow
operator|.
name|getIndex
argument_list|()
index|]
index|[
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|+
name|i
index|]
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|=
name|Math
operator|.
name|max
argument_list|(
name|index
argument_list|,
name|table
index|[
name|dow
operator|.
name|getIndex
argument_list|()
index|]
index|[
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|+
name|i
index|]
operator|.
name|indexOf
argument_list|(
name|section
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|w
init|=
literal|174
operator|/
name|col
operator|+
operator|(
name|index
operator|+
literal|1
operator|!=
name|col
operator|&&
name|col
operator|>
literal|1
condition|?
operator|-
literal|3
else|:
literal|0
operator|)
decl_stmt|;
name|int
name|h
init|=
literal|125
operator|*
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|/
literal|30
operator|-
literal|3
decl_stmt|;
name|int
name|l
init|=
literal|4
operator|+
literal|180
operator|*
name|dow
operator|.
name|getIndex
argument_list|()
operator|+
name|index
operator|*
literal|174
operator|/
name|col
decl_stmt|;
name|int
name|t
init|=
literal|1
operator|+
literal|125
operator|*
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|/
literal|30
operator|-
literal|50
operator|*
name|firstHour
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<div style='overflow-x: hidden; overflow-y: hidden; width: "
operator|+
name|w
operator|+
literal|"px; height: "
operator|+
name|h
operator|+
literal|"px; position: absolute; left: "
operator|+
name|l
operator|+
literal|"px; top: "
operator|+
name|t
operator|+
literal|"px; "
operator|+
literal|"position: absolute; font-size: x-small; font-family: arial; overflow: hidden; -webkit-border-radius: 6px; -moz-border-radius: 6px; color: #FFFFFF; "
operator|+
literal|"border: 1px solid #"
operator|+
name|sColor1
index|[
name|color
index|]
operator|+
literal|"; background: #"
operator|+
name|sColor2
index|[
name|color
index|]
operator|+
literal|";'>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<table cellspacing='0' cellpadding='0' style='padding-left: 4px; padding-right: 4px; padding-bottom: 2px; padding-top: 2px; width: 100%; -webkit-border-top-left-radius: 5px; -webkit-border-top-right-radius: 5px; -moz-border-radius-topleft: 5px; -moz-border-radius-topright: 5px;"
operator|+
literal|"background: #"
operator|+
name|sColor1
index|[
name|color
index|]
operator|+
literal|";'><tr><td align='left' style='vertical-align: top; '>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<div style='padding-left: 2px; width: 100%; font-size: x-small; white-space: nowrap; overflow: hidden; color: #FFFFFF;'>"
operator|+
name|MSG
operator|.
name|course
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|section
operator|.
name|getSubpartName
argument_list|()
operator|+
literal|"</div></td></tr></tbody></table>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<div style='font-size: x-small; padding-left: 4px; white-space: wrap; -webkit-border-bottom-left-radius: 5px; -webkit-border-bottom-right-radius: 5px; -moz-border-radius-bottomleft: 5px; -moz-border-radius-bottomright: 5px;'>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|XRoom
name|room
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<span style='white-space: nowrap'>"
operator|+
name|room
operator|.
name|getName
argument_list|()
operator|+
literal|",</span>"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|XInstructor
name|instructor
range|:
name|section
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<span style='white-space: nowrap'>"
operator|+
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|",</span>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<span style='white-space: nowrap'>"
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|+
literal|"</span>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|getNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"<br>"
operator|+
name|course
operator|.
name|getNote
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"<br>"
operator|+
name|section
operator|.
name|getNote
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</div></div>"
argument_list|)
expr_stmt|;
block|}
block|}
name|color
operator|=
operator|(
literal|1
operator|+
name|color
operator|)
operator|%
name|sColor1
operator|.
name|length
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</div></td></tr></table></div></td></tr>"
argument_list|)
expr_stmt|;
comment|/* 		out.println("<tr><td style=\"font-size: 9pt; font-style: italic; color: #9CB0CE; text-align: right; margin-top: -2px; white-space: nowrap;\">"); 		out.println("		If the timetable is not displayed correctly, please check out the attached file."); 		out.println("</td></tr>"); 		 */
name|out
operator|.
name|println
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|generateTimetableImage
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nrDays
init|=
literal|5
decl_stmt|,
name|firstHour
init|=
literal|7
decl_stmt|,
name|lastHour
init|=
literal|18
decl_stmt|;
name|boolean
name|hasSat
init|=
literal|false
decl_stmt|,
name|hasSun
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|table
index|[]
index|[]
init|=
operator|new
name|List
index|[
name|Constants
operator|.
name|NR_DAYS
index|]
index|[
name|Constants
operator|.
name|SLOTS_PER_DAY
index|]
decl_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|ft
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|request
decl_stmt|;
name|int
name|dayCode
init|=
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
operator|)
operator|!=
literal|0
condition|)
name|hasSat
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
operator|)
operator|!=
literal|0
condition|)
name|hasSun
operator|=
literal|true
expr_stmt|;
name|int
name|startHour
init|=
operator|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
literal|60
decl_stmt|;
if|if
condition|(
name|startHour
operator|<
name|firstHour
condition|)
name|firstHour
operator|=
name|startHour
expr_stmt|;
name|int
name|endHour
init|=
operator|(
operator|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|+
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|+
literal|59
operator|)
operator|/
literal|60
decl_stmt|;
if|if
condition|(
name|endHour
operator|>
name|lastHour
condition|)
name|lastHour
operator|=
name|endHour
expr_stmt|;
block|}
if|else if
condition|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|int
name|dayCode
init|=
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
operator|)
operator|!=
literal|0
condition|)
name|hasSat
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
operator|)
operator|!=
literal|0
condition|)
name|hasSun
operator|=
literal|true
expr_stmt|;
name|int
name|startHour
init|=
operator|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
literal|60
decl_stmt|;
if|if
condition|(
name|startHour
operator|<
name|firstHour
condition|)
name|firstHour
operator|=
name|startHour
expr_stmt|;
name|int
name|endHour
init|=
operator|(
operator|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|+
literal|59
operator|)
operator|/
literal|60
decl_stmt|;
if|if
condition|(
name|endHour
operator|>
name|lastHour
condition|)
name|lastHour
operator|=
name|endHour
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|e
init|=
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlots
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
name|slot
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|int
name|day
init|=
name|slot
operator|/
name|Constants
operator|.
name|SLOTS_PER_DAY
decl_stmt|;
name|int
name|time
init|=
name|slot
operator|%
name|Constants
operator|.
name|SLOTS_PER_DAY
decl_stmt|;
if|if
condition|(
name|table
index|[
name|day
index|]
index|[
name|time
index|]
operator|==
literal|null
condition|)
name|table
index|[
name|day
index|]
index|[
name|time
index|]
operator|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
expr_stmt|;
name|table
index|[
name|day
index|]
index|[
name|time
index|]
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|hasSat
condition|)
name|nrDays
operator|=
literal|6
expr_stmt|;
if|if
condition|(
name|hasSun
condition|)
name|nrDays
operator|=
literal|7
expr_stmt|;
name|BufferedImage
name|image
init|=
operator|new
name|BufferedImage
argument_list|(
literal|39
operator|+
literal|180
operator|*
name|nrDays
argument_list|,
literal|21
operator|+
literal|50
operator|*
operator|(
name|lastHour
operator|-
name|firstHour
operator|)
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_RGB
argument_list|)
decl_stmt|;
name|Graphics2D
name|g
init|=
name|image
operator|.
name|createGraphics
argument_list|()
decl_stmt|;
name|g
operator|.
name|setFont
argument_list|(
operator|new
name|Font
argument_list|(
literal|"Sans Serif"
argument_list|,
name|Font
operator|.
name|TRUETYPE_FONT
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_ON
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
operator|new
name|Color
argument_list|(
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|image
operator|.
name|getWidth
argument_list|()
argument_list|,
name|image
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|fh
init|=
name|g
operator|.
name|getFontMetrics
argument_list|()
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|g
operator|.
name|setColor
argument_list|(
operator|new
name|Color
argument_list|(
literal|0x69
argument_list|,
literal|0x91
argument_list|,
literal|0xce
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrDays
condition|;
name|i
operator|++
control|)
block|{
name|g
operator|.
name|drawString
argument_list|(
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
literal|40
operator|+
name|i
operator|*
literal|180
argument_list|,
literal|17
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|h
init|=
name|firstHour
init|;
name|h
operator|<
name|lastHour
condition|;
name|h
operator|++
control|)
block|{
name|int
name|top
init|=
literal|20
operator|+
literal|50
operator|*
operator|(
name|h
operator|-
name|firstHour
operator|)
decl_stmt|;
name|g
operator|.
name|drawString
argument_list|(
name|CONST
operator|.
name|useAmPm
argument_list|()
condition|?
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
operator|(
name|h
operator|<
literal|12
condition|?
literal|"am"
else|:
literal|"pm"
operator|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|h
argument_list|)
argument_list|,
literal|2
argument_list|,
name|top
operator|+
name|fh
argument_list|)
expr_stmt|;
block|}
name|g
operator|.
name|setColor
argument_list|(
operator|new
name|Color
argument_list|(
literal|0xff
argument_list|,
literal|0xfd
argument_list|,
literal|0xdd
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
literal|35
argument_list|,
literal|20
operator|+
literal|25
operator|+
literal|50
operator|*
operator|(
literal|7
operator|-
name|firstHour
operator|)
argument_list|,
literal|5
operator|+
literal|180
operator|*
name|nrDays
argument_list|,
literal|501
argument_list|)
expr_stmt|;
name|Stroke
name|noStroke
init|=
name|g
operator|.
name|getStroke
argument_list|()
decl_stmt|;
name|Stroke
name|dotted
init|=
operator|new
name|BasicStroke
argument_list|(
literal|1f
argument_list|,
name|BasicStroke
operator|.
name|CAP_SQUARE
argument_list|,
name|BasicStroke
operator|.
name|JOIN_MITER
argument_list|,
literal|1f
argument_list|,
operator|new
name|float
index|[]
block|{
literal|2f
block|,
literal|2f
block|}
argument_list|,
literal|0f
argument_list|)
decl_stmt|;
name|g
operator|.
name|setColor
argument_list|(
operator|new
name|Color
argument_list|(
literal|0xdd
argument_list|,
literal|0xdd
argument_list|,
literal|0xdd
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|h
init|=
name|firstHour
init|;
name|h
operator|<
name|lastHour
condition|;
name|h
operator|++
control|)
block|{
name|int
name|top
init|=
literal|20
operator|+
literal|50
operator|*
operator|(
name|h
operator|-
name|firstHour
operator|)
decl_stmt|;
name|g
operator|.
name|setStroke
argument_list|(
name|noStroke
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
literal|35
argument_list|,
name|top
argument_list|,
operator|(
literal|39
operator|+
literal|180
operator|*
name|nrDays
operator|)
argument_list|,
name|top
argument_list|)
expr_stmt|;
name|g
operator|.
name|setStroke
argument_list|(
name|dotted
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
literal|35
argument_list|,
name|top
operator|+
literal|25
argument_list|,
operator|(
literal|39
operator|+
literal|180
operator|*
name|nrDays
operator|)
argument_list|,
name|top
operator|+
literal|25
argument_list|)
expr_stmt|;
block|}
name|g
operator|.
name|setStroke
argument_list|(
name|noStroke
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
literal|35
argument_list|,
literal|20
operator|+
literal|50
operator|*
operator|(
name|lastHour
operator|-
name|firstHour
operator|)
argument_list|,
operator|(
literal|39
operator|+
literal|180
operator|*
name|nrDays
operator|)
argument_list|,
literal|20
operator|+
literal|50
operator|*
operator|(
name|lastHour
operator|-
name|firstHour
operator|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
operator|new
name|Color
argument_list|(
literal|0xff
argument_list|,
literal|0xe1
argument_list|,
literal|0xdd
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|fr
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|request
decl_stmt|;
for|for
control|(
name|DayCode
name|dow
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|fr
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
block|{
name|g
operator|.
name|fillRect
argument_list|(
literal|36
operator|+
literal|180
operator|*
name|dow
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|21
operator|+
literal|125
operator|*
name|fr
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|/
literal|30
operator|-
literal|50
operator|*
name|firstHour
argument_list|,
literal|182
argument_list|,
literal|125
operator|*
name|fr
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|/
literal|30
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|g
operator|.
name|setColor
argument_list|(
operator|new
name|Color
argument_list|(
literal|0xdd
argument_list|,
literal|0xdd
argument_list|,
literal|0xdd
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|nrDays
condition|;
name|i
operator|++
control|)
block|{
name|g
operator|.
name|drawLine
argument_list|(
literal|35
operator|+
literal|180
operator|*
name|i
argument_list|,
literal|20
argument_list|,
literal|35
operator|+
literal|180
operator|*
name|i
argument_list|,
literal|20
operator|+
literal|50
operator|*
operator|(
name|lastHour
operator|-
name|firstHour
operator|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
literal|38
operator|+
literal|180
operator|*
name|i
argument_list|,
literal|20
argument_list|,
literal|38
operator|+
literal|180
operator|*
name|i
argument_list|,
literal|20
operator|+
literal|50
operator|*
operator|(
name|lastHour
operator|-
name|firstHour
operator|)
argument_list|)
expr_stmt|;
block|}
name|g
operator|.
name|setColor
argument_list|(
operator|new
name|Color
argument_list|(
literal|0xba
argument_list|,
literal|0x53
argument_list|,
literal|0x53
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|fr
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|request
decl_stmt|;
for|for
control|(
name|DayCode
name|dow
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|fr
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
block|{
name|g
operator|.
name|drawString
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toString
argument_list|(
name|fr
argument_list|)
argument_list|,
literal|42
operator|+
literal|180
operator|*
name|dow
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|20
operator|+
literal|125
operator|*
name|fr
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|/
literal|30
operator|-
literal|50
operator|*
name|firstHour
operator|+
name|fh
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|color
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|XCourse
name|course
init|=
name|offering
operator|.
name|getCourse
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|DayCode
name|dow
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
block|{
name|int
name|col
init|=
literal|0
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|col
operator|=
name|Math
operator|.
name|max
argument_list|(
name|col
argument_list|,
name|table
index|[
name|dow
operator|.
name|getIndex
argument_list|()
index|]
index|[
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|+
name|i
index|]
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|=
name|Math
operator|.
name|max
argument_list|(
name|index
argument_list|,
name|table
index|[
name|dow
operator|.
name|getIndex
argument_list|()
index|]
index|[
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|+
name|i
index|]
operator|.
name|indexOf
argument_list|(
name|section
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|w
init|=
literal|176
operator|/
name|col
operator|+
operator|(
name|index
operator|+
literal|1
operator|<
name|col
condition|?
operator|-
literal|2
else|:
literal|0
operator|)
decl_stmt|;
name|int
name|h
init|=
literal|125
operator|*
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|/
literal|30
operator|-
literal|1
decl_stmt|;
name|int
name|l
init|=
literal|39
operator|+
literal|180
operator|*
name|dow
operator|.
name|getIndex
argument_list|()
operator|+
name|index
operator|*
literal|174
operator|/
name|col
decl_stmt|;
name|int
name|t
init|=
literal|21
operator|+
literal|125
operator|*
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|/
literal|30
operator|-
literal|50
operator|*
name|firstHour
decl_stmt|;
name|g
operator|.
name|setColor
argument_list|(
operator|new
name|Color
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|sColor2
index|[
name|color
index|]
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRoundRect
argument_list|(
name|l
argument_list|,
name|t
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
operator|new
name|Color
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|sColor1
index|[
name|color
index|]
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawRoundRect
argument_list|(
name|l
argument_list|,
name|t
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRoundRect
argument_list|(
name|l
argument_list|,
name|t
argument_list|,
name|w
argument_list|,
literal|2
operator|+
name|fh
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
name|l
argument_list|,
name|t
operator|+
name|fh
operator|-
literal|2
argument_list|,
name|w
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
operator|new
name|Color
argument_list|(
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|text
init|=
name|MSG
operator|.
name|course
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|section
operator|.
name|getSubpartName
argument_list|()
decl_stmt|;
while|while
condition|(
name|g
operator|.
name|getFontMetrics
argument_list|()
operator|.
name|stringWidth
argument_list|(
name|text
argument_list|)
operator|>
name|w
operator|-
literal|10
condition|)
name|text
operator|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawString
argument_list|(
name|text
argument_list|,
name|l
operator|+
literal|5
argument_list|,
name|t
operator|+
name|fh
operator|-
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|texts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|XRoom
name|room
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
name|texts
operator|.
name|add
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XInstructor
name|instructor
range|:
name|section
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|texts
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|texts
operator|.
name|add
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|getNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|texts
operator|.
name|add
argument_list|(
name|course
operator|.
name|getNote
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"; "
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|texts
operator|.
name|add
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"; "
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|tt
init|=
name|t
operator|+
name|fh
decl_stmt|;
name|String
name|next
init|=
literal|""
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|texts
operator|.
name|size
argument_list|()
operator|||
operator|!
name|next
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|idx
operator|<
name|texts
operator|.
name|size
argument_list|()
condition|)
block|{
name|next
operator|+=
name|texts
operator|.
name|get
argument_list|(
name|idx
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|<
name|texts
operator|.
name|size
argument_list|()
condition|)
name|next
operator|+=
literal|", "
expr_stmt|;
block|}
while|while
condition|(
name|g
operator|.
name|getFontMetrics
argument_list|()
operator|.
name|stringWidth
argument_list|(
name|next
operator|.
name|trim
argument_list|()
argument_list|)
operator|<
name|w
operator|-
literal|10
operator|&&
name|idx
operator|<
name|texts
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|g
operator|.
name|getFontMetrics
argument_list|()
operator|.
name|stringWidth
argument_list|(
name|next
operator|+
name|texts
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|+
literal|","
argument_list|)
operator|<
name|w
operator|-
literal|10
condition|)
block|{
name|next
operator|+=
name|texts
operator|.
name|get
argument_list|(
name|idx
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|<
name|texts
operator|.
name|size
argument_list|()
condition|)
name|next
operator|+=
literal|", "
expr_stmt|;
block|}
else|else
break|break;
block|}
name|text
operator|=
name|next
expr_stmt|;
name|next
operator|=
literal|""
expr_stmt|;
while|while
condition|(
name|g
operator|.
name|getFontMetrics
argument_list|()
operator|.
name|stringWidth
argument_list|(
name|text
operator|.
name|trim
argument_list|()
argument_list|)
operator|>
name|w
operator|-
literal|10
condition|)
block|{
name|int
name|sp
init|=
name|text
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|sp
operator|>=
literal|0
operator|&&
name|g
operator|.
name|getFontMetrics
argument_list|()
operator|.
name|stringWidth
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|sp
argument_list|)
argument_list|)
operator|<
name|w
operator|-
literal|10
condition|)
block|{
name|next
operator|=
name|text
operator|.
name|substring
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|text
operator|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
name|text
operator|.
name|substring
argument_list|(
name|text
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
operator|+
name|next
expr_stmt|;
name|text
operator|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tt
operator|+
name|fh
operator|-
literal|2
operator|>
name|t
operator|+
name|h
condition|)
break|break;
name|g
operator|.
name|drawString
argument_list|(
name|text
operator|.
name|trim
argument_list|()
argument_list|,
name|l
operator|+
literal|5
argument_list|,
name|tt
operator|+
name|fh
operator|-
literal|2
argument_list|)
expr_stmt|;
name|tt
operator|+=
name|fh
expr_stmt|;
block|}
block|}
block|}
name|color
operator|=
operator|(
literal|1
operator|+
name|color
operator|)
operator|%
name|sColor1
operator|.
name|length
expr_stmt|;
block|}
block|}
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ImageIO
operator|.
name|write
argument_list|(
name|image
argument_list|,
literal|"png"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

