begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2011 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|GroupConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|IgnoreStudentConflictsConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|DistanceConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|TimeOverlapsCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XDistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XExpectations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|CheckMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|CheckMaster
operator|.
name|Master
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|ResectioningWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|SectioningRequest
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|CheckMaster
argument_list|(
name|Master
operator|.
name|REQUIRED
argument_list|)
specifier|public
class|class
name|ReloadOfferingAction
extends|extends
name|WaitlistedOnlineSectioningAction
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|iOfferingIds
decl_stmt|;
specifier|public
name|ReloadOfferingAction
name|forOfferings
parameter_list|(
name|Long
modifier|...
name|offeringIds
parameter_list|)
block|{
name|iOfferingIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Long
name|offeringId
range|:
name|offeringIds
control|)
name|iOfferingIds
operator|.
name|add
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReloadOfferingAction
name|forOfferings
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|offeringIds
parameter_list|)
block|{
name|iOfferingIds
operator|=
name|offeringIds
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|getOfferingIds
parameter_list|()
block|{
return|return
name|iOfferingIds
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|helper
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Long
name|offeringId
range|:
name|getOfferingIds
argument_list|()
control|)
block|{
name|helper
operator|.
name|getAction
argument_list|()
operator|.
name|addOther
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|offeringId
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|OFFERING
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct s.uniqueId from Student s "
operator|+
literal|"left outer join s.classEnrollments e "
operator|+
literal|"left outer join s.courseDemands d left outer join d.courseRequests r left outer join r.courseOffering co "
operator|+
literal|"where e.courseOffering.instructionalOffering.uniqueId = :offeringId or "
operator|+
literal|"co.instructionalOffering.uniqueId = :offeringId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|offeringId
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|Lock
name|lock
init|=
name|server
operator|.
name|lockOffering
argument_list|(
name|offeringId
argument_list|,
name|studentIds
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|reloadOffering
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|offeringId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
name|helper
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|reloadOffering
parameter_list|(
specifier|final
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|Long
name|offeringId
parameter_list|)
block|{
comment|// Load new students
name|Map
argument_list|<
name|Long
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|newStudents
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
range|:
operator|(
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s from Student s "
operator|+
literal|"left join fetch s.courseDemands as cd "
operator|+
literal|"left join fetch cd.courseRequests as cr "
operator|+
literal|"left join fetch cr.courseOffering as co "
operator|+
literal|"left join fetch cr.classWaitLists as cwl "
operator|+
literal|"left join fetch s.classEnrollments as e "
operator|+
literal|"left join fetch s.academicAreaClassifications as a "
operator|+
literal|"left join fetch s.posMajors as mj "
operator|+
literal|"left join fetch s.waitlists as w "
operator|+
literal|"left join fetch s.groups as g "
operator|+
literal|"where s.uniqueId in (select xe.student.uniqueId from StudentClassEnrollment xe where xe.courseOffering.instructionalOffering.uniqueId = :offeringId) "
operator|+
literal|"or s.uniqueId in (select xr.courseDemand.student.uniqueId from CourseRequest xr where xr.courseOffering.instructionalOffering.uniqueId = :offeringId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|offeringId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|newStudents
operator|.
name|put
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
comment|// Persist expected spaces if needed
if|if
condition|(
name|server
operator|.
name|needPersistExpectedSpaces
argument_list|(
name|offeringId
argument_list|)
condition|)
name|PersistExpectedSpacesAction
operator|.
name|persistExpectedSpaces
argument_list|(
name|offeringId
argument_list|,
literal|false
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
expr_stmt|;
comment|// Existing offering
name|XOffering
name|oldOffering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
name|XEnrollments
name|oldEnrollments
init|=
name|server
operator|.
name|getEnrollments
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldOffering
operator|!=
literal|null
condition|)
name|server
operator|.
name|remove
argument_list|(
name|oldOffering
argument_list|)
expr_stmt|;
comment|// New offering
name|XOffering
name|newOffering
init|=
literal|null
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|offeringId
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XDistribution
argument_list|>
name|distributions
init|=
operator|new
name|ArrayList
argument_list|<
name|XDistribution
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|io
operator|!=
literal|null
condition|)
block|{
comment|// Load linked sections and ignore student conflict constraints
name|List
argument_list|<
name|DistributionPref
argument_list|>
name|distPrefs
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct p from DistributionPref p inner join p.distributionObjects o, Department d, "
operator|+
literal|"Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering io "
operator|+
literal|"where p.distributionType.reference in (:ref1, :ref2) and d.session.uniqueId = :sessionId "
operator|+
literal|"and io.uniqueId = :offeringId and (o.prefGroup = c or o.prefGroup = c.schedulingSubpart) "
operator|+
literal|"and p.owner = d and p.prefLevel.prefProlog = :pref"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"ref1"
argument_list|,
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|LINKED_SECTIONS
operator|.
name|reference
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"ref2"
argument_list|,
name|IgnoreStudentConflictsConstraint
operator|.
name|REFERENCE
argument_list|)
operator|.
name|setString
argument_list|(
literal|"pref"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|offeringId
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|distPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|DistributionPref
name|pref
range|:
name|distPrefs
control|)
block|{
name|int
name|variant
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|Class_
argument_list|>
name|sections
range|:
name|ReloadAllData
operator|.
name|getSections
argument_list|(
name|pref
argument_list|)
control|)
block|{
name|XDistributionType
name|type
init|=
name|XDistributionType
operator|.
name|IngoreConflicts
decl_stmt|;
if|if
condition|(
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|LINKED_SECTIONS
operator|.
name|reference
argument_list|()
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
name|type
operator|=
name|XDistributionType
operator|.
name|LinkedSections
expr_stmt|;
name|XDistribution
name|distribution
init|=
operator|new
name|XDistribution
argument_list|(
name|type
argument_list|,
name|pref
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|variant
operator|++
argument_list|,
name|sections
argument_list|)
decl_stmt|;
name|distributions
operator|.
name|add
argument_list|(
name|distribution
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|newOffering
operator|=
name|ReloadAllData
operator|.
name|loadOffering
argument_list|(
name|io
argument_list|,
name|distributions
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
expr_stmt|;
if|if
condition|(
name|newOffering
operator|!=
literal|null
condition|)
name|server
operator|.
name|update
argument_list|(
name|newOffering
argument_list|)
expr_stmt|;
comment|// Load sectioning info
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|infos
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select i.clazz.uniqueId, i.nbrExpectedStudents from SectioningInfo i where i.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.uniqueId = :offeringId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|offeringId
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|XExpectations
name|expectations
init|=
operator|new
name|XExpectations
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|info
range|:
name|infos
control|)
block|{
name|Long
name|sectionId
init|=
operator|(
name|Long
operator|)
name|info
index|[
literal|0
index|]
decl_stmt|;
name|Double
name|expected
init|=
operator|(
name|Double
operator|)
name|info
index|[
literal|1
index|]
decl_stmt|;
name|expectations
operator|.
name|setExpectedSpace
argument_list|(
name|sectionId
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|update
argument_list|(
name|expectations
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|XStudent
index|[]
argument_list|>
name|students
init|=
operator|new
name|ArrayList
argument_list|<
name|XStudent
index|[]
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldEnrollments
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XRequest
name|old
range|:
name|oldEnrollments
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|XStudent
name|oldStudent
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|old
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|.
name|remove
argument_list|(
name|oldStudent
argument_list|)
expr_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
init|=
name|newStudents
operator|.
name|get
argument_list|(
name|oldStudent
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
name|student
operator|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|oldStudent
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
name|XStudent
name|newStudent
init|=
operator|(
name|student
operator|==
literal|null
condition|?
literal|null
else|:
name|ReloadAllData
operator|.
name|loadStudent
argument_list|(
name|student
argument_list|,
literal|null
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|newStudent
operator|!=
literal|null
condition|)
name|server
operator|.
name|update
argument_list|(
name|newStudent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|students
operator|.
name|add
argument_list|(
operator|new
name|XStudent
index|[]
block|{
name|oldStudent
block|,
name|newStudent
block|}
argument_list|)
expr_stmt|;
name|newStudents
operator|.
name|remove
argument_list|(
name|oldStudent
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
range|:
name|newStudents
operator|.
name|values
argument_list|()
control|)
block|{
name|XStudent
name|oldStudent
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldStudent
operator|!=
literal|null
condition|)
name|server
operator|.
name|remove
argument_list|(
name|oldStudent
argument_list|)
expr_stmt|;
name|XStudent
name|newStudent
init|=
name|ReloadAllData
operator|.
name|loadStudent
argument_list|(
name|student
argument_list|,
literal|null
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|newStudent
operator|!=
literal|null
condition|)
name|server
operator|.
name|update
argument_list|(
name|newStudent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|students
operator|.
name|add
argument_list|(
operator|new
name|XStudent
index|[]
block|{
name|oldStudent
block|,
name|newStudent
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
condition|)
return|return;
name|Set
argument_list|<
name|SectioningRequest
argument_list|>
name|queue
init|=
operator|new
name|TreeSet
argument_list|<
name|SectioningRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XStudent
index|[]
name|student
range|:
name|students
control|)
block|{
if|if
condition|(
name|student
index|[
literal|0
index|]
operator|==
literal|null
operator|&&
name|student
index|[
literal|1
index|]
operator|==
literal|null
condition|)
continue|continue;
name|XEnrollment
name|oldEnrollment
init|=
literal|null
decl_stmt|;
name|XCourseRequest
name|oldRequest
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|student
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XRequest
name|r
range|:
name|student
index|[
literal|0
index|]
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|offeringId
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
block|{
name|oldRequest
operator|=
operator|(
name|XCourseRequest
operator|)
name|r
expr_stmt|;
name|oldEnrollment
operator|=
name|oldRequest
operator|.
name|getEnrollment
argument_list|()
expr_stmt|;
block|}
block|}
name|XCourseRequest
name|newRequest
init|=
literal|null
decl_stmt|;
name|XEnrollment
name|newEnrollment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|student
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XRequest
name|r
range|:
name|student
index|[
literal|1
index|]
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|XCourseId
name|course
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
if|if
condition|(
name|offeringId
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
block|{
name|newRequest
operator|=
name|cr
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|offeringId
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
name|newEnrollment
operator|=
name|cr
operator|.
name|getEnrollment
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|helper
operator|.
name|addAction
argument_list|(
name|this
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
decl_stmt|;
name|action
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|student
index|[
literal|0
index|]
operator|==
literal|null
condition|?
name|student
index|[
literal|1
index|]
operator|.
name|getStudentId
argument_list|()
else|:
name|student
index|[
literal|0
index|]
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|student
index|[
literal|0
index|]
operator|==
literal|null
condition|?
name|student
index|[
literal|1
index|]
operator|.
name|getExternalId
argument_list|()
else|:
name|student
index|[
literal|0
index|]
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addOther
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|offeringId
argument_list|)
operator|.
name|setName
argument_list|(
name|newOffering
operator|==
literal|null
condition|?
name|oldOffering
operator|.
name|getName
argument_list|()
else|:
name|newOffering
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|OFFERING
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldEnrollment
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|enrollment
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|enrollment
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|PREVIOUS
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|sectionId
range|:
name|oldEnrollment
operator|.
name|getSectionIds
argument_list|()
control|)
name|enrollment
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|oldOffering
operator|.
name|getSection
argument_list|(
name|sectionId
argument_list|)
argument_list|,
name|oldEnrollment
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addEnrollment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
if|if
condition|(
name|newRequest
operator|==
literal|null
condition|)
name|action
operator|.
name|addRequest
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|oldRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newRequest
operator|==
literal|null
condition|)
block|{
comment|// nothing to re-assign
name|action
operator|.
name|setEndTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|NotifyStudentAction
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|student
index|[
literal|0
index|]
operator|==
literal|null
condition|?
name|student
index|[
literal|1
index|]
operator|.
name|getStudentId
argument_list|()
else|:
name|student
index|[
literal|0
index|]
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|oldEnrollment
argument_list|(
name|oldOffering
argument_list|,
name|oldEnrollment
argument_list|)
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|action
operator|.
name|addRequest
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|newRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldEnrollment
operator|==
literal|null
operator|&&
name|newEnrollment
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|student
index|[
literal|1
index|]
operator|.
name|canAssign
argument_list|(
name|newRequest
argument_list|)
operator|&&
name|isWaitListed
argument_list|(
name|student
index|[
literal|1
index|]
argument_list|,
name|newRequest
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
condition|)
name|queue
operator|.
name|add
argument_list|(
operator|new
name|SectioningRequest
argument_list|(
name|newOffering
argument_list|,
name|newRequest
argument_list|,
name|student
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|action
argument_list|,
operator|(
name|oldRequest
operator|==
literal|null
condition|?
name|newRequest
else|:
name|oldRequest
operator|)
operator|.
name|getOptions
argument_list|(
name|offeringId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|newEnrollment
operator|!=
literal|null
condition|)
block|{
comment|// new enrollment is valid and / or has all the same times
if|if
condition|(
name|check
argument_list|(
name|newOffering
argument_list|,
name|distributions
argument_list|,
name|student
index|[
literal|1
index|]
argument_list|,
name|newEnrollment
argument_list|,
name|server
argument_list|)
condition|)
block|{
comment|// || isSame(oldEnrollment, newEnrollment)) {
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|enrollment
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|enrollment
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|STORED
argument_list|)
expr_stmt|;
for|for
control|(
name|XSection
name|assignment
range|:
name|newOffering
operator|.
name|getSections
argument_list|(
name|newEnrollment
argument_list|)
control|)
name|enrollment
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|assignment
argument_list|,
name|newEnrollment
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addEnrollment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
name|action
operator|.
name|setEndTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ResectioningWeights
operator|.
name|isVerySame
argument_list|(
name|newEnrollment
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|newOffering
operator|.
name|getSections
argument_list|(
name|newEnrollment
argument_list|)
argument_list|,
name|oldOffering
operator|.
name|getSections
argument_list|(
name|oldEnrollment
argument_list|)
argument_list|)
condition|)
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|NotifyStudentAction
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|student
index|[
literal|0
index|]
operator|==
literal|null
condition|?
name|student
index|[
literal|1
index|]
operator|.
name|getStudentId
argument_list|()
else|:
name|student
index|[
literal|0
index|]
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|oldEnrollment
argument_list|(
name|oldOffering
argument_list|,
name|oldEnrollment
argument_list|)
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|newRequest
operator|=
name|server
operator|.
name|assign
argument_list|(
name|newRequest
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
operator|new
name|SectioningRequest
argument_list|(
name|newOffering
argument_list|,
name|newRequest
argument_list|,
name|student
index|[
literal|0
index|]
argument_list|,
name|oldEnrollment
argument_list|,
name|action
argument_list|,
operator|(
name|oldRequest
operator|==
literal|null
condition|?
name|newRequest
else|:
name|oldRequest
operator|)
operator|.
name|getOptions
argument_list|(
name|offeringId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DataProperties
name|properties
init|=
operator|new
name|DataProperties
argument_list|()
decl_stmt|;
name|ResectioningWeights
name|w
init|=
operator|new
name|ResectioningWeights
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|DistanceConflict
name|dc
init|=
operator|new
name|DistanceConflict
argument_list|(
name|server
operator|.
name|getDistanceMetric
argument_list|()
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|TimeOverlapsCounter
name|toc
init|=
operator|new
name|TimeOverlapsCounter
argument_list|(
literal|null
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|Date
name|ts
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
for|for
control|(
name|SectioningRequest
name|r
range|:
name|queue
control|)
block|{
name|helper
operator|.
name|debug
argument_list|(
literal|"Resectioning "
operator|+
name|r
operator|.
name|getRequest
argument_list|()
operator|+
literal|" (was "
operator|+
operator|(
name|r
operator|.
name|getLastEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|"not assigned"
else|:
name|r
operator|.
name|getLastEnrollment
argument_list|()
operator|.
name|getSectionIds
argument_list|()
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|long
name|c0
init|=
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
decl_stmt|;
name|XEnrollment
name|e
init|=
name|r
operator|.
name|resection
argument_list|(
name|server
argument_list|,
name|w
argument_list|,
name|dc
argument_list|,
name|toc
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
operator|&&
name|r
operator|.
name|getLastEnrollment
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// remained unassigned
continue|continue;
block|}
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|setTimeStamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|r
operator|.
name|setRequest
argument_list|(
name|server
operator|.
name|assign
argument_list|(
name|r
operator|.
name|getRequest
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|enrollment
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|enrollment
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|STORED
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|sectionId
range|:
name|e
operator|.
name|getSectionIds
argument_list|()
control|)
name|enrollment
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|newOffering
operator|.
name|getSection
argument_list|(
name|sectionId
argument_list|)
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|getAction
argument_list|()
operator|.
name|addEnrollment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|debug
argument_list|(
literal|"New: "
operator|+
operator|(
name|e
operator|==
literal|null
condition|?
literal|"not assigned"
else|:
name|e
operator|.
name|getSectionIds
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|StudentClassEnrollment
argument_list|>
name|enrollmentMap
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|StudentClassEnrollment
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|approvedBy
init|=
literal|null
decl_stmt|;
name|Date
name|approvedDate
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|i
init|=
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|enrl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|enrl
operator|.
name|getCourseRequest
argument_list|()
operator|!=
literal|null
operator|&&
name|enrl
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getRequest
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|!=
literal|null
operator|&&
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|offeringId
argument_list|)
operator|)
condition|)
block|{
name|helper
operator|.
name|debug
argument_list|(
literal|"Deleting "
operator|+
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|enrollmentMap
operator|.
name|put
argument_list|(
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|enrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|approvedBy
operator|==
literal|null
operator|&&
name|enrl
operator|.
name|getApprovedBy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|approvedBy
operator|=
name|enrl
operator|.
name|getApprovedBy
argument_list|()
expr_stmt|;
name|approvedDate
operator|=
name|enrl
operator|.
name|getApprovedDate
argument_list|()
expr_stmt|;
block|}
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getStudentEnrollments
argument_list|()
operator|.
name|remove
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|CourseDemand
name|cd
init|=
literal|null
decl_stmt|;
name|demands
label|:
for|for
control|(
name|CourseDemand
name|x
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|q
range|:
name|x
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|q
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|offeringId
argument_list|)
condition|)
block|{
name|cd
operator|=
name|x
expr_stmt|;
break|break
name|demands
break|;
block|}
if|if
condition|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// save enrollment
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
init|=
literal|null
decl_stmt|;
name|CourseOffering
name|co
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|co
operator|==
literal|null
condition|)
for|for
control|(
name|CourseOffering
name|x
range|:
name|io
operator|.
name|getCourseOfferings
argument_list|()
control|)
if|if
condition|(
name|x
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
name|co
operator|=
name|x
expr_stmt|;
for|for
control|(
name|Long
name|sectionId
range|:
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sectionId
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cd
operator|!=
literal|null
operator|&&
name|cr
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|x
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|x
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|offeringId
argument_list|)
condition|)
block|{
name|cr
operator|=
name|x
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|co
operator|==
literal|null
condition|)
name|co
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
expr_stmt|;
name|StudentClassEnrollment
name|enrl
init|=
operator|new
name|StudentClassEnrollment
argument_list|()
decl_stmt|;
name|enrl
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getStudentEnrollments
argument_list|()
operator|.
name|add
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setCourseOffering
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|StudentClassEnrollment
name|old
init|=
name|enrollmentMap
operator|.
name|get
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
name|enrl
operator|.
name|setTimestamp
argument_list|(
name|old
operator|!=
literal|null
condition|?
name|old
operator|.
name|getTimestamp
argument_list|()
else|:
name|ts
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setChangedBy
argument_list|(
name|old
operator|!=
literal|null
condition|?
name|old
operator|.
name|getChangedBy
argument_list|()
else|:
name|helper
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
name|StudentClassEnrollment
operator|.
name|SystemChange
operator|.
name|SYSTEM
operator|.
name|toString
argument_list|()
else|:
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setApprovedBy
argument_list|(
name|approvedBy
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setApprovedDate
argument_list|(
name|approvedDate
argument_list|)
expr_stmt|;
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|add
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
comment|/* 						if (cr != null) { 							if (cr.getClassEnrollments() == null) cr.setClassEnrollments(new HashSet<StudentClassEnrollment>()); 							cr.getClassEnrollments().add(enrl); 						} 						*/
name|helper
operator|.
name|debug
argument_list|(
literal|"Adding "
operator|+
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|!
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
comment|// wait-list
if|if
condition|(
name|cd
operator|!=
literal|null
operator|&&
operator|!
name|cd
operator|.
name|isWaitlist
argument_list|()
condition|)
block|{
name|cd
operator|.
name|setWaitlist
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|isWaitlist
argument_list|()
condition|)
name|r
operator|.
name|setRequest
argument_list|(
name|server
operator|.
name|waitlist
argument_list|(
name|r
operator|.
name|getRequest
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|EnrollStudent
operator|.
name|updateSpace
argument_list|(
name|server
argument_list|,
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|SectioningRequest
operator|.
name|convert
argument_list|(
name|server
operator|.
name|getStudent
argument_list|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|getRequest
argument_list|()
argument_list|,
name|server
argument_list|,
name|newOffering
argument_list|,
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getEnrollment
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|getLastEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|SectioningRequest
operator|.
name|convert
argument_list|(
name|r
operator|.
name|getOldStudent
argument_list|()
argument_list|,
name|r
operator|.
name|getRequest
argument_list|()
argument_list|,
name|server
argument_list|,
name|oldOffering
argument_list|,
name|r
operator|.
name|getLastEnrollment
argument_list|()
argument_list|)
argument_list|,
name|newOffering
argument_list|,
name|oldOffering
argument_list|)
expr_stmt|;
name|server
operator|.
name|persistExpectedSpaces
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|NotifyStudentAction
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|oldEnrollment
argument_list|(
name|oldOffering
argument_list|,
name|r
operator|.
name|getLastEnrollment
argument_list|()
argument_list|)
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
name|e
operator|==
literal|null
condition|?
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|NULL
else|:
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
name|r
operator|.
name|getAction
argument_list|()
operator|.
name|setCpuTime
argument_list|(
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
operator|-
name|c0
argument_list|)
expr_stmt|;
name|r
operator|.
name|getAction
argument_list|()
operator|.
name|setEndTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|check
parameter_list|(
name|XOffering
name|offering
parameter_list|,
name|Collection
argument_list|<
name|XDistribution
argument_list|>
name|distributions
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|XEnrollment
name|enrollment
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|)
block|{
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|offering
operator|.
name|getSections
argument_list|(
name|enrollment
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|.
name|size
argument_list|()
operator|!=
name|offering
operator|.
name|getConfig
argument_list|(
name|enrollment
operator|.
name|getConfigId
argument_list|()
argument_list|)
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|XSection
name|s1
range|:
name|sections
control|)
for|for
control|(
name|XSection
name|s2
range|:
name|sections
control|)
if|if
condition|(
name|s1
operator|.
name|getSectionId
argument_list|()
operator|<
name|s2
operator|.
name|getSectionId
argument_list|()
operator|&&
name|s1
operator|.
name|isOverlapping
argument_list|(
name|distributions
argument_list|,
name|s2
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|offering
operator|.
name|isAllowOverlap
argument_list|(
name|student
argument_list|,
name|enrollment
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|sections
argument_list|)
condition|)
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
operator|.
name|equals
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
block|{
name|XOffering
name|other
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|XSection
argument_list|>
name|assignment
init|=
name|other
operator|.
name|getSections
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|other
operator|.
name|isAllowOverlap
argument_list|(
name|student
argument_list|,
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|assignment
argument_list|)
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
if|if
condition|(
name|section
operator|.
name|isOverlapping
argument_list|(
name|offering
operator|.
name|getDistributions
argument_list|()
argument_list|,
name|assignment
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"reload-offering"
return|;
block|}
block|}
end_class

end_unit

