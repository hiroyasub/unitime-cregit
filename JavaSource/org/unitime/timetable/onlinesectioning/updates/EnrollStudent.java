begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|DefaultSingleAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|GradeMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|GradeModes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|WaitListMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AdvisorCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassWaitList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequestOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FreeTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentEnrollmentMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|HasCacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|GetAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomStudentEnrollmentHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|Customization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CriticalCoursesProvider
operator|.
name|CriticalCourses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomCriticalCoursesHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|StudentEnrollmentProvider
operator|.
name|EnrollmentFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|StudentEnrollmentProvider
operator|.
name|EnrollmentRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XExpectations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|CheckMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|CheckMaster
operator|.
name|Master
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|CheckAssignmentAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|SectioningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|FindAssignmentAction
operator|.
name|IdPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|specreg
operator|.
name|WaitListCheckValidation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|specreg
operator|.
name|WaitListSubmitOverrides
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|CheckMaster
argument_list|(
name|Master
operator|.
name|REQUIRED
argument_list|)
specifier|public
class|class
name|EnrollStudent
implements|implements
name|OnlineSectioningAction
argument_list|<
name|ClassAssignmentInterface
argument_list|>
implements|,
name|HasCacheMode
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iStudentId
decl_stmt|;
specifier|private
name|CourseRequestInterface
name|iRequest
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|iAssignment
decl_stmt|;
specifier|private
name|boolean
name|iCheckWaitLists
init|=
literal|false
decl_stmt|;
specifier|public
name|EnrollStudent
name|forStudent
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|iStudentId
operator|=
name|studentId
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|EnrollStudent
name|withRequest
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|EnrollStudent
name|withAssignment
parameter_list|(
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|assignment
parameter_list|)
block|{
name|iAssignment
operator|=
name|assignment
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|EnrollStudent
name|withWaitListCheck
parameter_list|(
name|boolean
name|checkWaitLists
parameter_list|)
block|{
name|iCheckWaitLists
operator|=
name|checkWaitLists
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Long
name|getStudentId
parameter_list|()
block|{
return|return
name|iStudentId
return|;
block|}
specifier|public
name|CourseRequestInterface
name|getRequest
parameter_list|()
block|{
return|return
name|iRequest
return|;
block|}
specifier|public
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|getAssignment
parameter_list|()
block|{
return|return
name|iAssignment
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClassAssignmentInterface
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
specifier|final
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNotSupportedFeature
argument_list|()
argument_list|)
throw|;
name|Set
argument_list|<
name|Long
argument_list|>
name|offeringIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|lockedCourses
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|EnrollmentFailure
argument_list|>
name|failures
init|=
literal|null
decl_stmt|;
name|boolean
name|includeRequestInTheReturnMessage
init|=
literal|false
decl_stmt|;
name|boolean
name|rescheduling
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Enrollment.ReSchedulingEnabled"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|getRequest
argument_list|()
operator|.
name|removeDuplicates
argument_list|()
expr_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
range|:
name|getAssignment
argument_list|()
control|)
if|if
condition|(
name|ca
operator|!=
literal|null
operator|&&
operator|!
name|ca
operator|.
name|isFreeTime
argument_list|()
operator|&&
operator|!
name|ca
operator|.
name|isDummy
argument_list|()
operator|&&
operator|!
name|ca
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
block|{
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|ca
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|server
operator|.
name|isOfferingLocked
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
block|{
name|lockedCourses
operator|.
name|add
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rescheduling
condition|)
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|getRequest
argument_list|()
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
operator|!
name|r
operator|.
name|isWaitList
argument_list|()
operator|&&
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
condition|)
block|{
if|if
condition|(
name|rc
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
name|r
operator|.
name|setWaitList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rc
operator|.
name|hasCourseName
argument_list|()
condition|)
block|{
if|if
condition|(
name|course
operator|.
name|matchCourse
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
condition|)
name|r
operator|.
name|setWaitList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|offeringIds
operator|.
name|add
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|OnlineSectioningServer
operator|.
name|ServerCallback
argument_list|<
name|Boolean
argument_list|>
name|offeringChecked
init|=
operator|new
name|OnlineSectioningServer
operator|.
name|ServerCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|error
argument_list|(
literal|"Offering check failed: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
block|}
block|}
decl_stmt|;
name|CriticalCourses
name|cc
init|=
literal|null
decl_stmt|;
name|boolean
name|checkCritical
init|=
name|ApplicationProperty
operator|.
name|EnrollmentCheckCritical
operator|.
name|isTrue
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|CustomCriticalCoursesHolder
operator|.
name|hasProvider
argument_list|()
operator|&&
name|checkCritical
condition|)
name|cc
operator|=
name|CustomCriticalCoursesHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|getCriticalCourses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|server
operator|.
name|getStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"Failed to lookup critical courses: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|WaitListMode
name|wlMode
init|=
name|WaitListMode
operator|.
name|None
decl_stmt|;
name|boolean
name|hasWaitList
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|ErrorMessage
argument_list|>
name|checkErrors
init|=
operator|(
name|getRequest
argument_list|()
operator|.
name|areTimeConflictsAllowed
argument_list|()
operator|||
name|getRequest
argument_list|()
operator|.
name|areSpaceConflictsAllowed
argument_list|()
operator|||
name|getRequest
argument_list|()
operator|.
name|areLinkedConflictsAllowed
argument_list|()
condition|?
operator|new
name|TreeSet
argument_list|<
name|ErrorMessage
argument_list|>
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|Lock
name|lock
init|=
name|server
operator|.
name|lockStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|,
name|offeringIds
argument_list|,
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|GradeModes
name|gradeModes
init|=
operator|new
name|GradeModes
argument_list|()
decl_stmt|;
try|try
block|{
name|helper
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|helper
operator|.
name|getAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
operator|!=
literal|null
condition|)
name|action
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|requested
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|requested
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|REQUESTED
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|Builder
argument_list|>
name|options
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|Builder
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|assignment
range|:
name|getAssignment
argument_list|()
control|)
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Section
name|s
init|=
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
name|requested
operator|.
name|addSection
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|assignment
operator|.
name|isFreeTime
argument_list|()
operator|&&
operator|!
name|assignment
operator|.
name|isDummy
argument_list|()
operator|&&
operator|!
name|assignment
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|Builder
name|option
init|=
name|options
operator|.
name|get
argument_list|(
name|assignment
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|==
literal|null
condition|)
block|{
name|option
operator|=
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|OptionType
operator|.
name|ORIGINAL_ENROLLMENT
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
name|assignment
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
name|option
operator|.
name|addSection
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|requested
argument_list|)
expr_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Request
name|r
range|:
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|getRequest
argument_list|()
argument_list|)
control|)
name|action
operator|.
name|addRequest
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EnrollmentRequest
argument_list|>
name|enrlCheck
init|=
name|server
operator|.
name|createAction
argument_list|(
name|CheckAssignmentAction
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|withAssignment
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|check
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|checkErrors
argument_list|)
decl_stmt|;
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s from Student s "
operator|+
literal|"left join fetch s.courseDemands as cd "
operator|+
literal|"left join fetch cd.courseRequests as cr "
operator|+
literal|"left join fetch cd.freeTime as ft "
operator|+
literal|"left join fetch cr.courseOffering as co "
operator|+
literal|"left join fetch cr.courseRequestOptions as cro "
operator|+
literal|"left join fetch cr.classWaitLists as cwl "
operator|+
literal|"left join fetch s.classEnrollments as e "
operator|+
literal|"left join fetch e.clazz as c "
operator|+
literal|"left join fetch c.managingDept as cmd "
operator|+
literal|"left join fetch c.schedulingSubpart as ss "
operator|+
literal|"where s.uniqueId = :studentId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"studentId"
argument_list|,
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
name|wlMode
operator|=
name|student
operator|.
name|getWaitListMode
argument_list|()
expr_stmt|;
name|XStudent
name|oldStudent
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
name|action
operator|.
name|getStudentBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|oldStudent
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|oldStudent
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|hasWaitListedCourses
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|wlMode
operator|==
name|WaitListMode
operator|.
name|WaitList
condition|)
block|{
name|r
label|:
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|getRequest
argument_list|()
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|isWaitList
argument_list|()
condition|)
block|{
name|hasWaitListedCourses
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|isCanWaitList
argument_list|()
condition|)
block|{
name|hasWaitListedCourses
operator|=
literal|true
expr_stmt|;
break|break
name|r
break|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasWaitListedCourses
condition|)
for|for
control|(
name|XRequest
name|r
range|:
name|oldStudent
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
operator|&&
name|r
operator|instanceof
name|XCourseRequest
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|isWaitlist
argument_list|()
condition|)
block|{
name|hasWaitListedCourses
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|CustomStudentEnrollmentHolder
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
name|failures
operator|=
name|CustomStudentEnrollmentHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|enroll
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|oldStudent
argument_list|,
name|enrlCheck
argument_list|,
name|lockedCourses
argument_list|,
name|gradeModes
argument_list|,
name|hasWaitListedCourses
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|i
init|=
name|getAssignment
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ca
operator|==
literal|null
operator|||
name|ca
operator|.
name|isFreeTime
argument_list|()
operator|||
name|ca
operator|.
name|getClassId
argument_list|()
operator|==
literal|null
operator|||
name|ca
operator|.
name|isDummy
argument_list|()
operator|||
name|ca
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|EnrollmentFailure
name|f
range|:
name|failures
control|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|isEnrolled
argument_list|()
operator|&&
name|f
operator|.
name|getSection
argument_list|()
operator|.
name|getSectionId
argument_list|()
operator|.
name|equals
argument_list|(
name|ca
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
name|failures
label|:
for|for
control|(
name|EnrollmentFailure
name|f
range|:
name|failures
control|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|isEnrolled
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
range|:
name|getAssignment
argument_list|()
control|)
if|if
condition|(
name|ca
operator|!=
literal|null
operator|&&
name|f
operator|.
name|getSection
argument_list|()
operator|.
name|getSectionId
argument_list|()
operator|.
name|equals
argument_list|(
name|ca
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
continue|continue
name|failures
continue|;
name|ClassAssignment
name|ca
init|=
operator|new
name|ClassAssignment
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setClassId
argument_list|(
name|f
operator|.
name|getSection
argument_list|()
operator|.
name|getSectionId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|f
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|getAssignment
argument_list|()
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|CourseDemand
argument_list|>
name|remaining
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
argument_list|(
name|student
operator|.
name|getCourseDemands
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|priority
init|=
literal|0
decl_stmt|;
name|Date
name|ts
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|CourseRequest
argument_list|>
name|course2request
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|CourseRequest
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|CourseDemand
argument_list|>
name|alt2demand
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|CourseDemand
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|getRequest
argument_list|()
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|List
argument_list|<
name|XCourseId
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|XCourseId
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
range|:
name|rc
operator|.
name|getFreeTime
argument_list|()
control|)
block|{
name|CourseDemand
name|cd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseDemand
argument_list|>
name|i
init|=
name|remaining
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|adept
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|cd
operator|=
name|adept
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|cd
operator|==
literal|null
condition|)
block|{
name|cd
operator|=
operator|new
name|CourseDemand
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setChangedBy
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
name|cd
operator|.
name|setAlternative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setWaitlist
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setNoSub
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setCritical
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FreeTime
name|free
init|=
name|cd
operator|.
name|getFreeTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|free
operator|==
literal|null
condition|)
block|{
name|free
operator|=
operator|new
name|FreeTime
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setFreeTime
argument_list|(
name|free
argument_list|)
expr_stmt|;
block|}
name|free
operator|.
name|setCategory
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|free
operator|.
name|setDayCode
argument_list|(
name|DayCode
operator|.
name|toInt
argument_list|(
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|ft
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|free
operator|.
name|setStartSlot
argument_list|(
name|ft
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setLength
argument_list|(
name|ft
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setSession
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setName
argument_list|(
name|ft
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|free
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
name|priority
operator|++
expr_stmt|;
block|}
else|else
block|{
name|XCourseId
name|c
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
name|courses
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|CourseDemand
name|cd
init|=
literal|null
decl_stmt|;
name|adepts
label|:
for|for
control|(
name|Iterator
argument_list|<
name|CourseDemand
argument_list|>
name|i
init|=
name|remaining
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|adept
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
for|for
control|(
name|CourseRequest
name|cr
range|:
name|adept
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|courses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|cd
operator|=
name|adept
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break
name|adepts
break|;
block|}
block|}
if|if
condition|(
name|cd
operator|==
literal|null
condition|)
block|{
name|cd
operator|=
operator|new
name|CourseDemand
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setChangedBy
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setCourseRequests
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setEnrollmentMessages
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentEnrollmentMessage
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|StudentEnrollmentMessage
argument_list|>
name|i
init|=
name|cd
operator|.
name|getEnrollmentMessages
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentEnrollmentMessage
name|message
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|cd
operator|.
name|setAlternative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|Boolean
name|oldWaitList
init|=
name|cd
operator|.
name|isWaitlist
argument_list|()
decl_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isWaitlist
argument_list|()
argument_list|)
operator|||
name|r
operator|.
name|isWaitList
argument_list|()
condition|)
name|hasWaitList
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isWaitList
argument_list|()
operator|&&
operator|!
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|getWaitlist
argument_list|()
argument_list|)
condition|)
name|cd
operator|.
name|setWaitlistedTimeStamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setWaitlist
argument_list|(
name|r
operator|.
name|isWaitList
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setNoSub
argument_list|(
name|r
operator|.
name|isNoSub
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkCritical
condition|)
name|cd
operator|.
name|setCritical
argument_list|(
name|isCritical
argument_list|(
name|courses
argument_list|,
name|cc
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|CourseRequest
argument_list|>
name|requests
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|(
name|cd
operator|.
name|getCourseRequests
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|order
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XCourseId
name|co
range|:
name|courses
control|)
block|{
name|CourseRequest
name|cr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|requests
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|cr
operator|=
name|requests
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getClassWaitLists
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|ClassWaitList
argument_list|>
name|i
init|=
name|cr
operator|.
name|getClassWaitLists
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|cr
operator|=
operator|new
name|CourseRequest
argument_list|()
expr_stmt|;
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseDemand
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseRequestOptions
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseRequestOption
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cr
operator|.
name|updateCourseRequestOption
argument_list|(
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|OptionType
operator|.
name|ORIGINAL_ENROLLMENT
argument_list|,
name|options
operator|.
name|get
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setAllowOverlap
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCredit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOrder
argument_list|(
name|order
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|cr
operator|.
name|setCourseOffering
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isWaitList
argument_list|()
operator|&&
name|Customization
operator|.
name|WaitListValidationProvider
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|NOT_CHECKED
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseRequestOverrideIntent
argument_list|(
name|CourseRequestOverrideIntent
operator|.
name|WAITLIST
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideExternalId
argument_list|(
literal|"TBD"
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideTimeStamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|getWaitlist
argument_list|()
argument_list|)
operator|&&
operator|!
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|oldWaitList
argument_list|)
operator|&&
name|Customization
operator|.
name|WaitListValidationProvider
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
name|cr
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|CourseRequestOverrideStatus
operator|.
name|NOT_CHECKED
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseRequestOverrideIntent
argument_list|(
name|CourseRequestOverrideIntent
operator|.
name|WAITLIST
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideExternalId
argument_list|(
literal|"TBD"
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideTimeStamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|getWaitlist
argument_list|()
argument_list|)
operator|&&
name|cr
operator|.
name|getCourseRequestOverrideIntent
argument_list|()
operator|==
name|CourseRequestOverrideIntent
operator|.
name|WAITLIST
condition|)
block|{
name|cr
operator|.
name|setOverrideStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideIntent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|cr
operator|.
name|updatePreferences
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
name|course2request
operator|.
name|put
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|cr
argument_list|)
expr_stmt|;
if|if
condition|(
name|failures
operator|!=
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EnrollmentFailure
name|f
range|:
name|failures
control|)
block|{
if|if
condition|(
name|co
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
if|if
condition|(
name|message
operator|==
literal|null
condition|)
name|message
operator|=
name|f
operator|.
name|getMessage
argument_list|()
expr_stmt|;
if|else if
condition|(
operator|!
name|message
operator|.
name|contains
argument_list|(
name|f
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
name|message
operator|+=
literal|"\n"
operator|+
name|f
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StudentEnrollmentMessage
name|m
init|=
operator|new
name|StudentEnrollmentMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|setCourseDemand
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|m
operator|.
name|setLevel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m
operator|.
name|setType
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|m
operator|.
name|setMessage
argument_list|(
name|message
operator|.
name|length
argument_list|()
operator|>
literal|255
condition|?
name|message
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|252
argument_list|)
operator|+
literal|"..."
else|:
name|message
argument_list|)
expr_stmt|;
name|m
operator|.
name|setOrder
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cd
operator|.
name|getEnrollmentMessages
argument_list|()
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
while|while
condition|(
name|requests
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CourseRequest
name|cr
init|=
name|requests
operator|.
name|next
argument_list|()
decl_stmt|;
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|cd
argument_list|)
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|isAlternativeCourseEnabled
argument_list|()
operator|&&
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|CourseOffering
name|alt
init|=
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getAlternativeOffering
argument_list|()
decl_stmt|;
if|if
condition|(
name|alt
operator|!=
literal|null
condition|)
name|alt2demand
operator|.
name|put
argument_list|(
name|alt
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
name|priority
operator|++
expr_stmt|;
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|getRequest
argument_list|()
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
name|List
argument_list|<
name|XCourseId
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|XCourseId
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
range|:
name|rc
operator|.
name|getFreeTime
argument_list|()
control|)
block|{
name|CourseDemand
name|cd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseDemand
argument_list|>
name|i
init|=
name|remaining
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|adept
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|cd
operator|=
name|adept
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|cd
operator|==
literal|null
condition|)
block|{
name|cd
operator|=
operator|new
name|CourseDemand
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setChangedBy
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
name|cd
operator|.
name|setAlternative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setWaitlist
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setNoSub
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setCritical
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FreeTime
name|free
init|=
name|cd
operator|.
name|getFreeTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|free
operator|==
literal|null
condition|)
block|{
name|free
operator|=
operator|new
name|FreeTime
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setFreeTime
argument_list|(
name|free
argument_list|)
expr_stmt|;
block|}
name|free
operator|.
name|setCategory
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|free
operator|.
name|setDayCode
argument_list|(
name|DayCode
operator|.
name|toInt
argument_list|(
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|ft
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|free
operator|.
name|setStartSlot
argument_list|(
name|ft
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setLength
argument_list|(
name|ft
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setSession
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setName
argument_list|(
name|ft
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|free
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
name|priority
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|rc
operator|.
name|isCourse
argument_list|()
condition|)
block|{
name|XCourseId
name|c
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
name|courses
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|CourseDemand
name|cd
init|=
literal|null
decl_stmt|;
name|adepts
label|:
for|for
control|(
name|Iterator
argument_list|<
name|CourseDemand
argument_list|>
name|i
init|=
name|remaining
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|adept
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
for|for
control|(
name|CourseRequest
name|cr
range|:
name|adept
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|courses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|cd
operator|=
name|adept
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break
name|adepts
break|;
block|}
block|}
if|if
condition|(
name|cd
operator|==
literal|null
condition|)
block|{
name|cd
operator|=
operator|new
name|CourseDemand
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setChangedBy
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setCourseRequests
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|StudentEnrollmentMessage
argument_list|>
name|i
init|=
name|cd
operator|.
name|getEnrollmentMessages
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentEnrollmentMessage
name|message
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|cd
operator|.
name|setAlternative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isWaitlist
argument_list|()
argument_list|)
operator|||
name|r
operator|.
name|isWaitList
argument_list|()
condition|)
name|hasWaitList
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isWaitList
argument_list|()
operator|&&
operator|!
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|getWaitlist
argument_list|()
argument_list|)
condition|)
name|cd
operator|.
name|setWaitlistedTimeStamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setWaitlist
argument_list|(
name|r
operator|.
name|isWaitList
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setNoSub
argument_list|(
name|r
operator|.
name|isNoSub
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setCritical
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|CourseRequest
argument_list|>
name|requests
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|(
name|cd
operator|.
name|getCourseRequests
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|order
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XCourseId
name|co
range|:
name|courses
control|)
block|{
name|CourseRequest
name|cr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|requests
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|cr
operator|=
name|requests
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getClassWaitLists
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|ClassWaitList
argument_list|>
name|i
init|=
name|cr
operator|.
name|getClassWaitLists
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|cr
operator|=
operator|new
name|CourseRequest
argument_list|()
expr_stmt|;
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseDemand
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
name|cr
operator|.
name|updateCourseRequestOption
argument_list|(
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|OptionType
operator|.
name|ORIGINAL_ENROLLMENT
argument_list|,
name|options
operator|.
name|get
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setAllowOverlap
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCredit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOrder
argument_list|(
name|order
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|cr
operator|.
name|setCourseOffering
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideIntent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|cr
operator|.
name|updatePreferences
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
name|course2request
operator|.
name|put
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|cr
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|requests
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CourseRequest
name|cr
init|=
name|requests
operator|.
name|next
argument_list|()
decl_stmt|;
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|priority
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|cc
operator|!=
literal|null
operator|&&
name|student
operator|.
name|getAdvisorCourseRequests
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AdvisorCourseRequest
name|acr
range|:
name|student
operator|.
name|getAdvisorCourseRequests
argument_list|()
control|)
block|{
name|int
name|crit
init|=
name|acr
operator|.
name|isCritical
argument_list|(
name|cc
argument_list|)
decl_stmt|;
if|if
condition|(
name|acr
operator|.
name|getCritical
argument_list|()
operator|==
literal|null
operator|||
name|acr
operator|.
name|getCritical
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
name|crit
condition|)
block|{
name|acr
operator|.
name|setCritical
argument_list|(
name|crit
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|acr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Map
argument_list|<
name|IdPair
argument_list|,
name|StudentClassEnrollment
argument_list|>
name|oldEnrollments
init|=
operator|new
name|HashMap
argument_list|<
name|IdPair
argument_list|,
name|StudentClassEnrollment
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Object
index|[]
argument_list|>
name|oldApprovals
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|student
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
name|oldEnrollments
operator|.
name|put
argument_list|(
operator|new
name|IdPair
argument_list|(
name|e
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getApprovedBy
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|oldApprovals
operator|.
name|containsKey
argument_list|(
name|e
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|oldApprovals
operator|.
name|put
argument_list|(
name|e
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getApprovedBy
argument_list|()
block|,
name|e
operator|.
name|getApprovedDate
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|classIds
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
range|:
name|getAssignment
argument_list|()
control|)
block|{
if|if
condition|(
name|ca
operator|==
literal|null
operator|||
name|ca
operator|.
name|isFreeTime
argument_list|()
operator|||
name|ca
operator|.
name|getClassId
argument_list|()
operator|==
literal|null
operator|||
name|ca
operator|.
name|isDummy
argument_list|()
operator|||
name|ca
operator|.
name|isTeachingAssignment
argument_list|()
operator|||
name|oldEnrollments
operator|.
name|containsKey
argument_list|(
operator|new
name|IdPair
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|ca
operator|.
name|getClassId
argument_list|()
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classIds
operator|==
literal|null
condition|)
name|classIds
operator|=
name|ca
operator|.
name|getClassId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
else|else
name|classIds
operator|+=
literal|","
operator|+
name|ca
operator|.
name|getClassId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|classIds
operator|!=
literal|null
condition|)
for|for
control|(
name|Class_
name|clazz
range|:
operator|(
name|List
argument_list|<
name|Class_
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from Class_ c "
operator|+
literal|"left join fetch c.studentEnrollments as e "
operator|+
literal|"left join fetch c.schedulingSubpart as s "
operator|+
literal|"where c.uniqueId in ("
operator|+
name|classIds
operator|+
literal|")"
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|classes
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|courseDemandId2courseId
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
range|:
name|getAssignment
argument_list|()
control|)
block|{
if|if
condition|(
name|ca
operator|==
literal|null
operator|||
name|ca
operator|.
name|isFreeTime
argument_list|()
operator|||
name|ca
operator|.
name|getClassId
argument_list|()
operator|==
literal|null
operator|||
name|ca
operator|.
name|isDummy
argument_list|()
operator|||
name|ca
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
name|CourseRequest
name|cr
init|=
name|course2request
operator|.
name|get
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cr
operator|==
literal|null
condition|)
block|{
name|CourseDemand
name|cd
init|=
name|alt2demand
operator|.
name|get
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cd
operator|==
literal|null
condition|)
block|{
name|adepts
label|:
for|for
control|(
name|Iterator
argument_list|<
name|CourseDemand
argument_list|>
name|i
init|=
name|remaining
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|adept
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
for|for
control|(
name|CourseRequest
name|r
range|:
name|adept
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|cd
operator|=
name|adept
expr_stmt|;
name|cr
operator|=
name|r
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break
name|adepts
break|;
block|}
block|}
if|if
condition|(
name|cd
operator|==
literal|null
condition|)
block|{
name|cd
operator|=
operator|new
name|CourseDemand
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setChangedBy
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setCourseRequests
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
name|cd
operator|.
name|setAlternative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setPriority
argument_list|(
name|priority
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isWaitlist
argument_list|()
argument_list|)
condition|)
name|hasWaitList
operator|=
literal|true
expr_stmt|;
name|cd
operator|.
name|setWaitlist
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setNoSub
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkCritical
condition|)
name|cd
operator|.
name|setCritical
argument_list|(
name|isCritical
argument_list|(
name|ca
argument_list|,
name|cc
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cr
operator|==
literal|null
condition|)
block|{
name|cr
operator|=
operator|new
name|CourseRequest
argument_list|()
expr_stmt|;
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseDemand
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|cr
operator|.
name|updateCourseRequestOption
argument_list|(
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|OptionType
operator|.
name|ORIGINAL_ENROLLMENT
argument_list|,
name|options
operator|.
name|get
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setAllowOverlap
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCredit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOrder
argument_list|(
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseOffering
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|course2request
operator|.
name|put
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|cr
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|courseDemandId2courseId
operator|.
name|put
argument_list|(
name|cd
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|includeRequestInTheReturnMessage
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|Long
name|courseId
init|=
name|courseDemandId2courseId
operator|.
name|get
argument_list|(
name|cr
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseId
operator|==
literal|null
condition|)
name|courseDemandId2courseId
operator|.
name|put
argument_list|(
name|cr
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|courseId
operator|.
name|equals
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|cr
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|CourseDemand
name|cd
init|=
operator|new
name|CourseDemand
argument_list|()
decl_stmt|;
name|cd
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setChangedBy
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setCourseRequests
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setAlternative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setPriority
argument_list|(
name|priority
operator|++
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setWaitlist
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setNoSub
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkCritical
condition|)
name|cd
operator|.
name|setCritical
argument_list|(
name|isCritical
argument_list|(
name|ca
argument_list|,
name|cc
argument_list|)
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseDemand
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|courseDemandId2courseId
operator|.
name|put
argument_list|(
name|cd
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|includeRequestInTheReturnMessage
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|StudentClassEnrollment
name|enrl
init|=
name|oldEnrollments
operator|.
name|remove
argument_list|(
operator|new
name|IdPair
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|ca
operator|.
name|getClassId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|cr
operator|.
name|equals
argument_list|(
name|enrl
operator|.
name|getCourseRequest
argument_list|()
argument_list|)
condition|)
block|{
name|enrl
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|Class_
name|clazz
init|=
name|classes
operator|.
name|get
argument_list|(
name|ca
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|lockedCourses
operator|.
name|contains
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|ClassWaitList
name|cwl
init|=
operator|new
name|ClassWaitList
argument_list|()
decl_stmt|;
name|cwl
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setType
argument_list|(
name|ClassWaitList
operator|.
name|Type
operator|.
name|LOCKED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getClassWaitLists
argument_list|()
operator|==
literal|null
condition|)
name|cr
operator|.
name|setClassWaitLists
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ClassWaitList
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getClassWaitLists
argument_list|()
operator|.
name|add
argument_list|(
name|cwl
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|cwl
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|enrl
operator|=
operator|new
name|StudentClassEnrollment
argument_list|()
expr_stmt|;
name|enrl
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setCourseOffering
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getStudentEnrollments
argument_list|()
operator|.
name|add
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|add
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setChangedBy
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
name|approval
init|=
name|oldApprovals
operator|.
name|get
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|approval
operator|!=
literal|null
condition|)
block|{
name|enrl
operator|.
name|setApprovedBy
argument_list|(
operator|(
name|String
operator|)
name|approval
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setApprovedDate
argument_list|(
operator|(
name|Date
operator|)
name|approval
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|enrl
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseDemand
name|cd
range|:
name|remaining
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cr
argument_list|)
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isWaitlist
argument_list|()
argument_list|)
condition|)
name|hasWaitList
operator|=
literal|true
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|remove
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentClassEnrollment
name|enrl
range|:
name|oldEnrollments
operator|.
name|values
argument_list|()
control|)
block|{
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getStudentEnrollments
argument_list|()
operator|.
name|remove
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|remove
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|student
argument_list|)
expr_stmt|;
comment|// Reload student
name|XStudent
name|newStudent
init|=
operator|new
name|XStudent
argument_list|(
name|oldStudent
argument_list|,
name|student
operator|.
name|getCourseDemands
argument_list|()
argument_list|,
name|helper
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|newStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|courseRequest
init|=
operator|(
name|XCourseRequest
operator|)
name|request
decl_stmt|;
name|XEnrollment
name|enrollment
init|=
name|courseRequest
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
operator|&&
operator|!
name|offering
operator|.
name|getReservations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|enrollment
operator|.
name|setReservation
argument_list|(
name|offering
operator|.
name|guessReservation
argument_list|(
name|server
operator|.
name|getRequests
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
argument_list|,
name|newStudent
argument_list|,
name|enrollment
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|server
operator|.
name|update
argument_list|(
name|newStudent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|XRequest
name|oldRequest
range|:
name|oldStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|XEnrollment
name|oldEnrollment
init|=
operator|(
name|oldRequest
operator|instanceof
name|XCourseRequest
condition|?
operator|(
operator|(
name|XCourseRequest
operator|)
name|oldRequest
operator|)
operator|.
name|getEnrollment
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|oldEnrollment
operator|==
literal|null
condition|)
continue|continue;
comment|// free time or not assigned
name|XCourseRequest
name|newRequest
init|=
literal|null
decl_stmt|;
name|XEnrollment
name|newEnrollment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|newStudent
operator|!=
literal|null
condition|)
for|for
control|(
name|XRequest
name|r
range|:
name|newStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|XEnrollment
name|e
init|=
operator|(
name|r
operator|instanceof
name|XCourseRequest
condition|?
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getOfferingId
argument_list|()
operator|.
name|equals
argument_list|(
name|oldEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
block|{
name|newRequest
operator|=
operator|(
name|XCourseRequest
operator|)
name|r
expr_stmt|;
name|newEnrollment
operator|=
name|e
expr_stmt|;
break|break;
block|}
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|oldSections
decl_stmt|;
if|if
condition|(
name|newEnrollment
operator|==
literal|null
condition|)
block|{
name|oldSections
operator|=
name|oldEnrollment
operator|.
name|getSectionIds
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|oldSections
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Long
name|sectionId
range|:
name|oldEnrollment
operator|.
name|getSectionIds
argument_list|()
control|)
if|if
condition|(
operator|!
name|newEnrollment
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|sectionId
argument_list|)
condition|)
name|oldSections
operator|.
name|add
argument_list|(
name|sectionId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldSections
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
comment|// no change detected
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|oldEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|CheckOfferingAction
operator|.
name|isCheckNeeded
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|oldEnrollment
argument_list|,
name|newEnrollment
argument_list|)
condition|)
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|CheckOfferingAction
operator|.
name|class
argument_list|)
operator|.
name|forOfferings
argument_list|(
name|oldEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
operator|.
name|skipStudents
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
argument_list|,
name|offeringChecked
argument_list|)
expr_stmt|;
name|updateSpace
argument_list|(
name|server
argument_list|,
name|newEnrollment
operator|==
literal|null
condition|?
literal|null
else|:
name|SectioningRequest
operator|.
name|convert
argument_list|(
name|newStudent
argument_list|,
name|newRequest
argument_list|,
name|server
argument_list|,
name|offering
argument_list|,
name|newEnrollment
argument_list|,
name|wlMode
argument_list|)
argument_list|,
name|oldEnrollment
operator|==
literal|null
condition|?
literal|null
else|:
name|SectioningRequest
operator|.
name|convert
argument_list|(
name|oldStudent
argument_list|,
operator|(
name|XCourseRequest
operator|)
name|oldRequest
argument_list|,
name|server
argument_list|,
name|offering
argument_list|,
name|oldEnrollment
argument_list|,
name|wlMode
argument_list|)
argument_list|,
name|offering
argument_list|)
expr_stmt|;
name|server
operator|.
name|persistExpectedSpaces
argument_list|(
name|oldEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|previous
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|previous
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|PREVIOUS
argument_list|)
expr_stmt|;
for|for
control|(
name|XRequest
name|oldRequest
range|:
name|oldStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|XEnrollment
name|oldEnrollment
init|=
operator|(
name|oldRequest
operator|instanceof
name|XCourseRequest
condition|?
operator|(
operator|(
name|XCourseRequest
operator|)
name|oldRequest
operator|)
operator|.
name|getEnrollment
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|oldEnrollment
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|server
operator|.
name|getOffering
argument_list|(
name|oldEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
operator|.
name|getSections
argument_list|(
name|oldEnrollment
argument_list|)
control|)
name|previous
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
name|oldEnrollment
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|requests
label|:
for|for
control|(
name|XRequest
name|newRequest
range|:
name|newStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|XEnrollment
name|newEnrollment
init|=
operator|(
name|newRequest
operator|instanceof
name|XCourseRequest
condition|?
operator|(
operator|(
name|XCourseRequest
operator|)
name|newRequest
operator|)
operator|.
name|getEnrollment
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|newEnrollment
operator|==
literal|null
condition|)
continue|continue;
comment|// free time or not assigned
if|if
condition|(
name|oldStudent
operator|!=
literal|null
condition|)
for|for
control|(
name|XRequest
name|oldRequest
range|:
name|oldStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|XEnrollment
name|oldEnrollment
init|=
operator|(
name|oldRequest
operator|instanceof
name|XCourseRequest
condition|?
operator|(
operator|(
name|XCourseRequest
operator|)
name|oldRequest
operator|)
operator|.
name|getEnrollment
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|oldEnrollment
operator|!=
literal|null
operator|&&
name|oldEnrollment
operator|.
name|getOfferingId
argument_list|()
operator|.
name|equals
argument_list|(
name|newEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
continue|continue
name|requests
continue|;
block|}
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|newEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|updateSpace
argument_list|(
name|server
argument_list|,
name|SectioningRequest
operator|.
name|convert
argument_list|(
name|newStudent
argument_list|,
operator|(
name|XCourseRequest
operator|)
name|newRequest
argument_list|,
name|server
argument_list|,
name|offering
argument_list|,
name|newEnrollment
argument_list|,
name|wlMode
argument_list|)
argument_list|,
literal|null
argument_list|,
name|offering
argument_list|)
expr_stmt|;
name|server
operator|.
name|persistExpectedSpaces
argument_list|(
name|newEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|stored
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|stored
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|STORED
argument_list|)
expr_stmt|;
for|for
control|(
name|XRequest
name|newRequest
range|:
name|newStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|XEnrollment
name|newEnrollment
init|=
operator|(
name|newRequest
operator|instanceof
name|XCourseRequest
condition|?
operator|(
operator|(
name|XCourseRequest
operator|)
name|newRequest
operator|)
operator|.
name|getEnrollment
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|newEnrollment
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|server
operator|.
name|getOffering
argument_list|(
name|newEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
operator|.
name|getSections
argument_list|(
name|newEnrollment
argument_list|)
control|)
name|stored
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
name|newEnrollment
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|stored
argument_list|)
expr_stmt|;
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|NotifyStudentAction
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|fromAction
argument_list|(
name|name
argument_list|()
argument_list|)
operator|.
name|oldStudent
argument_list|(
name|oldStudent
argument_list|)
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
block|{
name|SectioningException
name|se
init|=
operator|(
name|SectioningException
operator|)
name|e
decl_stmt|;
if|if
condition|(
name|checkErrors
operator|!=
literal|null
operator|&&
operator|!
name|checkErrors
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|ErrorMessage
name|em
range|:
name|checkErrors
control|)
name|se
operator|.
name|addError
argument_list|(
name|em
argument_list|)
expr_stmt|;
throw|throw
name|se
throw|;
block|}
name|helper
operator|.
name|error
argument_list|(
literal|"Failed to enroll student "
operator|+
name|getStudentId
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|includeRequestInTheReturnMessage
condition|)
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingMakeAssignedRequestReadOnly
operator|.
name|isTrue
argument_list|()
condition|)
name|includeRequestInTheReturnMessage
operator|=
literal|true
expr_stmt|;
if|else if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
operator|&&
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
operator|&&
name|ApplicationProperty
operator|.
name|OnlineSchedulingMakeAssignedRequestReadOnlyIfAdmin
operator|.
name|isTrue
argument_list|()
condition|)
name|includeRequestInTheReturnMessage
operator|=
literal|true
expr_stmt|;
if|else if
condition|(
name|ApplicationProperty
operator|.
name|StudentSchedulingAlternativeCourse
operator|.
name|isTrue
argument_list|()
condition|)
name|includeRequestInTheReturnMessage
operator|=
literal|true
expr_stmt|;
if|else if
condition|(
name|wlMode
operator|==
name|WaitListMode
operator|.
name|WaitList
operator|&&
name|hasWaitList
condition|)
name|includeRequestInTheReturnMessage
operator|=
literal|true
expr_stmt|;
block|}
name|ClassAssignmentInterface
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|GetAssignment
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|withMessages
argument_list|(
name|failures
argument_list|)
operator|.
name|withErrors
argument_list|(
name|checkErrors
argument_list|)
operator|.
name|withRequest
argument_list|(
name|includeRequestInTheReturnMessage
argument_list|)
operator|.
name|withWaitListMode
argument_list|(
name|wlMode
argument_list|)
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
name|gradeModes
operator|.
name|hasGradeModes
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseAssignment
name|ca
range|:
name|ret
operator|.
name|getCourseAssignments
argument_list|()
control|)
for|for
control|(
name|ClassAssignment
name|a
range|:
name|ca
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|GradeMode
name|m
init|=
name|gradeModes
operator|.
name|getGradeMode
argument_list|(
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
name|a
operator|.
name|setGradeMode
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
name|gradeModes
operator|.
name|hasCreditHours
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseAssignment
name|ca
range|:
name|ret
operator|.
name|getCourseAssignments
argument_list|()
control|)
for|for
control|(
name|ClassAssignment
name|a
range|:
name|ca
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|Float
name|credit
init|=
name|gradeModes
operator|.
name|getCreditHour
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|a
operator|.
name|setCreditHour
argument_list|(
name|credit
argument_list|)
expr_stmt|;
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
name|a
operator|.
name|setCredit
argument_list|(
name|FixedCreditUnitConfig
operator|.
name|formatCredit
argument_list|(
name|credit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
name|gradeModes
operator|.
name|hasCurrentCredit
argument_list|()
condition|)
name|ret
operator|.
name|setCurrentCredit
argument_list|(
name|gradeModes
operator|.
name|getCurrentCredit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCheckWaitLists
operator|&&
name|hasWaitList
operator|&&
name|ret
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|getRequest
argument_list|()
operator|!=
literal|null
operator|&&
name|wlMode
operator|==
name|WaitListMode
operator|.
name|WaitList
operator|&&
name|Customization
operator|.
name|WaitListValidationProvider
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
name|ret
operator|.
name|getRequest
argument_list|()
operator|.
name|setWaitListChecks
argument_list|(
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|WaitListCheckValidation
operator|.
name|class
argument_list|)
operator|.
name|withRequest
argument_list|(
name|ret
operator|.
name|getRequest
argument_list|()
argument_list|)
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|getRequest
argument_list|()
operator|.
name|hasWaitListChecks
argument_list|()
operator|&&
operator|!
name|ret
operator|.
name|getRequest
argument_list|()
operator|.
name|getWaitListChecks
argument_list|()
operator|.
name|isConfirm
argument_list|()
operator|&&
operator|!
name|ret
operator|.
name|getRequest
argument_list|()
operator|.
name|getWaitListChecks
argument_list|()
operator|.
name|isError
argument_list|()
condition|)
name|ret
operator|.
name|setRequest
argument_list|(
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|WaitListSubmitOverrides
operator|.
name|class
argument_list|)
operator|.
name|withRequest
argument_list|(
name|ret
operator|.
name|getRequest
argument_list|()
argument_list|)
operator|.
name|withCredit
argument_list|(
name|ret
operator|.
name|getRequest
argument_list|()
operator|.
name|getWaitListChecks
argument_list|()
operator|.
name|getMaxCreditNeeded
argument_list|()
argument_list|)
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|int
name|getLimit
parameter_list|(
name|Enrollment
name|enrollment
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|XSection
argument_list|>
name|sections
parameter_list|)
block|{
name|Integer
name|limit
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Section
name|s
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|XSection
name|section
init|=
name|sections
operator|.
name|get
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
operator|&&
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|limit
operator|==
literal|null
condition|)
name|limit
operator|=
name|section
operator|.
name|getLimit
argument_list|()
expr_stmt|;
else|else
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|limit
argument_list|,
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|limit
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|limit
operator|)
return|;
block|}
specifier|public
specifier|static
name|void
name|updateSpace
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|Enrollment
name|newEnrollment
parameter_list|,
name|Enrollment
name|oldEnrollment
parameter_list|,
name|XOffering
name|offering
parameter_list|)
block|{
name|updateSpace
argument_list|(
name|server
argument_list|,
name|newEnrollment
argument_list|,
name|oldEnrollment
argument_list|,
name|offering
argument_list|,
name|offering
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|updateSpace
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|Enrollment
name|newEnrollment
parameter_list|,
name|Enrollment
name|oldEnrollment
parameter_list|,
name|XOffering
name|newOffering
parameter_list|,
name|XOffering
name|oldOffering
parameter_list|)
block|{
if|if
condition|(
name|newEnrollment
operator|==
literal|null
operator|&&
name|oldEnrollment
operator|==
literal|null
condition|)
return|return;
name|XExpectations
name|expectations
init|=
name|server
operator|.
name|getExpectations
argument_list|(
operator|(
name|newEnrollment
operator|==
literal|null
condition|?
name|oldEnrollment
else|:
name|newEnrollment
operator|)
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
init|=
operator|new
name|DefaultSingleAssignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldEnrollment
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|XSection
argument_list|>
name|sections
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|XSection
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldOffering
operator|!=
literal|null
condition|)
for|for
control|(
name|XConfig
name|config
range|:
name|oldOffering
operator|.
name|getConfigs
argument_list|()
control|)
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|XSection
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
name|sections
operator|.
name|put
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Enrollment
argument_list|>
name|feasibleEnrollments
init|=
operator|new
name|ArrayList
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|totalLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrl
range|:
name|oldEnrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|values
argument_list|(
name|assignment
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|oldEnrollment
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
continue|continue;
name|boolean
name|overlaps
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Request
name|otherRequest
range|:
name|oldEnrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|otherRequest
operator|.
name|equals
argument_list|(
name|oldEnrollment
operator|.
name|getRequest
argument_list|()
argument_list|)
operator|||
operator|!
operator|(
name|otherRequest
operator|instanceof
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
operator|)
condition|)
continue|continue;
name|Enrollment
name|otherErollment
init|=
name|otherRequest
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherErollment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|enrl
operator|.
name|isOverlapping
argument_list|(
name|otherErollment
argument_list|)
condition|)
block|{
name|overlaps
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|overlaps
condition|)
block|{
name|feasibleEnrollments
operator|.
name|add
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalLimit
operator|>=
literal|0
condition|)
block|{
name|int
name|limit
init|=
name|getLimit
argument_list|(
name|enrl
argument_list|,
name|sections
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|<
literal|0
condition|)
name|totalLimit
operator|=
operator|-
literal|1
expr_stmt|;
else|else
name|totalLimit
operator|+=
name|limit
expr_stmt|;
block|}
block|}
block|}
name|double
name|increment
init|=
literal|1.0
operator|/
operator|(
name|totalLimit
operator|>
literal|0
condition|?
name|totalLimit
else|:
name|feasibleEnrollments
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|Enrollment
name|feasibleEnrollment
range|:
name|feasibleEnrollments
control|)
for|for
control|(
name|Section
name|section
range|:
name|feasibleEnrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|totalLimit
operator|>
literal|0
condition|)
block|{
name|expectations
operator|.
name|incExpectedSpace
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|increment
operator|*
name|getLimit
argument_list|(
name|feasibleEnrollment
argument_list|,
name|sections
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expectations
operator|.
name|incExpectedSpace
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|increment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|newEnrollment
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|XSection
argument_list|>
name|sections
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|XSection
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|newOffering
operator|!=
literal|null
condition|)
for|for
control|(
name|XConfig
name|config
range|:
name|newOffering
operator|.
name|getConfigs
argument_list|()
control|)
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|XSection
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
name|sections
operator|.
name|put
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|newEnrollment
operator|.
name|getSections
argument_list|()
control|)
name|section
operator|.
name|setSpaceHeld
argument_list|(
name|section
operator|.
name|getSpaceHeld
argument_list|()
operator|-
literal|1.0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Enrollment
argument_list|>
name|feasibleEnrollments
init|=
operator|new
name|ArrayList
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|totalLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrl
range|:
name|newEnrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|values
argument_list|(
name|assignment
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|newEnrollment
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
continue|continue;
name|boolean
name|overlaps
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Request
name|otherRequest
range|:
name|newEnrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|otherRequest
operator|.
name|equals
argument_list|(
name|newEnrollment
operator|.
name|getRequest
argument_list|()
argument_list|)
operator|||
operator|!
operator|(
name|otherRequest
operator|instanceof
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
operator|)
condition|)
continue|continue;
name|Enrollment
name|otherErollment
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|otherRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherErollment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|enrl
operator|.
name|isOverlapping
argument_list|(
name|otherErollment
argument_list|)
condition|)
block|{
name|overlaps
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|overlaps
condition|)
block|{
name|feasibleEnrollments
operator|.
name|add
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalLimit
operator|>=
literal|0
condition|)
block|{
name|int
name|limit
init|=
name|getLimit
argument_list|(
name|enrl
argument_list|,
name|sections
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|<
literal|0
condition|)
name|totalLimit
operator|=
operator|-
literal|1
expr_stmt|;
else|else
name|totalLimit
operator|+=
name|limit
expr_stmt|;
block|}
block|}
block|}
name|double
name|decrement
init|=
literal|1.0
operator|/
operator|(
name|totalLimit
operator|>
literal|0
condition|?
name|totalLimit
else|:
name|feasibleEnrollments
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|Enrollment
name|feasibleEnrollment
range|:
name|feasibleEnrollments
control|)
for|for
control|(
name|Section
name|section
range|:
name|feasibleEnrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|totalLimit
operator|>
literal|0
condition|)
block|{
name|expectations
operator|.
name|incExpectedSpace
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
operator|-
name|decrement
operator|*
name|getLimit
argument_list|(
name|feasibleEnrollment
argument_list|,
name|sections
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expectations
operator|.
name|incExpectedSpace
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
operator|-
name|decrement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|server
operator|.
name|update
argument_list|(
name|expectations
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|int
name|isCritical
parameter_list|(
name|List
argument_list|<
name|XCourseId
argument_list|>
name|courses
parameter_list|,
name|CriticalCourses
name|critical
parameter_list|)
block|{
if|if
condition|(
name|critical
operator|==
literal|null
condition|)
return|return
literal|0
return|;
for|for
control|(
name|XCourseId
name|co
range|:
name|courses
control|)
return|return
name|critical
operator|.
name|isCritical
argument_list|(
name|co
argument_list|)
return|;
return|return
literal|0
return|;
block|}
specifier|protected
specifier|static
name|int
name|isCritical
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|course
parameter_list|,
name|CriticalCourses
name|critical
parameter_list|)
block|{
if|if
condition|(
name|critical
operator|==
literal|null
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|course
operator|==
literal|null
operator|||
name|course
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|0
return|;
return|return
name|critical
operator|.
name|isCritical
argument_list|(
operator|new
name|XCourseId
argument_list|(
literal|null
argument_list|,
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"enroll"
return|;
block|}
annotation|@
name|Override
specifier|public
name|CacheMode
name|getCacheMode
parameter_list|()
block|{
return|return
name|CacheMode
operator|.
name|IGNORE
return|;
block|}
block|}
end_class

end_unit

