begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningExceptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassWaitList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequestOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SectioningInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|CheckAssignmentAction
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|EnrollStudent
implements|implements
name|OnlineSectioningAction
argument_list|<
name|ClassAssignmentInterface
argument_list|>
block|{
specifier|private
specifier|static
name|StudentSectioningExceptions
name|EXCEPTIONS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningExceptions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DecimalFormat
name|sDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"+0.000;-0.000"
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iStudentId
decl_stmt|;
specifier|private
name|CourseRequestInterface
name|iRequest
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|iAssignment
decl_stmt|;
specifier|public
name|EnrollStudent
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|,
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|assignment
parameter_list|)
block|{
name|iStudentId
operator|=
name|studentId
expr_stmt|;
name|iRequest
operator|=
name|request
expr_stmt|;
name|iAssignment
operator|=
name|assignment
expr_stmt|;
block|}
specifier|public
name|Long
name|getStudentId
parameter_list|()
block|{
return|return
name|iStudentId
return|;
block|}
specifier|public
name|CourseRequestInterface
name|getRequest
parameter_list|()
block|{
return|return
name|iRequest
return|;
block|}
specifier|public
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|getAssignment
parameter_list|()
block|{
return|return
name|iAssignment
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClassAssignmentInterface
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
specifier|final
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|EXCEPTIONS
operator|.
name|notSupportedFeature
argument_list|()
argument_list|)
throw|;
name|Set
argument_list|<
name|Long
argument_list|>
name|offeringIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|lockedCourses
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
range|:
name|getAssignment
argument_list|()
control|)
if|if
condition|(
name|ca
operator|!=
literal|null
operator|&&
operator|!
name|ca
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|Course
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|EXCEPTIONS
operator|.
name|enrollNotAvailable
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|ca
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|ca
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|server
operator|.
name|isOfferingLocked
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|lockedCourses
operator|.
name|add
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// throw new SectioningException(SectioningExceptionType.COURSE_LOCKED, course.getName());
block|}
else|else
block|{
name|offeringIds
operator|.
name|add
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|OnlineSectioningServer
operator|.
name|Callback
argument_list|<
name|Boolean
argument_list|>
name|enrollmentsUpdated
init|=
operator|new
name|OnlineSectioningServer
operator|.
name|Callback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|error
argument_list|(
literal|"Update enrollment counts failed: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
block|}
block|}
decl_stmt|;
name|OnlineSectioningServer
operator|.
name|Callback
argument_list|<
name|Boolean
argument_list|>
name|offeringChecked
init|=
operator|new
name|OnlineSectioningServer
operator|.
name|Callback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|helper
operator|.
name|error
argument_list|(
literal|"Offering check failed: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
block|}
block|}
decl_stmt|;
name|Lock
name|lock
init|=
name|server
operator|.
name|lockStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|,
name|offeringIds
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|helper
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|helper
operator|.
name|getAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
operator|!=
literal|null
condition|)
name|action
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|requested
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|requested
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|REQUESTED
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|Builder
argument_list|>
name|options
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|Builder
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|assignment
range|:
name|getAssignment
argument_list|()
control|)
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Section
name|s
init|=
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
name|requested
operator|.
name|addSection
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|assignment
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|Builder
name|option
init|=
name|options
operator|.
name|get
argument_list|(
name|assignment
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|==
literal|null
condition|)
block|{
name|option
operator|=
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|OptionType
operator|.
name|ORIGINAL_ENROLLMENT
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
name|assignment
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
name|option
operator|.
name|addSection
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|requested
argument_list|)
expr_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Request
name|r
range|:
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|getRequest
argument_list|()
argument_list|)
control|)
name|action
operator|.
name|addRequest
argument_list|(
name|r
argument_list|)
expr_stmt|;
operator|new
name|CheckAssignmentAction
argument_list|(
name|getStudentId
argument_list|()
argument_list|,
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|check
argument_list|(
name|server
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|EXCEPTIONS
operator|.
name|badStudentId
argument_list|()
argument_list|)
throw|;
name|action
operator|.
name|getStudentBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatFirstMiddleLast
argument_list|)
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
range|:
name|getAssignment
argument_list|()
control|)
block|{
if|if
condition|(
name|ca
operator|==
literal|null
operator|||
name|ca
operator|.
name|isFreeTime
argument_list|()
operator|||
name|ca
operator|.
name|getClassId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|Class_
name|clazz
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|ca
operator|.
name|getClassId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|EXCEPTIONS
operator|.
name|enrollNotAvailable
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|ca
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|ca
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
throw|;
name|classes
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|>
name|req
init|=
name|SaveStudentRequests
operator|.
name|saveRequest
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|getRequest
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// save requested enrollment
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|>
name|e
range|:
name|req
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|Builder
name|option
init|=
name|options
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|CourseRequestOption
name|o
init|=
operator|new
name|CourseRequestOption
argument_list|()
decl_stmt|;
name|o
operator|.
name|setCourseRequest
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|.
name|setOption
argument_list|(
name|option
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getCourseRequestOptions
argument_list|()
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
name|Date
name|ts
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
range|:
name|getAssignment
argument_list|()
control|)
block|{
if|if
condition|(
name|ca
operator|==
literal|null
operator|||
name|ca
operator|.
name|isFreeTime
argument_list|()
operator|||
name|ca
operator|.
name|getClassId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|Class_
name|clazz
init|=
name|classes
operator|.
name|get
argument_list|(
name|ca
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
init|=
name|req
operator|.
name|get
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|cr
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|lockedCourses
operator|.
name|contains
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|ClassWaitList
name|cwl
init|=
operator|new
name|ClassWaitList
argument_list|()
decl_stmt|;
name|cwl
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setType
argument_list|(
name|ClassWaitList
operator|.
name|Type
operator|.
name|LOCKED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getClassWaitLists
argument_list|()
operator|==
literal|null
condition|)
name|cr
operator|.
name|setClassWaitLists
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ClassWaitList
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getClassWaitLists
argument_list|()
operator|.
name|add
argument_list|(
name|cwl
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|cwl
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|StudentClassEnrollment
name|enrl
init|=
operator|new
name|StudentClassEnrollment
argument_list|()
decl_stmt|;
name|enrl
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getStudentEnrollments
argument_list|()
operator|.
name|add
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setCourseOffering
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|!=
literal|null
condition|)
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|add
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|add
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Reload student
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
name|oldStudent
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
name|newStudent
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|remove
argument_list|(
name|oldStudent
argument_list|)
expr_stmt|;
name|newStudent
operator|=
name|ReloadAllData
operator|.
name|loadStudent
argument_list|(
name|student
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|server
operator|.
name|update
argument_list|(
name|newStudent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Put back the old student (the database will get rollbacked)
name|server
operator|.
name|update
argument_list|(
name|oldStudent
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|EXCEPTIONS
operator|.
name|unknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|oldStudent
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Request
name|oldRequest
range|:
name|oldStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|oldEnrollment
init|=
name|oldRequest
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldEnrollment
operator|==
literal|null
operator|||
operator|!
name|oldEnrollment
operator|.
name|isCourseRequest
argument_list|()
condition|)
continue|continue;
comment|// free time or not assigned
name|Enrollment
name|newEnrollment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|newStudent
operator|!=
literal|null
condition|)
for|for
control|(
name|Request
name|newRequest
range|:
name|newStudent
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|newRequest
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|newRequest
operator|.
name|getAssignment
argument_list|()
operator|.
name|isCourseRequest
argument_list|()
operator|&&
name|newRequest
operator|.
name|getAssignment
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|oldEnrollment
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
name|newEnrollment
operator|=
name|newRequest
operator|.
name|getAssignment
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|newEnrollment
operator|!=
literal|null
operator|&&
name|newEnrollment
operator|.
name|getSections
argument_list|()
operator|.
name|equals
argument_list|(
name|oldEnrollment
operator|.
name|getSections
argument_list|()
argument_list|)
condition|)
continue|continue;
comment|// same assignment
name|server
operator|.
name|execute
argument_list|(
operator|new
name|CheckOfferingAction
argument_list|(
name|oldEnrollment
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|offeringChecked
argument_list|)
expr_stmt|;
name|updateSpace
argument_list|(
name|helper
argument_list|,
name|newEnrollment
argument_list|,
name|oldEnrollment
argument_list|)
expr_stmt|;
block|}
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|enrollment
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|enrollment
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|PREVIOUS
argument_list|)
expr_stmt|;
for|for
control|(
name|Request
name|oldRequest
range|:
name|oldStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|oldRequest
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Assignment
name|assignment
range|:
name|oldRequest
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getAssignments
argument_list|()
control|)
name|enrollment
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|assignment
argument_list|,
name|oldRequest
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newStudent
operator|!=
literal|null
condition|)
block|{
name|requests
label|:
for|for
control|(
name|Request
name|newRequest
range|:
name|newStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|newEnrollment
init|=
name|newRequest
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|newEnrollment
operator|==
literal|null
operator|||
operator|!
name|newEnrollment
operator|.
name|isCourseRequest
argument_list|()
condition|)
continue|continue;
comment|// free time or not assigned
if|if
condition|(
name|oldStudent
operator|!=
literal|null
condition|)
for|for
control|(
name|Request
name|oldRequest
range|:
name|oldStudent
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|oldRequest
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|oldRequest
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|isCourseRequest
argument_list|()
operator|&&
name|oldRequest
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|newEnrollment
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
continue|continue
name|requests
continue|;
name|updateSpace
argument_list|(
name|helper
argument_list|,
name|newEnrollment
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|server
operator|.
name|execute
argument_list|(
operator|new
name|UpdateEnrollmentCountsAction
argument_list|(
name|newEnrollment
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|enrollmentsUpdated
argument_list|)
expr_stmt|;
block|}
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|enrollment
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|enrollment
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|STORED
argument_list|)
expr_stmt|;
for|for
control|(
name|Request
name|newRequest
range|:
name|newStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|newRequest
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|newRequest
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|isCourseRequest
argument_list|()
condition|)
for|for
control|(
name|Assignment
name|assignment
range|:
name|newRequest
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getAssignments
argument_list|()
control|)
name|enrollment
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|assignment
argument_list|,
name|newRequest
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|notifyStudentChanged
argument_list|(
name|getStudentId
argument_list|()
argument_list|,
operator|(
name|oldStudent
operator|==
literal|null
condition|?
literal|null
else|:
name|oldStudent
operator|.
name|getRequests
argument_list|()
operator|)
argument_list|,
operator|(
name|newStudent
operator|==
literal|null
condition|?
literal|null
else|:
name|newStudent
operator|.
name|getRequests
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|EXCEPTIONS
operator|.
name|unknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
return|return
name|server
operator|.
name|getAssignment
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|updateSpace
parameter_list|(
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|Enrollment
name|newEnrollment
parameter_list|,
name|Enrollment
name|oldEnrollment
parameter_list|)
block|{
if|if
condition|(
name|newEnrollment
operator|==
literal|null
operator|&&
name|oldEnrollment
operator|==
literal|null
condition|)
return|return;
name|Map
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|sections
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldEnrollment
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|oldEnrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|section
operator|.
name|setSpaceHeld
argument_list|(
name|section
operator|.
name|getSpaceHeld
argument_list|()
operator|+
literal|1.0
argument_list|)
expr_stmt|;
name|sections
operator|.
name|put
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Enrollment
argument_list|>
name|feasibleEnrollments
init|=
operator|new
name|ArrayList
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrl
range|:
name|oldEnrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|oldEnrollment
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
continue|continue;
name|boolean
name|overlaps
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Request
name|otherRequest
range|:
name|oldEnrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|otherRequest
operator|.
name|equals
argument_list|(
name|oldEnrollment
operator|.
name|getRequest
argument_list|()
argument_list|)
operator|||
operator|!
operator|(
name|otherRequest
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
name|Enrollment
name|otherErollment
init|=
name|otherRequest
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherErollment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|enrl
operator|.
name|isOverlapping
argument_list|(
name|otherErollment
argument_list|)
condition|)
block|{
name|overlaps
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|overlaps
condition|)
name|feasibleEnrollments
operator|.
name|add
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
name|double
name|increment
init|=
literal|1.0
operator|/
name|feasibleEnrollments
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Enrollment
name|feasibleEnrollment
range|:
name|feasibleEnrollments
control|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|feasibleEnrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|section
operator|.
name|setSpaceExpected
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
operator|+
name|increment
argument_list|)
expr_stmt|;
name|sections
operator|.
name|put
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|newEnrollment
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|newEnrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|section
operator|.
name|setSpaceHeld
argument_list|(
name|section
operator|.
name|getSpaceHeld
argument_list|()
operator|-
literal|1.0
argument_list|)
expr_stmt|;
name|sections
operator|.
name|put
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Enrollment
argument_list|>
name|feasibleEnrollments
init|=
operator|new
name|ArrayList
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrl
range|:
name|newEnrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|newEnrollment
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
continue|continue;
name|boolean
name|overlaps
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Request
name|otherRequest
range|:
name|newEnrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|otherRequest
operator|.
name|equals
argument_list|(
name|newEnrollment
operator|.
name|getRequest
argument_list|()
argument_list|)
operator|||
operator|!
operator|(
name|otherRequest
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
name|Enrollment
name|otherErollment
init|=
name|otherRequest
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherErollment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|enrl
operator|.
name|isOverlapping
argument_list|(
name|otherErollment
argument_list|)
condition|)
block|{
name|overlaps
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|overlaps
condition|)
name|feasibleEnrollments
operator|.
name|add
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
name|double
name|decrement
init|=
literal|1.0
operator|/
name|feasibleEnrollments
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Enrollment
name|feasibleEnrollment
range|:
name|feasibleEnrollments
control|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|feasibleEnrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|section
operator|.
name|setSpaceExpected
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
operator|-
name|decrement
argument_list|)
expr_stmt|;
name|sections
operator|.
name|put
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|SectioningInfo
name|info
range|:
operator|(
name|List
argument_list|<
name|SectioningInfo
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select i from SectioningInfo i where i.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering = :offeringId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
operator|(
name|newEnrollment
operator|==
literal|null
condition|?
name|oldEnrollment
else|:
name|newEnrollment
operator|)
operator|.
name|getCourse
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Section
name|section
init|=
name|sections
operator|.
name|remove
argument_list|(
name|info
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|info
operator|.
name|getNbrExpectedStudents
argument_list|()
operator|==
name|section
operator|.
name|getSpaceExpected
argument_list|()
operator|&&
name|info
operator|.
name|getNbrHoldingStudents
argument_list|()
operator|==
name|section
operator|.
name|getSpaceHeld
argument_list|()
condition|)
continue|continue;
name|helper
operator|.
name|debug
argument_list|(
name|info
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|+
literal|": expected "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
operator|-
name|info
operator|.
name|getNbrExpectedStudents
argument_list|()
argument_list|)
operator|+
literal|", held "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|section
operator|.
name|getSpaceHeld
argument_list|()
operator|-
name|info
operator|.
name|getNbrHoldingStudents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
name|info
operator|.
name|getNbrExpectedStudents
argument_list|()
operator|&&
name|section
operator|.
name|getLimit
argument_list|()
operator|<
name|section
operator|.
name|getSpaceExpected
argument_list|()
condition|)
name|helper
operator|.
name|info
argument_list|(
name|info
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|+
literal|": become over-expected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|section
operator|.
name|getLimit
argument_list|()
operator|<
name|info
operator|.
name|getNbrExpectedStudents
argument_list|()
operator|&&
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
name|section
operator|.
name|getSpaceExpected
argument_list|()
condition|)
name|helper
operator|.
name|info
argument_list|(
name|info
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|+
literal|": no longer over-expected"
argument_list|)
expr_stmt|;
name|info
operator|.
name|setNbrExpectedStudents
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setNbrHoldingStudents
argument_list|(
name|section
operator|.
name|getSpaceHeld
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sections
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|Class_
name|clazz
range|:
operator|(
name|List
argument_list|<
name|Class_
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from Class_ c where c.schedulingSubpart.instrOfferingConfig.instructionalOffering = :offeringId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
operator|(
name|newEnrollment
operator|==
literal|null
condition|?
name|oldEnrollment
else|:
name|newEnrollment
operator|)
operator|.
name|getCourse
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Section
name|section
init|=
name|sections
operator|.
name|remove
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
continue|continue;
name|SectioningInfo
name|info
init|=
operator|new
name|SectioningInfo
argument_list|()
decl_stmt|;
name|helper
operator|.
name|debug
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|+
literal|": expected "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
operator|+
literal|", held "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|section
operator|.
name|getSpaceHeld
argument_list|()
argument_list|)
operator|+
literal|" (new)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|section
operator|.
name|getLimit
argument_list|()
operator|<
name|section
operator|.
name|getSpaceExpected
argument_list|()
condition|)
name|helper
operator|.
name|info
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|+
literal|": become over-expected"
argument_list|)
expr_stmt|;
name|info
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|info
operator|.
name|setNbrExpectedStudents
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setNbrHoldingStudents
argument_list|(
name|section
operator|.
name|getSpaceHeld
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"enroll"
return|;
block|}
block|}
end_class

end_unit

