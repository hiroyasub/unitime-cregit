begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|GroupConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|IgnoreStudentConflictsConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XDistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XExpectations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|CheckMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|CheckMaster
operator|.
name|Master
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|TimetableDatabaseLoader
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|CheckMaster
argument_list|(
name|Master
operator|.
name|REQUIRED
argument_list|)
specifier|public
class|class
name|ReloadAllData
implements|implements
name|OnlineSectioningAction
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Boolean
name|execute
parameter_list|(
specifier|final
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|server
operator|.
name|lockAll
argument_list|()
decl_stmt|;
try|try
block|{
name|helper
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|helper
operator|.
name|info
argument_list|(
literal|"Updating course infos and the student sectining model for session "
operator|+
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|server
operator|.
name|clearAll
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XDistribution
argument_list|>
argument_list|>
name|distributions
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XDistribution
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DistributionPref
argument_list|>
name|distPrefs
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select p from DistributionPref p, Department d where p.distributionType.reference in (:ref1, :ref2) and d.session.uniqueId = :sessionId"
operator|+
literal|" and p.owner = d and p.prefLevel.prefProlog = :pref"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"ref1"
argument_list|,
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|LINKED_SECTIONS
operator|.
name|reference
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"ref2"
argument_list|,
name|IgnoreStudentConflictsConstraint
operator|.
name|REFERENCE
argument_list|)
operator|.
name|setString
argument_list|(
literal|"pref"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|distPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|DistributionPref
name|pref
range|:
name|distPrefs
control|)
block|{
name|int
name|variant
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|Class_
argument_list|>
name|sections
range|:
name|getSections
argument_list|(
name|pref
argument_list|)
control|)
block|{
name|XDistributionType
name|type
init|=
name|XDistributionType
operator|.
name|IngoreConflicts
decl_stmt|;
if|if
condition|(
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|LINKED_SECTIONS
operator|.
name|reference
argument_list|()
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
name|type
operator|=
name|XDistributionType
operator|.
name|LinkedSections
expr_stmt|;
name|XDistribution
name|distribution
init|=
operator|new
name|XDistribution
argument_list|(
name|type
argument_list|,
name|pref
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|variant
operator|++
argument_list|,
name|sections
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|offeringId
range|:
name|distribution
operator|.
name|getOfferingIds
argument_list|()
control|)
block|{
name|List
argument_list|<
name|XDistribution
argument_list|>
name|list
init|=
name|distributions
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|XDistribution
argument_list|>
argument_list|()
expr_stmt|;
name|distributions
operator|.
name|put
argument_list|(
name|offeringId
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|distribution
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
name|offeringMap
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|XSection
argument_list|>
name|sectionMap
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|XSection
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
argument_list|>
name|spaceMap
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InstructionalOffering
argument_list|>
name|offerings
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct io from InstructionalOffering io "
operator|+
literal|"left join fetch io.courseOfferings co "
operator|+
literal|"left join fetch io.instrOfferingConfigs cf "
operator|+
literal|"left join fetch cf.schedulingSubparts ss "
operator|+
literal|"left join fetch ss.classes c "
operator|+
literal|"left join fetch c.assignments a "
operator|+
literal|"left join fetch a.rooms r "
operator|+
literal|"left join fetch c.classInstructors i "
operator|+
literal|"left join fetch io.reservations x "
operator|+
literal|"left join fetch co.creditConfigs cc "
operator|+
literal|"left join fetch ss.creditConfigs sc "
operator|+
literal|"inner join io.courseOfferings cox "
operator|+
literal|"where io.session.uniqueId = :sessionId and io.notOffered = false and cox.subjectArea.department.allowStudentScheduling = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructionalOffering
name|io
range|:
name|offerings
control|)
block|{
name|XOffering
name|offering
init|=
name|loadOffering
argument_list|(
name|io
argument_list|,
name|distributions
operator|.
name|get
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
block|{
name|offeringMap
operator|.
name|put
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|offering
argument_list|)
expr_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|XSection
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
name|sectionMap
operator|.
name|put
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
name|spaceMap
operator|.
name|put
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|update
argument_list|(
name|offering
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XCourseRequest
argument_list|>
argument_list|>
name|requestMap
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XCourseRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|students
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from Student s "
operator|+
literal|"left join fetch s.courseDemands as cd "
operator|+
literal|"left join fetch cd.courseRequests as cr "
operator|+
literal|"left join fetch cr.classWaitLists as cwl "
operator|+
literal|"left join fetch s.classEnrollments as e "
operator|+
literal|"left join fetch s.areaClasfMajors as acm "
operator|+
literal|"left join fetch s.waitlists as w "
operator|+
literal|"left join fetch s.groups as g "
operator|+
literal|"left join fetch s.notes as n "
operator|+
literal|"where s.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
range|:
name|students
control|)
block|{
name|XStudent
name|s
init|=
name|loadStudent
argument_list|(
name|student
argument_list|,
name|requestMap
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
name|server
operator|.
name|update
argument_list|(
name|s
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|infos
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select i.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.uniqueId, i.clazz.uniqueId, i.nbrExpectedStudents from SectioningInfo i where i.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|info
range|:
name|infos
control|)
block|{
name|Long
name|offeringId
init|=
operator|(
name|Long
operator|)
name|info
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|sectionId
init|=
operator|(
name|Long
operator|)
name|info
index|[
literal|1
index|]
decl_stmt|;
name|Double
name|expected
init|=
operator|(
name|Double
operator|)
name|info
index|[
literal|2
index|]
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
name|space
init|=
name|spaceMap
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|space
operator|!=
literal|null
condition|)
name|space
operator|.
name|put
argument_list|(
name|sectionId
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
argument_list|>
name|entry
range|:
name|spaceMap
operator|.
name|entrySet
argument_list|()
control|)
name|server
operator|.
name|update
argument_list|(
operator|new
name|XExpectations
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|helper
operator|.
name|info
argument_list|(
literal|"  Update of session "
operator|+
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|+
literal|" done "
operator|+
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
operator|.
name|format
argument_list|(
operator|(
name|t1
operator|-
name|t0
operator|)
operator|/
literal|1000.0
argument_list|)
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
name|helper
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|XOffering
name|loadOffering
parameter_list|(
name|InstructionalOffering
name|io
parameter_list|,
name|List
argument_list|<
name|XDistribution
argument_list|>
name|distributions
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|io
operator|.
name|isNotOffered
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|XOffering
argument_list|(
name|io
argument_list|,
name|distributions
argument_list|,
name|helper
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|XStudent
name|loadStudent
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XCourseRequest
argument_list|>
argument_list|>
name|requestMap
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|XStudent
name|student
init|=
operator|new
name|XStudent
argument_list|(
name|s
argument_list|,
name|helper
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|XRequest
argument_list|>
name|i
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|XRequest
name|request
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|Map
argument_list|<
name|XSection
argument_list|,
name|XEnrollment
argument_list|>
name|checked
init|=
operator|new
name|HashMap
argument_list|<
name|XSection
argument_list|,
name|XEnrollment
argument_list|>
argument_list|()
decl_stmt|;
name|XCourseRequest
name|courseRequest
init|=
operator|(
name|XCourseRequest
operator|)
name|request
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|XCourseId
argument_list|>
name|j
init|=
name|courseRequest
operator|.
name|getCourseIds
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|XCourseId
name|course
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"Student "
operator|+
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") requests course "
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" that is not loaded."
argument_list|)
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|courseRequest
operator|.
name|getCourseIds
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|XEnrollment
name|enrollment
init|=
name|courseRequest
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
condition|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|offering
operator|.
name|getReservations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|requestMap
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|XCourseRequest
argument_list|>
name|assigned
init|=
name|requestMap
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|assigned
operator|==
literal|null
condition|)
block|{
name|assigned
operator|=
operator|new
name|ArrayList
argument_list|<
name|XCourseRequest
argument_list|>
argument_list|()
expr_stmt|;
name|requestMap
operator|.
name|put
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
block|}
name|enrollment
operator|.
name|setReservation
argument_list|(
name|offering
operator|.
name|guessReservation
argument_list|(
name|assigned
argument_list|,
name|student
argument_list|,
name|enrollment
argument_list|)
argument_list|)
expr_stmt|;
name|assigned
operator|.
name|add
argument_list|(
name|courseRequest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|enrollment
operator|.
name|setReservation
argument_list|(
name|offering
operator|.
name|guessReservation
argument_list|(
name|server
operator|.
name|getRequests
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
argument_list|,
name|student
argument_list|,
name|enrollment
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|mixedConfig
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
name|int
name|nrMatches
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|XSection
name|other
range|:
name|checked
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|isOverlapping
argument_list|(
name|offering
operator|.
name|getDistributions
argument_list|()
argument_list|,
name|other
argument_list|)
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|enrollment
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" to "
operator|+
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): "
operator|+
name|section
operator|.
name|getSubpartName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|+
literal|" overlaps with "
operator|+
name|checked
operator|.
name|get
argument_list|(
name|other
argument_list|)
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|other
operator|.
name|getSubpartName
argument_list|()
operator|+
literal|" "
operator|+
name|other
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|other
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|mixedConfig
operator|&&
operator|!
name|config
operator|.
name|getConfigId
argument_list|()
operator|.
name|equals
argument_list|(
name|enrollment
operator|.
name|getConfigId
argument_list|()
argument_list|)
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|enrollment
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" to "
operator|+
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): classes from different configurations."
argument_list|)
expr_stmt|;
name|mixedConfig
operator|=
literal|true
expr_stmt|;
block|}
name|checked
operator|.
name|put
argument_list|(
name|section
argument_list|,
name|enrollment
argument_list|)
expr_stmt|;
name|nrMatches
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|config
operator|.
name|getConfigId
argument_list|()
operator|.
name|equals
argument_list|(
name|enrollment
operator|.
name|getConfigId
argument_list|()
argument_list|)
operator|&&
name|nrMatches
operator|!=
literal|1
condition|)
block|{
if|if
condition|(
name|nrMatches
operator|>
literal|1
condition|)
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|enrollment
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" to "
operator|+
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): two or more classes of the same subpart "
operator|+
name|subpart
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
else|else
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|enrollment
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" to "
operator|+
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): no class of the subpart "
operator|+
name|subpart
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|student
return|;
block|}
specifier|public
specifier|static
name|XStudent
name|loadStudentNoCheck
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|XStudent
name|student
init|=
operator|new
name|XStudent
argument_list|(
name|s
argument_list|,
name|helper
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|courseRequest
init|=
operator|(
name|XCourseRequest
operator|)
name|request
decl_stmt|;
name|XEnrollment
name|enrollment
init|=
name|courseRequest
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
condition|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
operator|&&
operator|!
name|offering
operator|.
name|getReservations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|enrollment
operator|.
name|setReservation
argument_list|(
name|offering
operator|.
name|guessReservation
argument_list|(
name|server
operator|.
name|getRequests
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
argument_list|,
name|student
argument_list|,
name|enrollment
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|student
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Collection
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|getSections
parameter_list|(
name|DistributionPref
name|pref
parameter_list|)
block|{
name|List
argument_list|<
name|Collection
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Collection
argument_list|<
name|Class_
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|DistributionPref
operator|.
name|Structure
name|structure
init|=
name|pref
operator|.
name|getStructure
argument_list|()
decl_stmt|;
if|if
condition|(
name|structure
operator|==
literal|null
condition|)
name|structure
operator|=
name|DistributionPref
operator|.
name|Structure
operator|.
name|AllClasses
expr_stmt|;
if|if
condition|(
name|structure
operator|==
name|DistributionPref
operator|.
name|Structure
operator|.
name|Progressive
condition|)
block|{
name|int
name|maxSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getOrderedSetOfDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distributionObject
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
name|maxSize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxSize
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|else if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
name|maxSize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxSize
argument_list|,
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|)
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Class_
argument_list|>
name|sections
index|[]
init|=
operator|new
name|Set
index|[
name|maxSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sections
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|sections
index|[
name|i
index|]
operator|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|DistributionObject
argument_list|>
name|distributionObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|DistributionObject
argument_list|>
argument_list|(
name|pref
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|distributionObjects
argument_list|,
operator|new
name|TimetableDatabaseLoader
operator|.
name|ChildrenFirstDistributionObjectComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DistributionObject
name|distributionObject
range|:
name|distributionObjects
control|)
block|{
if|if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|section
init|=
operator|(
name|Class_
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sections
operator|.
name|length
condition|;
name|j
operator|++
control|)
name|sections
index|[
name|j
index|]
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sections
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Class_
name|section
init|=
literal|null
decl_stmt|;
name|sections
label|:
for|for
control|(
name|Class_
name|s
range|:
name|sections
index|[
name|j
index|]
control|)
block|{
name|Class_
name|p
init|=
name|s
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|subpart
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|section
operator|=
name|p
expr_stmt|;
break|break
name|sections
break|;
block|}
name|p
operator|=
name|p
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|==
literal|null
condition|)
name|section
operator|=
name|classes
operator|.
name|get
argument_list|(
name|j
operator|%
name|classes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
name|sections
index|[
name|j
index|]
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Set
argument_list|<
name|Class_
argument_list|>
name|s
range|:
name|sections
control|)
name|ret
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|structure
operator|==
name|DistributionPref
operator|.
name|Structure
operator|.
name|OneOfEach
condition|)
block|{
name|List
argument_list|<
name|Class_
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|counts
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getOrderedSetOfDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distributionObject
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|sections
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
name|sections
operator|.
name|addAll
argument_list|(
name|classes
argument_list|)
expr_stmt|;
name|count
operator|+=
name|classes
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>
literal|0
condition|)
name|counts
operator|.
name|add
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|counts
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|Enumeration
argument_list|<
name|List
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|e
init|=
name|DistributionPref
operator|.
name|permutations
argument_list|(
name|sections
argument_list|,
name|counts
argument_list|)
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
name|ret
operator|.
name|add
argument_list|(
name|e
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Class_
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getOrderedSetOfDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distributionObject
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|sections
operator|.
name|add
argument_list|(
operator|(
name|Class_
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
name|sections
operator|.
name|addAll
argument_list|(
name|classes
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|structure
operator|==
name|DistributionPref
operator|.
name|Structure
operator|.
name|Pairwise
condition|)
block|{
if|if
condition|(
name|sections
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
for|for
control|(
name|int
name|idx1
init|=
literal|0
init|;
name|idx1
operator|<
name|sections
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|idx1
operator|++
control|)
block|{
name|Class_
name|s1
init|=
name|sections
operator|.
name|get
argument_list|(
name|idx1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx2
init|=
name|idx1
operator|+
literal|1
init|;
name|idx2
operator|<
name|sections
operator|.
name|size
argument_list|()
condition|;
name|idx2
operator|++
control|)
block|{
name|Class_
name|s2
init|=
name|sections
operator|.
name|get
argument_list|(
name|idx2
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class_
argument_list|>
name|s
init|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
name|s
operator|.
name|add
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|structure
operator|==
name|DistributionPref
operator|.
name|Structure
operator|.
name|AllClasses
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|sections
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|grouping
init|=
literal|2
decl_stmt|;
switch|switch
condition|(
name|structure
condition|)
block|{
case|case
name|GroupsOfTwo
case|:
name|grouping
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|GroupsOfThree
case|:
name|grouping
operator|=
literal|3
expr_stmt|;
break|break;
case|case
name|GroupsOfFour
case|:
name|grouping
operator|=
literal|4
expr_stmt|;
break|break;
case|case
name|GroupsOfFive
case|:
name|grouping
operator|=
literal|5
expr_stmt|;
break|break;
block|}
name|List
argument_list|<
name|Class_
argument_list|>
name|s
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class_
name|section
range|:
name|sections
control|)
block|{
name|s
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|size
argument_list|()
operator|==
name|grouping
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|s
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
interface|interface
name|SectionProvider
block|{
specifier|public
name|XSection
name|get
parameter_list|(
name|Class_
name|clazz
parameter_list|)
function_decl|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"reload-all"
return|;
block|}
block|}
end_class

end_unit

