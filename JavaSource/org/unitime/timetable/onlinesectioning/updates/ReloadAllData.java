begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|AcademicAreaCode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Choice
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CourseReservation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CurriculumReservation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|GroupReservation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningExceptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicAreaClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassWaitList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SectioningInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|WaitList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|CourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ReloadAllData
implements|implements
name|OnlineSectioningAction
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
specifier|static
name|StudentSectioningExceptions
name|EXCEPTIONS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningExceptions
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Boolean
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|server
operator|.
name|lockAll
argument_list|()
decl_stmt|;
try|try
block|{
name|helper
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|helper
operator|.
name|info
argument_list|(
literal|"Updating course infos and the student sectining model for session "
operator|+
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|server
operator|.
name|clearAll
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|InstructionalOffering
argument_list|>
name|offerings
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct io from InstructionalOffering io "
operator|+
literal|"left join fetch io.courseOfferings co "
operator|+
literal|"left join fetch io.instrOfferingConfigs cf "
operator|+
literal|"left join fetch cf.schedulingSubparts ss "
operator|+
literal|"left join fetch ss.classes c "
operator|+
literal|"left join fetch c.assignments a "
operator|+
literal|"left join fetch a.rooms r "
operator|+
literal|"left join fetch c.classInstructors i "
operator|+
literal|"left join fetch io.reservations x "
operator|+
literal|"where io.session.uniqueId = :sessionId and io.notOffered = false"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructionalOffering
name|io
range|:
name|offerings
control|)
block|{
name|Offering
name|offering
init|=
name|loadOffering
argument_list|(
name|io
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
name|server
operator|.
name|update
argument_list|(
name|offering
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|io
operator|.
name|getCourseOfferings
argument_list|()
control|)
name|server
operator|.
name|update
argument_list|(
operator|new
name|CourseInfo
argument_list|(
name|co
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.load"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|students
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from Student s "
operator|+
literal|"left join fetch s.courseDemands as cd "
operator|+
literal|"left join fetch cd.courseRequests as cr "
operator|+
literal|"left join fetch cr.classWaitLists as cwl "
operator|+
literal|"left join fetch s.classEnrollments as e "
operator|+
literal|"left join fetch s.academicAreaClassifications as a "
operator|+
literal|"left join fetch s.posMajors as mj "
operator|+
literal|"left join fetch s.waitlists as w "
operator|+
literal|"left join fetch cr.classEnrollments as cre "
operator|+
literal|"where s.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
range|:
name|students
control|)
block|{
name|Student
name|s
init|=
name|loadStudent
argument_list|(
name|student
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
name|server
operator|.
name|update
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|SectioningInfo
argument_list|>
name|infos
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select i from SectioningInfo i where i.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|SectioningInfo
name|info
range|:
name|infos
control|)
block|{
name|Section
name|section
init|=
name|server
operator|.
name|getSection
argument_list|(
name|info
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|setSpaceExpected
argument_list|(
name|info
operator|.
name|getNbrExpectedStudents
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setSpaceHeld
argument_list|(
name|info
operator|.
name|getNbrHoldingStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
operator|(
name|section
operator|.
name|getLimit
argument_list|()
operator|-
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|<
name|Math
operator|.
name|round
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
condition|)
name|helper
operator|.
name|debug
argument_list|(
literal|"Section "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
literal|" has high demand (limit: "
operator|+
name|section
operator|.
name|getLimit
argument_list|()
operator|+
literal|", enrollment: "
operator|+
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|", expected: "
operator|+
name|section
operator|.
name|getSpaceExpected
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|helper
operator|.
name|info
argument_list|(
literal|"  Update of session "
operator|+
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|+
literal|" done "
operator|+
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
operator|.
name|format
argument_list|(
operator|(
name|t1
operator|-
name|t0
operator|)
operator|/
literal|1000.0
argument_list|)
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
name|helper
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|EXCEPTIONS
operator|.
name|unknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Offering
name|loadOffering
parameter_list|(
name|InstructionalOffering
name|io
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|courseName
init|=
name|io
operator|.
name|getCourseName
argument_list|()
decl_stmt|;
name|Offering
name|offering
init|=
operator|new
name|Offering
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|courseName
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseOffering
argument_list|>
name|i
init|=
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|projected
init|=
operator|(
name|co
operator|.
name|getProjectedDemand
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|co
operator|.
name|getProjectedDemand
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|unlimited
init|=
literal|false
decl_stmt|;
name|int
name|limit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|j
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
name|limit
operator|+=
name|ioc
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|co
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|limit
operator|=
name|co
operator|.
name|getReservation
argument_list|()
expr_stmt|;
if|if
condition|(
name|limit
operator|>=
literal|9999
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|unlimited
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
operator|new
name|Course
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|offering
argument_list|,
name|limit
argument_list|,
name|projected
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|class2section
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Subpart
argument_list|>
name|ss2subpart
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Subpart
argument_list|>
argument_list|()
decl_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"000"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|i
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|configLimit
init|=
operator|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|?
operator|-
literal|1
else|:
name|ioc
operator|.
name|getLimit
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|configLimit
operator|>=
literal|9999
condition|)
name|configLimit
operator|=
operator|-
literal|1
expr_stmt|;
name|Config
name|config
init|=
operator|new
name|Config
argument_list|(
name|ioc
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|configLimit
argument_list|,
name|courseName
operator|+
literal|" ["
operator|+
name|ioc
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|offering
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|SchedulingSubpart
argument_list|>
name|subparts
init|=
operator|new
name|TreeSet
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|(
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|subparts
control|)
block|{
name|String
name|sufix
init|=
name|ss
operator|.
name|getSchedulingSubpartSuffix
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
name|Subpart
name|parentSubpart
init|=
operator|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Subpart
operator|)
name|ss2subpart
operator|.
name|get
argument_list|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
operator|&&
name|parentSubpart
operator|==
literal|null
condition|)
block|{
name|helper
operator|.
name|error
argument_list|(
literal|"Subpart "
operator|+
name|ss
operator|.
name|getSchedulingSubpartLabel
argument_list|()
operator|+
literal|" has parent "
operator|+
name|ss
operator|.
name|getSchedulingSubpartLabel
argument_list|()
operator|+
literal|", but the appropriate parent subpart is not loaded."
argument_list|)
expr_stmt|;
block|}
name|Subpart
name|subpart
init|=
operator|new
name|Subpart
argument_list|(
name|ss
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
operator|+
name|sufix
argument_list|,
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|config
argument_list|,
name|parentSubpart
argument_list|)
decl_stmt|;
name|subpart
operator|.
name|setAllowOverlap
argument_list|(
name|ss
operator|.
name|isStudentAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|ss2subpart
operator|.
name|put
argument_list|(
name|ss
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subpart
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Class_
argument_list|>
name|j
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|parentSection
init|=
operator|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Section
operator|)
name|class2section
operator|.
name|get
argument_list|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
operator|&&
name|parentSection
operator|==
literal|null
condition|)
block|{
name|helper
operator|.
name|error
argument_list|(
literal|"Class "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" has parent "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|", but the appropriate parent section is not loaded."
argument_list|)
expr_stmt|;
block|}
name|Assignment
name|a
init|=
name|c
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|Placement
name|p
init|=
operator|(
name|a
operator|==
literal|null
condition|?
literal|null
else|:
name|a
operator|.
name|getPlacement
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|setDatePattern
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
name|datePatternName
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
argument_list|,
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getWeekCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|minLimit
init|=
name|c
operator|.
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
operator|&&
name|p
operator|!=
literal|null
condition|)
block|{
name|int
name|roomLimit
init|=
name|Math
operator|.
name|round
argument_list|(
operator|(
name|c
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|c
operator|.
name|getRoomRatio
argument_list|()
operator|)
operator|*
name|p
operator|.
name|getRoomSize
argument_list|()
argument_list|)
decl_stmt|;
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|||
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|String
name|instructorIds
init|=
literal|""
decl_stmt|;
name|String
name|instructorNames
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ClassInstructor
argument_list|>
name|k
init|=
name|c
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|instructorIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|instructorIds
operator|+=
literal|":"
expr_stmt|;
name|instructorNames
operator|+=
literal|":"
expr_stmt|;
block|}
name|instructorIds
operator|+=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|instructorNames
operator|+=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatShort
argument_list|)
operator|+
literal|"|"
operator|+
operator|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|)
expr_stmt|;
block|}
name|Section
name|section
init|=
operator|new
name|Section
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|limit
argument_list|,
operator|(
name|c
operator|.
name|getClassSuffix
argument_list|()
operator|==
literal|null
condition|?
name|c
operator|.
name|getSectionNumberString
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
else|:
name|c
operator|.
name|getClassSuffix
argument_list|()
operator|)
argument_list|,
name|subpart
argument_list|,
name|p
argument_list|,
name|instructorIds
argument_list|,
name|instructorNames
argument_list|,
name|parentSection
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|io
operator|.
name|getCourseOfferings
argument_list|()
control|)
name|section
operator|.
name|setName
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|c
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
argument_list|)
expr_stmt|;
name|section
operator|.
name|setName
argument_list|(
operator|-
literal|1l
argument_list|,
name|c
operator|.
name|getSectionNumberString
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|class2section
operator|.
name|put
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
name|reservation
range|:
name|io
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|isExpired
argument_list|()
condition|)
continue|continue;
name|Reservation
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
range|:
operator|(
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
operator|)
name|reservation
operator|)
operator|.
name|getStudents
argument_list|()
control|)
name|studentIds
operator|.
name|add
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|IndividualReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|offering
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
range|:
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
name|studentIds
operator|.
name|add
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|GroupReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|reservation
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1.0
else|:
name|reservation
operator|.
name|getLimit
argument_list|()
operator|)
argument_list|,
name|offering
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
condition|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
name|cr
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
operator|)
name|reservation
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|classifications
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassification
name|clasf
range|:
name|cr
operator|.
name|getClassifications
argument_list|()
control|)
name|classifications
operator|.
name|add
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|majors
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
name|cr
operator|.
name|getMajors
argument_list|()
control|)
name|majors
operator|.
name|add
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|CurriculumReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|reservation
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1.0
else|:
name|reservation
operator|.
name|getLimit
argument_list|()
operator|)
argument_list|,
name|offering
argument_list|,
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|classifications
argument_list|,
name|majors
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseReservation
condition|)
block|{
name|CourseOffering
name|co
init|=
operator|(
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|co
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|r
operator|=
operator|new
name|CourseReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"Failed to load reservation "
operator|+
name|reservation
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|configs
label|:
for|for
control|(
name|InstrOfferingConfig
name|ioc
range|:
name|reservation
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|ioc
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|.
name|addConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
continue|continue
name|configs
continue|;
block|}
block|}
block|}
name|classes
label|:
for|for
control|(
name|Class_
name|c
range|:
name|reservation
operator|.
name|getClasses
argument_list|()
control|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|.
name|addSection
argument_list|(
name|section
argument_list|)
expr_stmt|;
continue|continue
name|classes
continue|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|offering
return|;
block|}
specifier|public
specifier|static
name|Student
name|loadStudent
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|Student
name|student
init|=
operator|new
name|Student
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|student
operator|.
name|setExternalId
argument_list|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setName
argument_list|(
name|s
operator|.
name|getName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.student.name"
argument_list|,
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFirstMiddle
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|getAcademicAreaClassifications
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AcademicAreaClassification
name|aac
init|=
operator|(
name|AcademicAreaClassification
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|student
operator|.
name|getAcademicAreaClasiffications
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AcademicAreaCode
argument_list|(
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|aac
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getPosMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|major
init|=
operator|(
name|PosMajor
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getPosMajors
argument_list|()
operator|.
name|contains
argument_list|(
name|major
argument_list|)
condition|)
block|{
name|student
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AcademicAreaCode
argument_list|(
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.requests.save"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
name|Date
name|ts
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
name|demands
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|CourseDemand
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CourseDemand
name|d1
parameter_list|,
name|CourseDemand
name|d2
parameter_list|)
block|{
if|if
condition|(
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
operator|!
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|d1
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|d1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Date
name|enrollmentTS
init|=
literal|null
decl_stmt|;
name|demands
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|getCourseDemands
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|demands
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TimeLocation
name|ft
init|=
operator|new
name|TimeLocation
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1l
argument_list|,
literal|""
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
operator|new
name|FreeTimeRequest
argument_list|(
name|cd
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cd
operator|.
name|getPriority
argument_list|()
argument_list|,
name|cd
operator|.
name|isAlternative
argument_list|()
argument_list|,
name|student
argument_list|,
name|ft
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Vector
argument_list|<
name|Course
argument_list|>
name|courses
init|=
operator|new
name|Vector
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Section
argument_list|>
name|assignedSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Config
name|assignedConfig
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|>
name|crs
init|=
operator|new
name|TreeSet
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|r1
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|.
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getOrder
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|crs
operator|.
name|addAll
argument_list|(
name|cd
operator|.
name|getCourseRequests
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Choice
argument_list|>
name|classSelections
init|=
operator|new
name|ArrayList
argument_list|<
name|Choice
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|crs
control|)
block|{
name|Course
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"Student "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") requests course "
operator|+
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" that is not loaded."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|assignedConfig
operator|==
literal|null
condition|)
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|subparts
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|i
init|=
operator|(
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|==
literal|null
condition|?
name|s
operator|.
name|getClassEnrollments
argument_list|()
else|:
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|enrl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|enrollmentTS
operator|==
literal|null
operator|||
operator|(
name|enrl
operator|.
name|getTimestamp
argument_list|()
operator|!=
literal|null
operator|&&
name|enrl
operator|.
name|getTimestamp
argument_list|()
operator|.
name|after
argument_list|(
name|enrollmentTS
argument_list|)
operator|)
condition|)
name|enrollmentTS
operator|=
name|enrl
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|assignedSections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|other
range|:
name|assignedSections
control|)
block|{
if|if
condition|(
name|other
operator|.
name|isOverlapping
argument_list|(
name|section
argument_list|)
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|+
literal|" overlaps with "
operator|+
name|other
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|other
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|other
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|other
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assignedSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
name|assignedConfig
operator|.
name|getId
argument_list|()
operator|!=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): classes from different configurations."
argument_list|)
expr_stmt|;
block|}
name|assignedConfig
operator|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|subparts
operator|.
name|add
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): two or more classes of the same subpart."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): class "
operator|+
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|courses
operator|.
name|addElement
argument_list|(
name|course
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getClassWaitLists
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ClassWaitList
name|cwl
range|:
name|cr
operator|.
name|getClassWaitLists
argument_list|()
control|)
block|{
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|cwl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
name|classSelections
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|CourseRequest
name|request
init|=
operator|new
name|CourseRequest
argument_list|(
name|cd
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cd
operator|.
name|getPriority
argument_list|()
argument_list|,
name|cd
operator|.
name|isAlternative
argument_list|()
argument_list|,
name|student
argument_list|,
name|courses
argument_list|,
operator|(
name|cd
operator|.
name|isWaitlist
argument_list|()
operator|!=
literal|null
operator|&&
name|cd
operator|.
name|isWaitlist
argument_list|()
operator|)
operator|||
name|assignedConfig
operator|!=
literal|null
argument_list|,
operator|(
name|cd
operator|.
name|getTimestamp
argument_list|()
operator|==
literal|null
condition|?
name|ts
operator|.
name|getTime
argument_list|()
else|:
name|cd
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getTime
argument_list|()
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|classSelections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|addAll
argument_list|(
name|classSelections
argument_list|)
expr_stmt|;
name|helper
operator|.
name|info
argument_list|(
literal|"Selections for "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): "
operator|+
name|classSelections
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
condition|)
block|{
name|Enrollment
name|enrollment
init|=
operator|new
name|Enrollment
argument_list|(
name|request
argument_list|,
literal|0
argument_list|,
name|assignedConfig
argument_list|,
name|assignedSections
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollmentTS
operator|!=
literal|null
condition|)
name|enrollment
operator|.
name|setTimeStamp
argument_list|(
name|enrollmentTS
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setInitialAssignment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignedSections
operator|.
name|size
argument_list|()
operator|!=
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") wrong number of classes ("
operator|+
literal|"has "
operator|+
name|assignedSections
operator|.
name|size
argument_list|()
operator|+
literal|", expected "
operator|+
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
name|request
argument_list|)
operator|||
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|isOverlapping
argument_list|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): "
operator|+
literal|" overlaps with "
operator|+
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|s
operator|.
name|getWaitlists
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeSet
argument_list|<
name|Course
argument_list|>
name|courses
init|=
operator|new
name|TreeSet
argument_list|<
name|Course
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Course
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Course
name|c1
parameter_list|,
name|Course
name|c2
parameter_list|)
block|{
return|return
operator|(
name|c1
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|c1
operator|.
name|getCourseNumber
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|c2
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|timeStamp
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|i
init|=
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|enrl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrl
operator|.
name|getCourseRequest
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
comment|// already loaded
name|Course
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"Student "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") requests course "
operator|+
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" that is not loaded."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|enrl
operator|.
name|getTimestamp
argument_list|()
operator|!=
literal|null
condition|)
name|timeStamp
operator|.
name|put
argument_list|(
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|enrl
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|WaitList
name|w
range|:
name|s
operator|.
name|getWaitlists
argument_list|()
control|)
block|{
name|Course
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|w
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"Student "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") requests course "
operator|+
name|w
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" that is not loaded."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|w
operator|.
name|getTimestamp
argument_list|()
operator|!=
literal|null
condition|)
name|timeStamp
operator|.
name|put
argument_list|(
name|w
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|w
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Course
name|course
range|:
name|courses
control|)
block|{
name|Vector
argument_list|<
name|Course
argument_list|>
name|cx
init|=
operator|new
name|Vector
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
name|cx
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|CourseRequest
name|request
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
operator|&&
name|r
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
operator|&&
operator|(
operator|(
name|CourseRequest
operator|)
name|r
operator|)
operator|.
name|getCourses
argument_list|()
operator|.
name|contains
argument_list|(
name|course
argument_list|)
condition|)
block|{
name|request
operator|=
operator|(
name|CourseRequest
operator|)
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
name|request
operator|=
operator|new
name|CourseRequest
argument_list|(
operator|-
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|,
name|student
argument_list|,
name|cx
argument_list|,
literal|true
argument_list|,
name|timeStamp
operator|.
name|get
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HashSet
argument_list|<
name|Section
argument_list|>
name|assignedSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Config
name|assignedConfig
init|=
literal|null
decl_stmt|;
name|HashSet
argument_list|<
name|Long
argument_list|>
name|subparts
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Date
name|enrollmentTS
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|i
init|=
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|enrl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getId
argument_list|()
operator|!=
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|enrollmentTS
operator|==
literal|null
operator|||
operator|(
name|enrl
operator|.
name|getTimestamp
argument_list|()
operator|!=
literal|null
operator|&&
name|enrl
operator|.
name|getTimestamp
argument_list|()
operator|.
name|after
argument_list|(
name|enrollmentTS
argument_list|)
operator|)
condition|)
name|enrollmentTS
operator|=
name|enrl
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|assignedSections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|other
range|:
name|assignedSections
control|)
block|{
if|if
condition|(
name|other
operator|.
name|isOverlapping
argument_list|(
name|section
argument_list|)
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|+
literal|" overlaps with "
operator|+
name|other
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|other
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|other
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|other
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assignedSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
name|assignedConfig
operator|.
name|getId
argument_list|()
operator|!=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): classes from different configurations."
argument_list|)
expr_stmt|;
block|}
name|assignedConfig
operator|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|subparts
operator|.
name|add
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): two or more classes of the same subpart."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): class "
operator|+
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
name|Section
name|x
init|=
name|server
operator|.
name|getSection
argument_list|(
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
name|helper
operator|.
name|info
argument_list|(
literal|"  but a class with the same id is loaded, but under offering "
operator|+
name|x
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" (id is "
operator|+
name|x
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|", expected "
operator|+
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
condition|)
block|{
name|Enrollment
name|enrollment
init|=
operator|new
name|Enrollment
argument_list|(
name|request
argument_list|,
literal|0
argument_list|,
name|assignedConfig
argument_list|,
name|assignedSections
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollmentTS
operator|!=
literal|null
condition|)
name|enrollment
operator|.
name|setTimeStamp
argument_list|(
name|enrollmentTS
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setInitialAssignment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignedSections
operator|.
name|size
argument_list|()
operator|!=
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): wrong number of classes ("
operator|+
literal|"has "
operator|+
name|assignedSections
operator|.
name|size
argument_list|()
operator|+
literal|", expected "
operator|+
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
name|request
argument_list|)
operator|||
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|isOverlapping
argument_list|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
condition|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): "
operator|+
literal|" overlaps with "
operator|+
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|student
return|;
block|}
specifier|public
specifier|static
name|String
name|datePatternName
parameter_list|(
name|TimeLocation
name|time
parameter_list|,
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|time
operator|.
name|getDatePatternName
argument_list|()
return|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|session
operator|.
name|getDatePatternFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|Date
name|first
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|size
argument_list|()
operator|&&
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
return|return
name|time
operator|.
name|getDatePatternName
argument_list|()
return|;
name|cal
operator|.
name|setTime
argument_list|(
name|session
operator|.
name|getDatePatternFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|=
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|Date
name|last
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
operator|&&
name|last
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
return|return
name|time
operator|.
name|getDatePatternName
argument_list|()
return|;
name|SimpleDateFormat
name|dpf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
return|return
name|dpf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
operator|(
name|first
operator|.
name|equals
argument_list|(
name|last
argument_list|)
condition|?
literal|""
else|:
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|last
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"reload-all"
return|;
block|}
block|}
end_class

end_unit

