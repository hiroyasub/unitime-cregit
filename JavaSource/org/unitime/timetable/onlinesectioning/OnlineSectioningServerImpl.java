begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|JProf
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|constraint
operator|.
name|LinkedSections
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|DistanceConflict
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|TimeOverlapsCounter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverPredefinedSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TravelTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|StudentSchedulingAssistantWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|CheckAllOfferingsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|ReloadAllData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|StudentEmail
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|OnlineSectioningServerImpl
implements|implements
name|OnlineSectioningServer
block|{
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Log
name|iLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OnlineSectioningServerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AcademicSessionInfo
name|iAcademicSession
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseInfo
argument_list|>
name|iCourseForId
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
argument_list|>
name|iCourseForName
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
name|iCourses
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|DistanceMetric
name|iDistanceMetric
init|=
literal|null
decl_stmt|;
specifier|private
name|DataProperties
name|iConfig
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Course
argument_list|>
name|iCourseTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Course
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|iClassTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
name|iStudentTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Offering
argument_list|>
name|iOfferingTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Offering
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|LinkedSections
argument_list|>
argument_list|>
name|iLinkedSections
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|LinkedSections
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ReentrantReadWriteLock
name|iLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
name|MultiLock
name|iMultiLock
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Lock
argument_list|>
name|iOfferingLocks
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Lock
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AsyncExecutor
name|iExecutor
decl_stmt|;
specifier|private
name|Queue
argument_list|<
name|Runnable
argument_list|>
name|iExecutorQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|CacheElement
argument_list|<
name|Long
argument_list|>
argument_list|>
name|iOfferingsToPersistExpectedSpaces
init|=
operator|new
name|HashSet
argument_list|<
name|CacheElement
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|OnlineSectioningServerImpl
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|boolean
name|waitTillStarted
parameter_list|)
throws|throws
name|SectioningException
block|{
name|iConfig
operator|=
operator|new
name|ServerConfig
argument_list|()
expr_stmt|;
name|iDistanceMetric
operator|=
operator|new
name|DistanceMetric
argument_list|(
name|iConfig
argument_list|)
expr_stmt|;
name|TravelTime
operator|.
name|populateTravelTimes
argument_list|(
name|iDistanceMetric
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionSessionDoesNotExist
argument_list|(
name|sessionId
operator|==
literal|null
condition|?
literal|"null"
else|:
name|sessionId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
name|iAcademicSession
operator|=
operator|new
name|AcademicSessionInfo
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|iLog
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OnlineSectioningServerImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".server["
operator|+
name|iAcademicSession
operator|.
name|toCompactString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|iMultiLock
operator|=
operator|new
name|MultiLock
argument_list|(
name|iAcademicSession
argument_list|)
expr_stmt|;
name|iExecutor
operator|=
operator|new
name|AsyncExecutor
argument_list|()
expr_stmt|;
name|iExecutor
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|OnlineSectioningLog
operator|.
name|Entity
name|user
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|StudentClassEnrollment
operator|.
name|SystemChange
operator|.
name|SYSTEM
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|StudentClassEnrollment
operator|.
name|SystemChange
operator|.
name|SYSTEM
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|OTHER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|waitTillStarted
condition|)
block|{
try|try
block|{
name|execute
argument_list|(
operator|new
name|ReloadAllData
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to load server: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
if|if
condition|(
name|iAcademicSession
operator|.
name|isSectioningEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|execute
argument_list|(
operator|new
name|CheckAllOfferingsAction
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to check all offerings: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
block|}
else|else
block|{
name|execute
argument_list|(
operator|new
name|ReloadAllData
argument_list|()
argument_list|,
name|user
argument_list|,
operator|new
name|ServerCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
if|if
condition|(
name|iAcademicSession
operator|.
name|isSectioningEnabled
argument_list|()
condition|)
name|execute
argument_list|(
operator|new
name|CheckAllOfferingsAction
argument_list|()
argument_list|,
name|user
argument_list|,
operator|new
name|ServerCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to check all offerings: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to load server: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|t
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|iLog
operator|.
name|info
argument_list|(
literal|"Config: "
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|iConfig
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DistanceMetric
name|getDistanceMetric
parameter_list|()
block|{
return|return
name|iDistanceMetric
return|;
block|}
annotation|@
name|Override
specifier|public
name|AcademicSessionInfo
name|getAcademicSession
parameter_list|()
block|{
return|return
name|iAcademicSession
return|;
block|}
annotation|@
name|Override
specifier|public
name|CourseInfo
name|getCourseInfo
parameter_list|(
name|String
name|course
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|course
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|String
name|courseName
init|=
name|course
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|course
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|title
init|=
name|course
operator|.
name|substring
argument_list|(
name|course
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
name|infos
init|=
name|iCourseForName
operator|.
name|get
argument_list|(
name|courseName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|infos
operator|!=
literal|null
operator|&&
operator|!
name|infos
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|CourseInfo
name|info
range|:
name|infos
control|)
if|if
condition|(
name|title
operator|.
name|equalsIgnoreCase
argument_list|(
name|info
operator|.
name|getTitle
argument_list|()
argument_list|)
condition|)
return|return
name|info
return|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
name|infos
init|=
name|iCourseForName
operator|.
name|get
argument_list|(
name|course
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|infos
operator|!=
literal|null
operator|&&
operator|!
name|infos
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|infos
operator|.
name|first
argument_list|()
return|;
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CourseInfo
name|getCourseInfo
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|iCourseForId
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Student
name|getStudent
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|iStudentTable
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Course
name|getCourse
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|iCourseTable
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|distance
parameter_list|(
name|Section
name|s1
parameter_list|,
name|Section
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|.
name|getPlacement
argument_list|()
operator|==
literal|null
operator|||
name|s2
operator|.
name|getPlacement
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|TimeLocation
name|t1
init|=
name|s1
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|TimeLocation
name|t2
init|=
name|s2
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|t1
operator|.
name|shareDays
argument_list|(
name|t2
argument_list|)
operator|||
operator|!
name|t1
operator|.
name|shareWeeks
argument_list|(
name|t2
argument_list|)
condition|)
return|return
literal|0
return|;
name|int
name|a1
init|=
name|t1
operator|.
name|getStartSlot
argument_list|()
decl_stmt|,
name|a2
init|=
name|t2
operator|.
name|getStartSlot
argument_list|()
decl_stmt|;
if|if
condition|(
name|getDistanceMetric
argument_list|()
operator|.
name|doComputeDistanceConflictsBetweenNonBTBClasses
argument_list|()
condition|)
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|<=
name|a2
condition|)
block|{
name|int
name|dist
init|=
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|getDistanceMetric
argument_list|()
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dist
operator|>
name|t1
operator|.
name|getBreakTime
argument_list|()
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|a2
operator|-
name|a1
operator|-
name|t1
operator|.
name|getLength
argument_list|()
operator|)
condition|)
return|return
name|dist
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|==
name|a2
condition|)
return|return
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|getDistanceMetric
argument_list|()
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
return|;
block|}
comment|/*         else if (a2+t2.getNrSlotsPerMeeting()==a1) {         	return Placement.getDistance(s1.getPlacement(), s2.getPlacement());         }         */
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|CourseInfo
argument_list|>
name|findCourses
parameter_list|(
name|String
name|query
parameter_list|,
name|Integer
name|limit
parameter_list|,
name|CourseInfoMatcher
name|matcher
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|CourseInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseInfo
argument_list|>
argument_list|(
name|limit
operator|==
literal|null
condition|?
literal|100
else|:
name|limit
argument_list|)
decl_stmt|;
name|String
name|queryInLowerCase
init|=
name|query
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseInfo
name|c
range|:
name|iCourses
control|)
block|{
if|if
condition|(
name|c
operator|.
name|matchCourseName
argument_list|(
name|queryInLowerCase
argument_list|)
operator|&&
operator|(
name|matcher
operator|==
literal|null
operator|||
name|matcher
operator|.
name|match
argument_list|(
name|c
argument_list|)
operator|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|==
name|limit
condition|)
return|return
name|ret
return|;
block|}
if|if
condition|(
name|queryInLowerCase
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|CourseInfo
name|c
range|:
name|iCourses
control|)
block|{
if|if
condition|(
name|c
operator|.
name|matchTitle
argument_list|(
name|queryInLowerCase
argument_list|)
operator|&&
operator|(
name|matcher
operator|==
literal|null
operator|||
name|matcher
operator|.
name|match
argument_list|(
name|c
argument_list|)
operator|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|==
name|limit
condition|)
return|return
name|ret
return|;
block|}
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|CourseInfo
argument_list|>
name|findCourses
parameter_list|(
name|CourseInfoMatcher
name|matcher
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|CourseInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseInfo
name|c
range|:
name|iCourses
control|)
block|{
if|if
condition|(
name|matcher
operator|.
name|match
argument_list|(
name|c
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|URL
name|getSectionUrl
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|Section
name|section
parameter_list|)
block|{
if|if
condition|(
name|OnlineSectioningService
operator|.
name|sSectionUrlProvider
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|OnlineSectioningService
operator|.
name|sSectionUrlProvider
operator|.
name|getSectionUrl
argument_list|(
name|getAcademicSession
argument_list|()
argument_list|,
name|courseId
argument_list|,
name|section
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Section
argument_list|>
name|getSections
parameter_list|(
name|CourseInfo
name|courseInfo
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ArrayList
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Course
name|course
init|=
name|iCourseTable
operator|.
name|get
argument_list|(
name|courseInfo
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
return|return
name|sections
return|;
for|for
control|(
name|Iterator
argument_list|<
name|Config
argument_list|>
name|e
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Config
name|cfg
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Subpart
argument_list|>
name|f
init|=
name|cfg
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|subpart
init|=
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|g
init|=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|g
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|g
operator|.
name|next
argument_list|()
decl_stmt|;
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|sections
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EnrollmentSectionComparator
implements|implements
name|Comparator
argument_list|<
name|Section
argument_list|>
block|{
specifier|public
name|boolean
name|isParent
parameter_list|(
name|Section
name|s1
parameter_list|,
name|Section
name|s2
parameter_list|)
block|{
name|Section
name|p1
init|=
name|s1
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|isParent
argument_list|(
name|p1
argument_list|,
name|s2
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Section
name|a
parameter_list|,
name|Section
name|b
parameter_list|)
block|{
if|if
condition|(
name|isParent
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|isParent
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|a
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|b
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|,
name|b
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Section
name|getSection
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|iClassTable
operator|.
name|get
argument_list|(
name|classId
argument_list|)
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DummyReservation
extends|extends
name|Reservation
block|{
specifier|private
name|int
name|iPriority
decl_stmt|;
specifier|private
name|boolean
name|iOver
decl_stmt|;
specifier|private
name|int
name|iLimit
decl_stmt|;
specifier|private
name|boolean
name|iApply
decl_stmt|;
specifier|private
name|boolean
name|iMustUse
decl_stmt|;
specifier|private
name|boolean
name|iAllowOverlap
decl_stmt|;
specifier|public
name|DummyReservation
parameter_list|(
name|long
name|id
parameter_list|,
name|Offering
name|offering
parameter_list|,
name|int
name|priority
parameter_list|,
name|boolean
name|over
parameter_list|,
name|int
name|limit
parameter_list|,
name|boolean
name|apply
parameter_list|,
name|boolean
name|mustUse
parameter_list|,
name|boolean
name|allowOverlap
parameter_list|,
name|boolean
name|expired
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|offering
argument_list|)
expr_stmt|;
name|iPriority
operator|=
name|priority
expr_stmt|;
name|iOver
operator|=
name|over
expr_stmt|;
name|iLimit
operator|=
name|limit
expr_stmt|;
name|iApply
operator|=
name|apply
expr_stmt|;
name|iMustUse
operator|=
name|mustUse
expr_stmt|;
name|iAllowOverlap
operator|=
name|allowOverlap
expr_stmt|;
name|setExpired
argument_list|(
name|expired
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canAssignOverLimit
parameter_list|()
block|{
return|return
name|iOver
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|mustBeUsed
parameter_list|()
block|{
return|return
name|iMustUse
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getReservationLimit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|iPriority
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
return|return
name|iApply
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAllowOverlap
parameter_list|()
block|{
return|return
name|iAllowOverlap
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Student
name|s
init|=
name|iStudentTable
operator|.
name|get
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Request
name|r
range|:
name|s
operator|.
name|getRequests
argument_list|()
control|)
block|{
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
for|for
control|(
name|Course
name|course
range|:
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourses
argument_list|()
control|)
name|course
operator|.
name|getRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|r
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|iStudentTable
operator|.
name|remove
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|iStudentTable
operator|.
name|put
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|r
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|r
operator|.
name|getAssignment
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
condition|)
name|r
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|Offering
name|offering
parameter_list|)
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|CourseInfo
name|ci
init|=
name|iCourseForId
operator|.
name|get
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|!=
literal|null
condition|)
block|{
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
name|courses
init|=
name|iCourseForName
operator|.
name|get
argument_list|(
name|ci
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|!=
literal|null
condition|)
block|{
name|courses
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iCourseForName
operator|.
name|remove
argument_list|(
name|ci
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|CourseInfo
name|x
range|:
name|courses
control|)
name|x
operator|.
name|setHasUniqueName
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|iCourseForId
operator|.
name|remove
argument_list|(
name|ci
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
name|iCourseTable
operator|.
name|remove
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iOfferingTable
operator|.
name|remove
argument_list|(
name|offering
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
name|iClassTable
operator|.
name|remove
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Enrollment
name|enrollment
range|:
operator|new
name|ArrayList
argument_list|<
name|Enrollment
argument_list|>
argument_list|(
name|config
operator|.
name|getEnrollments
argument_list|()
argument_list|)
control|)
name|enrollment
operator|.
name|variable
argument_list|()
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|CourseInfo
name|info
parameter_list|)
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|CourseInfo
name|old
init|=
name|iCourseForId
operator|.
name|get
argument_list|(
name|info
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|iCourseForId
operator|.
name|put
argument_list|(
name|info
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
name|courses
init|=
name|iCourseForName
operator|.
name|get
argument_list|(
name|info
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|==
literal|null
condition|)
block|{
name|courses
operator|=
operator|new
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iCourseForName
operator|.
name|put
argument_list|(
name|info
operator|.
name|toString
argument_list|()
argument_list|,
name|courses
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|courses
operator|.
name|remove
argument_list|(
name|old
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|remove
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
name|courses
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
for|for
control|(
name|CourseInfo
name|x
range|:
name|courses
control|)
name|x
operator|.
name|setHasUniqueName
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|else if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
for|for
control|(
name|CourseInfo
name|x
range|:
name|courses
control|)
name|x
operator|.
name|setHasUniqueName
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|Offering
name|offering
parameter_list|)
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Offering
name|old
init|=
name|iOfferingTable
operator|.
name|get
argument_list|(
name|offering
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
name|remove
argument_list|(
name|old
argument_list|)
expr_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
name|iCourseTable
operator|.
name|put
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
name|iOfferingTable
operator|.
name|put
argument_list|(
name|offering
operator|.
name|getId
argument_list|()
argument_list|,
name|offering
argument_list|)
expr_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
name|iClassTable
operator|.
name|put
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Offering
name|getOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|iOfferingTable
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearAll
parameter_list|()
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|iClassTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iStudentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iOfferingTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iCourseTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iCourseForId
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iCourseForName
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iCourses
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearAllStudents
parameter_list|()
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Student
name|student
range|:
name|iStudentTable
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|r
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|r
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|iStudentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|E
name|execute
parameter_list|(
name|OnlineSectioningAction
argument_list|<
name|E
argument_list|>
name|action
parameter_list|,
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|)
throws|throws
name|SectioningException
block|{
name|long
name|c0
init|=
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
decl_stmt|;
name|String
name|cacheMode
init|=
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
name|action
operator|.
name|name
argument_list|()
operator|+
literal|".CacheMode"
argument_list|,
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"CacheMode"
argument_list|)
argument_list|)
decl_stmt|;
name|OnlineSectioningHelper
name|h
init|=
operator|new
name|OnlineSectioningHelper
argument_list|(
name|user
argument_list|,
name|cacheMode
operator|==
literal|null
condition|?
literal|null
else|:
name|CacheMode
operator|.
name|parse
argument_list|(
name|cacheMode
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|h
operator|.
name|addMessageHandler
argument_list|(
operator|new
name|OnlineSectioningHelper
operator|.
name|DefaultMessageLogger
argument_list|(
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OnlineSectioningServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|action
operator|.
name|name
argument_list|()
operator|+
literal|"["
operator|+
name|getAcademicSession
argument_list|()
operator|.
name|toCompactString
argument_list|()
operator|+
literal|"]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|h
operator|.
name|addAction
argument_list|(
name|action
argument_list|,
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|E
name|ret
init|=
name|action
operator|.
name|execute
argument_list|(
name|this
argument_list|,
name|h
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|NULL
argument_list|)
expr_stmt|;
if|else if
condition|(
name|ret
operator|instanceof
name|Boolean
condition|)
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
operator|(
name|Boolean
operator|)
name|ret
condition|?
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|TRUE
else|:
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
else|else
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|)
block|{
name|h
operator|.
name|info
argument_list|(
literal|"Exception failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|h
operator|.
name|warn
argument_list|(
literal|"Exception failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|h
operator|.
name|error
argument_list|(
literal|"Execution failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|h
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FAILURE
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|instanceof
name|SectioningException
condition|)
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|h
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setEndTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|setCpuTime
argument_list|(
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
operator|-
name|c0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|hasStudent
argument_list|()
operator|||
operator|!
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|hasExternalId
argument_list|()
operator|)
operator|&&
name|user
operator|!=
literal|null
operator|&&
name|user
operator|.
name|hasExternalId
argument_list|()
operator|&&
name|user
operator|.
name|hasType
argument_list|()
operator|&&
name|user
operator|.
name|getType
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|STUDENT
condition|)
block|{
if|if
condition|(
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|hasStudent
argument_list|()
condition|)
block|{
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|getStudentBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|user
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|user
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iLog
operator|.
name|debug
argument_list|(
literal|"Executed: "
operator|+
name|h
operator|.
name|getLog
argument_list|()
operator|+
literal|" ("
operator|+
name|h
operator|.
name|getLog
argument_list|()
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|+
literal|" bytes)"
argument_list|)
expr_stmt|;
name|OnlineSectioningLogger
operator|.
name|getInstance
argument_list|()
operator|.
name|record
argument_list|(
name|h
operator|.
name|getLog
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|readLock
parameter_list|()
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
operator|new
name|Lock
argument_list|()
block|{
specifier|public
name|void
name|release
parameter_list|()
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|writeLock
parameter_list|()
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
operator|new
name|Lock
argument_list|()
block|{
specifier|public
name|void
name|release
parameter_list|()
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockAll
parameter_list|()
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
operator|new
name|Lock
argument_list|()
block|{
specifier|public
name|void
name|release
parameter_list|()
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockStudent
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|offeringIds
parameter_list|,
name|boolean
name|excludeLockedOfferings
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ids
operator|.
name|add
argument_list|(
operator|-
name|studentId
argument_list|)
expr_stmt|;
if|if
condition|(
name|offeringIds
operator|!=
literal|null
condition|)
for|for
control|(
name|Long
name|offeringId
range|:
name|offeringIds
control|)
if|if
condition|(
operator|!
name|excludeLockedOfferings
operator|||
operator|!
name|iOfferingLocks
operator|.
name|containsKey
argument_list|(
name|offeringId
argument_list|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
name|Student
name|student
init|=
name|iStudentTable
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Offering
name|o
init|=
operator|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|getAssignment
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|excludeLockedOfferings
operator|||
operator|!
name|iOfferingLocks
operator|.
name|containsKey
argument_list|(
name|o
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|o
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|iMultiLock
operator|.
name|lock
argument_list|(
name|ids
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|,
name|boolean
name|excludeLockedOffering
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|excludeLockedOffering
operator|||
operator|!
name|iOfferingLocks
operator|.
name|containsKey
argument_list|(
name|offeringId
argument_list|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentIds
operator|!=
literal|null
condition|)
for|for
control|(
name|Long
name|studentId
range|:
name|studentIds
control|)
name|ids
operator|.
name|add
argument_list|(
operator|-
name|studentId
argument_list|)
expr_stmt|;
name|Offering
name|offering
init|=
name|iOfferingTable
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
for|for
control|(
name|CourseRequest
name|request
range|:
name|course
operator|.
name|getRequests
argument_list|()
control|)
name|ids
operator|.
name|add
argument_list|(
operator|-
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|iMultiLock
operator|.
name|lock
argument_list|(
name|ids
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockClass
parameter_list|(
name|Long
name|classId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|studentIds
operator|!=
literal|null
condition|)
for|for
control|(
name|Long
name|studentId
range|:
name|studentIds
control|)
name|ids
operator|.
name|add
argument_list|(
operator|-
name|studentId
argument_list|)
expr_stmt|;
name|Section
name|section
init|=
name|iClassTable
operator|.
name|get
argument_list|(
name|classId
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|section
operator|.
name|getEnrollments
argument_list|()
control|)
name|ids
operator|.
name|add
argument_list|(
operator|-
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|iMultiLock
operator|.
name|lock
argument_list|(
name|ids
argument_list|)
return|;
block|}
specifier|private
name|Long
name|getOfferingIdFromCourseName
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
if|if
condition|(
name|courseName
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|CourseInfo
name|c
init|=
name|getCourseInfo
argument_list|(
name|courseName
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Course
name|course
init|=
name|iCourseTable
operator|.
name|get
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|course
operator|==
literal|null
condition|?
literal|null
else|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
operator|)
return|;
block|}
specifier|public
name|Lock
name|lockRequest
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|!=
literal|null
condition|)
name|ids
operator|.
name|add
argument_list|(
operator|-
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|Long
name|id
init|=
name|getOfferingIdFromCourseName
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasFirstAlternative
argument_list|()
condition|)
block|{
name|Long
name|id
init|=
name|getOfferingIdFromCourseName
argument_list|(
name|r
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasSecondAlternative
argument_list|()
condition|)
block|{
name|Long
name|id
init|=
name|getOfferingIdFromCourseName
argument_list|(
name|r
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|Long
name|id
init|=
name|getOfferingIdFromCourseName
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasFirstAlternative
argument_list|()
condition|)
block|{
name|Long
name|id
init|=
name|getOfferingIdFromCourseName
argument_list|(
name|r
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasSecondAlternative
argument_list|()
condition|)
block|{
name|Long
name|id
init|=
name|getOfferingIdFromCourseName
argument_list|(
name|r
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|iMultiLock
operator|.
name|lock
argument_list|(
name|ids
argument_list|)
return|;
block|}
specifier|public
name|void
name|notifyStudentChanged
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|List
argument_list|<
name|Request
argument_list|>
name|oldRequests
parameter_list|,
name|List
argument_list|<
name|Request
argument_list|>
name|newRequests
parameter_list|,
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|)
block|{
name|Student
name|student
init|=
name|getStudent
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"Student "
operator|+
name|student
operator|.
name|getId
argument_list|()
operator|+
literal|" changed."
decl_stmt|;
if|if
condition|(
name|oldRequests
operator|!=
literal|null
condition|)
block|{
name|message
operator|+=
literal|"\n  Previous schedule:"
expr_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|oldRequests
control|)
block|{
name|message
operator|+=
literal|"\n    "
operator|+
name|r
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|r
operator|instanceof
name|FreeTimeRequest
operator|||
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|?
literal|""
else|:
literal|" NOT ASSIGNED"
operator|)
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
operator|&&
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|s
range|:
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
name|message
operator|+=
literal|"\n      "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|+
operator|(
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|)
operator|+
operator|(
name|s
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|newRequests
operator|!=
literal|null
condition|)
block|{
name|message
operator|+=
literal|"\n  New schedule:"
expr_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|newRequests
control|)
block|{
name|message
operator|+=
literal|"\n    "
operator|+
name|r
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|r
operator|instanceof
name|FreeTimeRequest
operator|||
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|?
literal|""
else|:
literal|" NOT ASSIGNED"
operator|)
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
operator|&&
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|s
range|:
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
name|message
operator|+=
literal|"\n      "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|+
operator|(
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|)
operator|+
operator|(
name|s
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|iLog
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.email"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
block|{
name|execute
argument_list|(
operator|new
name|StudentEmail
argument_list|(
name|studentId
argument_list|,
name|oldRequests
argument_list|,
name|newRequests
argument_list|)
argument_list|,
name|user
argument_list|,
operator|new
name|ServerCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to notify student: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyStudentChanged
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|Request
name|request
parameter_list|,
name|Enrollment
name|oldEnrollment
parameter_list|,
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|)
block|{
name|Student
name|student
init|=
name|getStudent
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"Student "
operator|+
name|student
operator|.
name|getId
argument_list|()
operator|+
literal|" changed."
decl_stmt|;
if|if
condition|(
name|oldEnrollment
operator|!=
literal|null
condition|)
block|{
name|message
operator|+=
literal|"\n  Previous assignment:"
expr_stmt|;
name|message
operator|+=
literal|"\n    "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|request
operator|instanceof
name|FreeTimeRequest
operator|||
name|oldEnrollment
operator|!=
literal|null
condition|?
literal|""
else|:
literal|" NOT ASSIGNED"
operator|)
expr_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
operator|&&
name|oldEnrollment
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|s
range|:
name|oldEnrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|message
operator|+=
literal|"\n      "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|oldEnrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|+
operator|(
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|)
operator|+
operator|(
name|s
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
block|}
name|message
operator|+=
literal|"\n  New schedule:"
expr_stmt|;
name|message
operator|+=
literal|"\n    "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|request
operator|instanceof
name|FreeTimeRequest
operator|||
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|?
literal|""
else|:
literal|" NOT ASSIGNED"
operator|)
expr_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
operator|&&
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|s
range|:
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
name|message
operator|+=
literal|"\n      "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|+
operator|(
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|)
operator|+
operator|(
name|s
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
name|iLog
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.email"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|oldEnrollment
operator|==
literal|null
condition|)
block|{
name|oldEnrollment
operator|=
operator|new
name|Enrollment
argument_list|(
name|request
argument_list|,
literal|0
argument_list|,
operator|(
name|request
operator|instanceof
name|CourseRequest
condition|?
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
operator|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|execute
argument_list|(
operator|new
name|StudentEmail
argument_list|(
name|studentId
argument_list|,
name|oldEnrollment
argument_list|,
name|student
operator|.
name|getRequests
argument_list|()
argument_list|)
argument_list|,
name|user
argument_list|,
operator|new
name|ServerCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to notify student: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOfferingLocked
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iOfferingLocks
init|)
block|{
return|return
name|iOfferingLocks
operator|.
name|containsKey
argument_list|(
name|offeringId
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|lockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iOfferingLocks
init|)
block|{
if|if
condition|(
name|iOfferingLocks
operator|.
name|containsKey
argument_list|(
name|offeringId
argument_list|)
condition|)
return|return;
block|}
name|Lock
name|lock
init|=
name|iMultiLock
operator|.
name|lock
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|iOfferingLocks
init|)
block|{
if|if
condition|(
name|iOfferingLocks
operator|.
name|containsKey
argument_list|(
name|offeringId
argument_list|)
condition|)
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
else|else
name|iOfferingLocks
operator|.
name|put
argument_list|(
name|offeringId
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|unlockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iOfferingLocks
init|)
block|{
name|Lock
name|lock
init|=
name|iOfferingLocks
operator|.
name|remove
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|getLockedOfferings
parameter_list|()
block|{
synchronized|synchronized
init|(
name|iOfferingLocks
init|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|iOfferingLocks
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseAllOfferingLocks
parameter_list|()
block|{
synchronized|synchronized
init|(
name|iOfferingLocks
init|)
block|{
for|for
control|(
name|Lock
name|lock
range|:
name|iOfferingLocks
operator|.
name|values
argument_list|()
control|)
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
name|iOfferingLocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|void
name|execute
parameter_list|(
specifier|final
name|OnlineSectioningAction
argument_list|<
name|E
argument_list|>
name|action
parameter_list|,
specifier|final
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|,
specifier|final
name|ServerCallback
argument_list|<
name|E
argument_list|>
name|callback
parameter_list|)
throws|throws
name|SectioningException
block|{
specifier|final
name|String
name|locale
init|=
name|Localization
operator|.
name|getLocale
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|iExecutorQueue
init|)
block|{
name|iExecutorQueue
operator|.
name|offer
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Localization
operator|.
name|setLocale
argument_list|(
name|locale
argument_list|)
expr_stmt|;
try|try
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
name|execute
argument_list|(
name|action
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|action
operator|.
name|name
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iExecutorQueue
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|AsyncExecutor
extends|extends
name|Thread
block|{
specifier|private
name|boolean
name|iStop
init|=
literal|false
decl_stmt|;
specifier|public
name|AsyncExecutor
parameter_list|()
block|{
name|setName
argument_list|(
literal|"AsyncExecutor["
operator|+
name|getAcademicSession
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ApplicationProperties
operator|.
name|setSessionId
argument_list|(
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|Runnable
name|job
decl_stmt|;
while|while
condition|(
operator|!
name|iStop
condition|)
block|{
synchronized|synchronized
init|(
name|iExecutorQueue
init|)
block|{
name|job
operator|=
name|iExecutorQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"Executor is waiting for a new job..."
argument_list|)
expr_stmt|;
name|iExecutorQueue
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
continue|continue;
block|}
block|}
name|job
operator|.
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|_RootDAO
operator|.
name|closeCurrentThreadSessions
argument_list|()
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"Job "
operator|+
name|job
operator|+
literal|" did not close current-thread hibernate session."
argument_list|)
expr_stmt|;
block|}
name|iLog
operator|.
name|info
argument_list|(
literal|"Executor stopped."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ApplicationProperties
operator|.
name|setSessionId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Localization
operator|.
name|removeLocale
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|unload
parameter_list|()
block|{
if|if
condition|(
name|iExecutor
operator|!=
literal|null
condition|)
block|{
name|iExecutor
operator|.
name|iStop
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|iExecutorQueue
init|)
block|{
name|iExecutorQueue
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|DataProperties
name|getConfig
parameter_list|()
block|{
return|return
name|iConfig
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addLinkedSections
parameter_list|(
name|LinkedSections
name|link
parameter_list|)
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Offering
name|offering
range|:
name|link
operator|.
name|getOfferings
argument_list|()
control|)
block|{
name|List
argument_list|<
name|LinkedSections
argument_list|>
name|list
init|=
name|iLinkedSections
operator|.
name|get
argument_list|(
name|offering
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|LinkedSections
argument_list|>
argument_list|()
expr_stmt|;
name|iLinkedSections
operator|.
name|put
argument_list|(
name|offering
operator|.
name|getId
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|link
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|LinkedSections
argument_list|>
name|getLinkedSections
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|iLinkedSections
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeLinkedSections
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|LinkedSections
argument_list|>
name|list
init|=
name|iLinkedSections
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|LinkedSections
name|link
range|:
operator|new
name|ArrayList
argument_list|<
name|LinkedSections
argument_list|>
argument_list|(
name|list
argument_list|)
control|)
block|{
for|for
control|(
name|Offering
name|offering
range|:
name|link
operator|.
name|getOfferings
argument_list|()
control|)
block|{
name|List
argument_list|<
name|LinkedSections
argument_list|>
name|l
init|=
name|iLinkedSections
operator|.
name|get
argument_list|(
name|offering
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
name|l
operator|.
name|remove
argument_list|(
name|link
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|persistExpectedSpaces
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iOfferingsToPersistExpectedSpaces
init|)
block|{
name|iOfferingsToPersistExpectedSpaces
operator|.
name|add
argument_list|(
operator|new
name|CacheElement
argument_list|<
name|Long
argument_list|>
argument_list|(
name|offeringId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|getOfferingsToPersistExpectedSpaces
parameter_list|(
name|long
name|minimalAge
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|offeringIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|current
init|=
name|JProf
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|iOfferingsToPersistExpectedSpaces
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|CacheElement
argument_list|<
name|Long
argument_list|>
argument_list|>
name|i
init|=
name|iOfferingsToPersistExpectedSpaces
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CacheElement
argument_list|<
name|Long
argument_list|>
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|-
name|c
operator|.
name|created
argument_list|()
operator|>=
name|minimalAge
condition|)
block|{
name|offeringIds
operator|.
name|add
argument_list|(
name|c
operator|.
name|element
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|offeringIds
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needPersistExpectedSpaces
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iOfferingsToPersistExpectedSpaces
init|)
block|{
return|return
name|iOfferingsToPersistExpectedSpaces
operator|.
name|remove
argument_list|(
name|offeringId
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Student
argument_list|>
name|findStudents
parameter_list|(
name|StudentMatcher
name|matcher
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Student
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|s
range|:
name|iStudentTable
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|matcher
operator|.
name|match
argument_list|(
name|s
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkDeadline
parameter_list|(
name|Section
name|section
parameter_list|,
name|Deadline
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.deadline"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
name|CourseInfo
name|info
init|=
name|getCourseInfo
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|deadline
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|NEW
case|:
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getLastWeekToEnroll
argument_list|()
operator|!=
literal|null
condition|)
name|deadline
operator|=
name|info
operator|.
name|getLastWeekToEnroll
argument_list|()
expr_stmt|;
else|else
name|deadline
operator|=
name|getAcademicSession
argument_list|()
operator|.
name|getLastWeekToEnroll
argument_list|()
expr_stmt|;
break|break;
case|case
name|CHANGE
case|:
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getLastWeekToChange
argument_list|()
operator|!=
literal|null
condition|)
name|deadline
operator|=
name|info
operator|.
name|getLastWeekToChange
argument_list|()
expr_stmt|;
else|else
name|deadline
operator|=
name|getAcademicSession
argument_list|()
operator|.
name|getLastWeekToChange
argument_list|()
expr_stmt|;
break|break;
case|case
name|DROP
case|:
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getLastWeekToDrop
argument_list|()
operator|!=
literal|null
condition|)
name|deadline
operator|=
name|info
operator|.
name|getLastWeekToDrop
argument_list|()
expr_stmt|;
else|else
name|deadline
operator|=
name|getAcademicSession
argument_list|()
operator|.
name|getLastWeekToDrop
argument_list|()
expr_stmt|;
break|break;
block|}
name|long
name|start
init|=
name|getAcademicSession
argument_list|()
operator|.
name|getSessionBeginDate
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|now
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|week
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|now
operator|>=
name|start
condition|)
block|{
name|week
operator|=
operator|(
name|int
operator|)
operator|(
operator|(
name|now
operator|-
name|start
operator|)
operator|/
operator|(
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|7
operator|)
operator|)
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|week
operator|=
operator|-
operator|(
name|int
operator|)
operator|(
operator|(
name|start
operator|-
name|now
operator|)
operator|/
operator|(
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|7
operator|)
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
return|return
name|week
operator|<=
name|deadline
return|;
comment|// no time, just compare week and the deadline
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|long
name|time
init|=
name|getAcademicSession
argument_list|()
operator|.
name|getDatePatternFirstDate
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
operator|(
name|long
operator|)
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getWeekCode
argument_list|()
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
operator|*
operator|(
literal|1000l
operator|*
literal|60l
operator|*
literal|60l
operator|*
literal|24l
operator|)
decl_stmt|;
if|if
condition|(
name|time
operator|>=
name|start
condition|)
block|{
name|offset
operator|=
operator|(
name|int
operator|)
operator|(
operator|(
name|time
operator|-
name|start
operator|)
operator|/
operator|(
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|7
operator|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|offset
operator|=
operator|-
operator|(
name|int
operator|)
operator|(
operator|(
name|start
operator|-
name|time
operator|)
operator|/
operator|(
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|7
operator|)
operator|)
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|week
operator|<=
name|deadline
operator|+
name|offset
return|;
block|}
specifier|private
specifier|static
class|class
name|ServerConfig
extends|extends
name|DataProperties
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|ServerConfig
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setProperty
argument_list|(
literal|"Neighbour.BranchAndBoundTimeout"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"Suggestions.Timeout"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"Extensions.Classes"
argument_list|,
name|DistanceConflict
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|";"
operator|+
name|TimeOverlapsCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"StudentWeights.Class"
argument_list|,
name|StudentSchedulingAssistantWeights
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"StudentWeights.LeftoverSpread"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"StudentWeights.BalancingFactor"
argument_list|,
literal|"0.0"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"Reservation.CanAssignOverTheLimit"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"General.SaveDefaultProperties"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|SolverParameterDef
name|def
range|:
operator|(
name|List
argument_list|<
name|SolverParameterDef
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from SolverParameterDef x where x.group.type = :type and x.default is not null"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"type"
argument_list|,
name|SolverParameterGroup
operator|.
name|sTypeStudent
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|setProperty
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|def
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SolverPredefinedSetting
name|settings
init|=
operator|(
name|SolverPredefinedSetting
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from SolverPredefinedSetting x where x.name = :reference"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"reference"
argument_list|,
literal|"StudentSct.Online"
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|settings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SolverParameter
name|param
range|:
name|settings
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|isVisible
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|SolverParameterGroup
operator|.
name|sTypeStudent
condition|)
continue|continue;
name|setProperty
argument_list|(
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setProperty
argument_list|(
literal|"General.SettingsId"
argument_list|,
name|settings
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getProperty
argument_list|(
literal|"Distances.Ellipsoid"
argument_list|)
operator|==
literal|null
operator|||
literal|"DEFAULT"
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
literal|"Distances.Ellipsoid"
argument_list|)
argument_list|)
condition|)
name|setProperty
argument_list|(
literal|"Distances.Ellipsoid"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.distance.ellipsoid"
argument_list|,
name|DistanceMetric
operator|.
name|Ellipsoid
operator|.
name|LEGACY
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Priority"
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
literal|"StudentWeights.Mode"
argument_list|)
argument_list|)
condition|)
name|setProperty
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"Equal"
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
literal|"StudentWeights.Mode"
argument_list|)
argument_list|)
condition|)
name|setProperty
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|value
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.sectioning.config."
operator|+
name|key
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
name|super
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
else|:
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.sectioning.config."
operator|+
name|key
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
name|super
operator|.
name|getProperty
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
else|:
name|value
return|;
block|}
block|}
block|}
end_class

end_unit

