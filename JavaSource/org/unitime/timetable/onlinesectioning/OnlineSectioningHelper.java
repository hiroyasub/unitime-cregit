begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Choice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Instructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|SctAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CourseReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CurriculumReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|GroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|LearningCommunityReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|IdValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalClassNameHelperInterface
operator|.
name|HasGradableSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XExactTimeConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XFreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRoom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
operator|.
name|XPreference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|OnlineSectioningHelper
block|{
specifier|protected
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OnlineSectioningHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningConstants
name|CFG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|sTransactionCreatesNewHibSession
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|LogLevel
block|{
name|DEBUG
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|DEBUG
argument_list|)
block|,
name|INFO
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|INFO
argument_list|)
block|,
name|WARN
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|WARN
argument_list|)
block|,
name|ERROR
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|ERROR
argument_list|)
block|,
name|FATAL
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
block|;
specifier|private
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
name|iProtoLevel
decl_stmt|;
name|LogLevel
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
name|level
parameter_list|)
block|{
name|iProtoLevel
operator|=
name|level
expr_stmt|;
block|}
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
name|level
parameter_list|()
block|{
return|return
name|iProtoLevel
return|;
block|}
block|}
empty_stmt|;
specifier|protected
name|List
argument_list|<
name|MessageHandler
argument_list|>
name|iMessageHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|org
operator|.
name|hibernate
operator|.
name|Session
name|iHibSession
init|=
literal|null
decl_stmt|;
specifier|protected
name|org
operator|.
name|hibernate
operator|.
name|Transaction
name|iTx
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|iFlushIfNeededCounter
init|=
literal|0
decl_stmt|;
specifier|protected
name|OnlineSectioningLog
operator|.
name|Log
operator|.
name|Builder
name|iLog
init|=
name|OnlineSectioningLog
operator|.
name|Log
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
specifier|protected
name|OnlineSectioningLog
operator|.
name|Entity
name|iUser
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
name|int
name|sBatchSize
init|=
literal|100
decl_stmt|;
specifier|protected
name|CacheMode
name|iCacheMode
init|=
literal|null
decl_stmt|;
specifier|protected
name|XExactTimeConversion
name|iExactTimeConversion
init|=
literal|null
decl_stmt|;
specifier|protected
name|HasGradableSubpart
name|iHasGradableSubpart
init|=
literal|null
decl_stmt|;
specifier|public
name|OnlineSectioningHelper
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OnlineSectioningHelper
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|,
name|CacheMode
name|cacheMode
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|user
argument_list|,
name|cacheMode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OnlineSectioningHelper
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|user
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OnlineSectioningHelper
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|)
block|{
name|this
argument_list|(
name|hibSession
argument_list|,
name|user
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OnlineSectioningHelper
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|,
name|CacheMode
name|cacheMode
parameter_list|)
block|{
name|iHibSession
operator|=
name|hibSession
expr_stmt|;
name|iUser
operator|=
name|user
expr_stmt|;
name|iCacheMode
operator|=
name|cacheMode
expr_stmt|;
block|}
specifier|public
name|OnlineSectioningHelper
parameter_list|(
name|OnlineSectioningHelper
name|parent
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|parent
operator|.
name|getUser
argument_list|()
argument_list|,
name|parent
operator|.
name|iCacheMode
argument_list|)
expr_stmt|;
name|iLog
operator|=
name|parent
operator|.
name|iLog
expr_stmt|;
block|}
specifier|public
name|OnlineSectioningLog
operator|.
name|Entity
name|getUser
parameter_list|()
block|{
return|return
name|iUser
return|;
block|}
specifier|public
name|boolean
name|isAdmin
parameter_list|()
block|{
return|return
operator|(
name|getUser
argument_list|()
operator|!=
literal|null
operator|&&
name|getUser
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
operator|)
return|;
block|}
specifier|public
name|void
name|log
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|.
name|getLevel
argument_list|()
operator|!=
name|LogLevel
operator|.
name|DEBUG
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Builder
name|l
init|=
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|level
argument_list|()
argument_list|)
operator|.
name|setText
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|setTimeStamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getThrowable
argument_list|()
operator|!=
literal|null
condition|)
name|l
operator|.
name|setException
argument_list|(
name|m
operator|.
name|getThrowable
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|m
operator|.
name|getThrowable
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLog
operator|.
name|getActionCount
argument_list|()
operator|>
literal|0
condition|)
name|iLog
operator|.
name|getActionBuilder
argument_list|(
name|iLog
operator|.
name|getActionCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|addMessage
argument_list|(
name|l
argument_list|)
expr_stmt|;
else|else
name|iLog
operator|.
name|addMessage
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MessageHandler
name|h
range|:
name|iMessageHandlers
control|)
name|h
operator|.
name|onMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDebugEnabled
parameter_list|()
block|{
for|for
control|(
name|MessageHandler
name|h
range|:
name|iMessageHandlers
control|)
if|if
condition|(
name|h
operator|.
name|isDebugEnabled
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|DEBUG
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|INFO
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|WARN
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|ERROR
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatal
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|FATAL
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|DEBUG
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|INFO
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|WARN
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|ERROR
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatal
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|FATAL
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Session
name|getHibSession
parameter_list|()
block|{
if|if
condition|(
name|iHibSession
operator|==
literal|null
condition|)
block|{
name|iHibSession
operator|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
expr_stmt|;
if|if
condition|(
name|iCacheMode
operator|!=
literal|null
condition|)
name|iHibSession
operator|.
name|setCacheMode
argument_list|(
name|iCacheMode
argument_list|)
expr_stmt|;
block|}
return|return
name|iHibSession
return|;
block|}
specifier|public
name|boolean
name|beginTransaction
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|iTx
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
name|iHibSession
operator|=
operator|(
name|sTransactionCreatesNewHibSession
condition|?
operator|new
name|_RootDAO
argument_list|()
operator|.
name|createNewSession
argument_list|()
else|:
name|getHibSession
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|iCacheMode
operator|!=
literal|null
condition|)
block|{
name|debug
argument_list|(
literal|"Using hibernate cache mode "
operator|+
name|iCacheMode
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|setCacheMode
argument_list|(
name|iCacheMode
argument_list|)
expr_stmt|;
block|}
name|iTx
operator|=
name|iHibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|debug
argument_list|(
literal|"Transaction started."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to begin transaction, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|commitTransaction
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|iTx
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|iTx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|iTx
operator|=
literal|null
expr_stmt|;
name|debug
argument_list|(
literal|"Transaction committed."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to commit transaction, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|sTransactionCreatesNewHibSession
operator|&&
name|iHibSession
operator|!=
literal|null
operator|&&
name|iHibSession
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|iHibSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|iHibSession
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|rollbackTransaction
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|iTx
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|iTx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|iTx
operator|=
literal|null
expr_stmt|;
name|info
argument_list|(
literal|"Transaction rollbacked."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to rollback transaction, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|sTransactionCreatesNewHibSession
operator|&&
name|iHibSession
operator|!=
literal|null
operator|&&
name|iHibSession
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|iHibSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|iHibSession
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|flush
parameter_list|(
name|boolean
name|commit
parameter_list|)
block|{
try|try
block|{
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|commit
operator|&&
name|iTx
operator|!=
literal|null
condition|)
block|{
name|iTx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|iTx
operator|=
name|getHibSession
argument_list|()
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to flush current session, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|flushIfNeeded
parameter_list|(
name|boolean
name|commit
parameter_list|)
block|{
name|iFlushIfNeededCounter
operator|++
expr_stmt|;
if|if
condition|(
name|iFlushIfNeededCounter
operator|>=
name|sBatchSize
condition|)
block|{
name|iFlushIfNeededCounter
operator|=
literal|0
expr_stmt|;
return|return
name|flush
argument_list|(
name|commit
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
interface|interface
name|MessageHandler
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
function_decl|;
specifier|public
name|boolean
name|isDebugEnabled
parameter_list|()
function_decl|;
block|}
specifier|public
name|void
name|addMessageHandler
parameter_list|(
name|MessageHandler
name|h
parameter_list|)
block|{
name|iMessageHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|Message
block|{
specifier|private
name|LogLevel
name|iLevel
decl_stmt|;
specifier|private
name|String
name|iMessage
decl_stmt|;
specifier|private
name|Throwable
name|iThrowable
decl_stmt|;
specifier|public
name|Message
parameter_list|(
name|LogLevel
name|level
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|this
argument_list|(
name|level
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Message
parameter_list|(
name|LogLevel
name|level
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|iLevel
operator|=
name|level
expr_stmt|;
name|iMessage
operator|=
name|message
expr_stmt|;
name|iThrowable
operator|=
name|t
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iLevel
operator|.
name|name
argument_list|()
operator|+
literal|": "
operator|+
name|iMessage
operator|+
operator|(
name|iThrowable
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|iThrowable
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
operator|)
return|;
block|}
specifier|public
name|LogLevel
name|getLevel
parameter_list|()
block|{
return|return
name|iLevel
return|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|iMessage
return|;
block|}
specifier|public
name|Throwable
name|getThrowable
parameter_list|()
block|{
return|return
name|iThrowable
return|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|()
block|{
switch|switch
condition|(
name|iLevel
condition|)
block|{
case|case
name|DEBUG
case|:
return|return
literal|"<font color='gray'>&nbsp;&nbsp;--"
operator|+
name|iMessage
operator|+
literal|"</font>"
return|;
case|case
name|INFO
case|:
return|return
name|iMessage
return|;
case|case
name|WARN
case|:
return|return
literal|"<font color='orange'>"
operator|+
name|iMessage
operator|+
literal|"</font>"
return|;
case|case
name|ERROR
case|:
return|return
literal|"<font color='red'>"
operator|+
name|iMessage
operator|+
literal|"</font>"
return|;
case|case
name|FATAL
case|:
return|return
literal|"<font color='red'><b>"
operator|+
name|iMessage
operator|+
literal|"</b></font>"
return|;
default|default:
return|return
name|iMessage
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|DefaultMessageLogger
implements|implements
name|MessageHandler
block|{
specifier|private
name|Log
name|iLog
decl_stmt|;
specifier|public
name|DefaultMessageLogger
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
name|iLog
operator|=
name|log
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
switch|switch
condition|(
name|message
operator|.
name|getLevel
argument_list|()
condition|)
block|{
case|case
name|DEBUG
case|:
name|iLog
operator|.
name|debug
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|INFO
case|:
name|iLog
operator|.
name|info
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|WARN
case|:
name|iLog
operator|.
name|warn
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ERROR
case|:
name|iLog
operator|.
name|error
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FATAL
case|:
name|iLog
operator|.
name|fatal
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|iLog
operator|.
name|info
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDebugEnabled
parameter_list|()
block|{
return|return
name|iLog
operator|.
name|isDebugEnabled
argument_list|()
return|;
block|}
block|}
specifier|public
name|XExactTimeConversion
name|getExactTimeConversion
parameter_list|()
block|{
if|if
condition|(
name|iExactTimeConversion
operator|==
literal|null
condition|)
name|iExactTimeConversion
operator|=
operator|new
name|XExactTimeConversion
argument_list|(
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iExactTimeConversion
return|;
block|}
specifier|public
name|HasGradableSubpart
name|getGradableSubpartsProvider
parameter_list|()
block|{
return|return
name|iHasGradableSubpart
return|;
block|}
specifier|public
name|void
name|setGradableSubpartsProvider
parameter_list|(
name|HasGradableSubpart
name|provider
parameter_list|)
block|{
name|iHasGradableSubpart
operator|=
name|provider
expr_stmt|;
block|}
specifier|public
name|NameFormat
name|getStudentNameFormat
parameter_list|()
block|{
return|return
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingStudentNameFormat
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|NameFormat
name|getInstructorNameFormat
parameter_list|()
block|{
return|return
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingInstructorNameFormat
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDatePatternFormat
parameter_list|()
block|{
return|return
name|ApplicationProperty
operator|.
name|DatePatternFormatUseDates
operator|.
name|value
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isAlternativeCourseEnabled
parameter_list|()
block|{
return|return
name|ApplicationProperty
operator|.
name|StudentSchedulingAlternativeCourse
operator|.
name|isTrue
argument_list|()
return|;
block|}
specifier|public
name|String
name|getApproverName
parameter_list|(
name|String
name|externalId
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|externalId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|TimetableManager
name|mgr
init|=
operator|(
name|TimetableManager
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from TimetableManager where externalUniqueId = :externalId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|mgr
operator|!=
literal|null
condition|)
return|return
name|mgr
operator|.
name|getName
argument_list|()
return|;
name|DepartmentalInstructor
name|instr
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from DepartmentalInstructor where externalUniqueId = :externalId and department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
return|return
name|instr
operator|==
literal|null
condition|?
name|externalId
else|:
name|instr
operator|.
name|nameLastNameFirst
argument_list|()
return|;
block|}
specifier|public
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|addAction
parameter_list|(
name|OnlineSectioningAction
argument_list|<
name|?
argument_list|>
name|action
parameter_list|,
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|a
init|=
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|a
operator|.
name|setOperation
argument_list|(
name|action
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSession
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|session
operator|.
name|toCompactString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStartTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iUser
operator|!=
literal|null
condition|)
name|a
operator|.
name|setUser
argument_list|(
name|iUser
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|iLog
init|)
block|{
name|iLog
operator|.
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
return|return
name|iLog
operator|.
name|getActionBuilder
argument_list|(
name|iLog
operator|.
name|getActionCount
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
specifier|public
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|getAction
parameter_list|()
block|{
if|if
condition|(
name|iLog
operator|.
name|getActionCount
argument_list|()
operator|==
literal|0
condition|)
return|return
name|iLog
operator|.
name|addActionBuilder
argument_list|()
return|;
return|return
name|iLog
operator|.
name|getActionBuilder
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|void
name|logOption
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|getAction
argument_list|()
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OnlineSectioningLog
operator|.
name|Log
name|getLog
parameter_list|()
block|{
return|return
name|iLog
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|OnlineSectioningLog
operator|.
name|Section
name|toProto
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|assignment
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|section
init|=
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getClassId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|e
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|e
operator|.
name|setUniqueId
argument_list|(
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getSection
argument_list|()
operator|!=
literal|null
condition|)
name|e
operator|.
name|setExternalId
argument_list|(
name|assignment
operator|.
name|getSection
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getClassNumber
argument_list|()
operator|!=
literal|null
condition|)
name|e
operator|.
name|setName
argument_list|(
name|assignment
operator|.
name|getClassNumber
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setClazz
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignment
operator|.
name|getSubpartId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|e
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|e
operator|.
name|setUniqueId
argument_list|(
name|assignment
operator|.
name|getSubpartId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getSubpart
argument_list|()
operator|!=
literal|null
condition|)
name|e
operator|.
name|setName
argument_list|(
name|assignment
operator|.
name|getSubpart
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setSubpart
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignment
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|e
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|e
operator|.
name|setUniqueId
argument_list|(
name|assignment
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getSubject
argument_list|()
operator|!=
literal|null
operator|&&
name|assignment
operator|.
name|getCourseNbr
argument_list|()
operator|!=
literal|null
condition|)
name|e
operator|.
name|setName
argument_list|(
name|assignment
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|assignment
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setCourse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignment
operator|.
name|isAssigned
argument_list|()
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|Builder
name|time
init|=
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|time
operator|.
name|setDays
argument_list|(
name|DayCode
operator|.
name|toInt
argument_list|(
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|assignment
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|time
operator|.
name|setStart
argument_list|(
name|assignment
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|time
operator|.
name|setLength
argument_list|(
name|assignment
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignment
operator|.
name|hasDatePattern
argument_list|()
condition|)
name|time
operator|.
name|setPattern
argument_list|(
name|assignment
operator|.
name|getDatePattern
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignment
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|assignment
operator|.
name|getInstructors
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|instructor
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|instructor
operator|.
name|setName
argument_list|(
name|assignment
operator|.
name|getInstructors
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|email
init|=
name|assignment
operator|.
name|getInstructorEmails
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|email
operator|.
name|isEmpty
argument_list|()
condition|)
name|instructor
operator|.
name|setExternalId
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|section
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|assignment
operator|.
name|hasRoom
argument_list|()
condition|)
block|{
for|for
control|(
name|IdValue
name|room
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|e
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|e
operator|.
name|setName
argument_list|(
name|room
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
name|e
operator|.
name|setUniqueId
argument_list|(
name|room
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|addLocation
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|section
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|toProto
parameter_list|(
name|SctAssignment
name|a
parameter_list|)
block|{
return|return
name|toProto
argument_list|(
name|a
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|toProto
parameter_list|(
name|SctAssignment
name|a
parameter_list|,
name|Enrollment
name|e
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|section
init|=
name|toProto
argument_list|(
name|a
argument_list|,
name|e
operator|==
literal|null
condition|?
literal|null
else|:
name|e
operator|.
name|getCourse
argument_list|()
argument_list|,
name|e
operator|==
literal|null
condition|?
literal|null
else|:
name|e
operator|.
name|getReservation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
name|section
operator|.
name|setTimeStamp
argument_list|(
name|e
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|section
return|;
block|}
specifier|public
specifier|static
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|toProto
parameter_list|(
name|SctAssignment
name|a
parameter_list|,
name|Course
name|c
parameter_list|)
block|{
return|return
name|toProto
argument_list|(
name|a
argument_list|,
name|c
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|toProto
parameter_list|(
name|SctAssignment
name|a
parameter_list|,
name|Course
name|c
parameter_list|,
name|Reservation
name|r
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|section
init|=
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|instanceof
name|Section
condition|)
block|{
name|Section
name|s
init|=
operator|(
name|Section
operator|)
name|a
decl_stmt|;
name|section
operator|.
name|setClazz
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|c
operator|==
literal|null
condition|?
name|s
operator|.
name|getName
argument_list|()
else|:
name|s
operator|.
name|getName
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setName
argument_list|(
name|s
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|section
operator|.
name|setSubpart
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
for|for
control|(
name|Instructor
name|i
range|:
name|s
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|instructor
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|i
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|i
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|getExternalId
argument_list|()
operator|!=
literal|null
condition|)
name|instructor
operator|.
name|setExternalId
argument_list|(
name|i
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|i
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
name|instructor
operator|.
name|setExternalId
argument_list|(
name|i
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|setCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|Builder
name|time
init|=
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|time
operator|.
name|setDays
argument_list|(
name|a
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
expr_stmt|;
name|time
operator|.
name|setStart
argument_list|(
name|a
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|time
operator|.
name|setLength
argument_list|(
name|a
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|time
operator|.
name|setPattern
argument_list|(
name|a
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|a
operator|instanceof
name|FreeTimeRequest
condition|)
name|time
operator|.
name|setPattern
argument_list|(
literal|"Free Time"
argument_list|)
expr_stmt|;
name|section
operator|.
name|setTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RoomLocation
name|room
range|:
name|a
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|section
operator|.
name|addLocation
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|room
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|reservation
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|GroupReservation
operator|||
name|r
operator|instanceof
name|LearningCommunityReservation
condition|)
name|reservation
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|GROUP_RESERVATION
argument_list|)
expr_stmt|;
if|else if
condition|(
name|r
operator|instanceof
name|IndividualReservation
condition|)
name|reservation
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|INDIVIDUAL_RESERVATION
argument_list|)
expr_stmt|;
if|else if
condition|(
name|r
operator|instanceof
name|CurriculumReservation
condition|)
block|{
name|reservation
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|CURRICULUM_RESERVATION
argument_list|)
expr_stmt|;
name|CurriculumReservation
name|cr
init|=
operator|(
name|CurriculumReservation
operator|)
name|r
decl_stmt|;
name|reservation
operator|.
name|setName
argument_list|(
name|cr
operator|.
name|getAcademicArea
argument_list|()
operator|+
operator|(
name|cr
operator|.
name|getClassifications
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" "
operator|+
name|cr
operator|.
name|getClassifications
argument_list|()
operator|)
operator|+
operator|(
name|cr
operator|.
name|getMajors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|cr
operator|.
name|getMajors
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|CourseReservation
condition|)
name|reservation
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|RESERVATION
argument_list|)
expr_stmt|;
name|section
operator|.
name|setReservation
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
block|}
return|return
name|section
return|;
block|}
specifier|public
specifier|static
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|toProto
parameter_list|(
name|Request
name|r
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|request
init|=
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setPriority
argument_list|(
name|r
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|FreeTimeRequest
name|ft
init|=
operator|(
name|FreeTimeRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|addFreeTime
argument_list|(
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDays
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
operator|.
name|setStart
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setLength
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|cr
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|entity
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|course
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|im
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Choice
name|choice
range|:
name|cr
operator|.
name|getSelectedChoices
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|choice
operator|.
name|getOffering
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|choice
operator|.
name|getSectionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Section
name|section
init|=
name|choice
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|choice
operator|.
name|getSectionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
name|entity
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"sec_pref"
argument_list|)
operator|.
name|setValue
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|choice
operator|.
name|getConfigId
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|choice
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|choice
operator|.
name|getConfigId
argument_list|()
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getId
argument_list|()
argument_list|)
operator|&&
name|config
operator|.
name|getInstructionalMethodName
argument_list|()
operator|!=
literal|null
operator|&&
name|im
operator|.
name|add
argument_list|(
name|config
operator|.
name|getInstructionalMethodName
argument_list|()
argument_list|)
condition|)
name|entity
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"im_pref"
argument_list|)
operator|.
name|setValue
argument_list|(
name|config
operator|.
name|getInstructionalMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Choice
name|choice
range|:
name|cr
operator|.
name|getRequiredChoices
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|choice
operator|.
name|getOffering
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|choice
operator|.
name|getSectionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Section
name|section
init|=
name|choice
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|choice
operator|.
name|getSectionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
name|entity
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"sec_pref"
argument_list|)
operator|.
name|setValue
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
operator|+
literal|"!"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|choice
operator|.
name|getConfigId
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|choice
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|choice
operator|.
name|getConfigId
argument_list|()
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getId
argument_list|()
argument_list|)
operator|&&
name|config
operator|.
name|getInstructionalMethodName
argument_list|()
operator|!=
literal|null
operator|&&
name|im
operator|.
name|add
argument_list|(
name|config
operator|.
name|getInstructionalMethodName
argument_list|()
argument_list|)
condition|)
name|entity
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"im_pref"
argument_list|)
operator|.
name|setValue
argument_list|(
name|config
operator|.
name|getInstructionalMethodName
argument_list|()
operator|+
literal|"!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|request
operator|.
name|addCourse
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cr
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
name|request
operator|.
name|setTimeStamp
argument_list|(
name|cr
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setWaitList
argument_list|(
name|cr
operator|.
name|isWaitlist
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCritical
argument_list|(
name|cr
operator|.
name|isCritical
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|request
return|;
block|}
specifier|public
specifier|static
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|toProto
parameter_list|(
name|XRequest
name|r
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|request
init|=
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setPriority
argument_list|(
name|r
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|ft
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|addFreeTime
argument_list|(
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDays
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
operator|.
name|setStart
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|)
operator|.
name|setLength
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|XCourseId
name|course
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|entity
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XPreference
argument_list|>
name|pref
init|=
name|cr
operator|.
name|getPreferences
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XPreference
name|p
range|:
name|pref
control|)
block|{
switch|switch
condition|(
name|p
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|INSTR_METHOD
case|:
name|entity
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"im_pref"
argument_list|)
operator|.
name|setValue
argument_list|(
name|p
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SECTION
case|:
name|entity
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"sec_pref"
argument_list|)
operator|.
name|setValue
argument_list|(
name|p
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|request
operator|.
name|addCourse
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cr
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
name|request
operator|.
name|setTimeStamp
argument_list|(
name|cr
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setWaitList
argument_list|(
name|cr
operator|.
name|isWaitlist
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCritical
argument_list|(
name|cr
operator|.
name|isCritical
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|request
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|OnlineSectioningLog
operator|.
name|Request
argument_list|>
name|toProto
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|)
block|{
name|List
argument_list|<
name|OnlineSectioningLog
operator|.
name|Request
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|OnlineSectioningLog
operator|.
name|Request
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|priority
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
continue|continue;
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|rq
init|=
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|rq
operator|.
name|setPriority
argument_list|(
name|priority
operator|++
argument_list|)
expr_stmt|;
name|rq
operator|.
name|setWaitList
argument_list|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|isWaitList
argument_list|()
argument_list|)
expr_stmt|;
name|rq
operator|.
name|setAlternative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rq
operator|.
name|setCritical
argument_list|(
name|r
operator|.
name|isCritical
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
range|:
name|rc
operator|.
name|getFreeTime
argument_list|()
control|)
block|{
name|rq
operator|.
name|addFreeTime
argument_list|(
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDays
argument_list|(
name|DayCode
operator|.
name|toInt
argument_list|(
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|ft
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setStart
argument_list|(
name|ft
operator|.
name|getStart
argument_list|()
argument_list|)
operator|.
name|setLength
argument_list|(
name|ft
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|rc
operator|.
name|isCourse
argument_list|()
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|e
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
condition|)
name|e
operator|.
name|setUniqueId
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasCourseName
argument_list|()
condition|)
name|e
operator|.
name|setName
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasSelectedClasses
argument_list|()
condition|)
for|for
control|(
name|Preference
name|clazz
range|:
name|rc
operator|.
name|getSelectedClasses
argument_list|()
control|)
name|e
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"sec_pref"
argument_list|)
operator|.
name|setValue
argument_list|(
name|clazz
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasSelectedIntructionalMethods
argument_list|()
condition|)
for|for
control|(
name|Preference
name|im
range|:
name|rc
operator|.
name|getSelectedIntructionalMethods
argument_list|()
control|)
name|e
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"im_pref"
argument_list|)
operator|.
name|setValue
argument_list|(
name|im
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rq
operator|.
name|addCourse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rq
operator|.
name|getCourseCount
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|r
operator|.
name|hasAdvisorNote
argument_list|()
operator|||
name|r
operator|.
name|hasAdvisorCredit
argument_list|()
operator|)
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|e
init|=
name|rq
operator|.
name|getCourseBuilder
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasAdvisorCredit
argument_list|()
condition|)
name|e
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|setValue
argument_list|(
name|r
operator|.
name|getAdvisorCredit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|hasAdvisorNote
argument_list|()
condition|)
name|e
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"note"
argument_list|)
operator|.
name|setValue
argument_list|(
name|r
operator|.
name|getAdvisorNote
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|rq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
continue|continue;
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|rq
init|=
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|rq
operator|.
name|setPriority
argument_list|(
name|priority
operator|++
argument_list|)
expr_stmt|;
name|rq
operator|.
name|setAlternative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rq
operator|.
name|setWaitList
argument_list|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|isWaitList
argument_list|()
argument_list|)
expr_stmt|;
name|rq
operator|.
name|setCritical
argument_list|(
name|r
operator|.
name|isCritical
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
range|:
name|rc
operator|.
name|getFreeTime
argument_list|()
control|)
block|{
name|rq
operator|.
name|addFreeTime
argument_list|(
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDays
argument_list|(
name|DayCode
operator|.
name|toInt
argument_list|(
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|ft
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setStart
argument_list|(
name|ft
operator|.
name|getStart
argument_list|()
argument_list|)
operator|.
name|setLength
argument_list|(
name|ft
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|rc
operator|.
name|isCourse
argument_list|()
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|e
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
condition|)
name|e
operator|.
name|setUniqueId
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasCourseName
argument_list|()
condition|)
name|e
operator|.
name|setName
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasSelectedClasses
argument_list|()
condition|)
for|for
control|(
name|Preference
name|clazz
range|:
name|rc
operator|.
name|getSelectedClasses
argument_list|()
control|)
name|e
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"sec_pref"
argument_list|)
operator|.
name|setValue
argument_list|(
name|clazz
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasSelectedIntructionalMethods
argument_list|()
condition|)
for|for
control|(
name|Preference
name|im
range|:
name|rc
operator|.
name|getSelectedIntructionalMethods
argument_list|()
control|)
name|e
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"im_pref"
argument_list|)
operator|.
name|setValue
argument_list|(
name|im
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rq
operator|.
name|addCourse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rq
operator|.
name|getCourseCount
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|r
operator|.
name|hasAdvisorNote
argument_list|()
operator|||
name|r
operator|.
name|hasAdvisorCredit
argument_list|()
operator|)
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|e
init|=
name|rq
operator|.
name|getCourseBuilder
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasAdvisorCredit
argument_list|()
condition|)
name|e
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|setValue
argument_list|(
name|r
operator|.
name|getAdvisorCredit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|hasAdvisorNote
argument_list|()
condition|)
name|e
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"note"
argument_list|)
operator|.
name|setValue
argument_list|(
name|r
operator|.
name|getAdvisorNote
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|rq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|toProto
parameter_list|(
name|XSection
name|a
parameter_list|,
name|XEnrollment
name|e
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|section
init|=
name|toProto
argument_list|(
name|a
argument_list|,
name|e
operator|==
literal|null
condition|?
literal|null
else|:
name|e
argument_list|,
name|e
operator|==
literal|null
condition|?
literal|null
else|:
name|e
operator|.
name|getReservation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
name|section
operator|.
name|setTimeStamp
argument_list|(
name|e
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|section
return|;
block|}
specifier|public
specifier|static
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|toProto
parameter_list|(
name|XSection
name|a
parameter_list|)
block|{
return|return
name|toProto
argument_list|(
name|a
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|toProto
parameter_list|(
name|XSection
name|s
parameter_list|,
name|XCourseId
name|c
parameter_list|,
name|XReservationId
name|r
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|section
init|=
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|section
operator|.
name|setClazz
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|s
operator|.
name|getSectionId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|c
operator|==
literal|null
condition|?
name|s
operator|.
name|getName
argument_list|()
else|:
name|s
operator|.
name|getName
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setName
argument_list|(
name|s
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|section
operator|.
name|setSubpart
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|s
operator|.
name|getSubpartId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|s
operator|.
name|getSubpartName
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|s
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|XInstructor
name|i
range|:
name|s
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|instructor
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|i
operator|.
name|getIntructorId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|i
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
name|instructor
operator|.
name|setExternalId
argument_list|(
name|i
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|i
operator|.
name|getExternalId
argument_list|()
operator|!=
literal|null
condition|)
name|instructor
operator|.
name|setExternalId
argument_list|(
name|i
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|setCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|c
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|Builder
name|time
init|=
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|time
operator|.
name|setDays
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|time
operator|.
name|setStart
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|)
expr_stmt|;
name|time
operator|.
name|setLength
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|time
operator|.
name|setPattern
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XRoom
name|rm
range|:
name|s
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|room
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|rm
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rm
operator|.
name|getExternalId
argument_list|()
operator|!=
literal|null
condition|)
name|room
operator|.
name|setExternalId
argument_list|(
name|rm
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|addLocation
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|reservation
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|r
operator|.
name|getReservationId
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|r
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Group
case|:
case|case
name|LearningCommunity
case|:
name|reservation
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|GROUP_RESERVATION
argument_list|)
expr_stmt|;
break|break;
case|case
name|Curriculum
case|:
name|reservation
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|CURRICULUM_RESERVATION
argument_list|)
expr_stmt|;
break|break;
case|case
name|Individual
case|:
name|reservation
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|INDIVIDUAL_RESERVATION
argument_list|)
expr_stmt|;
break|break;
case|case
name|Course
case|:
name|reservation
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|COURSE_RESERVATION
argument_list|)
expr_stmt|;
break|break;
default|default:
name|reservation
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|RESERVATION
argument_list|)
expr_stmt|;
block|}
name|section
operator|.
name|setReservation
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
block|}
return|return
name|section
return|;
block|}
specifier|public
specifier|static
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|toProto
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|CourseOffering
name|course
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|section
init|=
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|String
name|extId
init|=
name|clazz
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|section
operator|.
name|setClazz
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|extId
operator|==
literal|null
condition|?
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
else|:
name|extId
argument_list|)
operator|.
name|setName
argument_list|(
name|suffix
operator|==
literal|null
condition|?
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
else|:
name|suffix
argument_list|)
argument_list|)
expr_stmt|;
name|section
operator|.
name|setSubpart
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isDisplayInstructor
argument_list|()
condition|)
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|instructor
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|NameFormat
operator|.
name|LAST_FIRST_MIDDLE
operator|.
name|format
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
name|instructor
operator|.
name|setExternalId
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|instructor
operator|.
name|setExternalId
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|setCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|Builder
name|time
init|=
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|time
operator|.
name|setDays
argument_list|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|time
operator|.
name|setStart
argument_list|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|time
operator|.
name|setLength
argument_list|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getSlotPerMtg
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
name|time
operator|.
name|setPattern
argument_list|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Location
name|location
range|:
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|room
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|room
operator|.
name|setExternalId
argument_list|(
name|location
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|addLocation
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|section
return|;
block|}
specifier|public
specifier|static
name|long
name|getCpuTime
parameter_list|()
block|{
return|return
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
operator|.
name|isCurrentThreadCpuTimeSupported
argument_list|()
condition|?
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
operator|.
name|getCurrentThreadCpuTime
argument_list|()
else|:
literal|1000000l
operator|*
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getTimeString
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|getTimeString
argument_list|(
name|slot
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getTimeString
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|breakTime
parameter_list|)
block|{
name|int
name|min
init|=
name|slot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|-
name|breakTime
decl_stmt|;
name|int
name|h
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|m
init|=
name|min
operator|%
literal|60
decl_stmt|;
if|if
condition|(
name|CFG
operator|.
name|useAmPm
argument_list|()
condition|)
return|return
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|h
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
else|else
return|return
name|h
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|XTime
name|t
parameter_list|)
block|{
return|return
name|DayCode
operator|.
name|toString
argument_list|(
name|t
operator|.
name|getDays
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|getTimeString
argument_list|(
name|t
operator|.
name|getSlot
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|getTimeString
argument_list|(
name|t
operator|.
name|getSlot
argument_list|()
operator|+
name|t
operator|.
name|getLength
argument_list|()
argument_list|,
name|t
operator|.
name|getBreakTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|XFreeTimeRequest
name|f
parameter_list|)
block|{
return|return
name|CFG
operator|.
name|freePrefix
argument_list|()
operator|+
name|toString
argument_list|(
name|f
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|TimeLocation
name|t
parameter_list|)
block|{
return|return
name|DayCode
operator|.
name|toString
argument_list|(
name|t
operator|.
name|getDayCode
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|getTimeString
argument_list|(
name|t
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|getTimeString
argument_list|(
name|t
operator|.
name|getStartSlot
argument_list|()
operator|+
name|t
operator|.
name|getLength
argument_list|()
argument_list|,
name|t
operator|.
name|getBreakTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|FreeTimeRequest
name|f
parameter_list|)
block|{
return|return
name|CFG
operator|.
name|freePrefix
argument_list|()
operator|+
name|toString
argument_list|(
name|f
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPin
parameter_list|()
block|{
if|if
condition|(
name|getUser
argument_list|()
operator|.
name|getParameterCount
argument_list|()
operator|>
literal|0
condition|)
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Property
name|p
range|:
name|getUser
argument_list|()
operator|.
name|getParameterList
argument_list|()
control|)
if|if
condition|(
literal|"pin"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
return|return
name|p
operator|.
name|getValue
argument_list|()
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getStudentExternalId
parameter_list|()
block|{
if|if
condition|(
name|getUser
argument_list|()
operator|.
name|getParameterCount
argument_list|()
operator|>
literal|0
condition|)
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Property
name|p
range|:
name|getUser
argument_list|()
operator|.
name|getParameterList
argument_list|()
control|)
if|if
condition|(
literal|"student"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
return|return
name|p
operator|.
name|getValue
argument_list|()
return|;
return|return
name|getUser
argument_list|()
operator|.
name|getExternalId
argument_list|()
return|;
block|}
specifier|public
name|String
name|getSpecialRegistrationId
parameter_list|()
block|{
if|if
condition|(
name|getUser
argument_list|()
operator|.
name|getParameterCount
argument_list|()
operator|>
literal|0
condition|)
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Property
name|p
range|:
name|getUser
argument_list|()
operator|.
name|getParameterList
argument_list|()
control|)
if|if
condition|(
literal|"specreg"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
return|return
name|p
operator|.
name|getValue
argument_list|()
return|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

