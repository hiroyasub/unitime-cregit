begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|OnlineSectioningHelper
block|{
specifier|protected
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OnlineSectioningHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|LogLevel
block|{
name|DEBUG
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|DEBUG
argument_list|)
block|,
name|INFO
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|INFO
argument_list|)
block|,
name|WARN
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|WARN
argument_list|)
block|,
name|ERROR
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|ERROR
argument_list|)
block|,
name|FATAL
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
block|;
specifier|private
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
name|iProtoLevel
decl_stmt|;
name|LogLevel
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
name|level
parameter_list|)
block|{
name|iProtoLevel
operator|=
name|level
expr_stmt|;
block|}
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
name|level
parameter_list|()
block|{
return|return
name|iProtoLevel
return|;
block|}
block|}
empty_stmt|;
specifier|protected
name|List
argument_list|<
name|MessageHandler
argument_list|>
name|iMessageHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|org
operator|.
name|hibernate
operator|.
name|Session
name|iHibSession
init|=
literal|null
decl_stmt|;
specifier|protected
name|org
operator|.
name|hibernate
operator|.
name|Transaction
name|iTx
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|iFlushIfNeededCounter
init|=
literal|0
decl_stmt|;
specifier|protected
name|OnlineSectioningLog
operator|.
name|Log
operator|.
name|Builder
name|iLog
init|=
name|OnlineSectioningLog
operator|.
name|Log
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|int
name|sBatchSize
init|=
literal|100
decl_stmt|;
specifier|public
name|OnlineSectioningHelper
parameter_list|()
block|{
block|}
specifier|public
name|OnlineSectioningHelper
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|iHibSession
operator|=
name|hibSession
expr_stmt|;
block|}
specifier|public
name|void
name|log
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|.
name|getLevel
argument_list|()
operator|!=
name|LogLevel
operator|.
name|DEBUG
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Builder
name|l
init|=
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|level
argument_list|()
argument_list|)
operator|.
name|setText
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|setTimeStamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getThrowable
argument_list|()
operator|!=
literal|null
condition|)
name|l
operator|.
name|setException
argument_list|(
name|m
operator|.
name|getThrowable
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|m
operator|.
name|getThrowable
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iLog
operator|.
name|addMessage
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MessageHandler
name|h
range|:
name|iMessageHandlers
control|)
name|h
operator|.
name|onMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|DEBUG
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|INFO
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|WARN
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|ERROR
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatal
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|FATAL
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|DEBUG
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|INFO
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|WARN
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|ERROR
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatal
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|FATAL
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Session
name|getHibSession
parameter_list|()
block|{
return|return
name|iHibSession
return|;
block|}
specifier|public
name|boolean
name|beginTransaction
parameter_list|()
block|{
try|try
block|{
name|iHibSession
operator|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|createNewSession
argument_list|()
expr_stmt|;
name|iTx
operator|=
name|iHibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|debug
argument_list|(
literal|"Transaction started."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to begin transaction, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|commitTransaction
parameter_list|()
block|{
try|try
block|{
name|iTx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|debug
argument_list|(
literal|"Transaction committed."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to commit transaction, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|iHibSession
operator|!=
literal|null
operator|&&
name|iHibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|iHibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|rollbackTransaction
parameter_list|()
block|{
try|try
block|{
name|iTx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|info
argument_list|(
literal|"Transaction rollbacked."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to rollback transaction, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|iHibSession
operator|!=
literal|null
operator|&&
name|iHibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|iHibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|flush
parameter_list|(
name|boolean
name|commit
parameter_list|)
block|{
try|try
block|{
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|commit
operator|&&
name|iTx
operator|!=
literal|null
condition|)
block|{
name|iTx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|iTx
operator|=
name|getHibSession
argument_list|()
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to flush current session, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|flushIfNeeded
parameter_list|(
name|boolean
name|commit
parameter_list|)
block|{
name|iFlushIfNeededCounter
operator|++
expr_stmt|;
if|if
condition|(
name|iFlushIfNeededCounter
operator|>=
name|sBatchSize
condition|)
block|{
name|iFlushIfNeededCounter
operator|=
literal|0
expr_stmt|;
return|return
name|flush
argument_list|(
name|commit
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
interface|interface
name|MessageHandler
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|addMessageHandler
parameter_list|(
name|MessageHandler
name|h
parameter_list|)
block|{
name|iMessageHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|Message
block|{
specifier|private
name|LogLevel
name|iLevel
decl_stmt|;
specifier|private
name|String
name|iMessage
decl_stmt|;
specifier|private
name|Throwable
name|iThrowable
decl_stmt|;
specifier|public
name|Message
parameter_list|(
name|LogLevel
name|level
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|this
argument_list|(
name|level
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Message
parameter_list|(
name|LogLevel
name|level
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|iLevel
operator|=
name|level
expr_stmt|;
name|iMessage
operator|=
name|message
expr_stmt|;
name|iThrowable
operator|=
name|t
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iLevel
operator|.
name|name
argument_list|()
operator|+
literal|": "
operator|+
name|iMessage
operator|+
operator|(
name|iThrowable
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|iThrowable
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
operator|)
return|;
block|}
specifier|public
name|LogLevel
name|getLevel
parameter_list|()
block|{
return|return
name|iLevel
return|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|iMessage
return|;
block|}
specifier|public
name|Throwable
name|getThrowable
parameter_list|()
block|{
return|return
name|iThrowable
return|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|()
block|{
switch|switch
condition|(
name|iLevel
condition|)
block|{
case|case
name|DEBUG
case|:
return|return
literal|"<font color='gray'>&nbsp;&nbsp;--"
operator|+
name|iMessage
operator|+
literal|"</font>"
return|;
case|case
name|INFO
case|:
return|return
name|iMessage
return|;
case|case
name|WARN
case|:
return|return
literal|"<font color='orange'>"
operator|+
name|iMessage
operator|+
literal|"</font>"
return|;
case|case
name|ERROR
case|:
return|return
literal|"<font color='red'>"
operator|+
name|iMessage
operator|+
literal|"</font>"
return|;
case|case
name|FATAL
case|:
return|return
literal|"<font color='red'><b>"
operator|+
name|iMessage
operator|+
literal|"</b></font>"
return|;
default|default:
return|return
name|iMessage
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|DefaultMessageLogger
implements|implements
name|MessageHandler
block|{
specifier|private
name|Log
name|iLog
decl_stmt|;
specifier|public
name|DefaultMessageLogger
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
name|iLog
operator|=
name|log
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
switch|switch
condition|(
name|message
operator|.
name|getLevel
argument_list|()
condition|)
block|{
case|case
name|DEBUG
case|:
name|iLog
operator|.
name|debug
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|INFO
case|:
name|iLog
operator|.
name|info
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|WARN
case|:
name|iLog
operator|.
name|warn
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ERROR
case|:
name|iLog
operator|.
name|error
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FATAL
case|:
name|iLog
operator|.
name|fatal
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|iLog
operator|.
name|info
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|addAction
parameter_list|(
name|OnlineSectioningAction
argument_list|<
name|?
argument_list|>
name|action
parameter_list|,
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|a
init|=
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|a
operator|.
name|setOperation
argument_list|(
name|action
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSession
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|session
operator|.
name|toCompactString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStartTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|iLog
operator|.
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
return|return
name|iLog
operator|.
name|getActionBuilder
argument_list|(
name|iLog
operator|.
name|getActionCount
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|getAction
parameter_list|()
block|{
return|return
name|iLog
operator|.
name|getActionBuilder
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|OnlineSectioningLog
operator|.
name|Log
name|getLog
parameter_list|()
block|{
return|return
name|iLog
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|OnlineSectioningLog
operator|.
name|Section
name|toProto
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|assignment
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|section
init|=
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getClassId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|setClazz
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|assignment
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|assignment
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|assignment
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|assignment
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignment
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|setCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|assignment
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|assignment
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|assignment
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignment
operator|.
name|isAssigned
argument_list|()
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|Builder
name|time
init|=
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|time
operator|.
name|setDays
argument_list|(
name|DayCode
operator|.
name|toInt
argument_list|(
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|assignment
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|time
operator|.
name|setStart
argument_list|(
name|assignment
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|time
operator|.
name|setLength
argument_list|(
name|assignment
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignment
operator|.
name|hasDatePattern
argument_list|()
condition|)
name|time
operator|.
name|setPattern
argument_list|(
name|assignment
operator|.
name|getDatePattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignment
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|instructor
range|:
name|assignment
operator|.
name|getInstructors
argument_list|()
control|)
name|section
operator|.
name|addInstructor
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|instructor
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|INSTRUCTOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignment
operator|.
name|hasRoom
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|room
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
name|section
operator|.
name|addLocation
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|room
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|LOCATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|section
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|toProto
parameter_list|(
name|Assignment
name|a
parameter_list|,
name|Course
name|c
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Builder
name|section
init|=
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|instanceof
name|Section
condition|)
block|{
name|Section
name|s
init|=
operator|(
name|Section
operator|)
name|a
decl_stmt|;
name|section
operator|.
name|setClazz
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|c
operator|==
literal|null
condition|?
name|s
operator|.
name|getName
argument_list|()
else|:
name|s
operator|.
name|getName
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setName
argument_list|(
name|c
operator|==
literal|null
condition|?
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getName
argument_list|()
else|:
name|c
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|s
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|instructors
init|=
name|s
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
index|[]
name|instructorIds
init|=
name|s
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorIds
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|instructorIds
operator|.
name|length
argument_list|,
name|instructors
operator|.
name|length
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|nameEmail
init|=
name|instructors
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|instructorIds
index|[
name|i
index|]
decl_stmt|;
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|instructor
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|setName
argument_list|(
name|nameEmail
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameEmail
operator|.
name|length
operator|>=
literal|2
condition|)
name|instructor
operator|.
name|setExternalId
argument_list|(
name|nameEmail
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|section
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|setCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|Builder
name|time
init|=
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|time
operator|.
name|setDays
argument_list|(
name|a
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
expr_stmt|;
name|time
operator|.
name|setStart
argument_list|(
name|a
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|time
operator|.
name|setLength
argument_list|(
name|a
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|time
operator|.
name|setPattern
argument_list|(
name|a
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|a
operator|instanceof
name|FreeTimeRequest
condition|)
name|time
operator|.
name|setPattern
argument_list|(
literal|"Free Time"
argument_list|)
expr_stmt|;
name|section
operator|.
name|setTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RoomLocation
name|room
range|:
name|a
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|section
operator|.
name|addLocation
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|room
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|section
return|;
block|}
specifier|public
specifier|static
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|toProto
parameter_list|(
name|Request
name|r
parameter_list|)
block|{
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|request
init|=
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setPriority
argument_list|(
name|r
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|FreeTimeRequest
name|ft
init|=
operator|(
name|FreeTimeRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|addFreeTime
argument_list|(
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDays
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
operator|.
name|setStart
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setLength
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|cr
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|request
operator|.
name|addCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|course
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cr
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
name|request
operator|.
name|setTimeStamp
argument_list|(
name|cr
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|request
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|OnlineSectioningLog
operator|.
name|Request
argument_list|>
name|toProto
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|)
block|{
name|List
argument_list|<
name|OnlineSectioningLog
operator|.
name|Request
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|OnlineSectioningLog
operator|.
name|Request
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|priority
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|hasRequestedFreeTime
argument_list|()
condition|)
continue|continue;
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|rq
init|=
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|rq
operator|.
name|setPriority
argument_list|(
name|priority
operator|++
argument_list|)
expr_stmt|;
name|rq
operator|.
name|setAlternative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|hasRequestedFreeTime
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
range|:
name|r
operator|.
name|getRequestedFreeTime
argument_list|()
control|)
block|{
name|rq
operator|.
name|addFreeTime
argument_list|(
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDays
argument_list|(
name|DayCode
operator|.
name|toInt
argument_list|(
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|ft
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setStart
argument_list|(
name|ft
operator|.
name|getStart
argument_list|()
argument_list|)
operator|.
name|setLength
argument_list|(
name|ft
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|rq
operator|.
name|addCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|COURSE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasFirstAlternative
argument_list|()
condition|)
block|{
name|rq
operator|.
name|addCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|COURSE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasSecondAlternative
argument_list|()
condition|)
block|{
name|rq
operator|.
name|addCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|COURSE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|rq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|priority
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|hasRequestedFreeTime
argument_list|()
condition|)
continue|continue;
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|rq
init|=
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|rq
operator|.
name|setPriority
argument_list|(
name|priority
operator|++
argument_list|)
expr_stmt|;
name|rq
operator|.
name|setAlternative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|hasRequestedFreeTime
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
range|:
name|r
operator|.
name|getRequestedFreeTime
argument_list|()
control|)
block|{
name|rq
operator|.
name|addFreeTime
argument_list|(
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDays
argument_list|(
name|DayCode
operator|.
name|toInt
argument_list|(
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|ft
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setStart
argument_list|(
name|ft
operator|.
name|getStart
argument_list|()
argument_list|)
operator|.
name|setLength
argument_list|(
name|ft
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|rq
operator|.
name|addCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|COURSE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasFirstAlternative
argument_list|()
condition|)
block|{
name|rq
operator|.
name|addCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|COURSE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasSecondAlternative
argument_list|()
condition|)
block|{
name|rq
operator|.
name|addCourse
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|COURSE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|rq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|long
name|getCpuTime
parameter_list|()
block|{
return|return
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
operator|.
name|isCurrentThreadCpuTimeSupported
argument_list|()
condition|?
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
operator|.
name|getCurrentThreadCpuTime
argument_list|()
else|:
literal|1000000l
operator|*
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
block|}
end_class

end_unit

