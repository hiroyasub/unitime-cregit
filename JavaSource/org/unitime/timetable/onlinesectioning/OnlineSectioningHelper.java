begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|OnlineSectioningHelper
block|{
specifier|protected
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OnlineSectioningHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|LogLevel
block|{
name|DEBUG
block|,
name|INFO
block|,
name|WARN
block|,
name|ERROR
block|,
name|FATAL
block|}
empty_stmt|;
specifier|protected
name|List
argument_list|<
name|MessageHandler
argument_list|>
name|iMessageHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|org
operator|.
name|hibernate
operator|.
name|Session
name|iHibSession
init|=
literal|null
decl_stmt|;
specifier|protected
name|org
operator|.
name|hibernate
operator|.
name|Transaction
name|iTx
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|iFlushIfNeededCounter
init|=
literal|0
decl_stmt|;
specifier|protected
specifier|static
name|int
name|sBatchSize
init|=
literal|100
decl_stmt|;
specifier|public
name|OnlineSectioningHelper
parameter_list|()
block|{
block|}
specifier|public
name|OnlineSectioningHelper
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|iHibSession
operator|=
name|hibSession
expr_stmt|;
block|}
specifier|public
name|void
name|log
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
for|for
control|(
name|MessageHandler
name|h
range|:
name|iMessageHandlers
control|)
name|h
operator|.
name|onMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|DEBUG
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|INFO
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|WARN
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|ERROR
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatal
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|FATAL
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|DEBUG
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|INFO
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|WARN
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|ERROR
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatal
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
operator|new
name|Message
argument_list|(
name|LogLevel
operator|.
name|FATAL
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Session
name|getHibSession
parameter_list|()
block|{
return|return
name|iHibSession
return|;
block|}
specifier|public
name|boolean
name|beginTransaction
parameter_list|()
block|{
try|try
block|{
name|iHibSession
operator|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|createNewSession
argument_list|()
expr_stmt|;
name|iTx
operator|=
name|iHibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|debug
argument_list|(
literal|"Transaction started."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to begin transaction, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|commitTransaction
parameter_list|()
block|{
try|try
block|{
name|iTx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|debug
argument_list|(
literal|"Transaction committed."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to commit transaction, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|iHibSession
operator|!=
literal|null
operator|&&
name|iHibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|iHibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|rollbackTransaction
parameter_list|()
block|{
try|try
block|{
name|iTx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|info
argument_list|(
literal|"Transaction rollbacked."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to rollback transaction, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|iHibSession
operator|!=
literal|null
operator|&&
name|iHibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|iHibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|flush
parameter_list|(
name|boolean
name|commit
parameter_list|)
block|{
try|try
block|{
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|commit
operator|&&
name|iTx
operator|!=
literal|null
condition|)
block|{
name|iTx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|iTx
operator|=
name|getHibSession
argument_list|()
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to flush current session, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|flushIfNeeded
parameter_list|(
name|boolean
name|commit
parameter_list|)
block|{
name|iFlushIfNeededCounter
operator|++
expr_stmt|;
if|if
condition|(
name|iFlushIfNeededCounter
operator|>=
name|sBatchSize
condition|)
block|{
name|iFlushIfNeededCounter
operator|=
literal|0
expr_stmt|;
return|return
name|flush
argument_list|(
name|commit
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
interface|interface
name|MessageHandler
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|addMessageHandler
parameter_list|(
name|MessageHandler
name|h
parameter_list|)
block|{
name|iMessageHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|Message
block|{
specifier|private
name|LogLevel
name|iLevel
decl_stmt|;
specifier|private
name|String
name|iMessage
decl_stmt|;
specifier|private
name|Throwable
name|iThrowable
decl_stmt|;
specifier|public
name|Message
parameter_list|(
name|LogLevel
name|level
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|this
argument_list|(
name|level
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Message
parameter_list|(
name|LogLevel
name|level
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|iLevel
operator|=
name|level
expr_stmt|;
name|iMessage
operator|=
name|message
expr_stmt|;
name|iThrowable
operator|=
name|t
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iLevel
operator|.
name|name
argument_list|()
operator|+
literal|": "
operator|+
name|iMessage
operator|+
operator|(
name|iThrowable
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|iThrowable
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
operator|)
return|;
block|}
specifier|public
name|LogLevel
name|getLevel
parameter_list|()
block|{
return|return
name|iLevel
return|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|iMessage
return|;
block|}
specifier|public
name|Throwable
name|getThrowable
parameter_list|()
block|{
return|return
name|iThrowable
return|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|()
block|{
switch|switch
condition|(
name|iLevel
condition|)
block|{
case|case
name|DEBUG
case|:
return|return
literal|"<font color='gray'>&nbsp;&nbsp;--"
operator|+
name|iMessage
operator|+
literal|"</font>"
return|;
case|case
name|INFO
case|:
return|return
name|iMessage
return|;
case|case
name|WARN
case|:
return|return
literal|"<font color='orange'>"
operator|+
name|iMessage
operator|+
literal|"</font>"
return|;
case|case
name|ERROR
case|:
return|return
literal|"<font color='red'>"
operator|+
name|iMessage
operator|+
literal|"</font>"
return|;
case|case
name|FATAL
case|:
return|return
literal|"<font color='red'><b>"
operator|+
name|iMessage
operator|+
literal|"</b></font>"
return|;
default|default:
return|return
name|iMessage
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|DefaultMessageLogger
implements|implements
name|MessageHandler
block|{
specifier|private
name|Log
name|iLog
decl_stmt|;
specifier|public
name|DefaultMessageLogger
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
name|iLog
operator|=
name|log
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
switch|switch
condition|(
name|message
operator|.
name|getLevel
argument_list|()
condition|)
block|{
case|case
name|DEBUG
case|:
name|iLog
operator|.
name|debug
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|INFO
case|:
name|iLog
operator|.
name|info
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|WARN
case|:
name|iLog
operator|.
name|warn
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ERROR
case|:
name|iLog
operator|.
name|error
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FATAL
case|:
name|iLog
operator|.
name|fatal
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|iLog
operator|.
name|info
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

