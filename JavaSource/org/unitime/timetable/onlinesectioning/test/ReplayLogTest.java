begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningTestFwk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|GetAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|ComputeSuggestionsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|FindAssignmentAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|EnrollStudent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ReplayLogTest
extends|extends
name|OnlineSectioningTestFwk
block|{
specifier|private
name|File
name|iLogFile
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|iStudentIds
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|iCourseIds
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|iClassIds
init|=
literal|null
decl_stmt|;
specifier|private
name|String
index|[]
name|sOkErrors
init|=
operator|new
name|String
index|[]
block|{
literal|"Unable to enroll into .*, the class is no longer available\\."
block|,
literal|"No courses requested\\."
block|, 	}
decl_stmt|;
specifier|private
name|ReplayLogTest
parameter_list|(
name|File
name|logFile
parameter_list|)
block|{
name|iLogFile
operator|=
name|logFile
expr_stmt|;
block|}
specifier|private
name|OnlineSectioningLog
operator|.
name|ExportedLog
name|readLog
parameter_list|(
name|CodedInputStream
name|cin
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cin
operator|.
name|isAtEnd
argument_list|()
condition|)
return|return
literal|null
return|;
name|int
name|size
init|=
name|cin
operator|.
name|readInt32
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|cin
operator|.
name|pushLimit
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|OnlineSectioningLog
operator|.
name|ExportedLog
name|ret
init|=
name|OnlineSectioningLog
operator|.
name|ExportedLog
operator|.
name|parseFrom
argument_list|(
name|cin
argument_list|)
decl_stmt|;
name|cin
operator|.
name|popLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|cin
operator|.
name|resetSizeCounter
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|Long
name|toStudentId
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Entity
name|student
parameter_list|)
block|{
if|if
condition|(
name|iStudentIds
operator|==
literal|null
condition|)
return|return
name|student
operator|.
name|getUniqueId
argument_list|()
return|;
name|Long
name|id
init|=
name|iStudentIds
operator|.
name|get
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|id
operator|==
literal|null
condition|?
name|student
operator|.
name|getUniqueId
argument_list|()
else|:
name|id
return|;
block|}
specifier|private
name|Long
name|toCourseId
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Entity
name|course
parameter_list|)
block|{
if|if
condition|(
name|iCourseIds
operator|==
literal|null
condition|)
return|return
name|course
operator|.
name|getUniqueId
argument_list|()
return|;
return|return
name|iCourseIds
operator|.
name|get
argument_list|(
name|course
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Long
name|toClassId
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Section
name|section
parameter_list|)
block|{
if|if
condition|(
name|iClassIds
operator|==
literal|null
condition|)
return|return
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
return|;
return|return
name|iClassIds
operator|.
name|get
argument_list|(
name|section
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|CourseRequestInterface
operator|.
name|Request
name|toRequest
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Request
name|request
parameter_list|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|ret
init|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Time
name|time
range|:
name|request
operator|.
name|getFreeTimeList
argument_list|()
control|)
block|{
name|CourseRequestInterface
operator|.
name|FreeTime
name|freeTime
init|=
operator|new
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|()
decl_stmt|;
name|freeTime
operator|.
name|setStart
argument_list|(
name|time
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|freeTime
operator|.
name|setLength
argument_list|(
name|time
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|c
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|time
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
name|freeTime
operator|.
name|addDay
argument_list|(
name|c
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|addRequestedFreeTime
argument_list|(
name|freeTime
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|getCourseCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|ret
operator|.
name|setRequestedCourse
argument_list|(
name|request
operator|.
name|getCourse
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|ret
operator|.
name|setFirstAlternative
argument_list|(
name|request
operator|.
name|getCourse
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|ret
operator|.
name|setSecondAlternative
argument_list|(
name|request
operator|.
name|getCourse
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasWaitList
argument_list|()
condition|)
name|ret
operator|.
name|setWaitList
argument_list|(
name|request
operator|.
name|getWaitList
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|toAssignment
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Section
name|section
parameter_list|)
block|{
name|Long
name|classId
init|=
name|toClassId
argument_list|(
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|classId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|classId
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|hasTime
argument_list|()
condition|)
block|{
name|a
operator|.
name|setStart
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|c
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|c
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|instructor
range|:
name|section
operator|.
name|getInstructorList
argument_list|()
control|)
block|{
name|a
operator|.
name|addInstructor
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmail
argument_list|(
name|instructor
operator|.
name|hasExternalId
argument_list|()
condition|?
name|instructor
operator|.
name|getExternalId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|location
range|:
name|section
operator|.
name|getLocationList
argument_list|()
control|)
block|{
name|a
operator|.
name|addRoom
argument_list|(
name|location
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setPinned
argument_list|(
name|section
operator|.
name|getPreference
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Preference
operator|.
name|REQUIRED
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCourseId
argument_list|(
name|toCourseId
argument_list|(
name|section
operator|.
name|getCourse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|course
init|=
name|section
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|course
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|a
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
specifier|private
name|FindAssignmentAction
name|convertFindAssignment
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Action
name|action
parameter_list|)
block|{
name|CourseRequestInterface
name|request
init|=
operator|new
name|CourseRequestInterface
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|assignment
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|request
operator|.
name|setAcademicSessionId
argument_list|(
name|action
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|toStudentId
argument_list|(
name|action
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Request
name|r
range|:
name|action
operator|.
name|getRequestList
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getAlternative
argument_list|()
condition|)
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|toRequest
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|toRequest
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Section
name|section
range|:
name|r
operator|.
name|getSectionList
argument_list|()
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|toAssignment
argument_list|(
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
name|assignment
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Find assignment for "
operator|+
name|request
operator|.
name|getCourses
argument_list|()
operator|+
literal|" ("
operator|+
name|assignment
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|createAction
argument_list|(
name|FindAssignmentAction
operator|.
name|class
argument_list|)
operator|.
name|forRequest
argument_list|(
name|request
argument_list|)
operator|.
name|withAssignment
argument_list|(
name|assignment
argument_list|)
return|;
block|}
specifier|private
name|ComputeSuggestionsAction
name|convertSuggestions
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Action
name|action
parameter_list|)
block|{
name|CourseRequestInterface
name|request
init|=
operator|new
name|CourseRequestInterface
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|assignment
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|selected
init|=
literal|null
decl_stmt|;
name|request
operator|.
name|setAcademicSessionId
argument_list|(
name|action
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|toStudentId
argument_list|(
name|action
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Request
name|r
range|:
name|action
operator|.
name|getRequestList
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getAlternative
argument_list|()
condition|)
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|toRequest
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|toRequest
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Section
name|section
range|:
name|r
operator|.
name|getSectionList
argument_list|()
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|toAssignment
argument_list|(
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getPreference
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Preference
operator|.
name|SELECTED
condition|)
name|selected
operator|=
name|a
expr_stmt|;
name|assignment
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|selected
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Find suggestions for "
operator|+
name|request
operator|.
name|getCourses
argument_list|()
operator|+
literal|" ("
operator|+
name|selected
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|createAction
argument_list|(
name|ComputeSuggestionsAction
operator|.
name|class
argument_list|)
operator|.
name|forRequest
argument_list|(
name|request
argument_list|)
operator|.
name|withAssignment
argument_list|(
name|assignment
argument_list|)
operator|.
name|withSelection
argument_list|(
name|selected
argument_list|)
return|;
block|}
specifier|public
name|EnrollStudent
name|convertEnrollFromReload
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Action
name|action
parameter_list|)
block|{
name|CourseRequestInterface
name|request
init|=
operator|new
name|CourseRequestInterface
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|assignment
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|request
operator|.
name|setAcademicSessionId
argument_list|(
name|action
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|toStudentId
argument_list|(
name|action
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Request
name|r
range|:
name|action
operator|.
name|getRequestList
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getAlternative
argument_list|()
condition|)
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|toRequest
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|toRequest
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Enrollment
name|enrollment
range|:
name|action
operator|.
name|getEnrollmentList
argument_list|()
control|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getType
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|STORED
condition|)
block|{
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSectionList
argument_list|()
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|toAssignment
argument_list|(
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
name|assignment
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Enroll for "
operator|+
name|request
operator|.
name|getCourses
argument_list|()
operator|+
literal|" ("
operator|+
name|assignment
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|createAction
argument_list|(
name|EnrollStudent
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|withRequest
argument_list|(
name|request
argument_list|)
operator|.
name|withAssignment
argument_list|(
name|assignment
argument_list|)
return|;
block|}
specifier|private
name|OnlineSectioningAction
argument_list|<
name|?
argument_list|>
name|convert
parameter_list|(
name|OnlineSectioningLog
operator|.
name|Action
name|action
parameter_list|)
block|{
if|if
condition|(
name|action
operator|.
name|getOperation
argument_list|()
operator|.
name|equals
argument_list|(
literal|"section"
argument_list|)
condition|)
return|return
name|convertFindAssignment
argument_list|(
name|action
argument_list|)
return|;
if|if
condition|(
name|action
operator|.
name|getOperation
argument_list|()
operator|.
name|equals
argument_list|(
literal|"suggestions"
argument_list|)
condition|)
return|return
name|convertSuggestions
argument_list|(
name|action
argument_list|)
return|;
if|if
condition|(
name|action
operator|.
name|getOperation
argument_list|()
operator|.
name|equals
argument_list|(
literal|"reload-student"
argument_list|)
condition|)
return|return
name|convertEnrollFromReload
argument_list|(
name|action
argument_list|)
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Operation
argument_list|>
name|operations
parameter_list|()
block|{
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"convertIds"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|iStudentIds
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s.uniqueId, s.externalUniqueId from Student s where s.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getServer
argument_list|()
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|iStudentIds
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|iCourseIds
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select co.uniqueId, co.subjectAreaAbbv || ' ' || co.courseNbr from CourseOffering co where co.subjectArea.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getServer
argument_list|()
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|iCourseIds
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|iClassIds
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Class_
name|c
range|:
operator|(
name|List
argument_list|<
name|Class_
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c  from Class_ c inner join c.schedulingSubpart s inner join s.instrOfferingConfig.instructionalOffering io inner join io.courseOfferings co where io.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getServer
argument_list|()
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|iClassIds
operator|.
name|put
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
argument_list|,
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|nrTasks
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"nrTasks"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|OnlineSectioningTestFwk
operator|.
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|iLogFile
argument_list|)
decl_stmt|;
try|try
block|{
name|CodedInputStream
name|cin
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|cin
operator|.
name|setSizeLimit
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// 1 GB
name|OnlineSectioningLog
operator|.
name|ExportedLog
name|log
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|log
operator|=
name|readLog
argument_list|(
name|cin
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|OnlineSectioningAction
argument_list|<
name|?
argument_list|>
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<
name|OnlineSectioningAction
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
literal|null
decl_stmt|;
name|boolean
name|hasSectionOrSuggestion
init|=
literal|false
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Action
name|action
range|:
name|log
operator|.
name|getActionList
argument_list|()
control|)
block|{
if|if
condition|(
name|studentId
operator|==
literal|null
operator|&&
name|action
operator|.
name|hasStudent
argument_list|()
operator|&&
name|action
operator|.
name|getStudent
argument_list|()
operator|.
name|hasExternalId
argument_list|()
condition|)
name|studentId
operator|=
name|toStudentId
argument_list|(
name|action
operator|.
name|getStudent
argument_list|()
argument_list|)
expr_stmt|;
name|OnlineSectioningAction
argument_list|<
name|?
argument_list|>
name|a
init|=
name|convert
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|a
operator|instanceof
name|FindAssignmentAction
operator|||
name|a
operator|instanceof
name|ComputeSuggestionsAction
condition|)
name|hasSectionOrSuggestion
operator|=
literal|true
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|studentId
operator|!=
literal|null
operator|&&
operator|!
name|actions
operator|.
name|isEmpty
argument_list|()
operator|&&
name|hasSectionOrSuggestion
condition|)
name|operations
operator|.
name|add
argument_list|(
operator|new
name|ReplayOperation
argument_list|(
name|studentId
argument_list|,
name|actions
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nrTasks
operator|>
literal|0
operator|&&
name|operations
operator|.
name|size
argument_list|()
operator|>=
literal|3
operator|*
name|nrTasks
condition|)
break|break;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|fatal
argument_list|(
literal|"Failed to load log: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|operations
return|;
block|}
specifier|private
class|class
name|ReplayOperation
implements|implements
name|Operation
block|{
specifier|private
name|Long
name|iStudentId
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|OnlineSectioningAction
argument_list|<
name|?
argument_list|>
argument_list|>
name|iActions
init|=
literal|null
decl_stmt|;
specifier|private
name|OnlineSectioningServer
name|iServer
decl_stmt|;
specifier|private
name|int
name|iGood
init|=
literal|0
decl_stmt|;
specifier|public
name|ReplayOperation
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|List
argument_list|<
name|OnlineSectioningAction
argument_list|<
name|?
argument_list|>
argument_list|>
name|actions
parameter_list|)
block|{
name|iStudentId
operator|=
name|studentId
expr_stmt|;
name|iActions
operator|=
name|actions
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|E
parameter_list|>
name|E
name|executeAction
parameter_list|(
name|OnlineSectioningAction
argument_list|<
name|E
argument_list|>
name|action
parameter_list|)
block|{
name|E
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|iServer
operator|.
name|execute
argument_list|(
name|action
argument_list|,
name|user
argument_list|()
argument_list|)
expr_stmt|;
name|iGood
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
for|for
control|(
name|String
name|ok
range|:
name|sOkErrors
control|)
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|matches
argument_list|(
name|ok
argument_list|)
condition|)
return|return
literal|null
return|;
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to run "
operator|+
name|action
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|iStudentId
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|execute
parameter_list|(
name|OnlineSectioningServer
name|s
parameter_list|)
block|{
name|iServer
operator|=
name|s
expr_stmt|;
name|XStudent
name|student
init|=
name|iServer
operator|.
name|getStudent
argument_list|(
name|iStudentId
argument_list|)
decl_stmt|;
name|EnrollStudent
name|back
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
name|CourseRequestInterface
name|request
init|=
name|iServer
operator|.
name|execute
argument_list|(
name|createAction
argument_list|(
name|GetRequest
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|iStudentId
argument_list|)
argument_list|,
name|user
argument_list|()
argument_list|)
decl_stmt|;
name|ClassAssignmentInterface
name|assignment
init|=
name|iServer
operator|.
name|execute
argument_list|(
name|createAction
argument_list|(
name|GetAssignment
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|iStudentId
argument_list|)
argument_list|,
name|user
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|assignments
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|ca
range|:
name|assignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
name|assignments
operator|.
name|addAll
argument_list|(
name|ca
operator|.
name|getClassAssignments
argument_list|()
argument_list|)
expr_stmt|;
name|back
operator|=
name|s
operator|.
name|createAction
argument_list|(
name|EnrollStudent
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|iStudentId
argument_list|)
operator|.
name|withRequest
argument_list|(
name|request
argument_list|)
operator|.
name|withAssignment
argument_list|(
name|assignments
argument_list|)
expr_stmt|;
block|}
name|boolean
name|undo
init|=
literal|false
decl_stmt|;
name|int
name|nrActions
init|=
literal|0
decl_stmt|;
try|try
block|{
for|for
control|(
name|OnlineSectioningAction
argument_list|<
name|?
argument_list|>
name|action
range|:
name|iActions
control|)
block|{
if|if
condition|(
name|action
operator|instanceof
name|EnrollStudent
condition|)
block|{
if|if
condition|(
name|back
operator|!=
literal|null
operator|&&
name|iServer
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
condition|)
block|{
name|undo
operator|=
literal|true
expr_stmt|;
name|executeAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|nrActions
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|executeAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|nrActions
operator|++
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|undo
operator|&&
name|back
operator|!=
literal|null
condition|)
block|{
name|executeAction
argument_list|(
name|back
argument_list|)
expr_stmt|;
name|nrActions
operator|++
expr_stmt|;
block|}
return|return
name|nrActions
operator|==
literal|0
condition|?
literal|1.0
else|:
operator|(
operator|(
name|double
operator|)
name|iGood
operator|)
operator|/
name|nrActions
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
operator|new
name|ReplayLogTest
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|test
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"nrTasks"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"nrConcurrent"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

