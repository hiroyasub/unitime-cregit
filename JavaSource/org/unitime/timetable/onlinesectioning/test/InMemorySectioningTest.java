begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|BasicConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|reports
operator|.
name|OnlineSectioningReport
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|OnlineSectioningSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|StudentSchedulingAssistantWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|SuggestionSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|multicriteria
operator|.
name|MultiCriteriaBranchAndBoundSelection
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|JProf
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningXMLLoader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningXMLSaver
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|DistanceConflict
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|TimeOverlapsCounter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|heuristics
operator|.
name|selection
operator|.
name|BranchBoundSelection
operator|.
name|BranchBoundNeighbour
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_class
specifier|public
class|class
name|InMemorySectioningTest
block|{
specifier|public
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|InMemorySectioningTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|StudentSectioningModel
name|iModel
decl_stmt|;
specifier|private
name|OnlineSectioningSelection
name|iSelection
decl_stmt|;
specifier|private
name|StudentSchedulingAssistantWeights
name|iWeights
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|iCounters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|InMemorySectioningTest
parameter_list|(
name|DataProperties
name|config
parameter_list|)
block|{
name|iModel
operator|=
operator|new
name|TestModel
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|iModel
operator|.
name|setDistanceConflict
argument_list|(
operator|new
name|DistanceConflict
argument_list|(
literal|null
argument_list|,
name|iModel
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iModel
operator|.
name|addModelListener
argument_list|(
name|iModel
operator|.
name|getDistanceConflict
argument_list|()
argument_list|)
expr_stmt|;
name|iModel
operator|.
name|setTimeOverlaps
argument_list|(
operator|new
name|TimeOverlapsCounter
argument_list|(
literal|null
argument_list|,
name|iModel
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iModel
operator|.
name|addModelListener
argument_list|(
name|iModel
operator|.
name|getTimeOverlaps
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|iSelection
operator|=
operator|new
name|MultiCriteriaBranchAndBoundSelection
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSelection
operator|=
operator|new
name|SuggestionSelection
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
name|iSelection
operator|.
name|setModel
argument_list|(
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|iWeights
operator|=
operator|new
name|StudentSchedulingAssistantWeights
argument_list|(
name|model
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|model
argument_list|()
operator|.
name|setStudentWeights
argument_list|(
name|iWeights
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Using "
operator|+
operator|(
name|config
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|true
argument_list|)
condition|?
literal|"multi-criteria "
else|:
literal|""
operator|)
operator|+
operator|(
name|config
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|true
argument_list|)
condition|?
literal|"priority"
else|:
literal|"equal"
operator|)
operator|+
literal|" weighting model"
operator|+
literal|" with "
operator|+
name|config
operator|.
name|getPropertyInt
argument_list|(
literal|"Neighbour.BranchAndBoundTimeout"
argument_list|,
literal|1000
argument_list|)
operator|+
literal|" ms time limit."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StudentSectioningModel
name|model
parameter_list|()
block|{
return|return
name|iModel
return|;
block|}
specifier|public
name|void
name|inc
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|Counter
name|c
init|=
name|iCounters
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
operator|new
name|Counter
argument_list|()
expr_stmt|;
name|iCounters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|inc
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|inc
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|inc
argument_list|(
name|name
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|section
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|preferredSectionsForCourse
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getAssignment
argument_list|()
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|preferredSectionsForCourse
operator|.
name|put
argument_list|(
operator|(
name|CourseRequest
operator|)
name|r
argument_list|,
name|r
operator|.
name|getAssignment
argument_list|()
operator|.
name|getSections
argument_list|()
argument_list|)
expr_stmt|;
name|updateSpace
argument_list|(
name|r
operator|.
name|getAssignment
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setInitialAssignment
argument_list|(
name|r
operator|.
name|getAssignment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
for|for
control|(
name|Course
name|course
range|:
operator|(
operator|(
name|CourseRequest
operator|)
name|r
operator|)
operator|.
name|getCourses
argument_list|()
control|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|section
operator|.
name|setPenalty
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|limit
init|=
name|section
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|int
name|enrolled
init|=
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getAssignment
argument_list|()
operator|.
name|getSections
argument_list|()
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
name|enrolled
operator|--
expr_stmt|;
name|double
name|available
init|=
name|Math
operator|.
name|round
argument_list|(
name|limit
operator|-
name|enrolled
operator|-
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
decl_stmt|;
name|section
operator|.
name|setPenalty
argument_list|(
operator|-
name|available
operator|/
name|limit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|iSelection
operator|.
name|setPreferredSections
argument_list|(
name|preferredSectionsForCourse
argument_list|)
expr_stmt|;
name|iSelection
operator|.
name|setRequiredSections
argument_list|(
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|iSelection
operator|.
name|setRequiredFreeTimes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|iModel
operator|.
name|clearBest
argument_list|()
expr_stmt|;
name|long
name|t0
init|=
name|JProf
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|BranchBoundNeighbour
name|neighbour
init|=
name|iSelection
operator|.
name|select
argument_list|(
name|student
argument_list|)
decl_stmt|;
name|long
name|time
init|=
name|JProf
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
decl_stmt|;
name|inc
argument_list|(
literal|"[C] CPU Time"
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[S] Student"
argument_list|)
expr_stmt|;
if|if
condition|(
name|neighbour
operator|==
literal|null
condition|)
block|{
name|inc
argument_list|(
literal|"[F] Failure"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|neighbour
operator|.
name|assign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|a
init|=
literal|0
decl_stmt|,
name|u
init|=
literal|0
decl_stmt|,
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|a
operator|++
expr_stmt|;
name|updateSpace
argument_list|(
name|r
operator|.
name|getAssignment
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|u
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getAssignment
argument_list|()
argument_list|)
condition|)
name|c
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|a
operator|>
literal|0
condition|)
name|inc
argument_list|(
literal|"[A] Assigned"
argument_list|,
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|u
operator|>
literal|0
condition|)
name|inc
argument_list|(
literal|"[A] Not Assigned"
argument_list|,
name|u
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|>
literal|0
condition|)
name|inc
argument_list|(
literal|"[A] Changed"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[V] Value"
argument_list|,
name|neighbour
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|inc
argument_list|(
literal|"[T0] Time<10ms"
argument_list|,
name|time
operator|<
literal|10
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[T1] Time<100ms"
argument_list|,
name|time
operator|<
literal|100
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[T2] Time<250ms"
argument_list|,
name|time
operator|<
literal|250
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[T3] Time<500ms"
argument_list|,
name|time
operator|<
literal|500
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[T4] Time<1s"
argument_list|,
name|time
operator|<
literal|1000
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[T5] Time>=1s"
argument_list|,
name|time
operator|>=
literal|1000
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|updateSpace
parameter_list|(
name|Enrollment
name|enrollment
parameter_list|,
name|boolean
name|increment
parameter_list|)
block|{
if|if
condition|(
name|enrollment
operator|==
literal|null
operator|||
operator|!
name|enrollment
operator|.
name|isCourseRequest
argument_list|()
condition|)
return|return;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
name|section
operator|.
name|setSpaceHeld
argument_list|(
name|section
operator|.
name|getSpaceHeld
argument_list|()
operator|+
operator|(
name|increment
condition|?
literal|1.0
else|:
operator|-
literal|1.0
operator|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Enrollment
argument_list|>
name|feasibleEnrollments
init|=
operator|new
name|ArrayList
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrl
range|:
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|enrollment
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
continue|continue;
name|boolean
name|overlaps
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Request
name|otherRequest
range|:
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|otherRequest
operator|.
name|equals
argument_list|(
name|enrollment
operator|.
name|getRequest
argument_list|()
argument_list|)
operator|||
operator|!
operator|(
name|otherRequest
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
name|Enrollment
name|otherErollment
init|=
name|otherRequest
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherErollment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|enrl
operator|.
name|isOverlapping
argument_list|(
name|otherErollment
argument_list|)
condition|)
block|{
name|overlaps
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|overlaps
condition|)
name|feasibleEnrollments
operator|.
name|add
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
name|double
name|change
init|=
literal|1.0
operator|/
name|feasibleEnrollments
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Enrollment
name|feasibleEnrollment
range|:
name|feasibleEnrollments
control|)
for|for
control|(
name|Section
name|section
range|:
name|feasibleEnrollment
operator|.
name|getSections
argument_list|()
control|)
name|section
operator|.
name|setSpaceExpected
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
operator|+
operator|(
name|increment
condition|?
operator|+
name|change
else|:
operator|-
name|change
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Input: "
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|model
argument_list|()
operator|.
name|getExtendedInfo
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Student
argument_list|>
name|students
init|=
operator|new
name|ArrayList
argument_list|<
name|Student
argument_list|>
argument_list|(
name|model
argument_list|()
operator|.
name|getStudents
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|students
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|students
control|)
block|{
name|section
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
decl_stmt|;
if|if
condition|(
name|time
operator|>
literal|60000
operator|*
name|i
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Progress ["
operator|+
operator|(
name|time
operator|/
literal|60000
operator|)
operator|+
literal|"m]: "
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|model
argument_list|()
operator|.
name|getExtendedInfo
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Output: "
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|model
argument_list|()
operator|.
name|getExtendedInfo
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|TestModel
extends|extends
name|StudentSectioningModel
block|{
specifier|public
name|TestModel
parameter_list|(
name|DataProperties
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getExtendedInfo
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ret
init|=
name|super
operator|.
name|getExtendedInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|e
range|:
name|iCounters
operator|.
name|entrySet
argument_list|()
control|)
name|ret
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"Weighting model"
argument_list|,
operator|(
name|model
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|true
argument_list|)
condition|?
literal|"multi-criteria "
else|:
literal|""
operator|)
operator|+
operator|(
name|model
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|true
argument_list|)
condition|?
literal|"priority"
else|:
literal|"equal"
operator|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"B&B time limit"
argument_list|,
name|model
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyInt
argument_list|(
literal|"Neighbour.BranchAndBoundTimeout"
argument_list|,
literal|1000
argument_list|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"jprof"
argument_list|,
literal|"cpu"
argument_list|)
expr_stmt|;
name|BasicConfigurator
operator|.
name|configure
argument_list|()
expr_stmt|;
name|DataProperties
name|cfg
init|=
operator|new
name|DataProperties
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Neighbour.BranchAndBoundTimeout"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Suggestions.Timeout"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Extensions.Classes"
argument_list|,
name|DistanceConflict
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|";"
operator|+
name|TimeOverlapsCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"StudentWeights.Class"
argument_list|,
name|StudentSchedulingAssistantWeights
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"StudentWeights.LeftoverSpread"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"StudentWeights.BalancingFactor"
argument_list|,
literal|"0.0"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Reservation.CanAssignOverTheLimit"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Distances.Ellipsoid"
argument_list|,
name|DistanceMetric
operator|.
name|Ellipsoid
operator|.
name|WGS84
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
literal|"INFO, A1"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1"
argument_list|,
literal|"org.apache.log4j.ConsoleAppender"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout"
argument_list|,
literal|"org.apache.log4j.PatternLayout"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout.ConversionPattern"
argument_list|,
literal|"%-5p %c{2}: %m%n"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cfg"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cache.EhCacheProvider"
argument_list|,
literal|"ERROR"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.unitime.commons.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.net"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|putAll
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|input
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|String
name|run
init|=
name|cfg
operator|.
name|getProperty
argument_list|(
literal|"run"
argument_list|,
literal|"r0"
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
literal|"INFO, A1"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1"
argument_list|,
literal|"org.apache.log4j.FileAppender"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.File"
argument_list|,
operator|new
name|File
argument_list|(
name|input
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|input
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|input
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
operator|+
literal|"-"
operator|+
name|run
operator|+
literal|".txt"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|InMemorySectioningTest
name|test
init|=
operator|new
name|InMemorySectioningTest
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|StudentSectioningXMLLoader
name|loader
init|=
operator|new
name|StudentSectioningXMLLoader
argument_list|(
name|test
operator|.
name|model
argument_list|()
argument_list|)
decl_stmt|;
name|loader
operator|.
name|setInputFile
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|loader
operator|.
name|load
argument_list|()
expr_stmt|;
name|test
operator|.
name|run
argument_list|()
expr_stmt|;
name|Solver
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|s
init|=
operator|new
name|Solver
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|s
operator|.
name|setInitalSolution
argument_list|(
name|test
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|StudentSectioningXMLSaver
name|saver
init|=
operator|new
name|StudentSectioningXMLSaver
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|File
name|output
init|=
operator|new
name|File
argument_list|(
name|input
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|input
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|input
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
operator|+
literal|"-"
operator|+
name|run
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
name|saver
operator|.
name|save
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Test failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

