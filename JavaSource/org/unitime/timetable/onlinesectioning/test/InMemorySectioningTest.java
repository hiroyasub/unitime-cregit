begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2011 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|BasicConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XReservationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|reports
operator|.
name|OnlineSectioningReport
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|OnlineSectioningModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|OnlineSectioningSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|StudentSchedulingAssistantWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|SuggestionSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|SuggestionsBranchAndBound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|expectations
operator|.
name|FractionallyOverExpected
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|expectations
operator|.
name|PercentageOverExpected
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|multicriteria
operator|.
name|MultiCriteriaBranchAndBoundSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|multicriteria
operator|.
name|MultiCriteriaBranchAndBoundSuggestions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|JProf
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentPreferencePenalties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningXMLLoader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningXMLSaver
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|constraint
operator|.
name|LinkedSections
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|DistanceConflict
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|TimeOverlapsCounter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|heuristics
operator|.
name|selection
operator|.
name|BranchBoundSelection
operator|.
name|BranchBoundNeighbour
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|heuristics
operator|.
name|studentord
operator|.
name|StudentChoiceOrder
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CourseReservation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|Reservation
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|InMemorySectioningTest
block|{
specifier|public
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|InMemorySectioningTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|OnlineSectioningModel
name|iModel
decl_stmt|;
specifier|private
name|boolean
name|iSuggestions
init|=
literal|false
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|iCounters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|InMemorySectioningTest
parameter_list|(
name|DataProperties
name|config
parameter_list|)
block|{
name|iModel
operator|=
operator|new
name|TestModel
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|iModel
operator|.
name|setDistanceConflict
argument_list|(
operator|new
name|DistanceConflict
argument_list|(
operator|new
name|DistanceMetric
argument_list|(
name|iModel
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|,
name|iModel
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iModel
operator|.
name|addModelListener
argument_list|(
name|iModel
operator|.
name|getDistanceConflict
argument_list|()
argument_list|)
expr_stmt|;
name|iModel
operator|.
name|setTimeOverlaps
argument_list|(
operator|new
name|TimeOverlapsCounter
argument_list|(
literal|null
argument_list|,
name|iModel
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iModel
operator|.
name|addModelListener
argument_list|(
name|iModel
operator|.
name|getTimeOverlaps
argument_list|()
argument_list|)
expr_stmt|;
name|iModel
operator|.
name|setStudentWeights
argument_list|(
operator|new
name|StudentSchedulingAssistantWeights
argument_list|(
name|iModel
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iSuggestions
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"suggestions"
argument_list|,
name|iSuggestions
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|overexp
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"overexp"
argument_list|)
decl_stmt|;
if|if
condition|(
name|overexp
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|x
init|=
name|overexp
operator|.
name|split
argument_list|(
literal|"[/\\-]"
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|iModel
operator|.
name|setOverExpectedCriterion
argument_list|(
operator|new
name|PercentageOverExpected
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|x
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iModel
operator|.
name|setOverExpectedCriterion
argument_list|(
operator|new
name|FractionallyOverExpected
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|x
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
name|x
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Using "
operator|+
operator|(
name|config
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|true
argument_list|)
condition|?
literal|"multi-criteria "
else|:
literal|""
operator|)
operator|+
operator|(
name|config
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|true
argument_list|)
condition|?
literal|"priority"
else|:
literal|"equal"
operator|)
operator|+
literal|" weighting model"
operator|+
literal|" with over-expected "
operator|+
name|iModel
operator|.
name|getOverExpectedCriterion
argument_list|()
operator|+
operator|(
name|iSuggestions
condition|?
literal|", suggestions"
else|:
literal|""
operator|)
operator|+
literal|", "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"sort"
argument_list|,
literal|"shuffle"
argument_list|)
operator|+
literal|" order"
operator|+
literal|" and "
operator|+
name|config
operator|.
name|getPropertyInt
argument_list|(
literal|"Neighbour.BranchAndBoundTimeout"
argument_list|,
literal|1000
argument_list|)
operator|+
literal|" ms time limit."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OnlineSectioningModel
name|model
parameter_list|()
block|{
return|return
name|iModel
return|;
block|}
specifier|public
name|void
name|inc
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iCounters
init|)
block|{
name|Counter
name|c
init|=
name|iCounters
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
operator|new
name|Counter
argument_list|()
expr_stmt|;
name|iCounters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|inc
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|inc
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|inc
argument_list|(
name|name
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Counter
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iCounters
init|)
block|{
name|Counter
name|c
init|=
name|iCounters
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
operator|new
name|Counter
argument_list|()
expr_stmt|;
name|iCounters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
specifier|public
name|double
name|getPercDisbalancedSections
parameter_list|(
name|double
name|perc
parameter_list|)
block|{
name|double
name|disb10Sections
init|=
literal|0
decl_stmt|,
name|nrSections
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Offering
name|offering
range|:
name|model
argument_list|()
operator|.
name|getOfferings
argument_list|()
control|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
name|double
name|enrl
init|=
name|config
operator|.
name|getEnrollmentWeight
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
continue|continue;
name|nrSections
operator|+=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// sections have limits -> desired size is section limit x (total enrollment / total limit)
name|double
name|ratio
init|=
name|enrl
operator|/
name|subpart
operator|.
name|getLimit
argument_list|()
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
name|double
name|desired
init|=
name|ratio
operator|*
name|section
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|desired
operator|-
name|section
operator|.
name|getEnrollmentWeight
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|>=
name|Math
operator|.
name|max
argument_list|(
literal|1.0
argument_list|,
name|perc
operator|*
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
condition|)
name|disb10Sections
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// unlimited sections -> desired size is total enrollment / number of sections
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
name|double
name|desired
init|=
name|enrl
operator|/
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|desired
operator|-
name|section
operator|.
name|getEnrollmentWeight
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|>=
name|Math
operator|.
name|max
argument_list|(
literal|1.0
argument_list|,
name|perc
operator|*
name|desired
argument_list|)
condition|)
name|disb10Sections
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|100.0
operator|*
name|disb10Sections
operator|/
name|nrSections
return|;
block|}
specifier|protected
name|Course
name|clone
parameter_list|(
name|Course
name|course
parameter_list|,
name|long
name|studentId
parameter_list|,
name|Student
name|originalStudent
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
parameter_list|)
block|{
name|Offering
name|clonedOffering
init|=
operator|new
name|Offering
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|courseLimit
init|=
name|course
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|courseLimit
operator|>=
literal|0
condition|)
block|{
name|courseLimit
operator|-=
name|course
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|courseLimit
operator|<
literal|0
condition|)
name|courseLimit
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|i
init|=
name|course
operator|.
name|getEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|courseLimit
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Course
name|clonedCourse
init|=
operator|new
name|Course
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|clonedOffering
argument_list|,
name|courseLimit
argument_list|,
name|course
operator|.
name|getProjected
argument_list|()
argument_list|)
decl_stmt|;
name|clonedCourse
operator|.
name|setNote
argument_list|(
name|course
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Config
argument_list|,
name|Config
argument_list|>
name|configs
init|=
operator|new
name|Hashtable
argument_list|<
name|Config
argument_list|,
name|Config
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Subpart
argument_list|,
name|Subpart
argument_list|>
name|subparts
init|=
operator|new
name|Hashtable
argument_list|<
name|Subpart
argument_list|,
name|Subpart
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Section
argument_list|,
name|Section
argument_list|>
name|sections
init|=
operator|new
name|Hashtable
argument_list|<
name|Section
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Config
argument_list|>
name|e
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Config
name|config
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|configLimit
init|=
name|config
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|configLimit
operator|>=
literal|0
condition|)
block|{
name|configLimit
operator|-=
name|config
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|configLimit
operator|<
literal|0
condition|)
name|configLimit
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|i
init|=
name|config
operator|.
name|getEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|configLimit
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Config
name|clonedConfig
init|=
operator|new
name|Config
argument_list|(
name|config
operator|.
name|getId
argument_list|()
argument_list|,
name|configLimit
argument_list|,
name|config
operator|.
name|getName
argument_list|()
argument_list|,
name|clonedOffering
argument_list|)
decl_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|config
argument_list|,
name|clonedConfig
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Subpart
argument_list|>
name|f
init|=
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|subpart
init|=
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
name|Subpart
name|clonedSubpart
init|=
operator|new
name|Subpart
argument_list|(
name|subpart
operator|.
name|getId
argument_list|()
argument_list|,
name|subpart
operator|.
name|getInstructionalType
argument_list|()
argument_list|,
name|subpart
operator|.
name|getName
argument_list|()
argument_list|,
name|clonedConfig
argument_list|,
operator|(
name|subpart
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|subparts
operator|.
name|get
argument_list|(
name|subpart
operator|.
name|getParent
argument_list|()
argument_list|)
operator|)
argument_list|)
decl_stmt|;
name|clonedSubpart
operator|.
name|setAllowOverlap
argument_list|(
name|subpart
operator|.
name|isAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|clonedSubpart
operator|.
name|setCredit
argument_list|(
name|subpart
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
name|subparts
operator|.
name|put
argument_list|(
name|subpart
argument_list|,
name|clonedSubpart
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|g
init|=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|g
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|g
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|section
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|limit
operator|>=
literal|0
condition|)
block|{
comment|// limited section, deduct enrollments
name|limit
operator|-=
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|limit
operator|<
literal|0
condition|)
name|limit
operator|=
literal|0
expr_stmt|;
comment|// over-enrolled, but not unlimited
if|if
condition|(
name|studentId
operator|>=
literal|0
condition|)
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|section
operator|.
name|getEnrollments
argument_list|()
control|)
if|if
condition|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|limit
operator|++
expr_stmt|;
break|break;
block|}
block|}
name|Section
name|clonedSection
init|=
operator|new
name|Section
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|limit
argument_list|,
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|clonedSubpart
argument_list|,
name|section
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorIds
argument_list|()
argument_list|,
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
argument_list|,
operator|(
name|section
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|sections
operator|.
name|get
argument_list|(
name|section
operator|.
name|getParent
argument_list|()
argument_list|)
operator|)
argument_list|)
decl_stmt|;
name|clonedSection
operator|.
name|setName
argument_list|(
operator|-
literal|1l
argument_list|,
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setSpaceExpected
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setSpaceHeld
argument_list|(
name|section
operator|.
name|getSpaceHeld
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getIgnoreConflictWithSectionIds
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Long
name|id
range|:
name|section
operator|.
name|getIgnoreConflictWithSectionIds
argument_list|()
control|)
name|clonedSection
operator|.
name|addIgnoreConflictWith
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
block|{
name|double
name|available
init|=
name|Math
operator|.
name|round
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
operator|-
name|limit
argument_list|)
decl_stmt|;
name|clonedSection
operator|.
name|setPenalty
argument_list|(
name|available
operator|/
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|put
argument_list|(
name|section
argument_list|,
name|clonedSection
argument_list|)
expr_stmt|;
name|classTable
operator|.
name|put
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|clonedSection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|hasReservations
argument_list|()
condition|)
block|{
for|for
control|(
name|Reservation
name|reservation
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getReservations
argument_list|()
control|)
block|{
name|int
name|reservationLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|reservation
operator|.
name|getLimit
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservationLimit
operator|>=
literal|0
condition|)
block|{
name|reservationLimit
operator|-=
name|reservation
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|reservationLimit
operator|<
literal|0
condition|)
name|reservationLimit
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|i
init|=
name|reservation
operator|.
name|getEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|reservationLimit
operator|++
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|reservationLimit
operator|<=
literal|0
condition|)
continue|continue;
block|}
name|boolean
name|applicable
init|=
name|originalStudent
operator|!=
literal|null
operator|&&
name|reservation
operator|.
name|isApplicable
argument_list|(
name|originalStudent
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|CourseReservation
condition|)
name|applicable
operator|=
operator|(
name|course
operator|.
name|getId
argument_list|()
operator|==
operator|(
operator|(
name|CourseReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|DummyReservation
condition|)
block|{
comment|// Ignore by reservation only flag (dummy reservation) when the student is already enrolled in the course
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|course
operator|.
name|getEnrollments
argument_list|()
control|)
if|if
condition|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|applicable
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|Reservation
name|clonedReservation
init|=
operator|new
name|XOffering
operator|.
name|SimpleReservation
argument_list|(
name|XReservationType
operator|.
name|Dummy
argument_list|,
name|reservation
operator|.
name|getId
argument_list|()
argument_list|,
name|clonedOffering
argument_list|,
name|reservation
operator|.
name|getPriority
argument_list|()
argument_list|,
name|reservation
operator|.
name|canAssignOverLimit
argument_list|()
argument_list|,
name|reservationLimit
argument_list|,
name|applicable
argument_list|,
name|reservation
operator|.
name|mustBeUsed
argument_list|()
argument_list|,
name|reservation
operator|.
name|isAllowOverlap
argument_list|()
argument_list|,
name|reservation
operator|.
name|isExpired
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|reservation
operator|.
name|getConfigs
argument_list|()
control|)
name|clonedReservation
operator|.
name|addConfig
argument_list|(
name|configs
operator|.
name|get
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Subpart
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|entry
range|:
name|reservation
operator|.
name|getSections
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|clonedSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
name|clonedSections
operator|.
name|add
argument_list|(
name|sections
operator|.
name|get
argument_list|(
name|section
argument_list|)
argument_list|)
expr_stmt|;
name|clonedReservation
operator|.
name|getSections
argument_list|()
operator|.
name|put
argument_list|(
name|subparts
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|clonedSections
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|clonedCourse
return|;
block|}
specifier|protected
name|Request
name|addRequest
parameter_list|(
name|Student
name|student
parameter_list|,
name|Student
name|original
parameter_list|,
name|Request
name|request
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
parameter_list|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
return|return
operator|new
name|FreeTimeRequest
argument_list|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|request
operator|.
name|isAlternative
argument_list|()
argument_list|,
name|student
argument_list|,
operator|(
operator|(
name|FreeTimeRequest
operator|)
name|request
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
name|List
argument_list|<
name|Course
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourses
argument_list|()
control|)
name|courses
operator|.
name|add
argument_list|(
name|clone
argument_list|(
name|course
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|original
argument_list|,
name|classTable
argument_list|)
argument_list|)
expr_stmt|;
name|CourseRequest
name|clonnedRequest
init|=
operator|new
name|CourseRequest
argument_list|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|request
operator|.
name|isAlternative
argument_list|()
argument_list|,
name|student
argument_list|,
name|courses
argument_list|,
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|isWaitlist
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Request
name|originalRequest
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|originalEnrollment
init|=
name|originalRequest
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
for|for
control|(
name|Course
name|clonnedCourse
range|:
name|clonnedRequest
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|clonnedCourse
operator|.
name|getOffering
argument_list|()
operator|.
name|hasReservations
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|originalEnrollment
operator|!=
literal|null
operator|&&
name|clonnedCourse
operator|.
name|equals
argument_list|(
name|originalEnrollment
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|needReservation
init|=
name|clonnedCourse
operator|.
name|getOffering
argument_list|()
operator|.
name|getUnreservedSpace
argument_list|(
name|clonnedRequest
argument_list|)
operator|<
literal|1.0
decl_stmt|;
if|if
condition|(
operator|!
name|needReservation
condition|)
block|{
name|boolean
name|configChecked
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Section
name|originalSection
range|:
name|originalEnrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Section
name|clonnedSection
init|=
name|classTable
operator|.
name|get
argument_list|(
name|originalSection
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clonnedSection
operator|.
name|getUnreservedSpace
argument_list|(
name|clonnedRequest
argument_list|)
operator|<
literal|1.0
condition|)
block|{
name|needReservation
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|configChecked
operator|&&
name|clonnedSection
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getUnreservedSpace
argument_list|(
name|clonnedRequest
argument_list|)
operator|<
literal|1.0
condition|)
block|{
name|needReservation
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|configChecked
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needReservation
condition|)
block|{
name|Reservation
name|reservation
init|=
operator|new
name|XOffering
operator|.
name|SimpleReservation
argument_list|(
name|XReservationType
operator|.
name|Dummy
argument_list|,
operator|-
name|original
operator|.
name|getId
argument_list|()
argument_list|,
name|clonnedCourse
operator|.
name|getOffering
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Section
name|originalSection
range|:
name|originalEnrollment
operator|.
name|getSections
argument_list|()
control|)
name|reservation
operator|.
name|addSection
argument_list|(
name|classTable
operator|.
name|get
argument_list|(
name|originalSection
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
return|return
name|clonnedRequest
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|boolean
name|section
parameter_list|(
name|Student
name|original
parameter_list|)
block|{
name|OnlineSectioningModel
name|model
init|=
operator|new
name|TestModel
argument_list|(
name|iModel
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setOverExpectedCriterion
argument_list|(
name|iModel
operator|.
name|getOverExpectedCriterion
argument_list|()
argument_list|)
expr_stmt|;
name|Student
name|student
init|=
operator|new
name|Student
argument_list|(
name|original
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|preferredSectionsForCourse
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|iModel
init|)
block|{
for|for
control|(
name|Request
name|request
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Request
name|clonnedRequest
init|=
name|addRequest
argument_list|(
name|student
argument_list|,
name|original
argument_list|,
name|request
argument_list|,
name|classTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getAssignment
argument_list|()
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|request
operator|.
name|getAssignment
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
name|sections
operator|.
name|add
argument_list|(
name|classTable
operator|.
name|get
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|preferredSectionsForCourse
operator|.
name|put
argument_list|(
operator|(
name|CourseRequest
operator|)
name|clonnedRequest
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|model
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|model
operator|.
name|setDistanceConflict
argument_list|(
operator|new
name|DistanceConflict
argument_list|(
name|iModel
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|getDistanceMetric
argument_list|()
argument_list|,
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setTimeOverlaps
argument_list|(
operator|new
name|TimeOverlapsCounter
argument_list|(
literal|null
argument_list|,
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|LinkedSections
name|link
range|:
name|iModel
operator|.
name|getLinkedSections
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Offering
name|offering
range|:
name|link
operator|.
name|getOfferings
argument_list|()
control|)
for|for
control|(
name|Subpart
name|subpart
range|:
name|link
operator|.
name|getSubparts
argument_list|(
name|offering
argument_list|)
control|)
for|for
control|(
name|Section
name|section
range|:
name|link
operator|.
name|getSections
argument_list|(
name|subpart
argument_list|)
control|)
block|{
name|Section
name|x
init|=
name|classTable
operator|.
name|get
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
name|sections
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sections
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
name|model
operator|.
name|addLinkedSections
argument_list|(
name|sections
argument_list|)
expr_stmt|;
block|}
name|OnlineSectioningSelection
name|selection
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|selection
operator|=
operator|new
name|MultiCriteriaBranchAndBoundSelection
argument_list|(
name|iModel
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|selection
operator|=
operator|new
name|SuggestionSelection
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|selection
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setPreferredSections
argument_list|(
name|preferredSectionsForCourse
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setRequiredSections
argument_list|(
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setRequiredFreeTimes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|JProf
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|BranchBoundNeighbour
name|neighbour
init|=
name|selection
operator|.
name|select
argument_list|(
name|student
argument_list|)
decl_stmt|;
name|long
name|time
init|=
name|JProf
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
decl_stmt|;
name|inc
argument_list|(
literal|"[C] CPU Time"
argument_list|,
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
name|neighbour
operator|==
literal|null
condition|)
block|{
name|inc
argument_list|(
literal|"[F] Failure"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iSuggestions
condition|)
block|{
name|StudentPreferencePenalties
name|penalties
init|=
operator|new
name|StudentPreferencePenalties
argument_list|(
name|StudentPreferencePenalties
operator|.
name|sDistTypePreference
argument_list|)
decl_stmt|;
name|double
name|maxOverExpected
init|=
literal|0
decl_stmt|;
name|int
name|assigned
init|=
literal|0
decl_stmt|;
name|double
name|penalty
init|=
literal|0.0
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|enrollments
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RequestSectionPair
argument_list|>
name|pairs
init|=
operator|new
name|ArrayList
argument_list|<
name|InMemorySectioningTest
operator|.
name|RequestSectionPair
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|neighbour
operator|.
name|getAssignment
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Enrollment
name|enrl
init|=
name|neighbour
operator|.
name|getAssignment
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|enrl
operator|!=
literal|null
operator|&&
name|enrl
operator|.
name|isCourseRequest
argument_list|()
operator|&&
name|enrl
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assigned
operator|++
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrl
operator|.
name|getSections
argument_list|()
control|)
block|{
name|maxOverExpected
operator|+=
name|model
operator|.
name|getOverExpected
argument_list|(
name|section
argument_list|,
name|enrl
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|pairs
operator|.
name|add
argument_list|(
operator|new
name|RequestSectionPair
argument_list|(
name|enrl
operator|.
name|variable
argument_list|()
argument_list|,
name|section
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|enrollments
operator|.
name|put
argument_list|(
operator|(
name|CourseRequest
operator|)
name|enrl
operator|.
name|variable
argument_list|()
argument_list|,
name|enrl
operator|.
name|getSections
argument_list|()
argument_list|)
expr_stmt|;
name|penalty
operator|+=
name|penalties
operator|.
name|getPenalty
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
block|}
name|penalty
operator|/=
name|assigned
expr_stmt|;
name|inc
argument_list|(
literal|"[S] Initial Penalty"
argument_list|,
name|penalty
argument_list|)
expr_stmt|;
name|double
name|nrSuggestions
init|=
literal|0.0
decl_stmt|,
name|nrAccepted
init|=
literal|0.0
decl_stmt|,
name|totalSuggestions
init|=
literal|0.0
decl_stmt|,
name|nrTries
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pairs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RequestSectionPair
name|pair
init|=
name|pairs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SuggestionsBranchAndBound
name|suggestionBaB
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|suggestionBaB
operator|=
operator|new
name|MultiCriteriaBranchAndBoundSuggestions
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|,
name|student
argument_list|,
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
argument_list|()
argument_list|,
name|enrollments
argument_list|,
name|pair
operator|.
name|getRequest
argument_list|()
argument_list|,
name|pair
operator|.
name|getSection
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|maxOverExpected
argument_list|,
name|iModel
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|suggestionBaB
operator|=
operator|new
name|SuggestionsBranchAndBound
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|,
name|student
argument_list|,
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
argument_list|()
argument_list|,
name|enrollments
argument_list|,
name|pair
operator|.
name|getRequest
argument_list|()
argument_list|,
name|pair
operator|.
name|getSection
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|maxOverExpected
argument_list|)
expr_stmt|;
block|}
name|long
name|x0
init|=
name|JProf
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|SuggestionsBranchAndBound
operator|.
name|Suggestion
argument_list|>
name|suggestions
init|=
name|suggestionBaB
operator|.
name|computeSuggestions
argument_list|()
decl_stmt|;
name|inc
argument_list|(
literal|"[S] Suggestion CPU Time"
argument_list|,
name|JProf
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|x0
argument_list|)
expr_stmt|;
name|totalSuggestions
operator|+=
name|suggestions
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|suggestions
operator|.
name|isEmpty
argument_list|()
condition|)
name|nrSuggestions
operator|+=
literal|1.0
expr_stmt|;
name|nrTries
operator|+=
literal|1.0
expr_stmt|;
name|SuggestionsBranchAndBound
operator|.
name|Suggestion
name|best
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SuggestionsBranchAndBound
operator|.
name|Suggestion
name|suggestion
range|:
name|suggestions
control|)
block|{
name|int
name|a
init|=
literal|0
decl_stmt|;
name|double
name|p
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|suggestion
operator|.
name|getEnrollments
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Enrollment
name|e
init|=
name|suggestion
operator|.
name|getEnrollments
argument_list|()
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|isCourseRequest
argument_list|()
operator|&&
name|e
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|p
operator|+=
name|penalties
operator|.
name|getPenalty
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|a
operator|++
expr_stmt|;
block|}
block|}
name|p
operator|/=
name|a
expr_stmt|;
if|if
condition|(
name|a
operator|>
name|assigned
operator|||
operator|(
name|assigned
operator|==
name|a
operator|&&
name|p
operator|<
name|penalty
operator|)
condition|)
block|{
name|best
operator|=
name|suggestion
expr_stmt|;
block|}
block|}
if|if
condition|(
name|best
operator|!=
literal|null
condition|)
block|{
name|nrAccepted
operator|+=
literal|1.0
expr_stmt|;
name|Enrollment
index|[]
name|e
init|=
name|best
operator|.
name|getEnrollments
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|e
operator|.
name|length
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|e
index|[
name|j
index|]
operator|!=
literal|null
operator|&&
name|e
index|[
name|j
index|]
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
condition|)
name|e
index|[
name|j
index|]
operator|=
literal|null
expr_stmt|;
name|neighbour
operator|=
operator|new
name|BranchBoundNeighbour
argument_list|(
name|student
argument_list|,
name|best
operator|.
name|getValue
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assigned
operator|=
literal|0
expr_stmt|;
name|penalty
operator|=
literal|0.0
expr_stmt|;
name|enrollments
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pairs
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|neighbour
operator|.
name|getAssignment
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Enrollment
name|enrl
init|=
name|neighbour
operator|.
name|getAssignment
argument_list|()
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|enrl
operator|!=
literal|null
operator|&&
name|enrl
operator|.
name|isCourseRequest
argument_list|()
operator|&&
name|enrl
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assigned
operator|++
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrl
operator|.
name|getSections
argument_list|()
control|)
name|pairs
operator|.
name|add
argument_list|(
operator|new
name|RequestSectionPair
argument_list|(
name|enrl
operator|.
name|variable
argument_list|()
argument_list|,
name|section
argument_list|)
argument_list|)
expr_stmt|;
name|enrollments
operator|.
name|put
argument_list|(
operator|(
name|CourseRequest
operator|)
name|enrl
operator|.
name|variable
argument_list|()
argument_list|,
name|enrl
operator|.
name|getSections
argument_list|()
argument_list|)
expr_stmt|;
name|penalty
operator|+=
name|penalties
operator|.
name|getPenalty
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
block|}
name|penalty
operator|/=
name|assigned
expr_stmt|;
name|inc
argument_list|(
literal|"[S] Improved Penalty"
argument_list|,
name|penalty
argument_list|)
expr_stmt|;
block|}
block|}
name|inc
argument_list|(
literal|"[S] Final Penalty"
argument_list|,
name|penalty
argument_list|)
expr_stmt|;
if|if
condition|(
name|nrSuggestions
operator|>
literal|0
condition|)
block|{
name|inc
argument_list|(
literal|"[S] Classes with suggestion"
argument_list|,
name|nrSuggestions
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[S] Avg. # of suggestions"
argument_list|,
name|totalSuggestions
operator|/
name|nrSuggestions
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[S] Suggestion acceptance rate [%]"
argument_list|,
name|nrAccepted
operator|/
name|nrSuggestions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inc
argument_list|(
literal|"[S] Student with no suggestions available"
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pairs
operator|.
name|isEmpty
argument_list|()
condition|)
name|inc
argument_list|(
literal|"[S] Probability that a class has suggestions [%]"
argument_list|,
name|nrSuggestions
operator|/
name|nrTries
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Enrollment
argument_list|>
name|enrollments
init|=
operator|new
name|ArrayList
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|i
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|neighbour
operator|.
name|getAssignment
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Request
name|request
init|=
name|original
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Enrollment
name|clonnedEnrollment
init|=
name|neighbour
operator|.
name|getAssignment
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|clonnedEnrollment
operator|!=
literal|null
operator|&&
name|clonnedEnrollment
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|enrollments
operator|.
name|add
argument_list|(
operator|(
operator|(
name|FreeTimeRequest
operator|)
name|request
operator|)
operator|.
name|createEnrollment
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Course
name|course
range|:
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getId
argument_list|()
operator|==
name|clonnedEnrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
for|for
control|(
name|Config
name|config
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
if|if
condition|(
name|config
operator|.
name|getId
argument_list|()
operator|==
name|clonnedEnrollment
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|assignments
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|clonnedEnrollment
operator|.
name|getSections
argument_list|()
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
block|{
name|assignments
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
name|Reservation
name|reservation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|clonnedEnrollment
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Reservation
name|r
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getReservations
argument_list|()
control|)
if|if
condition|(
name|r
operator|.
name|getId
argument_list|()
operator|==
name|clonnedEnrollment
operator|.
name|getReservation
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
name|reservation
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
name|enrollments
operator|.
name|add
argument_list|(
operator|new
name|Enrollment
argument_list|(
name|request
argument_list|,
name|clonnedEnrollment
operator|.
name|getPriority
argument_list|()
argument_list|,
name|course
argument_list|,
name|config
argument_list|,
name|assignments
argument_list|,
name|reservation
argument_list|)
argument_list|)
expr_stmt|;
continue|continue
name|i
continue|;
block|}
block|}
block|}
block|}
synchronized|synchronized
init|(
name|iModel
init|)
block|{
for|for
control|(
name|Request
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|r
operator|.
name|setInitialAssignment
argument_list|(
name|r
operator|.
name|getAssignment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|updateSpace
argument_list|(
name|r
operator|.
name|getAssignment
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Request
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|r
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrl
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|iModel
operator|.
name|conflictValues
argument_list|(
name|enrl
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|enrl
operator|.
name|variable
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|enrl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|fail
condition|)
block|{
for|for
control|(
name|Request
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|r
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|r
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|updateSpace
argument_list|(
name|r
operator|.
name|getAssignment
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Enrollment
name|enrl
range|:
name|enrollments
control|)
name|updateSpace
argument_list|(
name|enrl
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fail
condition|)
return|return
literal|false
return|;
block|}
name|neighbour
operator|.
name|assign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|a
init|=
literal|0
decl_stmt|,
name|u
init|=
literal|0
decl_stmt|,
name|np
init|=
literal|0
decl_stmt|,
name|zp
init|=
literal|0
decl_stmt|,
name|pp
init|=
literal|0
decl_stmt|,
name|cp
init|=
literal|0
decl_stmt|;
name|double
name|over
init|=
literal|0
decl_stmt|;
name|double
name|p
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|s
range|:
name|r
operator|.
name|getAssignment
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getPenalty
argument_list|()
operator|<
literal|0.0
condition|)
name|np
operator|++
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getPenalty
argument_list|()
operator|==
literal|0.0
condition|)
name|zp
operator|++
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getPenalty
argument_list|()
operator|>
literal|0.0
condition|)
name|pp
operator|++
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
name|p
operator|+=
name|s
operator|.
name|getPenalty
argument_list|()
expr_stmt|;
name|cp
operator|++
expr_stmt|;
block|}
name|over
operator|+=
name|model
operator|.
name|getOverExpected
argument_list|(
name|s
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|a
operator|++
expr_stmt|;
block|}
else|else
block|{
name|u
operator|++
expr_stmt|;
block|}
block|}
block|}
name|inc
argument_list|(
literal|"[A] Student"
argument_list|)
expr_stmt|;
if|if
condition|(
name|over
operator|>
literal|0.0
condition|)
name|inc
argument_list|(
literal|"[O] Over"
argument_list|,
name|over
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|>
literal|0
condition|)
name|inc
argument_list|(
literal|"[A] Assigned"
argument_list|,
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|u
operator|>
literal|0
condition|)
name|inc
argument_list|(
literal|"[A] Not Assigned"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[V] Value"
argument_list|,
name|neighbour
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|zp
operator|>
literal|0
condition|)
name|inc
argument_list|(
literal|"[P] Zero penalty"
argument_list|,
name|zp
argument_list|)
expr_stmt|;
if|if
condition|(
name|np
operator|>
literal|0
condition|)
name|inc
argument_list|(
literal|"[P] Negative penalty"
argument_list|,
name|np
argument_list|)
expr_stmt|;
if|if
condition|(
name|pp
operator|>
literal|0
condition|)
name|inc
argument_list|(
literal|"[P] Positive penalty"
argument_list|,
name|pp
argument_list|)
expr_stmt|;
if|if
condition|(
name|cp
operator|>
literal|0
condition|)
name|inc
argument_list|(
literal|"[P] Average penalty"
argument_list|,
name|p
operator|/
name|cp
argument_list|)
expr_stmt|;
block|}
name|inc
argument_list|(
literal|"[T0] Time<10ms"
argument_list|,
name|time
operator|<
literal|10
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[T1] Time<100ms"
argument_list|,
name|time
operator|<
literal|100
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[T2] Time<250ms"
argument_list|,
name|time
operator|<
literal|250
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[T3] Time<500ms"
argument_list|,
name|time
operator|<
literal|500
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[T4] Time<1s"
argument_list|,
name|time
operator|<
literal|1000
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[T5] Time>=1s"
argument_list|,
name|time
operator|>=
literal|1000
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|void
name|updateSpace
parameter_list|(
name|Enrollment
name|enrollment
parameter_list|,
name|boolean
name|increment
parameter_list|)
block|{
if|if
condition|(
name|enrollment
operator|==
literal|null
operator|||
operator|!
name|enrollment
operator|.
name|isCourseRequest
argument_list|()
condition|)
return|return;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
name|section
operator|.
name|setSpaceHeld
argument_list|(
name|section
operator|.
name|getSpaceHeld
argument_list|()
operator|+
operator|(
name|increment
condition|?
literal|1.0
else|:
operator|-
literal|1.0
operator|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Enrollment
argument_list|>
name|feasibleEnrollments
init|=
operator|new
name|ArrayList
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrl
range|:
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|enrollment
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
continue|continue;
name|boolean
name|overlaps
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Request
name|otherRequest
range|:
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|otherRequest
operator|.
name|equals
argument_list|(
name|enrollment
operator|.
name|getRequest
argument_list|()
argument_list|)
operator|||
operator|!
operator|(
name|otherRequest
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
name|Enrollment
name|otherErollment
init|=
name|otherRequest
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherErollment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|enrl
operator|.
name|isOverlapping
argument_list|(
name|otherErollment
argument_list|)
condition|)
block|{
name|overlaps
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|overlaps
condition|)
name|feasibleEnrollments
operator|.
name|add
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
name|double
name|change
init|=
literal|1.0
operator|/
name|feasibleEnrollments
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Enrollment
name|feasibleEnrollment
range|:
name|feasibleEnrollments
control|)
for|for
control|(
name|Section
name|section
range|:
name|feasibleEnrollment
operator|.
name|getSections
argument_list|()
control|)
name|section
operator|.
name|setSpaceExpected
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
operator|+
operator|(
name|increment
condition|?
operator|+
name|change
else|:
operator|-
name|change
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Input: "
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|model
argument_list|()
operator|.
name|getExtendedInfo
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Student
argument_list|>
name|students
init|=
operator|new
name|ArrayList
argument_list|<
name|Student
argument_list|>
argument_list|(
name|model
argument_list|()
operator|.
name|getStudents
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sort
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"sort"
argument_list|,
literal|"shuffle"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"shuffle"
operator|.
name|equals
argument_list|(
name|sort
argument_list|)
condition|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|students
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"choice"
operator|.
name|equals
argument_list|(
name|sort
argument_list|)
condition|)
block|{
name|StudentChoiceOrder
name|ord
init|=
operator|new
name|StudentChoiceOrder
argument_list|(
name|model
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|ord
operator|.
name|setReverse
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|students
argument_list|,
name|ord
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"referse"
operator|.
name|equals
argument_list|(
name|sort
argument_list|)
condition|)
block|{
name|StudentChoiceOrder
name|ord
init|=
operator|new
name|StudentChoiceOrder
argument_list|(
name|model
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|ord
operator|.
name|setReverse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|students
argument_list|,
name|ord
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Student
argument_list|>
name|iterator
init|=
name|students
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|nrThreads
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"nrConcurrent"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Executor
argument_list|>
name|executors
init|=
operator|new
name|ArrayList
argument_list|<
name|InMemorySectioningTest
operator|.
name|Executor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrThreads
condition|;
name|i
operator|++
control|)
block|{
name|Executor
name|executor
init|=
operator|new
name|Executor
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|executor
operator|.
name|start
argument_list|()
expr_stmt|;
name|executors
operator|.
name|add
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
decl_stmt|;
synchronized|synchronized
init|(
name|iModel
init|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Progress ["
operator|+
operator|(
name|time
operator|/
literal|60000
operator|)
operator|+
literal|"m]: "
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|iModel
operator|.
name|getExtendedInfo
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Executor
name|executor
range|:
name|executors
control|)
block|{
try|try
block|{
name|executor
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Output: "
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|model
argument_list|()
operator|.
name|getExtendedInfo
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
decl_stmt|;
name|inc
argument_list|(
literal|"[T] Run Time [m]"
argument_list|,
name|time
operator|/
literal|60000.0
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|Executor
extends|extends
name|Thread
block|{
specifier|private
name|Iterator
argument_list|<
name|Student
argument_list|>
name|iStudents
init|=
literal|null
decl_stmt|;
specifier|public
name|Executor
parameter_list|(
name|Iterator
argument_list|<
name|Student
argument_list|>
name|students
parameter_list|)
block|{
name|iStudents
operator|=
name|students
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|Student
name|student
init|=
name|iStudents
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|attempt
init|=
literal|1
decl_stmt|;
while|while
condition|(
operator|!
name|section
argument_list|(
name|student
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
name|attempt
operator|+
literal|". attempt failed for "
operator|+
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|inc
argument_list|(
literal|"[F] Failed attempt"
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|attempt
operator|++
expr_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|101
condition|)
break|break;
if|if
condition|(
name|attempt
operator|>
literal|10
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|ToolBox
operator|.
name|random
argument_list|(
literal|100
operator|*
name|attempt
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
if|if
condition|(
name|attempt
operator|>
literal|100
condition|)
name|inc
argument_list|(
literal|"[F] Failed enrollment (all 100 attempts)"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
specifier|public
class|class
name|TestModel
extends|extends
name|OnlineSectioningModel
block|{
specifier|public
name|TestModel
parameter_list|(
name|DataProperties
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getExtendedInfo
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ret
init|=
name|super
operator|.
name|getExtendedInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|e
range|:
name|iCounters
operator|.
name|entrySet
argument_list|()
control|)
name|ret
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"Weighting model"
argument_list|,
operator|(
name|model
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|true
argument_list|)
condition|?
literal|"multi-criteria "
else|:
literal|""
operator|)
operator|+
operator|(
name|model
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|true
argument_list|)
condition|?
literal|"priority"
else|:
literal|"equal"
operator|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"B&B time limit"
argument_list|,
name|model
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyInt
argument_list|(
literal|"Neighbour.BranchAndBoundTimeout"
argument_list|,
literal|1000
argument_list|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSuggestions
condition|)
block|{
name|ret
operator|.
name|put
argument_list|(
literal|"Suggestion time limit"
argument_list|,
name|model
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyInt
argument_list|(
literal|"Suggestions.Timeout"
argument_list|,
literal|1000
argument_list|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|RequestSectionPair
block|{
specifier|private
name|Request
name|iRequest
decl_stmt|;
specifier|private
name|Section
name|iSection
decl_stmt|;
name|RequestSectionPair
parameter_list|(
name|Request
name|request
parameter_list|,
name|Section
name|section
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
name|iSection
operator|=
name|section
expr_stmt|;
block|}
specifier|public
name|Request
name|getRequest
parameter_list|()
block|{
return|return
name|iRequest
return|;
block|}
specifier|public
name|Section
name|getSection
parameter_list|()
block|{
return|return
name|iSection
return|;
block|}
block|}
specifier|private
name|void
name|stats
parameter_list|(
name|File
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|input
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|"stats.csv"
argument_list|)
decl_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.00"
argument_list|)
decl_stmt|;
name|boolean
name|ex
init|=
name|file
operator|.
name|exists
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ex
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"Input File,Run Time [m],Model,Sort,Over Expected,Not Assigned,Disb. Sections [%],Distance Confs.,Time Confs. [m],CPU Assignment [ms],Has Suggestions [%],Nbr Suggestions,Acceptance [%],CPU Suggestions [ms]"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|print
argument_list|(
name|input
operator|.
name|getName
argument_list|()
operator|+
literal|","
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|get
argument_list|(
literal|"[T] Run Time [m]"
argument_list|)
operator|.
name|sum
argument_list|()
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|model
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|true
argument_list|)
condition|?
literal|"multi-criteria "
else|:
literal|""
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|model
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|true
argument_list|)
condition|?
literal|"priority"
else|:
literal|"equal"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|iSuggestions
condition|?
literal|" with suggestions"
else|:
literal|""
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"sort"
argument_list|,
literal|"shuffle"
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|model
argument_list|()
operator|.
name|getOverExpectedCriterion
argument_list|()
operator|+
literal|","
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|get
argument_list|(
literal|"[A] Not Assigned"
argument_list|)
operator|.
name|count
argument_list|()
operator|+
literal|","
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getPercDisbalancedSections
argument_list|(
literal|0.1
argument_list|)
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|df
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|model
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|getTotalNrConflicts
argument_list|()
operator|/
name|model
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|df
operator|.
name|format
argument_list|(
literal|5.0
operator|*
name|model
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|getTotalNrConflicts
argument_list|()
operator|/
name|model
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|get
argument_list|(
literal|"[C] CPU Time"
argument_list|)
operator|.
name|avg
argument_list|()
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSuggestions
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
name|df
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|get
argument_list|(
literal|"[S] Probability that a class has suggestions [%]"
argument_list|)
operator|.
name|avg
argument_list|()
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|get
argument_list|(
literal|"[S] Avg. # of suggestion"
argument_list|)
operator|.
name|avg
argument_list|()
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|df
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|get
argument_list|(
literal|"[S] Suggestion acceptance rate [%]"
argument_list|)
operator|.
name|avg
argument_list|()
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|get
argument_list|(
literal|"[S] Suggestion CPU Time"
argument_list|)
operator|.
name|avg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"jprof"
argument_list|,
literal|"cpu"
argument_list|)
expr_stmt|;
name|BasicConfigurator
operator|.
name|configure
argument_list|()
expr_stmt|;
name|DataProperties
name|cfg
init|=
operator|new
name|DataProperties
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Neighbour.BranchAndBoundTimeout"
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Suggestions.Timeout"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Extensions.Classes"
argument_list|,
name|DistanceConflict
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|";"
operator|+
name|TimeOverlapsCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"StudentWeights.Class"
argument_list|,
name|StudentSchedulingAssistantWeights
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"StudentWeights.LeftoverSpread"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"StudentWeights.BalancingFactor"
argument_list|,
literal|"0.0"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Reservation.CanAssignOverTheLimit"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Distances.Ellipsoid"
argument_list|,
name|DistanceMetric
operator|.
name|Ellipsoid
operator|.
name|WGS84
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"CourseRequest.SameTimePrecise"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
literal|"INFO, A1"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1"
argument_list|,
literal|"org.apache.log4j.ConsoleAppender"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout"
argument_list|,
literal|"org.apache.log4j.PatternLayout"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout.ConversionPattern"
argument_list|,
literal|"%-5p %c{2}: %m%n"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cfg"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cache.EhCacheProvider"
argument_list|,
literal|"ERROR"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.unitime.commons.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.net"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|putAll
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
specifier|final
name|InMemorySectioningTest
name|test
init|=
operator|new
name|InMemorySectioningTest
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
specifier|final
name|File
name|input
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|StudentSectioningXMLLoader
name|loader
init|=
operator|new
name|StudentSectioningXMLLoader
argument_list|(
name|test
operator|.
name|model
argument_list|()
argument_list|)
decl_stmt|;
name|loader
operator|.
name|setInputFile
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|loader
operator|.
name|load
argument_list|()
expr_stmt|;
name|test
operator|.
name|run
argument_list|()
expr_stmt|;
name|Solver
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|s
init|=
operator|new
name|Solver
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|s
operator|.
name|setInitalSolution
argument_list|(
name|test
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|StudentSectioningXMLSaver
name|saver
init|=
operator|new
name|StudentSectioningXMLSaver
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|File
name|output
init|=
operator|new
name|File
argument_list|(
name|input
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|input
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|input
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
operator|+
literal|"-"
operator|+
name|cfg
operator|.
name|getProperty
argument_list|(
literal|"run"
argument_list|,
literal|"r0"
argument_list|)
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
name|saver
operator|.
name|save
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|test
operator|.
name|stats
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Test failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

