begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 - 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningTestFwk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|AnyCourseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|FindAssignmentAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|ClassAssignmentChanged
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|ReloadStudent
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ReloadTest
extends|extends
name|OnlineSectioningTestFwk
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Operation
argument_list|>
name|operations
parameter_list|()
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operation
argument_list|>
name|loadRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Long
name|studentId
range|:
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s.uniqueId from Student s where s.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getServer
argument_list|()
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|loadRequests
operator|.
name|add
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|execute
parameter_list|(
name|OnlineSectioningServer
name|s
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Reloading "
operator|+
name|studentId
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|s
operator|.
name|execute
argument_list|(
operator|new
name|ReloadStudent
argument_list|(
name|studentId
argument_list|)
argument_list|,
name|user
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- "
operator|+
name|studentId
operator|+
literal|" reloaded"
argument_list|)
expr_stmt|;
return|return
literal|1.0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Long
name|offeringId
range|:
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select io.uniqueId from InstructionalOffering io where io.session.uniqueId = :sessionId and io.notOffered = false"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getServer
argument_list|()
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|loadRequests
operator|.
name|add
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|execute
parameter_list|(
name|OnlineSectioningServer
name|s
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Locking "
operator|+
name|offeringId
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|s
operator|.
name|lockOffering
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- "
operator|+
name|offeringId
operator|+
literal|" locked"
argument_list|)
expr_stmt|;
name|long
name|delay
init|=
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|5000
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Sleeping for "
operator|+
name|delay
operator|+
literal|" ms  ..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Unlocking "
operator|+
name|offeringId
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|s
operator|.
name|unlockOffering
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- "
operator|+
name|offeringId
operator|+
literal|" unlocked"
argument_list|)
expr_stmt|;
return|return
literal|1.0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|name
range|:
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select co.subjectAreaAbbv || ' ' || co.courseNbr from CourseOffering co where co.instructionalOffering.session.uniqueId = :sessionId and co.instructionalOffering.notOffered = false"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getServer
argument_list|()
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|loadRequests
operator|.
name|add
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|execute
parameter_list|(
name|OnlineSectioningServer
name|s
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Looking for "
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|s
operator|.
name|findCourses
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|,
literal|20
argument_list|,
operator|new
name|AnyCourseMatcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|1.0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Long
name|classId
range|:
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c.uniqueId from Class_ c where c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getServer
argument_list|()
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|loadRequests
operator|.
name|add
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|execute
parameter_list|(
name|OnlineSectioningServer
name|s
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Assignment changed for "
operator|+
name|classId
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|s
operator|.
name|execute
argument_list|(
operator|new
name|ClassAssignmentChanged
argument_list|(
name|classId
argument_list|)
argument_list|,
name|user
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1.0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Long
name|studentId
range|:
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s.uniqueId from Student s where s.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getServer
argument_list|()
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|CourseRequestInterface
name|request
init|=
name|getServer
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|GetRequest
argument_list|(
name|studentId
argument_list|)
argument_list|,
name|user
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
operator|||
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|loadRequests
operator|.
name|add
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|execute
parameter_list|(
name|OnlineSectioningServer
name|s
parameter_list|)
block|{
name|CourseRequestInterface
name|request
init|=
name|s
operator|.
name|execute
argument_list|(
operator|new
name|GetRequest
argument_list|(
name|studentId
argument_list|)
argument_list|,
name|user
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Find assignments for "
operator|+
name|studentId
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|FindAssignmentAction
name|action
init|=
operator|new
name|FindAssignmentAction
argument_list|(
name|request
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|.
name|execute
argument_list|(
name|action
argument_list|,
name|user
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|action
operator|.
name|value
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|1.0
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|loadRequests
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
operator|new
name|ReloadTest
argument_list|()
operator|.
name|test
argument_list|(
operator|-
literal|1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

