begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|configuration
operator|.
name|cache
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|context
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|jmx
operator|.
name|CacheJmxRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|manager
operator|.
name|EmbeddedCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|notifications
operator|.
name|Listener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|notifications
operator|.
name|cachelistener
operator|.
name|annotation
operator|.
name|CacheEntryModified
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|notifications
operator|.
name|cachelistener
operator|.
name|annotation
operator|.
name|CacheEntryRemoved
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|notifications
operator|.
name|cachelistener
operator|.
name|event
operator|.
name|CacheEntryModifiedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|notifications
operator|.
name|cachelistener
operator|.
name|event
operator|.
name|CacheEntryRemovedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|remoting
operator|.
name|ReplicationQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|CourseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|StudentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XExpectations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequestSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|CheckMaster
operator|.
name|Master
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ReplicatedServerWithMaster
extends|extends
name|AbstractLockingServer
block|{
specifier|private
name|EmbeddedCacheManager
name|iCacheManager
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|XCourseId
argument_list|>
name|iCourseForId
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|XCourseIdSet
argument_list|>
name|iCourseForName
decl_stmt|;
specifier|private
name|Cache
argument_list|<
name|Long
argument_list|,
name|XStudent
argument_list|>
name|iStudentTable
decl_stmt|;
specifier|private
name|Cache
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
name|iOfferingTable
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|XCourseRequestSet
argument_list|>
name|iOfferingRequests
decl_stmt|;
specifier|private
name|Cache
argument_list|<
name|Long
argument_list|,
name|XExpectations
argument_list|>
name|iExpectations
decl_stmt|;
specifier|private
name|Cache
argument_list|<
name|Long
argument_list|,
name|Boolean
argument_list|>
name|iOfferingLocks
decl_stmt|;
specifier|public
name|ReplicatedServerWithMaster
parameter_list|(
name|OnlineSectioningServerContext
name|context
parameter_list|)
throws|throws
name|SectioningException
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|cacheName
parameter_list|(
name|String
name|table
parameter_list|)
block|{
return|return
name|getAcademicSession
argument_list|()
operator|.
name|toCompactString
argument_list|()
operator|+
literal|"["
operator|+
name|table
operator|+
literal|"]"
return|;
block|}
specifier|private
parameter_list|<
name|U
parameter_list|,
name|T
parameter_list|>
name|Cache
argument_list|<
name|U
argument_list|,
name|T
argument_list|>
name|getCache
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Configuration
name|config
init|=
name|iCacheManager
operator|.
name|getCacheConfiguration
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"Using "
operator|+
name|config
operator|+
literal|" for "
operator|+
name|name
operator|+
literal|" cache."
argument_list|)
expr_stmt|;
name|iCacheManager
operator|.
name|defineConfiguration
argument_list|(
name|cacheName
argument_list|(
name|name
argument_list|)
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
return|return
name|iCacheManager
operator|.
name|getCache
argument_list|(
name|cacheName
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|load
parameter_list|(
name|OnlineSectioningServerContext
name|context
parameter_list|)
throws|throws
name|SectioningException
block|{
name|iCacheManager
operator|=
name|context
operator|.
name|getCacheManager
argument_list|()
expr_stmt|;
name|iCourseForId
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|XCourseId
argument_list|>
argument_list|()
expr_stmt|;
name|iCourseForName
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|XCourseIdSet
argument_list|>
argument_list|()
expr_stmt|;
name|iStudentTable
operator|=
name|getCache
argument_list|(
literal|"StudentTable"
argument_list|)
expr_stmt|;
name|iOfferingTable
operator|=
name|getCache
argument_list|(
literal|"OfferingTable"
argument_list|)
expr_stmt|;
name|iOfferingRequests
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|XCourseRequestSet
argument_list|>
argument_list|()
expr_stmt|;
name|iExpectations
operator|=
name|getCache
argument_list|(
literal|"Expectations"
argument_list|)
expr_stmt|;
name|iOfferingLocks
operator|=
name|getCache
argument_list|(
literal|"OfferingLocks"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|original
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|iProperties
argument_list|)
decl_stmt|;
name|iProperties
operator|=
name|getCache
argument_list|(
literal|"Config"
argument_list|)
expr_stmt|;
name|iProperties
operator|.
name|putAll
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|iOfferingTable
operator|.
name|addListener
argument_list|(
operator|new
name|OfferingTableListener
argument_list|(
name|iOfferingTable
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iStudentTable
operator|.
name|addListener
argument_list|(
operator|new
name|StudentTableListener
argument_list|(
name|iStudentTable
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|load
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|removeCache
parameter_list|(
name|Cache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|cache
parameter_list|)
block|{
name|iCacheManager
operator|.
name|getGlobalComponentRegistry
argument_list|()
operator|.
name|removeCache
argument_list|(
name|cache
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CacheJmxRegistration
name|jmx
init|=
name|cache
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|getComponentRegistry
argument_list|()
operator|.
name|getComponent
argument_list|(
name|CacheJmxRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|cache
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|jmx
operator|!=
literal|null
condition|)
name|jmx
operator|.
name|unregisterCacheMBean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unload
parameter_list|()
block|{
name|super
operator|.
name|unload
argument_list|()
expr_stmt|;
name|removeCache
argument_list|(
name|iStudentTable
argument_list|)
expr_stmt|;
name|removeCache
argument_list|(
name|iExpectations
argument_list|)
expr_stmt|;
name|removeCache
argument_list|(
name|iOfferingTable
argument_list|)
expr_stmt|;
name|removeCache
argument_list|(
name|iOfferingLocks
argument_list|)
expr_stmt|;
name|removeCache
argument_list|(
operator|(
name|Cache
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|iProperties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|loadOnMaster
parameter_list|(
name|OnlineSectioningServerContext
name|context
parameter_list|)
throws|throws
name|SectioningException
block|{
name|releaseAllOfferingLocks
argument_list|()
expr_stmt|;
name|super
operator|.
name|loadOnMaster
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|XCourseId
argument_list|>
name|findCourses
parameter_list|(
name|String
name|query
parameter_list|,
name|Integer
name|limit
parameter_list|,
name|CourseMatcher
name|matcher
parameter_list|)
block|{
if|if
condition|(
name|matcher
operator|!=
literal|null
condition|)
name|matcher
operator|.
name|setServer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|SubSet
argument_list|<
name|XCourseId
argument_list|>
name|ret
init|=
operator|new
name|SubSet
argument_list|<
name|XCourseId
argument_list|>
argument_list|(
name|limit
argument_list|,
operator|new
name|CourseComparator
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|queryInLowerCase
init|=
name|query
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
for|for
control|(
name|XCourseId
name|c
range|:
name|iCourseForId
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|matchCourseName
argument_list|(
name|queryInLowerCase
argument_list|)
operator|&&
operator|(
name|matcher
operator|==
literal|null
operator|||
name|matcher
operator|.
name|match
argument_list|(
name|c
argument_list|)
operator|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|isLimitReached
argument_list|()
operator|&&
name|queryInLowerCase
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|XCourseId
name|c
range|:
name|iCourseForId
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|matchTitle
argument_list|(
name|queryInLowerCase
argument_list|)
operator|&&
operator|(
name|matcher
operator|==
literal|null
operator|||
name|matcher
operator|.
name|match
argument_list|(
name|c
argument_list|)
operator|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|XCourseId
argument_list|>
name|findCourses
parameter_list|(
name|CourseMatcher
name|matcher
parameter_list|)
block|{
if|if
condition|(
name|matcher
operator|!=
literal|null
condition|)
name|matcher
operator|.
name|setServer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|Set
argument_list|<
name|XCourseId
argument_list|>
name|ret
init|=
operator|new
name|TreeSet
argument_list|<
name|XCourseId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XCourseId
name|c
range|:
name|iCourseForId
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|matcher
operator|.
name|match
argument_list|(
name|c
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|XStudent
argument_list|>
name|findStudents
parameter_list|(
name|StudentMatcher
name|matcher
parameter_list|)
block|{
if|if
condition|(
name|matcher
operator|!=
literal|null
condition|)
name|matcher
operator|.
name|setServer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|XStudent
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|XStudent
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XStudent
name|s
range|:
name|iStudentTable
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|matcher
operator|.
name|match
argument_list|(
name|s
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|XCourseId
name|getCourse
parameter_list|(
name|String
name|course
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|idx
init|=
name|course
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
init|;
name|idx
operator|>=
literal|0
condition|;
name|idx
operator|=
name|course
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
control|)
block|{
name|String
name|courseName
init|=
name|course
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|title
init|=
name|course
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|XCourseId
argument_list|>
name|infos
init|=
name|iCourseForName
operator|.
name|get
argument_list|(
name|courseName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|infos
operator|!=
literal|null
operator|&&
operator|!
name|infos
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|XCourseId
name|info
range|:
name|infos
control|)
if|if
condition|(
name|title
operator|.
name|equalsIgnoreCase
argument_list|(
name|info
operator|.
name|getTitle
argument_list|()
argument_list|)
condition|)
return|return
name|info
return|;
block|}
name|TreeSet
argument_list|<
name|XCourseId
argument_list|>
name|infos
init|=
name|iCourseForName
operator|.
name|get
argument_list|(
name|course
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|infos
operator|!=
literal|null
operator|&&
operator|!
name|infos
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|infos
operator|.
name|first
argument_list|()
return|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|XCourse
name|toCourse
parameter_list|(
name|XCourseId
name|course
parameter_list|)
block|{
if|if
condition|(
name|course
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|course
operator|instanceof
name|XCourse
condition|)
return|return
operator|(
name|XCourse
operator|)
name|course
return|;
name|XOffering
name|offering
init|=
name|getOffering
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|offering
operator|==
literal|null
condition|?
literal|null
else|:
name|offering
operator|.
name|getCourse
argument_list|(
name|course
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|XCourse
name|getCourse
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|toCourse
argument_list|(
name|iCourseForId
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|XStudent
name|getStudent
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|iStudentTable
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|XOffering
name|getOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|iOfferingTable
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|getRequests
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|iOfferingRequests
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
return|return
name|requests
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<
name|XCourseRequest
argument_list|>
argument_list|(
name|requests
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|XExpectations
name|getExpectations
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|XExpectations
name|expectations
init|=
name|iExpectations
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
return|return
name|expectations
operator|==
literal|null
condition|?
operator|new
name|XExpectations
argument_list|(
name|offeringId
argument_list|)
else|:
name|expectations
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|XExpectations
name|expectations
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isMaster
argument_list|()
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"Updating expectations on a slave node. That is suspicious."
argument_list|)
expr_stmt|;
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|iExpectations
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|expectations
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|expectations
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isMaster
argument_list|()
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"Removing student on a slave node. That is suspicious."
argument_list|)
expr_stmt|;
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|iStudentTable
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|remove
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|XStudent
name|student
parameter_list|,
name|boolean
name|updateRequests
parameter_list|)
block|{
name|iLog
operator|.
name|debug
argument_list|(
literal|"Update "
operator|+
name|student
operator|+
literal|" with requests "
operator|+
name|student
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isMaster
argument_list|()
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"Updating student on a slave node. That is suspicious."
argument_list|)
expr_stmt|;
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|iStudentTable
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|XOffering
name|offering
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isMaster
argument_list|()
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"Removing offering on a slave node. That is suspicious."
argument_list|)
expr_stmt|;
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|iOfferingTable
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|remove
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
name|iExpectations
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|remove
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|XOffering
name|offering
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isMaster
argument_list|()
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"Updating offering on a slave node. That is suspicious."
argument_list|)
expr_stmt|;
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|iOfferingTable
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|offering
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearAll
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isMaster
argument_list|()
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"Clearing all data on a slave node. That is suspicious."
argument_list|)
expr_stmt|;
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|iStudentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iOfferingTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iExpectations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iOfferingLocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearAllStudents
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isMaster
argument_list|()
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"Clearing all students on a slave node. That is suspicious."
argument_list|)
expr_stmt|;
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|iStudentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|XCourseRequest
name|assign
parameter_list|(
name|XCourseRequest
name|request
parameter_list|,
name|XEnrollment
name|enrollment
parameter_list|)
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"Assign "
operator|+
name|request
operator|+
literal|" with "
operator|+
name|enrollment
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isMaster
argument_list|()
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"Assigning a request on a slave node. That is suspicious."
argument_list|)
expr_stmt|;
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|XStudent
name|student
init|=
name|iStudentTable
operator|.
name|get
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
comment|// assign
name|cr
operator|.
name|setEnrollment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
name|iStudentTable
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
return|return
name|cr
return|;
block|}
block|}
name|iLog
operator|.
name|warn
argument_list|(
literal|"ASSIGN[3]: Request "
operator|+
name|student
operator|+
literal|" "
operator|+
name|request
operator|+
literal|" was not found among student requests"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|XCourseRequest
name|waitlist
parameter_list|(
name|XCourseRequest
name|request
parameter_list|,
name|boolean
name|waitlist
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isMaster
argument_list|()
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"Wait-listing a request on a slave node. That is suspicious."
argument_list|)
expr_stmt|;
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|XStudent
name|student
init|=
name|iStudentTable
operator|.
name|get
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
comment|// assign
name|cr
operator|.
name|setWaitlist
argument_list|(
name|waitlist
argument_list|)
expr_stmt|;
name|iStudentTable
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
return|return
name|cr
return|;
block|}
block|}
name|iLog
operator|.
name|warn
argument_list|(
literal|"WAITLIST[3]: Request "
operator|+
name|student
operator|+
literal|" "
operator|+
name|request
operator|+
literal|" was not found among student requests"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* 	public static class GetKeysCallable<T> implements DistributedCallable<Long, T, Collection<Long>>, Serializable { 		private static final long serialVersionUID = 1L; 		private transient Cache<Long, T> iCache; 		 		public GetKeysCallable() { 		} 		 		@Override 		public void setEnvironment(Cache<Long, T> cache, Set<Long> inputKeys) { 			iCache = cache; 		}  		@Override 		public Collection<Long> call() throws Exception { 			return new ArrayList<Long>(iCache.keySet()); 		} 	} 	 	public static class HasKeysCallable<T> implements DistributedCallable<Long, T, Boolean>, Serializable { 		private static final long serialVersionUID = 1L; 		private transient Cache<Long, T> iCache; 		private Long iKey; 		 		public HasKeysCallable(Long key) { 			iKey = key; 		} 		 		@Override 		public void setEnvironment(Cache<Long, T> cache, Set<Long> inputKeys) { 			iCache = cache; 		}  		@Override 		public Boolean call() throws Exception { 			return iCache.containsKey(iKey); 		} 	} 	*/
annotation|@
name|Override
specifier|public
name|Lock
name|lockStudent
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|offeringIds
parameter_list|,
name|boolean
name|excludeLockedOfferings
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isMaster
argument_list|()
condition|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"Failed to lock a student "
operator|+
name|studentId
operator|+
literal|": not executed on master."
argument_list|)
expr_stmt|;
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
return|return
operator|new
name|FlushLock
argument_list|(
name|super
operator|.
name|lockStudent
argument_list|(
name|studentId
argument_list|,
name|offeringIds
argument_list|,
name|excludeLockedOfferings
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|,
name|boolean
name|excludeLockedOffering
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isMaster
argument_list|()
condition|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"Failed to lock an offering "
operator|+
name|offeringId
operator|+
literal|": not executed on master."
argument_list|)
expr_stmt|;
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
return|return
operator|new
name|FlushLock
argument_list|(
name|super
operator|.
name|lockOffering
argument_list|(
name|offeringId
argument_list|,
name|studentIds
argument_list|,
name|excludeLockedOffering
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockRequest
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isMaster
argument_list|()
condition|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"Failed to lock a request for student "
operator|+
name|request
operator|.
name|getStudentId
argument_list|()
operator|+
literal|": not executed on master."
argument_list|)
expr_stmt|;
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
return|return
operator|new
name|FlushLock
argument_list|(
name|super
operator|.
name|lockRequest
argument_list|(
name|request
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOfferingLocked
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
return|return
name|iOfferingLocks
operator|.
name|containsKey
argument_list|(
name|offeringId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|iOfferingLocks
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|,
name|Flag
operator|.
name|FORCE_SYNCHRONOUS
argument_list|)
operator|.
name|put
argument_list|(
name|offeringId
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|flushCache
argument_list|(
name|iOfferingLocks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unlockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|iOfferingLocks
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|,
name|Flag
operator|.
name|FORCE_SYNCHRONOUS
argument_list|)
operator|.
name|remove
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
name|flushCache
argument_list|(
name|iOfferingLocks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|getLockedOfferings
parameter_list|()
block|{
comment|/* 		Lock lock = readLock(); 		try { 			DistributedExecutorService ex = new DefaultExecutorService(iOfferingLocks); 			Set<Long> ret = new HashSet<Long>(); 			 			List<Future<Collection<Long>>> futures = ex.submitEverywhere(new GetKeysCallable<Boolean>()); 			for (Future<Collection<Long>> future: futures) 				ret.addAll(future.get()); 			 			return ret; 		} catch (InterruptedException e) { 			throw new SectioningException(e.getMessage(), e); 		} catch (ExecutionException e) { 			throw new SectioningException(e.getMessage(), e); 		} finally { 			lock.release(); 		}*/
return|return
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|iOfferingLocks
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseAllOfferingLocks
parameter_list|()
block|{
name|iOfferingLocks
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|,
name|Flag
operator|.
name|FORCE_SYNCHRONOUS
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|flushCache
argument_list|(
name|iOfferingLocks
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|NoLock
implements|implements
name|Lock
block|{
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|()
block|{
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|E
name|execute
parameter_list|(
name|OnlineSectioningAction
argument_list|<
name|E
argument_list|>
name|action
parameter_list|,
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|)
throws|throws
name|SectioningException
block|{
name|CheckMaster
name|ch
init|=
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|CheckMaster
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|value
argument_list|()
operator|==
name|Master
operator|.
name|REQUIRED
operator|&&
operator|!
name|isMaster
argument_list|()
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"Executing action "
operator|+
name|action
operator|.
name|name
argument_list|()
operator|+
literal|" (master required) on a slave node."
argument_list|)
expr_stmt|;
if|else if
condition|(
name|ch
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|value
argument_list|()
operator|==
name|Master
operator|.
name|AVOID
operator|&&
name|isMaster
argument_list|()
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"Executing action "
operator|+
name|action
operator|.
name|name
argument_list|()
operator|+
literal|" (avoid master) on a master node."
argument_list|)
expr_stmt|;
name|E
name|ret
init|=
name|super
operator|.
name|execute
argument_list|(
name|action
argument_list|,
name|user
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|writeLock
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isMaster
argument_list|()
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"Asking for a WRITE lock on a slave node. That is suspicious."
argument_list|)
expr_stmt|;
return|return
operator|new
name|BatchLock
argument_list|(
name|super
operator|.
name|writeLock
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|writeLockIfNotHeld
parameter_list|()
block|{
name|Lock
name|lock
init|=
name|super
operator|.
name|writeLockIfNotHeld
argument_list|()
decl_stmt|;
return|return
name|lock
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|BatchLock
argument_list|(
name|lock
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockAll
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isMaster
argument_list|()
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"Asking for an ALL lock on a slave node. That is suspicious."
argument_list|)
expr_stmt|;
return|return
operator|new
name|FlushLock
argument_list|(
name|super
operator|.
name|lockAll
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Listener
argument_list|(
name|sync
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|OfferingTableListener
block|{
specifier|public
name|OfferingTableListener
parameter_list|(
name|Collection
argument_list|<
name|XOffering
argument_list|>
name|offerings
parameter_list|)
block|{
for|for
control|(
name|XOffering
name|offering
range|:
name|offerings
control|)
name|addCourses
argument_list|(
name|offering
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CacheEntryModified
specifier|public
name|void
name|modified
parameter_list|(
name|CacheEntryModifiedEvent
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isPre
argument_list|()
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
name|removeCourses
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
name|addCourses
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|CacheEntryRemoved
specifier|public
name|void
name|removed
parameter_list|(
name|CacheEntryRemovedEvent
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isPre
argument_list|()
condition|)
name|removeCourses
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeCourses
parameter_list|(
name|XOffering
name|offering
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|writeLockIfNotHeld
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|XCourse
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|iCourseForId
operator|.
name|remove
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|XCourseIdSet
name|courses
init|=
name|iCourseForName
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseNameInLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|!=
literal|null
condition|)
block|{
name|courses
operator|.
name|remove
argument_list|(
name|course
argument_list|)
expr_stmt|;
if|if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
for|for
control|(
name|XCourseId
name|x
range|:
name|courses
control|)
name|x
operator|.
name|setHasUniqueName
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
name|iCourseForName
operator|.
name|remove
argument_list|(
name|course
operator|.
name|getCourseNameInLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addCourses
parameter_list|(
name|XOffering
name|offering
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|writeLockIfNotHeld
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|XCourse
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|iCourseForId
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
operator|new
name|XCourseId
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
name|XCourseIdSet
name|courses
init|=
name|iCourseForName
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseNameInLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|==
literal|null
condition|)
block|{
name|courses
operator|=
operator|new
name|XCourseIdSet
argument_list|()
expr_stmt|;
name|iCourseForName
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseNameInLowerCase
argument_list|()
argument_list|,
name|courses
argument_list|)
expr_stmt|;
block|}
name|courses
operator|.
name|add
argument_list|(
operator|new
name|XCourseId
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
for|for
control|(
name|XCourseId
name|x
range|:
name|courses
control|)
name|x
operator|.
name|setHasUniqueName
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|else if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
for|for
control|(
name|XCourseId
name|x
range|:
name|courses
control|)
name|x
operator|.
name|setHasUniqueName
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Listener
argument_list|(
name|sync
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|StudentTableListener
block|{
specifier|public
name|StudentTableListener
parameter_list|(
name|Collection
argument_list|<
name|XStudent
argument_list|>
name|students
parameter_list|)
block|{
for|for
control|(
name|XStudent
name|student
range|:
name|students
control|)
name|addRequests
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CacheEntryModified
specifier|public
name|void
name|modified
parameter_list|(
name|CacheEntryModifiedEvent
argument_list|<
name|Long
argument_list|,
name|XStudent
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isPre
argument_list|()
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
name|removeRequests
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
name|addRequests
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|CacheEntryRemoved
specifier|public
name|void
name|removed
parameter_list|(
name|CacheEntryRemovedEvent
argument_list|<
name|Long
argument_list|,
name|XStudent
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isPre
argument_list|()
condition|)
name|removeRequests
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeRequests
parameter_list|(
name|XStudent
name|oldStudent
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|writeLockIfNotHeld
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|XRequest
name|request
range|:
name|oldStudent
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
for|for
control|(
name|XCourseId
name|course
range|:
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|XCourseRequestSet
name|requests
init|=
name|iOfferingRequests
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|requests
operator|.
name|remove
argument_list|(
name|request
argument_list|)
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"UPDATE[1]: Request "
operator|+
name|oldStudent
operator|+
literal|" "
operator|+
name|request
operator|+
literal|" was not present in the offering requests table for "
operator|+
name|course
argument_list|)
expr_stmt|;
name|iOfferingRequests
operator|.
name|put
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|requests
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"UPDATE[2]: Request "
operator|+
name|oldStudent
operator|+
literal|" "
operator|+
name|request
operator|+
literal|" was not present in the offering requests table for "
operator|+
name|course
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addRequests
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|writeLockIfNotHeld
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|XRequest
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
for|for
control|(
name|XCourseId
name|course
range|:
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|XCourseRequestSet
name|requests
init|=
name|iOfferingRequests
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|==
literal|null
condition|)
name|requests
operator|=
operator|new
name|XCourseRequestSet
argument_list|()
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|(
name|XCourseRequest
operator|)
name|request
argument_list|)
expr_stmt|;
name|iOfferingRequests
operator|.
name|put
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|requests
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
class|class
name|BatchLock
implements|implements
name|Lock
block|{
specifier|private
name|Lock
name|iLock
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iStudentBatch
init|=
literal|false
decl_stmt|,
name|iOfferingBatch
init|=
literal|false
decl_stmt|;
name|BatchLock
parameter_list|(
name|Lock
name|lock
parameter_list|)
block|{
name|iLock
operator|=
name|lock
expr_stmt|;
try|try
block|{
name|iStudentBatch
operator|=
name|iStudentTable
operator|.
name|startBatch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"Failed to start batch for StudentTable: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|iOfferingBatch
operator|=
name|iOfferingTable
operator|.
name|startBatch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"Failed to start batch for OfferingTable: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|iStudentBatch
condition|)
name|iStudentTable
operator|.
name|endBatch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iOfferingBatch
condition|)
name|iOfferingTable
operator|.
name|endBatch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|flushCache
parameter_list|(
name|Cache
name|cache
parameter_list|)
block|{
name|ReplicationQueue
name|queue
init|=
name|cache
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|getComponentRegistry
argument_list|()
operator|.
name|getComponent
argument_list|(
name|ReplicationQueue
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
name|queue
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
class|class
name|FlushLock
implements|implements
name|Lock
block|{
specifier|private
name|Lock
name|iLock
init|=
literal|null
decl_stmt|;
name|FlushLock
parameter_list|(
name|Lock
name|lock
parameter_list|)
block|{
name|iLock
operator|=
name|lock
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|()
block|{
try|try
block|{
name|flushCache
argument_list|(
name|iStudentTable
argument_list|)
expr_stmt|;
name|flushCache
argument_list|(
name|iOfferingTable
argument_list|)
expr_stmt|;
name|flushCache
argument_list|(
name|iExpectations
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|E
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|E
name|defaultValue
parameter_list|)
block|{
name|E
name|ret
init|=
operator|(
name|E
operator|)
name|iProperties
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|(
name|ret
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|ret
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|E
name|value
parameter_list|)
block|{
name|Cache
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|(
name|Cache
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|iProperties
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|properties
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|FORCE_SYNCHRONOUS
argument_list|,
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
else|else
name|properties
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|FORCE_SYNCHRONOUS
argument_list|,
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|flushCache
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

