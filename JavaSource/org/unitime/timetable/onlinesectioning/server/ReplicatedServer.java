begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|SystemException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|configuration
operator|.
name|cache
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|context
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|distexec
operator|.
name|DefaultExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|distexec
operator|.
name|DistributedCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|distexec
operator|.
name|DistributedExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|jmx
operator|.
name|CacheJmxRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|manager
operator|.
name|EmbeddedCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|transaction
operator|.
name|LockingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|CourseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|StudentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XExpectations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|jgroups
operator|.
name|SolverServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|jgroups
operator|.
name|SolverServerImplementation
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ReplicatedServer
extends|extends
name|AbstractServer
block|{
specifier|private
name|boolean
name|iLockStartsTransaction
init|=
literal|false
decl_stmt|;
specifier|private
name|EmbeddedCacheManager
name|iCacheManager
decl_stmt|;
specifier|private
name|Cache
argument_list|<
name|Long
argument_list|,
name|XCourseId
argument_list|>
name|iCourseForId
decl_stmt|;
specifier|private
name|Cache
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|XCourseId
argument_list|>
argument_list|>
name|iCourseForName
decl_stmt|;
specifier|private
name|Cache
argument_list|<
name|Long
argument_list|,
name|XStudent
argument_list|>
name|iStudentTable
decl_stmt|;
specifier|private
name|Cache
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
name|iOfferingTable
decl_stmt|;
specifier|private
name|Cache
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|XCourseRequest
argument_list|>
argument_list|>
name|iOfferingRequests
decl_stmt|;
specifier|private
name|Cache
argument_list|<
name|Long
argument_list|,
name|XExpectations
argument_list|>
name|iExpectations
decl_stmt|;
specifier|private
name|Cache
argument_list|<
name|Long
argument_list|,
name|Boolean
argument_list|>
name|iOfferingLocks
decl_stmt|;
specifier|public
name|ReplicatedServer
parameter_list|(
name|OnlineSectioningServerContext
name|context
parameter_list|)
throws|throws
name|SectioningException
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|cacheName
parameter_list|(
name|String
name|table
parameter_list|)
block|{
return|return
name|getAcademicSession
argument_list|()
operator|.
name|toCompactString
argument_list|()
operator|+
literal|"["
operator|+
name|table
operator|+
literal|"]"
return|;
block|}
specifier|private
parameter_list|<
name|U
parameter_list|,
name|T
parameter_list|>
name|Cache
argument_list|<
name|U
argument_list|,
name|T
argument_list|>
name|getCache
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Configuration
name|config
init|=
name|iCacheManager
operator|.
name|getCacheConfiguration
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"Using "
operator|+
name|config
operator|+
literal|" for "
operator|+
name|name
operator|+
literal|" cache."
argument_list|)
expr_stmt|;
name|iCacheManager
operator|.
name|defineConfiguration
argument_list|(
name|cacheName
argument_list|(
name|name
argument_list|)
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
return|return
name|iCacheManager
operator|.
name|getCache
argument_list|(
name|cacheName
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|load
parameter_list|(
name|OnlineSectioningServerContext
name|context
parameter_list|)
throws|throws
name|SectioningException
block|{
name|iCacheManager
operator|=
name|context
operator|.
name|getCacheManager
argument_list|()
expr_stmt|;
name|iCourseForId
operator|=
name|getCache
argument_list|(
literal|"CourseForId"
argument_list|)
expr_stmt|;
name|iCourseForName
operator|=
name|getCache
argument_list|(
literal|"CourseForName"
argument_list|)
expr_stmt|;
name|iStudentTable
operator|=
name|getCache
argument_list|(
literal|"StudentTable"
argument_list|)
expr_stmt|;
name|iOfferingTable
operator|=
name|getCache
argument_list|(
literal|"OfferingTable"
argument_list|)
expr_stmt|;
name|iOfferingRequests
operator|=
name|getCache
argument_list|(
literal|"OfferingRequests"
argument_list|)
expr_stmt|;
name|iExpectations
operator|=
name|getCache
argument_list|(
literal|"Expectations"
argument_list|)
expr_stmt|;
name|iOfferingLocks
operator|=
name|getCache
argument_list|(
literal|"OfferingLocks"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|original
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|iProperties
argument_list|)
decl_stmt|;
name|iProperties
operator|=
name|getCache
argument_list|(
literal|"Config"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iProperties
operator|.
name|isEmpty
argument_list|()
condition|)
name|iProperties
operator|.
name|putAll
argument_list|(
name|original
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOptimisticLocking
argument_list|()
condition|)
name|iLog
operator|.
name|info
argument_list|(
literal|"Using optimistic locking."
argument_list|)
expr_stmt|;
name|super
operator|.
name|load
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isOptimisticLocking
parameter_list|()
block|{
return|return
name|iOfferingLocks
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|getCacheConfiguration
argument_list|()
operator|.
name|transaction
argument_list|()
operator|.
name|lockingMode
argument_list|()
operator|==
name|LockingMode
operator|.
name|OPTIMISTIC
return|;
block|}
specifier|protected
name|void
name|removeCache
parameter_list|(
name|Cache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|cache
parameter_list|)
block|{
name|iCacheManager
operator|.
name|getGlobalComponentRegistry
argument_list|()
operator|.
name|removeCache
argument_list|(
name|cache
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CacheJmxRegistration
name|jmx
init|=
name|cache
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|getComponentRegistry
argument_list|()
operator|.
name|getComponent
argument_list|(
name|CacheJmxRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|cache
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|jmx
operator|!=
literal|null
condition|)
name|jmx
operator|.
name|unregisterCacheMBean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unload
parameter_list|()
block|{
name|super
operator|.
name|unload
argument_list|()
expr_stmt|;
name|removeCache
argument_list|(
name|iCourseForId
argument_list|)
expr_stmt|;
name|removeCache
argument_list|(
name|iCourseForName
argument_list|)
expr_stmt|;
name|removeCache
argument_list|(
name|iStudentTable
argument_list|)
expr_stmt|;
name|removeCache
argument_list|(
name|iOfferingTable
argument_list|)
expr_stmt|;
name|removeCache
argument_list|(
name|iOfferingRequests
argument_list|)
expr_stmt|;
name|removeCache
argument_list|(
name|iExpectations
argument_list|)
expr_stmt|;
name|removeCache
argument_list|(
name|iOfferingLocks
argument_list|)
expr_stmt|;
name|removeCache
argument_list|(
operator|(
name|Cache
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|iProperties
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TransactionManager
name|getTransactionManager
parameter_list|()
block|{
return|return
name|iOfferingTable
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|inTransaction
parameter_list|()
block|{
try|try
block|{
name|Transaction
name|tx
init|=
name|getTransactionManager
argument_list|()
operator|.
name|getTransaction
argument_list|()
decl_stmt|;
return|return
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|STATUS_ACTIVE
return|;
block|}
catch|catch
parameter_list|(
name|SystemException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|XCourseId
argument_list|>
name|findCourses
parameter_list|(
name|String
name|query
parameter_list|,
name|Integer
name|limit
parameter_list|,
name|CourseMatcher
name|matcher
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|DistributedExecutorService
name|ex
init|=
operator|new
name|DefaultExecutorService
argument_list|(
name|iCourseForId
argument_list|)
decl_stmt|;
name|SubSet
argument_list|<
name|XCourseId
argument_list|>
name|ret
init|=
operator|new
name|SubSet
argument_list|<
name|XCourseId
argument_list|>
argument_list|(
name|limit
argument_list|,
operator|new
name|CourseComparator
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|queryInLowerCase
init|=
name|query
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Collection
argument_list|<
name|XCourseId
argument_list|>
argument_list|>
argument_list|>
name|futures
init|=
name|ex
operator|.
name|submitEverywhere
argument_list|(
operator|new
name|FindCoursesCallable
argument_list|(
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|queryInLowerCase
argument_list|,
name|limit
argument_list|,
name|matcher
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Future
argument_list|<
name|Collection
argument_list|<
name|XCourseId
argument_list|>
argument_list|>
name|future
range|:
name|futures
control|)
name|ret
operator|.
name|addAll
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Future
argument_list|<
name|Collection
argument_list|<
name|XCourseId
argument_list|>
argument_list|>
name|future
range|:
name|futures
control|)
block|{
for|for
control|(
name|XCourseId
name|c
range|:
name|future
operator|.
name|get
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|matchCourseName
argument_list|(
name|queryInLowerCase
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|isLimitReached
argument_list|()
operator|&&
name|queryInLowerCase
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|Future
argument_list|<
name|Collection
argument_list|<
name|XCourseId
argument_list|>
argument_list|>
name|future
range|:
name|futures
control|)
block|{
for|for
control|(
name|XCourseId
name|c
range|:
name|future
operator|.
name|get
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|XCourseId
argument_list|>
name|findCourses
parameter_list|(
name|CourseMatcher
name|matcher
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|DistributedExecutorService
name|ex
init|=
operator|new
name|DefaultExecutorService
argument_list|(
name|iCourseForId
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|XCourseId
argument_list|>
name|ret
init|=
operator|new
name|TreeSet
argument_list|<
name|XCourseId
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Collection
argument_list|<
name|XCourseId
argument_list|>
argument_list|>
argument_list|>
name|futures
init|=
name|ex
operator|.
name|submitEverywhere
argument_list|(
operator|new
name|FindCoursesCallable
argument_list|(
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|matcher
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Collection
argument_list|<
name|XCourseId
argument_list|>
argument_list|>
name|future
range|:
name|futures
control|)
name|ret
operator|.
name|addAll
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|XStudent
argument_list|>
name|findStudents
parameter_list|(
name|StudentMatcher
name|matcher
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|DistributedExecutorService
name|ex
init|=
operator|new
name|DefaultExecutorService
argument_list|(
name|iStudentTable
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|XStudent
argument_list|>
name|ret
init|=
operator|new
name|TreeSet
argument_list|<
name|XStudent
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Collection
argument_list|<
name|XStudent
argument_list|>
argument_list|>
argument_list|>
name|futures
init|=
name|ex
operator|.
name|submitEverywhere
argument_list|(
operator|new
name|FindStudentsCallable
argument_list|(
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|matcher
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Collection
argument_list|<
name|XStudent
argument_list|>
argument_list|>
name|future
range|:
name|futures
control|)
name|ret
operator|.
name|addAll
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|XCourseId
name|getCourse
parameter_list|(
name|String
name|course
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|idx
init|=
name|course
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
init|;
name|idx
operator|>=
literal|0
condition|;
name|idx
operator|=
name|course
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
control|)
block|{
name|String
name|courseName
init|=
name|course
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|title
init|=
name|course
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|XCourseId
argument_list|>
name|infos
init|=
name|iCourseForName
operator|.
name|get
argument_list|(
name|courseName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|infos
operator|!=
literal|null
operator|&&
operator|!
name|infos
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|XCourseId
name|info
range|:
name|infos
control|)
if|if
condition|(
name|title
operator|.
name|equalsIgnoreCase
argument_list|(
name|info
operator|.
name|getTitle
argument_list|()
argument_list|)
condition|)
return|return
name|info
return|;
block|}
name|TreeSet
argument_list|<
name|XCourseId
argument_list|>
name|infos
init|=
name|iCourseForName
operator|.
name|get
argument_list|(
name|course
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|infos
operator|!=
literal|null
operator|&&
operator|!
name|infos
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|infos
operator|.
name|first
argument_list|()
return|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|XCourse
name|toCourse
parameter_list|(
name|XCourseId
name|course
parameter_list|)
block|{
if|if
condition|(
name|course
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|course
operator|instanceof
name|XCourse
condition|)
return|return
operator|(
name|XCourse
operator|)
name|course
return|;
name|XOffering
name|offering
init|=
name|getOffering
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|offering
operator|==
literal|null
condition|?
literal|null
else|:
name|offering
operator|.
name|getCourse
argument_list|(
name|course
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|XCourse
name|getCourse
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|toCourse
argument_list|(
name|iCourseForId
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|XStudent
name|getStudent
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|iStudentTable
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|XOffering
name|getOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|iOfferingTable
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|getRequests
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|iOfferingRequests
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
return|return
name|requests
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<
name|XCourseRequest
argument_list|>
argument_list|(
name|requests
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|XExpectations
name|getExpectations
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|XExpectations
name|expectations
init|=
name|iExpectations
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
return|return
name|expectations
operator|==
literal|null
condition|?
operator|new
name|XExpectations
argument_list|(
name|offeringId
argument_list|)
else|:
name|expectations
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|XExpectations
name|expectations
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|iExpectations
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|expectations
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|expectations
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|XStudent
name|oldStudent
init|=
name|iStudentTable
operator|.
name|remove
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldStudent
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XRequest
name|request
range|:
name|oldStudent
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
for|for
control|(
name|XCourseId
name|course
range|:
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|iOfferingRequests
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|requests
operator|.
name|remove
argument_list|(
name|request
argument_list|)
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"REMOVE[1]: Request "
operator|+
name|student
operator|+
literal|" "
operator|+
name|request
operator|+
literal|" was not present in the offering requests table for "
operator|+
name|course
argument_list|)
expr_stmt|;
name|iOfferingRequests
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|requests
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"REMOVE[2]: Request "
operator|+
name|student
operator|+
literal|" "
operator|+
name|request
operator|+
literal|" was not present in the offering requests table for "
operator|+
name|course
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|XStudent
name|student
parameter_list|,
name|boolean
name|updateRequests
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|updateRequests
condition|)
block|{
name|XStudent
name|oldStudent
init|=
name|iStudentTable
operator|.
name|get
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
name|iStudentTable
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldStudent
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XRequest
name|request
range|:
name|oldStudent
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
for|for
control|(
name|XCourseId
name|course
range|:
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|iOfferingRequests
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|requests
operator|.
name|remove
argument_list|(
name|request
argument_list|)
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"UPDATE[1]: Request "
operator|+
name|student
operator|+
literal|" "
operator|+
name|request
operator|+
literal|" was not present in the offering requests table for "
operator|+
name|course
argument_list|)
expr_stmt|;
name|iOfferingRequests
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|requests
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"UPDATE[2]: Request "
operator|+
name|student
operator|+
literal|" "
operator|+
name|request
operator|+
literal|" was not present in the offering requests table for "
operator|+
name|course
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|XRequest
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
for|for
control|(
name|XCourseId
name|course
range|:
operator|(
operator|(
name|XCourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|iOfferingRequests
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|==
literal|null
condition|)
name|requests
operator|=
operator|new
name|HashSet
argument_list|<
name|XCourseRequest
argument_list|>
argument_list|()
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|(
name|XCourseRequest
operator|)
name|request
argument_list|)
expr_stmt|;
name|iOfferingRequests
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|requests
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iStudentTable
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|XOffering
name|offering
parameter_list|)
block|{
name|remove
argument_list|(
name|offering
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|remove
parameter_list|(
name|XOffering
name|offering
parameter_list|,
name|boolean
name|removeExpectations
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|XCourse
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|iCourseForId
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|remove
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|XCourseId
argument_list|>
name|courses
init|=
name|iCourseForName
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseNameInLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|!=
literal|null
condition|)
block|{
name|courses
operator|.
name|remove
argument_list|(
name|course
argument_list|)
expr_stmt|;
if|if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
for|for
control|(
name|XCourseId
name|x
range|:
name|courses
control|)
name|x
operator|.
name|setHasUniqueName
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
name|iCourseForName
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|remove
argument_list|(
name|course
operator|.
name|getCourseNameInLowerCase
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|iCourseForName
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseNameInLowerCase
argument_list|()
argument_list|,
name|courses
argument_list|)
expr_stmt|;
block|}
block|}
name|iOfferingTable
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|remove
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|removeExpectations
condition|)
name|iExpectations
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|remove
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|XOffering
name|offering
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|XOffering
name|oldOffering
init|=
name|iOfferingTable
operator|.
name|get
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldOffering
operator|!=
literal|null
condition|)
name|remove
argument_list|(
name|oldOffering
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iOfferingTable
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|offering
argument_list|)
expr_stmt|;
for|for
control|(
name|XCourse
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|iCourseForId
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
operator|new
name|XCourseId
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|XCourseId
argument_list|>
name|courses
init|=
name|iCourseForName
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseNameInLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|==
literal|null
condition|)
block|{
name|courses
operator|=
operator|new
name|TreeSet
argument_list|<
name|XCourseId
argument_list|>
argument_list|()
expr_stmt|;
name|courses
operator|.
name|add
argument_list|(
operator|new
name|XCourseId
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
name|iCourseForName
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseNameInLowerCase
argument_list|()
argument_list|,
name|courses
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|courses
operator|.
name|add
argument_list|(
operator|new
name|XCourseId
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
for|for
control|(
name|XCourseId
name|x
range|:
name|courses
control|)
name|x
operator|.
name|setHasUniqueName
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|else if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
for|for
control|(
name|XCourseId
name|x
range|:
name|courses
control|)
name|x
operator|.
name|setHasUniqueName
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iCourseForName
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseNameInLowerCase
argument_list|()
argument_list|,
name|courses
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearAll
parameter_list|()
block|{
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|iStudentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iOfferingTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iCourseForId
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iCourseForName
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iOfferingRequests
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearAllStudents
parameter_list|()
block|{
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|iStudentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iOfferingRequests
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|XCourseRequest
name|assign
parameter_list|(
name|XCourseRequest
name|request
parameter_list|,
name|XEnrollment
name|enrollment
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|XStudent
name|student
init|=
name|iStudentTable
operator|.
name|get
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
comment|// remove old requests
for|for
control|(
name|XCourseId
name|course
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|iOfferingRequests
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|requests
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"ASSIGN[1]: Request "
operator|+
name|student
operator|+
literal|" "
operator|+
name|request
operator|+
literal|" was not present in the offering requests table for "
operator|+
name|course
argument_list|)
expr_stmt|;
name|iOfferingRequests
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|requests
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"ASSIGN[2]: Request "
operator|+
name|student
operator|+
literal|" "
operator|+
name|request
operator|+
literal|" was not present in the offering requests table for "
operator|+
name|course
argument_list|)
expr_stmt|;
block|}
block|}
comment|// assign
name|cr
operator|.
name|setEnrollment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
comment|// put new requests
for|for
control|(
name|XCourseId
name|course
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|iOfferingRequests
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|==
literal|null
condition|)
name|requests
operator|=
operator|new
name|HashSet
argument_list|<
name|XCourseRequest
argument_list|>
argument_list|()
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|iOfferingRequests
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|requests
argument_list|)
expr_stmt|;
block|}
name|iStudentTable
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
return|return
name|cr
return|;
block|}
block|}
name|iLog
operator|.
name|warn
argument_list|(
literal|"ASSIGN[3]: Request "
operator|+
name|student
operator|+
literal|" "
operator|+
name|request
operator|+
literal|" was not found among student requests"
argument_list|)
expr_stmt|;
for|for
control|(
name|XCourseId
name|course
range|:
name|request
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|iOfferingRequests
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
block|{
name|requests
operator|.
name|remove
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|iOfferingRequests
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|requests
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|XCourseRequest
name|waitlist
parameter_list|(
name|XCourseRequest
name|request
parameter_list|,
name|boolean
name|waitlist
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|XStudent
name|student
init|=
name|iStudentTable
operator|.
name|get
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
comment|// remove old requests
for|for
control|(
name|XCourseId
name|course
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|iOfferingRequests
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|requests
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
condition|)
name|iLog
operator|.
name|warn
argument_list|(
literal|"WAITLIST[1]: Request "
operator|+
name|student
operator|+
literal|" "
operator|+
name|request
operator|+
literal|" was not present in the offering requests table for "
operator|+
name|course
argument_list|)
expr_stmt|;
name|iOfferingRequests
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|requests
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"WAITLIST[2]: Request "
operator|+
name|student
operator|+
literal|" "
operator|+
name|request
operator|+
literal|" was not present in the offering requests table for "
operator|+
name|course
argument_list|)
expr_stmt|;
block|}
block|}
comment|// assign
name|cr
operator|.
name|setWaitlist
argument_list|(
name|waitlist
argument_list|)
expr_stmt|;
comment|// put new requests
for|for
control|(
name|XCourseId
name|course
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|iOfferingRequests
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|==
literal|null
condition|)
name|requests
operator|=
operator|new
name|HashSet
argument_list|<
name|XCourseRequest
argument_list|>
argument_list|()
expr_stmt|;
name|iOfferingRequests
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|requests
argument_list|)
expr_stmt|;
block|}
name|iStudentTable
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
return|return
name|cr
return|;
block|}
block|}
name|iLog
operator|.
name|warn
argument_list|(
literal|"WAITLIST[3]: Request "
operator|+
name|student
operator|+
literal|" "
operator|+
name|request
operator|+
literal|" was not found among student requests"
argument_list|)
expr_stmt|;
for|for
control|(
name|XCourseId
name|course
range|:
name|request
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|iOfferingRequests
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
block|{
name|requests
operator|.
name|remove
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|iOfferingRequests
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|requests
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|OnlineSectioningServer
name|getLocalServer
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|SolverServer
name|server
init|=
name|SolverServerImplementation
operator|.
name|getInstance
argument_list|()
decl_stmt|;
return|return
name|server
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|getSolver
argument_list|(
name|sessionId
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|FindCoursesCallable
implements|implements
name|DistributedCallable
argument_list|<
name|Long
argument_list|,
name|XCourseId
argument_list|,
name|Collection
argument_list|<
name|XCourseId
argument_list|>
argument_list|>
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|private
name|String
name|iQuery
decl_stmt|;
specifier|private
name|Integer
name|iLimit
decl_stmt|;
specifier|private
name|CourseMatcher
name|iMatcher
decl_stmt|;
specifier|private
specifier|transient
name|Cache
argument_list|<
name|Long
argument_list|,
name|XCourseId
argument_list|>
name|iCache
decl_stmt|;
specifier|public
name|FindCoursesCallable
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|queryInLowerCase
parameter_list|,
name|Integer
name|limit
parameter_list|,
name|CourseMatcher
name|matcher
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
name|iQuery
operator|=
name|queryInLowerCase
expr_stmt|;
name|iLimit
operator|=
name|limit
expr_stmt|;
name|iMatcher
operator|=
name|matcher
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setEnvironment
parameter_list|(
name|Cache
argument_list|<
name|Long
argument_list|,
name|XCourseId
argument_list|>
name|cache
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|inputKeys
parameter_list|)
block|{
name|iCache
operator|=
name|cache
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|XCourseId
argument_list|>
name|call
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|iMatcher
operator|!=
literal|null
condition|)
name|iMatcher
operator|.
name|setServer
argument_list|(
name|getLocalServer
argument_list|(
name|iSessionId
argument_list|)
argument_list|)
expr_stmt|;
name|SubSet
argument_list|<
name|XCourseId
argument_list|>
name|ret
init|=
operator|new
name|SubSet
argument_list|<
name|XCourseId
argument_list|>
argument_list|(
name|iLimit
argument_list|,
operator|new
name|CourseComparator
argument_list|(
name|iQuery
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|XCourseId
name|c
range|:
name|iCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|iQuery
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|matchCourseName
argument_list|(
name|iQuery
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|iMatcher
operator|!=
literal|null
operator|&&
operator|!
name|iMatcher
operator|.
name|match
argument_list|(
name|c
argument_list|)
condition|)
continue|continue;
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|isLimitReached
argument_list|()
operator|&&
name|iQuery
operator|!=
literal|null
operator|&&
name|iQuery
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|XCourseId
name|c
range|:
name|iCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|matchTitle
argument_list|(
name|iQuery
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|iMatcher
operator|!=
literal|null
operator|&&
operator|!
name|iMatcher
operator|.
name|match
argument_list|(
name|c
argument_list|)
condition|)
continue|continue;
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|GetKeysCallable
parameter_list|<
name|T
parameter_list|>
implements|implements
name|DistributedCallable
argument_list|<
name|Long
argument_list|,
name|T
argument_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
argument_list|>
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|transient
name|Cache
argument_list|<
name|Long
argument_list|,
name|T
argument_list|>
name|iCache
decl_stmt|;
specifier|public
name|GetKeysCallable
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|setEnvironment
parameter_list|(
name|Cache
argument_list|<
name|Long
argument_list|,
name|T
argument_list|>
name|cache
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|inputKeys
parameter_list|)
block|{
name|iCache
operator|=
name|cache
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|iCache
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|FindStudentsCallable
implements|implements
name|DistributedCallable
argument_list|<
name|Long
argument_list|,
name|XStudent
argument_list|,
name|Collection
argument_list|<
name|XStudent
argument_list|>
argument_list|>
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|private
name|StudentMatcher
name|iMatcher
decl_stmt|;
specifier|private
specifier|transient
name|Cache
argument_list|<
name|Long
argument_list|,
name|XStudent
argument_list|>
name|iCache
decl_stmt|;
specifier|public
name|FindStudentsCallable
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|StudentMatcher
name|matcher
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
name|iMatcher
operator|=
name|matcher
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setEnvironment
parameter_list|(
name|Cache
argument_list|<
name|Long
argument_list|,
name|XStudent
argument_list|>
name|cache
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|inputKeys
parameter_list|)
block|{
name|iCache
operator|=
name|cache
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|XStudent
argument_list|>
name|call
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|iMatcher
operator|!=
literal|null
condition|)
name|iMatcher
operator|.
name|setServer
argument_list|(
name|getLocalServer
argument_list|(
name|iSessionId
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XStudent
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|XStudent
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XStudent
name|s
range|:
name|iCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|iMatcher
operator|.
name|match
argument_list|(
name|s
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|readLock
parameter_list|()
block|{
if|if
condition|(
operator|!
name|iLockStartsTransaction
condition|)
block|{
return|return
operator|new
name|Lock
argument_list|()
block|{
specifier|public
name|void
name|release
parameter_list|()
block|{
block|}
block|}
return|;
block|}
try|try
block|{
name|TransactionManager
name|tm
init|=
name|getTransactionManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|tm
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
condition|)
block|{
name|tm
operator|.
name|setTransactionTimeout
argument_list|(
literal|3600
argument_list|)
expr_stmt|;
name|tm
operator|.
name|begin
argument_list|()
expr_stmt|;
return|return
operator|new
name|Lock
argument_list|()
block|{
specifier|public
name|void
name|release
parameter_list|()
block|{
try|try
block|{
name|TransactionManager
name|tm
init|=
name|getTransactionManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|tm
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|STATUS_MARKED_ROLLBACK
condition|)
name|tm
operator|.
name|rollback
argument_list|()
expr_stmt|;
else|else
name|tm
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Failed to commit a transaction: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|Lock
argument_list|()
block|{
specifier|public
name|void
name|release
parameter_list|()
block|{
block|}
block|}
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Failed to begin a transaction: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|writeLock
parameter_list|()
block|{
return|return
name|readLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockAll
parameter_list|()
block|{
return|return
name|readLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockStudent
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|offeringIds
parameter_list|,
name|String
name|actionName
parameter_list|)
block|{
name|boolean
name|lockStudents
init|=
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".LockStudents"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|lockOfferings
init|=
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".LockOfferings"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|excludeLockedOfferings
init|=
name|lockOfferings
operator|&&
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".ExcludeLockedOfferings"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|inTransaction
argument_list|()
condition|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"Failed to lock a student "
operator|+
name|studentId
operator|+
literal|": No transaction has been started."
argument_list|)
expr_stmt|;
return|return
name|lock
return|;
block|}
if|if
condition|(
name|isOptimisticLocking
argument_list|()
condition|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"Failed to lock a student "
operator|+
name|studentId
operator|+
literal|": No eager locks in optimistic locking."
argument_list|)
expr_stmt|;
return|return
name|lock
return|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockStudents
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
operator|-
name|studentId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lockOfferings
condition|)
block|{
if|if
condition|(
name|offeringIds
operator|!=
literal|null
condition|)
for|for
control|(
name|Long
name|offeringId
range|:
name|offeringIds
control|)
if|if
condition|(
operator|!
name|excludeLockedOfferings
operator|||
operator|!
name|iOfferingLocks
operator|.
name|containsKey
argument_list|(
name|offeringId
argument_list|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
name|XStudent
name|student
init|=
name|getStudent
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Long
name|offeringId
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|excludeLockedOfferings
operator|||
operator|!
name|iOfferingLocks
operator|.
name|containsKey
argument_list|(
name|offeringId
argument_list|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
while|while
condition|(
operator|!
name|iOfferingLocks
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|FAIL_SILENTLY
argument_list|)
operator|.
name|lock
argument_list|(
name|ids
argument_list|)
condition|)
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"Failed to lock a student "
operator|+
name|studentId
operator|+
literal|", retrying..."
argument_list|)
expr_stmt|;
block|}
return|return
name|lock
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Failed to lock a student: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|,
name|String
name|actionName
parameter_list|)
block|{
name|boolean
name|lockStudents
init|=
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".LockStudents"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|lockOfferings
init|=
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".LockOfferings"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|excludeLockedOffering
init|=
name|lockOfferings
operator|&&
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".ExcludeLockedOfferings"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|inTransaction
argument_list|()
condition|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"Failed to lock an offering "
operator|+
name|offeringId
operator|+
literal|": No transaction has been started."
argument_list|)
expr_stmt|;
return|return
name|lock
return|;
block|}
if|if
condition|(
name|isOptimisticLocking
argument_list|()
condition|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"Failed to lock an offering "
operator|+
name|offeringId
operator|+
literal|": No eager locks in optimistic locking."
argument_list|)
expr_stmt|;
return|return
name|lock
return|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockOfferings
condition|)
block|{
if|if
condition|(
operator|!
name|excludeLockedOffering
operator|||
operator|!
name|iOfferingLocks
operator|.
name|containsKey
argument_list|(
name|offeringId
argument_list|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lockStudents
condition|)
block|{
if|if
condition|(
name|studentIds
operator|!=
literal|null
condition|)
for|for
control|(
name|Long
name|studentId
range|:
name|studentIds
control|)
name|ids
operator|.
name|add
argument_list|(
operator|-
name|studentId
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|getRequests
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XCourseRequest
name|request
range|:
name|requests
control|)
name|ids
operator|.
name|add
argument_list|(
operator|-
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
operator|!
name|iOfferingLocks
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|FAIL_SILENTLY
argument_list|)
operator|.
name|lock
argument_list|(
name|ids
argument_list|)
condition|)
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"Failed to lock an offering "
operator|+
name|offeringId
operator|+
literal|", retrying..."
argument_list|)
expr_stmt|;
block|}
return|return
name|lock
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Failed to lock an offering: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Long
name|getOfferingIdFromCourseName
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
if|if
condition|(
name|courseName
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|XCourseId
name|c
init|=
name|getCourse
argument_list|(
name|courseName
argument_list|)
decl_stmt|;
return|return
operator|(
name|c
operator|==
literal|null
condition|?
literal|null
else|:
name|c
operator|.
name|getOfferingId
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockRequest
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|,
name|String
name|actionName
parameter_list|)
block|{
name|boolean
name|lockStudents
init|=
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".LockStudents"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|lockOfferings
init|=
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".LockOfferings"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|excludeLockedOffering
init|=
name|lockOfferings
operator|&&
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".ExcludeLockedOfferings"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|inTransaction
argument_list|()
condition|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"Failed to lock a request for student "
operator|+
name|request
operator|.
name|getStudentId
argument_list|()
operator|+
literal|": No transaction has been started."
argument_list|)
expr_stmt|;
return|return
name|lock
return|;
block|}
if|if
condition|(
name|isOptimisticLocking
argument_list|()
condition|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"Failed to lock a request for student "
operator|+
name|request
operator|.
name|getStudentId
argument_list|()
operator|+
literal|": No eager locks in optimistic locking."
argument_list|)
expr_stmt|;
return|return
name|lock
return|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockStudents
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
operator|-
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lockOfferings
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
condition|)
block|{
name|XCourseId
name|c
init|=
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|id
init|=
operator|(
name|c
operator|==
literal|null
condition|?
literal|null
else|:
name|c
operator|.
name|getOfferingId
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|excludeLockedOffering
operator|||
operator|!
name|isOfferingLocked
argument_list|(
name|id
argument_list|)
operator|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rc
operator|.
name|hasCourseName
argument_list|()
condition|)
block|{
name|Long
name|id
init|=
name|getOfferingIdFromCourseName
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|excludeLockedOffering
operator|||
operator|!
name|isOfferingLocked
argument_list|(
name|id
argument_list|)
operator|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
condition|)
block|{
name|XCourseId
name|c
init|=
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|id
init|=
operator|(
name|c
operator|==
literal|null
condition|?
literal|null
else|:
name|c
operator|.
name|getOfferingId
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|excludeLockedOffering
operator|||
operator|!
name|isOfferingLocked
argument_list|(
name|id
argument_list|)
operator|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rc
operator|.
name|hasCourseName
argument_list|()
condition|)
block|{
name|Long
name|id
init|=
name|getOfferingIdFromCourseName
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|excludeLockedOffering
operator|||
operator|!
name|isOfferingLocked
argument_list|(
name|id
argument_list|)
operator|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
while|while
condition|(
operator|!
name|iOfferingLocks
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|FAIL_SILENTLY
argument_list|)
operator|.
name|lock
argument_list|(
name|ids
argument_list|)
condition|)
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"Failed to lock a request for student "
operator|+
name|request
operator|.
name|getStudentId
argument_list|()
operator|+
literal|", retrying..."
argument_list|)
expr_stmt|;
block|}
return|return
name|lock
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Failed to lock a request: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOfferingLocked
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
return|return
name|iOfferingLocks
operator|.
name|containsKey
argument_list|(
name|offeringId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|iOfferingLocks
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|offeringId
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unlockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|iOfferingLocks
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
operator|.
name|remove
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|getLockedOfferings
parameter_list|()
block|{
name|Lock
name|lock
init|=
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|DistributedExecutorService
name|ex
init|=
operator|new
name|DefaultExecutorService
argument_list|(
name|iOfferingLocks
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Collection
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|futures
init|=
name|ex
operator|.
name|submitEverywhere
argument_list|(
operator|new
name|GetKeysCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Collection
argument_list|<
name|Long
argument_list|>
argument_list|>
name|future
range|:
name|futures
control|)
name|ret
operator|.
name|addAll
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseAllOfferingLocks
parameter_list|()
block|{
name|iOfferingLocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

