begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|MultiLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractLockingServer
extends|extends
name|AbstractServer
block|{
specifier|private
name|ReentrantReadWriteLock
name|iLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
name|MultiLock
name|iMultiLock
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Lock
argument_list|>
name|iOfferingLocks
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Lock
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|AbstractLockingServer
parameter_list|(
name|OnlineSectioningServerContext
name|context
parameter_list|)
throws|throws
name|SectioningException
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|AbstractLockingServer
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|,
name|boolean
name|allowAsyncCalls
parameter_list|)
block|{
name|super
argument_list|(
name|session
argument_list|,
name|allowAsyncCalls
argument_list|)
expr_stmt|;
name|iMultiLock
operator|=
operator|new
name|MultiLock
argument_list|(
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|load
parameter_list|(
name|OnlineSectioningServerContext
name|context
parameter_list|)
block|{
name|iMultiLock
operator|=
operator|new
name|MultiLock
argument_list|(
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|load
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|readLock
parameter_list|()
block|{
if|if
condition|(
name|iLock
operator|==
literal|null
condition|)
return|return
operator|new
name|Lock
argument_list|()
block|{
specifier|public
name|void
name|release
parameter_list|()
block|{
block|}
block|}
return|;
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
operator|new
name|Lock
argument_list|()
block|{
specifier|public
name|void
name|release
parameter_list|()
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
name|Lock
name|writeLockIfNotHeld
parameter_list|()
block|{
if|if
condition|(
name|iLock
operator|==
literal|null
operator|||
name|iLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
condition|)
return|return
literal|null
return|;
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
operator|new
name|Lock
argument_list|()
block|{
specifier|public
name|void
name|release
parameter_list|()
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|writeLock
parameter_list|()
block|{
if|if
condition|(
name|iLock
operator|==
literal|null
condition|)
return|return
operator|new
name|Lock
argument_list|()
block|{
specifier|public
name|void
name|release
parameter_list|()
block|{
block|}
block|}
return|;
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
operator|new
name|Lock
argument_list|()
block|{
specifier|public
name|void
name|release
parameter_list|()
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockAll
parameter_list|()
block|{
if|if
condition|(
name|iLock
operator|==
literal|null
condition|)
return|return
operator|new
name|Lock
argument_list|()
block|{
specifier|public
name|void
name|release
parameter_list|()
block|{
block|}
block|}
return|;
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
operator|new
name|Lock
argument_list|()
block|{
specifier|public
name|void
name|release
parameter_list|()
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockStudent
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|offeringIds
parameter_list|,
name|String
name|actionName
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|lockStudents
init|=
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".LockStudents"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|lockOfferings
init|=
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".LockOfferings"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|excludeLockedOfferings
init|=
name|lockOfferings
operator|&&
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".ExcludeLockedOfferings"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|lockStudents
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
operator|-
name|studentId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lockOfferings
condition|)
block|{
if|if
condition|(
name|offeringIds
operator|!=
literal|null
condition|)
for|for
control|(
name|Long
name|offeringId
range|:
name|offeringIds
control|)
if|if
condition|(
operator|!
name|excludeLockedOfferings
operator|||
operator|!
name|isOfferingLocked
argument_list|(
name|offeringId
argument_list|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
name|XStudent
name|student
init|=
name|getStudent
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Long
name|offeringId
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|excludeLockedOfferings
operator|||
operator|!
name|isOfferingLocked
argument_list|(
name|offeringId
argument_list|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|iMultiLock
operator|.
name|lock
argument_list|(
name|ids
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|,
name|String
name|actionName
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|lockStudents
init|=
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".LockStudents"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|lockOfferings
init|=
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".LockOfferings"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|excludeLockedOffering
init|=
name|lockOfferings
operator|&&
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".ExcludeLockedOfferings"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|lockOfferings
condition|)
block|{
if|if
condition|(
operator|!
name|excludeLockedOffering
operator|||
operator|!
name|isOfferingLocked
argument_list|(
name|offeringId
argument_list|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lockStudents
condition|)
block|{
if|if
condition|(
name|studentIds
operator|!=
literal|null
condition|)
for|for
control|(
name|Long
name|studentId
range|:
name|studentIds
control|)
name|ids
operator|.
name|add
argument_list|(
operator|-
name|studentId
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|getRequests
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XCourseRequest
name|request
range|:
name|requests
control|)
name|ids
operator|.
name|add
argument_list|(
operator|-
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|iMultiLock
operator|.
name|lock
argument_list|(
name|ids
argument_list|)
return|;
block|}
specifier|private
name|Long
name|getOfferingIdFromCourseName
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
if|if
condition|(
name|courseName
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|XCourseId
name|c
init|=
name|getCourse
argument_list|(
name|courseName
argument_list|)
decl_stmt|;
return|return
operator|(
name|c
operator|==
literal|null
condition|?
literal|null
else|:
name|c
operator|.
name|getOfferingId
argument_list|()
operator|)
return|;
block|}
specifier|public
name|Lock
name|lockRequest
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|,
name|String
name|actionName
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|lockStudents
init|=
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".LockStudents"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|lockOfferings
init|=
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".LockOfferings"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|excludeLockedOffering
init|=
name|lockOfferings
operator|&&
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
name|actionName
operator|+
literal|".ExcludeLockedOfferings"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|lockStudents
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|!=
literal|null
condition|)
name|ids
operator|.
name|add
argument_list|(
operator|-
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lockOfferings
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|Long
name|id
init|=
name|getOfferingIdFromCourseName
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|excludeLockedOffering
operator|||
operator|!
name|isOfferingLocked
argument_list|(
name|id
argument_list|)
operator|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasFirstAlternative
argument_list|()
condition|)
block|{
name|Long
name|id
init|=
name|getOfferingIdFromCourseName
argument_list|(
name|r
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|excludeLockedOffering
operator|||
operator|!
name|isOfferingLocked
argument_list|(
name|id
argument_list|)
operator|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasSecondAlternative
argument_list|()
condition|)
block|{
name|Long
name|id
init|=
name|getOfferingIdFromCourseName
argument_list|(
name|r
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|excludeLockedOffering
operator|||
operator|!
name|isOfferingLocked
argument_list|(
name|id
argument_list|)
operator|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|Long
name|id
init|=
name|getOfferingIdFromCourseName
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|excludeLockedOffering
operator|||
operator|!
name|isOfferingLocked
argument_list|(
name|id
argument_list|)
operator|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasFirstAlternative
argument_list|()
condition|)
block|{
name|Long
name|id
init|=
name|getOfferingIdFromCourseName
argument_list|(
name|r
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|excludeLockedOffering
operator|||
operator|!
name|isOfferingLocked
argument_list|(
name|id
argument_list|)
operator|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasSecondAlternative
argument_list|()
condition|)
block|{
name|Long
name|id
init|=
name|getOfferingIdFromCourseName
argument_list|(
name|r
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|excludeLockedOffering
operator|||
operator|!
name|isOfferingLocked
argument_list|(
name|id
argument_list|)
operator|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|iMultiLock
operator|.
name|lock
argument_list|(
name|ids
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOfferingLocked
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iOfferingLocks
init|)
block|{
return|return
name|iOfferingLocks
operator|.
name|containsKey
argument_list|(
name|offeringId
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|lockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iOfferingLocks
init|)
block|{
if|if
condition|(
name|iOfferingLocks
operator|.
name|containsKey
argument_list|(
name|offeringId
argument_list|)
condition|)
return|return;
block|}
name|Lock
name|lock
init|=
name|iMultiLock
operator|.
name|lock
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|iOfferingLocks
init|)
block|{
if|if
condition|(
name|iOfferingLocks
operator|.
name|containsKey
argument_list|(
name|offeringId
argument_list|)
condition|)
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
else|else
name|iOfferingLocks
operator|.
name|put
argument_list|(
name|offeringId
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|unlockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iOfferingLocks
init|)
block|{
name|Lock
name|lock
init|=
name|iOfferingLocks
operator|.
name|remove
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|getLockedOfferings
parameter_list|()
block|{
synchronized|synchronized
init|(
name|iOfferingLocks
init|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|iOfferingLocks
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseAllOfferingLocks
parameter_list|()
block|{
synchronized|synchronized
init|(
name|iOfferingLocks
init|)
block|{
for|for
control|(
name|Lock
name|lock
range|:
name|iOfferingLocks
operator|.
name|values
argument_list|()
control|)
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
name|iOfferingLocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

