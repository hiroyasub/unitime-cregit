begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_comment
comment|/**  * XCourseId comparator preferring courses with with matching course name (to courses with matching title).  *   * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CourseComparator
implements|implements
name|Comparator
argument_list|<
name|XCourseId
argument_list|>
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iQuery
init|=
literal|null
decl_stmt|;
specifier|public
name|CourseComparator
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|iQuery
operator|=
operator|(
name|query
operator|==
literal|null
condition|?
literal|null
else|:
name|query
operator|.
name|toLowerCase
argument_list|()
operator|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|XCourseId
name|c1
parameter_list|,
name|XCourseId
name|c2
parameter_list|)
block|{
if|if
condition|(
name|iQuery
operator|!=
literal|null
operator|&&
operator|!
name|iQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|c1
operator|.
name|matchCourseName
argument_list|(
name|iQuery
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|c2
operator|.
name|matchCourseName
argument_list|(
name|iQuery
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
name|c2
operator|.
name|matchCourseName
argument_list|(
name|iQuery
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
return|return
name|c1
operator|.
name|compareTo
argument_list|(
name|c2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

