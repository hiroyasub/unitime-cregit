begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|JProf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|DistanceConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|TimeOverlapsCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|expectations
operator|.
name|AvoidUnbalancedWhenNoExpectations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|expectations
operator|.
name|OverExpectedCriterion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|selection
operator|.
name|StudentSchedulingAssistantWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverPredefinedSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TravelTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|CacheElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|HasCacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningActionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseDetailsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|CheckAllOfferingsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|PersistExpectedSpacesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|ReloadAllData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|MemoryCounter
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractServer
implements|implements
name|OnlineSectioningServer
block|{
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Log
name|iLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DistanceMetric
name|iDistanceMetric
init|=
literal|null
decl_stmt|;
specifier|private
name|DataProperties
name|iConfig
init|=
literal|null
decl_stmt|;
specifier|private
name|OnlineSectioningActionFactory
name|iActionFactory
init|=
literal|null
decl_stmt|;
specifier|protected
name|AsyncExecutor
name|iExecutor
init|=
literal|null
decl_stmt|;
specifier|private
name|Queue
argument_list|<
name|Runnable
argument_list|>
name|iExecutorQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|CacheElement
argument_list|<
name|Long
argument_list|>
argument_list|>
name|iOfferingsToPersistExpectedSpaces
init|=
operator|new
name|HashSet
argument_list|<
name|CacheElement
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|LinkedList
argument_list|<
name|OnlineSectioningHelper
argument_list|>
argument_list|>
name|sHelper
init|=
operator|new
name|ThreadLocal
argument_list|<
name|LinkedList
argument_list|<
name|OnlineSectioningHelper
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|iProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|MasterAcquiringThread
name|iMasterThread
decl_stmt|;
specifier|public
name|AbstractServer
parameter_list|(
name|OnlineSectioningServerContext
name|context
parameter_list|)
throws|throws
name|SectioningException
block|{
name|iConfig
operator|=
operator|new
name|ServerConfig
argument_list|()
expr_stmt|;
name|iDistanceMetric
operator|=
operator|new
name|DistanceMetric
argument_list|(
name|iConfig
argument_list|)
expr_stmt|;
name|TravelTime
operator|.
name|populateTravelTimes
argument_list|(
name|iDistanceMetric
argument_list|,
name|context
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iActionFactory
operator|=
operator|(
operator|(
name|OnlineSectioningActionFactory
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|ApplicationProperty
operator|.
name|CustomizationOnlineSectioningActionFactory
operator|.
name|value
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OnlineSectioningServer
operator|.
name|class
argument_list|)
operator|.
name|warn
argument_list|(
literal|"Failed to initialize online sectioning action factory, using the default one."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iActionFactory
operator|=
operator|new
name|SimpleActionFactory
argument_list|()
expr_stmt|;
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|context
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionSessionDoesNotExist
argument_list|(
name|context
operator|.
name|getAcademicSessionId
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|context
operator|.
name|getAcademicSessionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
name|AcademicSessionInfo
name|academicSession
init|=
operator|new
name|AcademicSessionInfo
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|iLog
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OnlineSectioningServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".server["
operator|+
name|academicSession
operator|.
name|toCompactString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|iProperties
operator|.
name|put
argument_list|(
literal|"AcademicSession"
argument_list|,
name|academicSession
argument_list|)
expr_stmt|;
name|iExecutor
operator|=
operator|new
name|AsyncExecutor
argument_list|(
name|academicSession
argument_list|)
expr_stmt|;
name|iExecutor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|iLog
operator|.
name|info
argument_list|(
literal|"Config: "
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|iConfig
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|load
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|AbstractServer
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|,
name|boolean
name|allowAsyncCalls
parameter_list|)
block|{
name|iConfig
operator|=
operator|new
name|ServerConfig
argument_list|()
expr_stmt|;
name|iDistanceMetric
operator|=
operator|new
name|DistanceMetric
argument_list|(
name|iConfig
argument_list|)
expr_stmt|;
name|TravelTime
operator|.
name|populateTravelTimes
argument_list|(
name|iDistanceMetric
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iActionFactory
operator|=
operator|(
operator|(
name|OnlineSectioningActionFactory
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|ApplicationProperty
operator|.
name|CustomizationOnlineSectioningActionFactory
operator|.
name|value
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OnlineSectioningServer
operator|.
name|class
argument_list|)
operator|.
name|warn
argument_list|(
literal|"Failed to initialize online sectioning action factory, using the default one."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iActionFactory
operator|=
operator|new
name|SimpleActionFactory
argument_list|()
expr_stmt|;
block|}
name|iLog
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OnlineSectioningServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".server["
operator|+
name|session
operator|.
name|toCompactString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|iProperties
operator|.
name|put
argument_list|(
literal|"AcademicSession"
argument_list|,
name|session
argument_list|)
expr_stmt|;
if|if
condition|(
name|allowAsyncCalls
condition|)
block|{
name|iExecutor
operator|=
operator|new
name|AsyncExecutor
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|iExecutor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|load
parameter_list|(
name|OnlineSectioningServerContext
name|context
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|context
operator|.
name|getLockService
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iMasterThread
operator|=
operator|new
name|MasterAcquiringThread
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|iMasterThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|loadOnMaster
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|loadOnMaster
parameter_list|(
name|OnlineSectioningServerContext
name|context
parameter_list|)
throws|throws
name|SectioningException
block|{
try|try
block|{
name|setProperty
argument_list|(
literal|"ReloadIsNeeded"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
specifier|final
name|OnlineSectioningLog
operator|.
name|Entity
name|user
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|StudentClassEnrollment
operator|.
name|SystemChange
operator|.
name|SYSTEM
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|StudentClassEnrollment
operator|.
name|SystemChange
operator|.
name|SYSTEM
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|OTHER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isWaitTillStarted
argument_list|()
condition|)
block|{
try|try
block|{
name|execute
argument_list|(
name|createAction
argument_list|(
name|ReloadAllData
operator|.
name|class
argument_list|)
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to load server: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
if|if
condition|(
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|execute
argument_list|(
name|createAction
argument_list|(
name|CheckAllOfferingsAction
operator|.
name|class
argument_list|)
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to check all offerings: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
name|setReady
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getMemUsage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|execute
argument_list|(
name|createAction
argument_list|(
name|ReloadAllData
operator|.
name|class
argument_list|)
argument_list|,
name|user
argument_list|,
operator|new
name|ServerCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
if|if
condition|(
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
condition|)
name|execute
argument_list|(
name|createAction
argument_list|(
name|CheckAllOfferingsAction
operator|.
name|class
argument_list|)
argument_list|,
name|user
argument_list|,
operator|new
name|ServerCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|setReady
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getMemUsage
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to check all offerings: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
else|else
block|{
name|setReady
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getMemUsage
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to load server: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|t
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMemUsage
parameter_list|()
block|{
name|Runtime
name|rt
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
decl_stmt|;
name|MemoryCounter
name|mc
init|=
operator|new
name|MemoryCounter
argument_list|()
decl_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"#,##0.00"
argument_list|)
decl_stmt|;
name|long
name|total
init|=
literal|0
decl_stmt|;
comment|// mc.estimate(this);
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Class
name|clazz
init|=
name|getClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|Field
index|[]
name|fields
init|=
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|fields
index|[
name|i
index|]
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|Object
name|obj
init|=
name|fields
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|long
name|est
init|=
name|estimate
argument_list|(
name|mc
argument_list|,
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|est
operator|>
literal|1024
condition|)
name|info
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"."
operator|+
name|fields
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|est
operator|/
literal|1024.0
argument_list|)
operator|+
literal|" kB"
operator|+
operator|(
name|obj
operator|instanceof
name|Map
condition|?
literal|" ("
operator|+
operator|(
operator|(
name|Map
operator|)
name|obj
operator|)
operator|.
name|size
argument_list|()
operator|+
literal|" records)"
else|:
name|obj
operator|instanceof
name|Collection
condition|?
literal|"("
operator|+
operator|(
operator|(
name|Collection
operator|)
name|obj
operator|)
operator|.
name|size
argument_list|()
operator|+
literal|" records)"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|total
operator|+=
name|est
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|ex
parameter_list|)
block|{
block|}
block|}
block|}
block|}
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
name|iLog
operator|.
name|info
argument_list|(
literal|"Total Allocated "
operator|+
name|df
operator|.
name|format
argument_list|(
name|total
operator|/
literal|1024.0
argument_list|)
operator|+
literal|" kB (of "
operator|+
name|df
operator|.
name|format
argument_list|(
operator|(
name|rt
operator|.
name|totalMemory
argument_list|()
operator|-
name|rt
operator|.
name|freeMemory
argument_list|()
operator|)
operator|/
literal|1048576.0
argument_list|)
operator|+
literal|" MB), details: "
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|info
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|total
return|;
block|}
specifier|private
name|long
name|estimate
parameter_list|(
name|MemoryCounter
name|mc
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Map
condition|)
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|<=
literal|1000
condition|)
return|return
name|mc
operator|.
name|estimate
argument_list|(
name|obj
argument_list|)
return|;
name|long
name|total
init|=
literal|0
decl_stmt|;
name|int
name|limit
init|=
name|map
operator|.
name|size
argument_list|()
operator|/
literal|5
decl_stmt|;
name|Iterator
name|it
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|total
operator|+=
name|mc
operator|.
name|estimate
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|+
name|mc
operator|.
name|estimate
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
operator|.
name|size
argument_list|()
operator|*
name|total
operator|/
name|limit
return|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|Collection
condition|)
block|{
name|Collection
name|col
init|=
operator|(
name|Collection
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|col
operator|.
name|size
argument_list|()
operator|<=
literal|1000
condition|)
return|return
name|mc
operator|.
name|estimate
argument_list|(
name|obj
argument_list|)
return|;
name|long
name|total
init|=
literal|0
decl_stmt|;
name|int
name|limit
init|=
name|col
operator|.
name|size
argument_list|()
operator|/
literal|5
decl_stmt|;
name|Iterator
name|it
init|=
name|col
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|val
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|total
operator|+=
name|mc
operator|.
name|estimate
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|col
operator|.
name|size
argument_list|()
operator|*
name|total
operator|/
name|limit
return|;
block|}
else|else
block|{
return|return
name|mc
operator|.
name|estimate
argument_list|(
name|obj
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMaster
parameter_list|()
block|{
return|return
operator|(
name|iMasterThread
operator|!=
literal|null
condition|?
name|iMasterThread
operator|.
name|isMaster
argument_list|()
else|:
literal|true
operator|)
return|;
block|}
specifier|protected
name|void
name|setReady
parameter_list|(
name|boolean
name|ready
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ReadyToServe"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReady
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
literal|"ReadyToServe"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseMasterLockIfHeld
parameter_list|()
block|{
if|if
condition|(
name|iMasterThread
operator|!=
literal|null
condition|)
name|iMasterThread
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DistanceMetric
name|getDistanceMetric
parameter_list|()
block|{
return|return
name|iDistanceMetric
return|;
block|}
annotation|@
name|Override
specifier|public
name|OverExpectedCriterion
name|getOverExpectedCriterion
parameter_list|()
block|{
try|try
block|{
name|Class
argument_list|<
name|OverExpectedCriterion
argument_list|>
name|overExpectedCriterionClass
init|=
operator|(
name|Class
argument_list|<
name|OverExpectedCriterion
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"OverExpectedCriterion.Class"
argument_list|,
name|AvoidUnbalancedWhenNoExpectations
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|overExpectedCriterionClass
operator|.
name|getConstructor
argument_list|(
name|DataProperties
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|getConfig
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Unable to create custom over-expected criterion ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"), using default."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|AvoidUnbalancedWhenNoExpectations
argument_list|(
name|getConfig
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AcademicSessionInfo
name|getAcademicSession
parameter_list|()
block|{
return|return
name|getProperty
argument_list|(
literal|"AcademicSession"
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCourseDetails
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|CourseDetailsProvider
name|provider
parameter_list|)
block|{
name|XCourse
name|course
init|=
name|getCourse
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
return|return
name|course
operator|==
literal|null
condition|?
literal|null
else|:
name|course
operator|.
name|getDetails
argument_list|(
name|getAcademicSession
argument_list|()
argument_list|,
name|provider
argument_list|)
return|;
block|}
specifier|protected
name|OnlineSectioningHelper
name|getCurrentHelper
parameter_list|()
block|{
name|LinkedList
argument_list|<
name|OnlineSectioningHelper
argument_list|>
name|h
init|=
name|sHelper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|h
operator|==
literal|null
operator|||
name|h
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|OnlineSectioningHelper
argument_list|(
literal|null
argument_list|)
return|;
return|return
name|h
operator|.
name|peek
argument_list|()
return|;
block|}
specifier|protected
name|void
name|setCurrentHelper
parameter_list|(
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|OnlineSectioningHelper
argument_list|>
name|h
init|=
name|sHelper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|h
operator|==
literal|null
condition|)
block|{
name|h
operator|=
operator|new
name|LinkedList
argument_list|<
name|OnlineSectioningHelper
argument_list|>
argument_list|()
expr_stmt|;
name|sHelper
operator|.
name|set
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
name|h
operator|.
name|push
argument_list|(
name|helper
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|releaseCurrentHelper
parameter_list|()
block|{
name|LinkedList
argument_list|<
name|OnlineSectioningHelper
argument_list|>
name|h
init|=
name|sHelper
operator|.
name|get
argument_list|()
decl_stmt|;
name|h
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|h
operator|.
name|isEmpty
argument_list|()
condition|)
name|sHelper
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|OnlineSectioningLog
operator|.
name|Entity
name|getSystemUser
parameter_list|()
block|{
return|return
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|StudentClassEnrollment
operator|.
name|SystemChange
operator|.
name|SYSTEM
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|StudentClassEnrollment
operator|.
name|SystemChange
operator|.
name|SYSTEM
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|OTHER
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|X
extends|extends
name|OnlineSectioningAction
parameter_list|>
name|X
name|createAction
parameter_list|(
name|Class
argument_list|<
name|X
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|iActionFactory
operator|.
name|createAction
argument_list|(
name|clazz
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|E
name|execute
parameter_list|(
name|OnlineSectioningAction
argument_list|<
name|E
argument_list|>
name|action
parameter_list|,
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|)
throws|throws
name|SectioningException
block|{
name|long
name|c0
init|=
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
decl_stmt|;
name|String
name|cacheMode
init|=
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
name|action
operator|.
name|name
argument_list|()
operator|+
literal|".CacheMode"
argument_list|,
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"CacheMode"
argument_list|)
argument_list|)
decl_stmt|;
name|OnlineSectioningHelper
name|h
init|=
operator|new
name|OnlineSectioningHelper
argument_list|(
name|user
argument_list|,
name|cacheMode
operator|!=
literal|null
condition|?
name|CacheMode
operator|.
name|valueOf
argument_list|(
name|cacheMode
argument_list|)
else|:
name|action
operator|instanceof
name|HasCacheMode
condition|?
operator|(
operator|(
name|HasCacheMode
operator|)
name|action
operator|)
operator|.
name|getCacheMode
argument_list|()
else|:
name|CacheMode
operator|.
name|IGNORE
argument_list|)
decl_stmt|;
try|try
block|{
name|setCurrentHelper
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|h
operator|.
name|addMessageHandler
argument_list|(
operator|new
name|OnlineSectioningHelper
operator|.
name|DefaultMessageLogger
argument_list|(
name|LogFactory
operator|.
name|getLog
argument_list|(
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|action
operator|.
name|name
argument_list|()
operator|+
literal|"["
operator|+
name|getAcademicSession
argument_list|()
operator|.
name|toCompactString
argument_list|()
operator|+
literal|"]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|h
operator|.
name|addAction
argument_list|(
name|action
argument_list|,
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|E
name|ret
init|=
name|action
operator|.
name|execute
argument_list|(
name|this
argument_list|,
name|h
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|hasResult
argument_list|()
condition|)
block|{
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|NULL
argument_list|)
expr_stmt|;
if|else if
condition|(
name|ret
operator|instanceof
name|Boolean
condition|)
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
operator|(
name|Boolean
operator|)
name|ret
condition|?
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|TRUE
else|:
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
else|else
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|)
block|{
name|h
operator|.
name|info
argument_list|(
literal|"Execution failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|h
operator|.
name|warn
argument_list|(
literal|"Execution failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|h
operator|.
name|error
argument_list|(
literal|"Execution failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|h
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FAILURE
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|instanceof
name|SectioningException
condition|)
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|h
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setEndTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|setCpuTime
argument_list|(
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
operator|-
name|c0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|hasStudent
argument_list|()
operator|||
operator|!
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|hasExternalId
argument_list|()
operator|)
operator|&&
name|user
operator|!=
literal|null
operator|&&
name|user
operator|.
name|hasExternalId
argument_list|()
operator|&&
name|user
operator|.
name|hasType
argument_list|()
operator|&&
name|user
operator|.
name|getType
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|STUDENT
condition|)
block|{
if|if
condition|(
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|hasStudent
argument_list|()
condition|)
block|{
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|getStudentBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|user
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|user
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|iLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|iLog
operator|.
name|debug
argument_list|(
literal|"Executed: "
operator|+
name|h
operator|.
name|getLog
argument_list|()
operator|+
literal|" ("
operator|+
name|h
operator|.
name|getLog
argument_list|()
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|+
literal|" bytes)"
argument_list|)
expr_stmt|;
name|OnlineSectioningLogger
operator|.
name|getInstance
argument_list|()
operator|.
name|record
argument_list|(
name|h
operator|.
name|getLog
argument_list|()
argument_list|)
expr_stmt|;
name|releaseCurrentHelper
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|void
name|execute
parameter_list|(
specifier|final
name|OnlineSectioningAction
argument_list|<
name|E
argument_list|>
name|action
parameter_list|,
specifier|final
name|OnlineSectioningLog
operator|.
name|Entity
name|user
parameter_list|,
specifier|final
name|ServerCallback
argument_list|<
name|E
argument_list|>
name|callback
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|iExecutor
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
name|execute
argument_list|(
name|action
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|final
name|String
name|locale
init|=
name|Localization
operator|.
name|getLocale
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|iExecutorQueue
init|)
block|{
name|iExecutorQueue
operator|.
name|offer
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Localization
operator|.
name|setLocale
argument_list|(
name|locale
argument_list|)
expr_stmt|;
try|try
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
name|execute
argument_list|(
name|action
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|action
operator|.
name|name
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iExecutorQueue
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|AsyncExecutor
extends|extends
name|Thread
block|{
specifier|private
name|boolean
name|iStop
init|=
literal|false
decl_stmt|;
specifier|public
name|AsyncExecutor
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
name|setName
argument_list|(
literal|"AsyncExecutor["
operator|+
name|session
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ApplicationProperties
operator|.
name|setSessionId
argument_list|(
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|Runnable
name|job
decl_stmt|;
while|while
condition|(
operator|!
name|iStop
condition|)
block|{
synchronized|synchronized
init|(
name|iExecutorQueue
init|)
block|{
name|job
operator|=
name|iExecutorQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"Executor is waiting for a new job..."
argument_list|)
expr_stmt|;
name|iExecutorQueue
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
continue|continue;
block|}
block|}
name|job
operator|.
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|_RootDAO
operator|.
name|closeCurrentThreadSessions
argument_list|()
condition|)
name|iLog
operator|.
name|debug
argument_list|(
literal|"Job "
operator|+
name|job
operator|+
literal|" did not close current-thread hibernate session."
argument_list|)
expr_stmt|;
block|}
name|iLog
operator|.
name|info
argument_list|(
literal|"Executor stopped."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ApplicationProperties
operator|.
name|setSessionId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Localization
operator|.
name|removeLocale
argument_list|()
expr_stmt|;
name|Formats
operator|.
name|removeFormats
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|unload
parameter_list|()
block|{
if|if
condition|(
name|iExecutor
operator|!=
literal|null
condition|)
block|{
name|iExecutor
operator|.
name|iStop
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|iExecutorQueue
init|)
block|{
name|iExecutorQueue
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iMasterThread
operator|!=
literal|null
condition|)
name|iMasterThread
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DataProperties
name|getConfig
parameter_list|()
block|{
return|return
name|iConfig
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|persistExpectedSpaces
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iOfferingsToPersistExpectedSpaces
init|)
block|{
name|iOfferingsToPersistExpectedSpaces
operator|.
name|add
argument_list|(
operator|new
name|CacheElement
argument_list|<
name|Long
argument_list|>
argument_list|(
name|offeringId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|getOfferingsToPersistExpectedSpaces
parameter_list|(
name|long
name|minimalAge
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|offeringIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|current
init|=
name|JProf
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|iOfferingsToPersistExpectedSpaces
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|CacheElement
argument_list|<
name|Long
argument_list|>
argument_list|>
name|i
init|=
name|iOfferingsToPersistExpectedSpaces
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CacheElement
argument_list|<
name|Long
argument_list|>
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|-
name|c
operator|.
name|created
argument_list|()
operator|>=
name|minimalAge
condition|)
block|{
name|offeringIds
operator|.
name|add
argument_list|(
name|c
operator|.
name|element
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|offeringIds
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needPersistExpectedSpaces
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iOfferingsToPersistExpectedSpaces
init|)
block|{
return|return
name|iOfferingsToPersistExpectedSpaces
operator|.
name|remove
argument_list|(
name|offeringId
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkDeadline
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|XTime
name|sectionTime
parameter_list|,
name|Deadline
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ApplicationProperty
operator|.
name|OnlineSchedulingCheckDeadlines
operator|.
name|isTrue
argument_list|()
condition|)
return|return
literal|true
return|;
name|XCourse
name|info
init|=
name|getCourse
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
name|int
name|deadline
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|NEW
case|:
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getLastWeekToEnroll
argument_list|()
operator|!=
literal|null
condition|)
name|deadline
operator|=
name|info
operator|.
name|getLastWeekToEnroll
argument_list|()
expr_stmt|;
else|else
name|deadline
operator|=
name|getAcademicSession
argument_list|()
operator|.
name|getLastWeekToEnroll
argument_list|()
expr_stmt|;
break|break;
case|case
name|CHANGE
case|:
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getLastWeekToChange
argument_list|()
operator|!=
literal|null
condition|)
name|deadline
operator|=
name|info
operator|.
name|getLastWeekToChange
argument_list|()
expr_stmt|;
else|else
name|deadline
operator|=
name|getAcademicSession
argument_list|()
operator|.
name|getLastWeekToChange
argument_list|()
expr_stmt|;
break|break;
case|case
name|DROP
case|:
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getLastWeekToDrop
argument_list|()
operator|!=
literal|null
condition|)
name|deadline
operator|=
name|info
operator|.
name|getLastWeekToDrop
argument_list|()
expr_stmt|;
else|else
name|deadline
operator|=
name|getAcademicSession
argument_list|()
operator|.
name|getLastWeekToDrop
argument_list|()
expr_stmt|;
break|break;
block|}
name|long
name|start
init|=
name|getAcademicSession
argument_list|()
operator|.
name|getSessionBeginDate
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|now
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|week
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|now
operator|>=
name|start
condition|)
block|{
name|week
operator|=
operator|(
name|int
operator|)
operator|(
operator|(
name|now
operator|-
name|start
operator|)
operator|/
operator|(
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|7
operator|)
operator|)
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|week
operator|=
operator|-
operator|(
name|int
operator|)
operator|(
operator|(
name|start
operator|-
name|now
operator|)
operator|/
operator|(
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|7
operator|)
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|sectionTime
operator|==
literal|null
condition|)
return|return
name|week
operator|<=
name|deadline
return|;
comment|// no time, just compare week and the deadline
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|long
name|time
init|=
name|getAcademicSession
argument_list|()
operator|.
name|getDatePatternFirstDate
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
operator|(
name|long
operator|)
name|sectionTime
operator|.
name|getWeeks
argument_list|()
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
operator|*
operator|(
literal|1000l
operator|*
literal|60l
operator|*
literal|60l
operator|*
literal|24l
operator|)
decl_stmt|;
if|if
condition|(
name|time
operator|>=
name|start
condition|)
block|{
name|offset
operator|=
operator|(
name|int
operator|)
operator|(
operator|(
name|time
operator|-
name|start
operator|)
operator|/
operator|(
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|7
operator|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|offset
operator|=
operator|-
operator|(
name|int
operator|)
operator|(
operator|(
name|start
operator|-
name|time
operator|)
operator|/
operator|(
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|7
operator|)
operator|)
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|week
operator|<=
name|deadline
operator|+
name|offset
return|;
block|}
specifier|private
specifier|static
class|class
name|ServerConfig
extends|extends
name|DataProperties
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|ServerConfig
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setProperty
argument_list|(
literal|"Neighbour.BranchAndBoundTimeout"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"Suggestions.Timeout"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"Extensions.Classes"
argument_list|,
name|DistanceConflict
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|";"
operator|+
name|TimeOverlapsCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"StudentWeights.Class"
argument_list|,
name|StudentSchedulingAssistantWeights
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"StudentWeights.LeftoverSpread"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"StudentWeights.BalancingFactor"
argument_list|,
literal|"0.0"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"Reservation.CanAssignOverTheLimit"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"General.SaveDefaultProperties"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"General.StartUpDate"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"check-assignment.ExcludeLockedOfferings"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"check-offering.ExcludeLockedOfferings"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"approve-enrollments.ExcludeLockedOfferings"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"reject-enrollments.ExcludeLockedOfferings"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"status-change.LockOfferings"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"student-email.LockOfferings"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"eligibility.LockOfferings"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|SolverParameterDef
name|def
range|:
operator|(
name|List
argument_list|<
name|SolverParameterDef
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from SolverParameterDef x where x.group.type = :type and x.default is not null"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"type"
argument_list|,
name|SolverParameterGroup
operator|.
name|SolverType
operator|.
name|STUDENT
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|setProperty
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|def
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SolverPredefinedSetting
name|settings
init|=
operator|(
name|SolverPredefinedSetting
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from SolverPredefinedSetting x where x.name = :reference"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"reference"
argument_list|,
literal|"StudentSct.Online"
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|settings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SolverParameter
name|param
range|:
name|settings
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|isVisible
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getSolverType
argument_list|()
operator|!=
name|SolverParameterGroup
operator|.
name|SolverType
operator|.
name|STUDENT
condition|)
continue|continue;
name|setProperty
argument_list|(
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setProperty
argument_list|(
literal|"General.SettingsId"
argument_list|,
name|settings
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getProperty
argument_list|(
literal|"Distances.Ellipsoid"
argument_list|)
operator|==
literal|null
operator|||
literal|"DEFAULT"
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
literal|"Distances.Ellipsoid"
argument_list|)
argument_list|)
condition|)
name|setProperty
argument_list|(
literal|"Distances.Ellipsoid"
argument_list|,
name|ApplicationProperty
operator|.
name|DistanceEllipsoid
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Priority"
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
literal|"StudentWeights.Mode"
argument_list|)
argument_list|)
condition|)
name|setProperty
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"Equal"
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
literal|"StudentWeights.Mode"
argument_list|)
argument_list|)
condition|)
name|setProperty
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|value
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingParameter
operator|.
name|value
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
name|super
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
else|:
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingParameter
operator|.
name|value
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
name|super
operator|.
name|getProperty
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
else|:
name|value
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
literal|"local"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|XEnrollments
name|getEnrollments
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
return|return
operator|new
name|XEnrollments
argument_list|(
name|offeringId
argument_list|,
name|getRequests
argument_list|(
name|offeringId
argument_list|)
argument_list|)
return|;
block|}
specifier|private
class|class
name|MasterAcquiringThread
extends|extends
name|Thread
block|{
specifier|private
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
name|iLock
decl_stmt|;
specifier|private
name|AtomicBoolean
name|iMaster
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|iStop
init|=
literal|false
decl_stmt|;
specifier|private
name|OnlineSectioningServerContext
name|iContext
decl_stmt|;
specifier|private
name|MasterAcquiringThread
parameter_list|(
name|OnlineSectioningServerContext
name|context
parameter_list|)
block|{
name|iContext
operator|=
name|context
expr_stmt|;
name|setName
argument_list|(
literal|"AcquiringMasterLock["
operator|+
name|getAcademicSession
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iLock
operator|=
name|context
operator|.
name|getLockService
argument_list|()
operator|.
name|getLock
argument_list|(
name|getAcademicSession
argument_list|()
operator|.
name|toCompactString
argument_list|()
operator|+
literal|"[master]"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMaster
parameter_list|()
block|{
return|return
name|iMaster
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|void
name|executeLoadOnMaster
parameter_list|()
block|{
synchronized|synchronized
init|(
name|iExecutorQueue
init|)
block|{
name|iExecutorQueue
operator|.
name|offer
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|loadOnMaster
argument_list|(
name|iContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"load-on-master"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iExecutorQueue
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|iLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
name|iMaster
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iLog
operator|.
name|info
argument_list|(
literal|"Loading server..."
argument_list|)
expr_stmt|;
name|executeLoadOnMaster
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|iStop
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|iMaster
operator|.
name|get
argument_list|()
condition|)
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"Waiting for a master lock..."
argument_list|)
expr_stmt|;
name|iLock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|iMaster
init|)
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"I am the master."
argument_list|)
expr_stmt|;
name|iMaster
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
literal|"ReloadIsNeeded"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
argument_list|)
condition|)
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"Reloading server..."
argument_list|)
expr_stmt|;
name|executeLoadOnMaster
argument_list|()
expr_stmt|;
block|}
name|iMaster
operator|.
name|wait
argument_list|()
expr_stmt|;
name|iMaster
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|iLog
operator|.
name|info
argument_list|(
literal|"I am no longer the master."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|iMaster
operator|.
name|get
argument_list|()
condition|)
block|{
name|iMaster
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|iLog
operator|.
name|info
argument_list|(
literal|"I am no longer the master."
argument_list|)
expr_stmt|;
block|}
name|iLog
operator|.
name|info
argument_list|(
literal|"No longer looking for a master."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|release
parameter_list|()
block|{
synchronized|synchronized
init|(
name|iMaster
init|)
block|{
if|if
condition|(
name|iMaster
operator|.
name|get
argument_list|()
condition|)
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"Releasing master lock..."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|offeringIds
init|=
name|getOfferingsToPersistExpectedSpaces
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|offeringIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"There are "
operator|+
name|offeringIds
operator|.
name|size
argument_list|()
operator|+
literal|" offerings that need expected spaces persisted."
argument_list|)
expr_stmt|;
name|execute
argument_list|(
name|createAction
argument_list|(
name|PersistExpectedSpacesAction
operator|.
name|class
argument_list|)
operator|.
name|forOfferings
argument_list|(
name|offeringIds
argument_list|)
argument_list|,
name|getSystemUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iMaster
operator|.
name|notify
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|iStop
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|release
argument_list|()
condition|)
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|E
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|E
name|defaultValue
parameter_list|)
block|{
name|E
name|ret
init|=
operator|(
name|E
operator|)
name|iProperties
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|(
name|ret
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|ret
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|E
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|iProperties
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
else|else
name|iProperties
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

