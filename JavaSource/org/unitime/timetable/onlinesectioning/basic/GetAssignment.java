begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|AssignmentComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|AssignmentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|SctAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|expectations
operator|.
name|OverExpectedCriterion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomCourseRequestsValidationHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|StudentEnrollmentProvider
operator|.
name|EnrollmentError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|StudentEnrollmentProvider
operator|.
name|EnrollmentFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XExpectations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XFreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRoom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|SectioningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|GetAssignment
implements|implements
name|OnlineSectioningAction
argument_list|<
name|ClassAssignmentInterface
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iStudentId
decl_stmt|;
specifier|private
name|List
argument_list|<
name|EnrollmentFailure
argument_list|>
name|iMessages
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ErrorMessage
argument_list|>
name|iErrors
decl_stmt|;
specifier|private
name|boolean
name|iIncludeRequest
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iCustomCheck
init|=
literal|false
decl_stmt|;
specifier|public
name|GetAssignment
name|forStudent
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|iStudentId
operator|=
name|studentId
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|GetAssignment
name|withMessages
parameter_list|(
name|List
argument_list|<
name|EnrollmentFailure
argument_list|>
name|messages
parameter_list|)
block|{
name|iMessages
operator|=
name|messages
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|GetAssignment
name|withErrors
parameter_list|(
name|Set
argument_list|<
name|ErrorMessage
argument_list|>
name|errors
parameter_list|)
block|{
name|iErrors
operator|=
name|errors
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|GetAssignment
name|withRequest
parameter_list|(
name|boolean
name|includeRequest
parameter_list|)
block|{
name|iIncludeRequest
operator|=
name|includeRequest
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|GetAssignment
name|withCustomCheck
parameter_list|(
name|boolean
name|customCheck
parameter_list|)
block|{
name|iCustomCheck
operator|=
name|customCheck
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClassAssignmentInterface
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|server
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|iStudentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ClassAssignmentInterface
name|ret
init|=
name|computeAssignment
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|student
operator|.
name|getRequests
argument_list|()
argument_list|,
name|iMessages
argument_list|,
name|iErrors
argument_list|,
name|iIncludeRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|hasRequest
argument_list|()
operator|&&
name|iCustomCheck
operator|&&
name|CustomCourseRequestsValidationHolder
operator|.
name|hasProvider
argument_list|()
condition|)
name|CustomCourseRequestsValidationHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|check
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|ret
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|CourseSection
argument_list|>
name|fillUnavailabilitiesIn
parameter_list|(
name|ClassAssignmentInterface
name|ret
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|eb
parameter_list|)
block|{
if|if
condition|(
name|student
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
operator|||
name|student
operator|.
name|getExternalId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|CourseSection
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseSection
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Long
argument_list|>
name|offeringIds
init|=
name|server
operator|.
name|getInstructedOfferings
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offeringIds
operator|!=
literal|null
operator|&&
operator|!
name|offeringIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeSet
argument_list|<
name|XOffering
argument_list|>
name|offerings
init|=
operator|new
name|TreeSet
argument_list|<
name|XOffering
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|XOffering
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|XOffering
name|o1
parameter_list|,
name|XOffering
name|o2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|o1
operator|.
name|getOfferingId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getOfferingId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|offeringId
range|:
name|offeringIds
control|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
name|offerings
operator|.
name|add
argument_list|(
name|offering
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|XOffering
name|offering
range|:
name|offerings
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|ca
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|()
decl_stmt|;
name|XCourse
name|course
init|=
name|offering
operator|.
name|getControllingCourse
argument_list|()
decl_stmt|;
name|XEnrollments
name|enrollments
init|=
name|server
operator|.
name|getEnrollments
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|.
name|isOfferingLocked
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
name|ca
operator|.
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setWaitListed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTeachingAssignment
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setHasCrossList
argument_list|(
name|offering
operator|.
name|hasCrossList
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|added
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|XSection
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|isCancelled
argument_list|()
condition|)
for|for
control|(
name|XInstructor
name|instructor
range|:
name|section
operator|.
name|getAllInstructors
argument_list|()
control|)
if|if
condition|(
name|student
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|&&
name|added
operator|.
name|add
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|eb
operator|!=
literal|null
condition|)
name|eb
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|subpart
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExternalId
argument_list|(
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCancelled
argument_list|(
name|section
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|enrollments
operator|.
name|countEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
block|,
name|section
operator|.
name|getLimit
argument_list|()
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XRoom
name|room
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|a
operator|.
name|addRoom
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|XInstructor
name|instr
range|:
name|section
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|a
operator|.
name|addInstructor
argument_list|(
name|instr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmail
argument_list|(
name|instr
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|instr
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getParentId
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|offering
operator|.
name|getSection
argument_list|(
name|section
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setHasAlternatives
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|course
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCredit
argument_list|(
name|subpart
operator|.
name|getCredit
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Float
name|creditOverride
init|=
name|section
operator|.
name|getCreditOverride
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|creditOverride
operator|!=
literal|null
condition|)
name|a
operator|.
name|setCredit
argument_list|(
name|FixedCreditUnitConfig
operator|.
name|formatCredit
argument_list|(
name|creditOverride
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setTeachingAssignment
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|a
operator|.
name|setInstructing
argument_list|(
name|instructor
operator|.
name|isInstructing
argument_list|()
argument_list|)
expr_stmt|;
name|sections
operator|.
name|add
argument_list|(
operator|new
name|CourseSection
argument_list|(
name|course
argument_list|,
name|section
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sections
return|;
block|}
specifier|public
specifier|static
name|ClassAssignmentInterface
name|computeAssignment
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|List
argument_list|<
name|XRequest
argument_list|>
name|studentRequests
parameter_list|,
name|List
argument_list|<
name|EnrollmentFailure
argument_list|>
name|messages
parameter_list|,
name|Set
argument_list|<
name|ErrorMessage
argument_list|>
name|errors
parameter_list|,
name|boolean
name|includeRequest
parameter_list|)
block|{
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|df
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_REQUEST
argument_list|)
decl_stmt|;
name|DistanceMetric
name|m
init|=
name|server
operator|.
name|getDistanceMetric
argument_list|()
decl_stmt|;
name|OverExpectedCriterion
name|overExp
init|=
name|server
operator|.
name|getOverExpectedCriterion
argument_list|()
decl_stmt|;
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|helper
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|action
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|getStudentBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|getStudentBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
name|ret
init|=
operator|new
name|ClassAssignmentInterface
argument_list|()
decl_stmt|;
name|int
name|nrUnassignedCourses
init|=
literal|0
decl_stmt|,
name|nrAssignedAlt
init|=
literal|0
decl_stmt|;
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|stored
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|stored
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|STORED
argument_list|)
expr_stmt|;
name|boolean
name|setReadOnly
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingMakeAssignedRequestReadOnly
operator|.
name|isTrue
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
operator|&&
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
condition|)
name|setReadOnly
operator|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingMakeAssignedRequestReadOnlyIfAdmin
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|CourseSection
argument_list|>
name|unavailabilities
init|=
name|fillUnavailabilitiesIn
argument_list|(
name|ret
argument_list|,
name|student
argument_list|,
name|server
argument_list|,
name|helper
argument_list|,
name|stored
argument_list|)
decl_stmt|;
for|for
control|(
name|XRequest
name|request
range|:
name|studentRequests
control|)
block|{
name|action
operator|.
name|addRequest
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|ca
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|r
init|=
operator|(
name|XCourseRequest
operator|)
name|request
decl_stmt|;
name|XEnrollment
name|enrollment
init|=
name|r
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
name|XCourseId
name|courseId
init|=
operator|(
name|enrollment
operator|==
literal|null
condition|?
name|r
operator|.
name|getCourseIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
name|enrollment
operator|)
decl_stmt|;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|courseId
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|XExpectations
name|expectations
init|=
name|server
operator|.
name|getExpectations
argument_list|(
name|courseId
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|XCourse
name|course
init|=
name|offering
operator|.
name|getCourse
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|isAlternative
argument_list|()
operator|&&
name|nrAssignedAlt
operator|>=
name|nrUnassignedCourses
operator|&&
name|enrollment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|request
operator|.
name|isAlternative
argument_list|()
operator|&&
name|enrollment
operator|!=
literal|null
condition|)
name|nrAssignedAlt
operator|++
expr_stmt|;
if|if
condition|(
name|server
operator|.
name|isOfferingLocked
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
name|ca
operator|.
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
name|enrollment
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setWaitListed
argument_list|(
name|r
operator|.
name|isWaitlist
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setEnrollmentMessage
argument_list|(
name|r
operator|.
name|getEnrollmentMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setRequestedDate
argument_list|(
name|r
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setHasCrossList
argument_list|(
name|offering
operator|.
name|hasCrossList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|==
literal|null
condition|)
block|{
name|TreeSet
argument_list|<
name|Enrollment
argument_list|>
name|overlap
init|=
operator|new
name|TreeSet
argument_list|<
name|Enrollment
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Enrollment
name|o1
parameter_list|,
name|Enrollment
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getRequest
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getRequest
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|>
name|overlapingSections
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
init|=
operator|new
name|AssignmentMap
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Enrollment
argument_list|>
name|avEnrls
init|=
name|SectioningRequest
operator|.
name|convert
argument_list|(
name|assignment
argument_list|,
name|r
argument_list|,
name|server
argument_list|)
operator|.
name|getAvaiableEnrollmentsSkipSameTime
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|e
init|=
name|avEnrls
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrl
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|q
range|:
name|enrl
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|q
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
continue|continue;
name|Enrollment
name|x
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|SctAssignment
argument_list|>
name|i
init|=
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SctAssignment
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|isOverlapping
argument_list|(
name|enrl
operator|.
name|getAssignments
argument_list|()
argument_list|)
condition|)
block|{
name|overlap
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|x
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Section
argument_list|>
name|ss
init|=
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
name|ss
operator|=
operator|new
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|(
operator|new
name|AssignmentComparator
argument_list|<
name|Section
argument_list|,
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|overlapingSections
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
name|ss
operator|.
name|add
argument_list|(
operator|(
name|Section
operator|)
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|Enrollment
name|q
range|:
name|overlap
control|)
block|{
if|if
condition|(
name|q
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|ca
operator|.
name|addOverlap
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toString
argument_list|(
operator|(
name|FreeTimeRequest
operator|)
name|q
operator|.
name|getRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|q
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Course
name|o
init|=
name|q
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|String
name|ov
init|=
name|MSG
operator|.
name|course
argument_list|(
name|o
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|o
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|s
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ov
operator|+=
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|ov
operator|+=
literal|","
expr_stmt|;
block|}
name|ca
operator|.
name|addOverlap
argument_list|(
name|ov
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|avEnrls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ca
operator|.
name|setNotAvailable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|requests
init|=
name|server
operator|.
name|getRequests
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XCourseRequest
name|x
range|:
name|requests
control|)
if|if
condition|(
name|x
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
name|enrl
operator|++
expr_stmt|;
block|}
name|ca
operator|.
name|setFull
argument_list|(
name|enrl
operator|>=
name|course
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|isWaitlist
argument_list|()
condition|)
name|nrUnassignedCourses
operator|++
expr_stmt|;
name|int
name|alt
init|=
name|nrUnassignedCourses
decl_stmt|;
for|for
control|(
name|XRequest
name|q
range|:
name|studentRequests
control|)
block|{
if|if
condition|(
name|q
operator|instanceof
name|XCourseRequest
operator|&&
operator|!
name|q
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|XEnrollment
name|otherEnrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|q
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherEnrollment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|q
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
if|if
condition|(
operator|--
name|alt
operator|==
literal|0
condition|)
block|{
name|XOffering
name|otherOffering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|otherEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|XCourse
name|otherCourse
init|=
name|otherOffering
operator|.
name|getCourse
argument_list|(
name|otherEnrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|ca
operator|.
name|setInstead
argument_list|(
name|MSG
operator|.
name|course
argument_list|(
name|otherCourse
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|otherCourse
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|offering
operator|.
name|getSections
argument_list|(
name|enrollment
argument_list|)
decl_stmt|;
name|boolean
name|hasAlt
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getCourseIds
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|offering
operator|.
name|getConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|XSubpart
name|subpart
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
name|XEnrollments
name|enrollments
init|=
name|server
operator|.
name|getEnrollments
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
block|{
name|stored
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
name|enrollment
argument_list|)
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
expr_stmt|;
name|XSubpart
name|subpart
init|=
name|offering
operator|.
name|getSubpart
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|subpart
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExternalId
argument_list|(
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCancelled
argument_list|(
name|section
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|enrollments
operator|.
name|countEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
block|,
name|section
operator|.
name|getLimit
argument_list|()
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XRoom
name|room
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|a
operator|.
name|addRoom
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|XInstructor
name|instructor
range|:
name|section
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|a
operator|.
name|addInstructor
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmail
argument_list|(
name|instructor
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|instructor
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getParentId
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|offering
operator|.
name|getSection
argument_list|(
name|section
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setHasAlternatives
argument_list|(
name|hasAlt
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|course
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCredit
argument_list|(
name|subpart
operator|.
name|getCredit
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Float
name|creditOverride
init|=
name|section
operator|.
name|getCreditOverride
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|creditOverride
operator|!=
literal|null
condition|)
name|a
operator|.
name|setCredit
argument_list|(
name|FixedCreditUnitConfig
operator|.
name|formatCredit
argument_list|(
name|creditOverride
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setEnrolledDate
argument_list|(
name|enrollment
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|dist
init|=
literal|0
decl_stmt|;
name|String
name|from
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|overlap
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|q
range|:
name|studentRequests
control|)
block|{
if|if
condition|(
name|q
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|otherEnrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|q
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherEnrollment
operator|==
literal|null
condition|)
continue|continue;
name|XOffering
name|otherOffering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|otherEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|otherSection
range|:
name|otherOffering
operator|.
name|getSections
argument_list|(
name|otherEnrollment
argument_list|)
control|)
block|{
if|if
condition|(
name|otherSection
operator|.
name|equals
argument_list|(
name|section
argument_list|)
operator|||
name|otherSection
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|int
name|d
init|=
name|otherSection
operator|.
name|getDistanceInMinutes
argument_list|(
name|section
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>
name|dist
condition|)
block|{
name|dist
operator|=
name|d
expr_stmt|;
name|from
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|XRoom
argument_list|>
name|k
init|=
name|otherSection
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|from
operator|+=
name|k
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|k
operator|.
name|hasNext
argument_list|()
condition|?
literal|", "
else|:
literal|""
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|otherSection
operator|.
name|isDistanceConflict
argument_list|(
name|student
argument_list|,
name|section
argument_list|,
name|m
argument_list|)
condition|)
name|a
operator|.
name|setDistanceConflict
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|otherSection
operator|.
name|getTime
argument_list|()
argument_list|)
operator|&&
operator|!
name|section
operator|.
name|isToIgnoreStudentConflictsWith
argument_list|(
name|offering
operator|.
name|getDistributions
argument_list|()
argument_list|,
name|otherSection
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
name|XCourse
name|otherCourse
init|=
name|otherOffering
operator|.
name|getCourse
argument_list|(
name|otherEnrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|XSubpart
name|otherSubpart
init|=
name|otherOffering
operator|.
name|getSubpart
argument_list|(
name|otherSection
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
name|overlap
operator|.
name|add
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|otherCourse
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|otherCourse
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|otherSubpart
operator|.
name|getName
argument_list|()
argument_list|,
name|otherSection
operator|.
name|getName
argument_list|(
name|otherCourse
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|unavailabilities
operator|!=
literal|null
condition|)
for|for
control|(
name|CourseSection
name|cs
range|:
name|unavailabilities
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|cs
operator|.
name|getSection
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|overlap
operator|.
name|add
argument_list|(
name|MSG
operator|.
name|teachingAssignment
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|cs
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|cs
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|cs
operator|.
name|getSection
argument_list|()
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|cs
operator|.
name|getSection
argument_list|()
operator|.
name|getName
argument_list|(
name|cs
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|overlap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|note
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|j
init|=
name|overlap
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|n
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|note
operator|==
literal|null
condition|)
name|note
operator|=
name|MSG
operator|.
name|noteAllowedOverlapFirst
argument_list|(
name|n
argument_list|)
expr_stmt|;
if|else if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
name|note
operator|+=
name|MSG
operator|.
name|noteAllowedOverlapMiddle
argument_list|(
name|n
argument_list|)
expr_stmt|;
else|else
name|note
operator|+=
name|MSG
operator|.
name|noteAllowedOverlapLast
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setOverlapNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setBackToBackDistance
argument_list|(
name|dist
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBackToBackRooms
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSaved
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|consent
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|.
name|getConsentLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|consent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getApproval
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|setParentSection
argument_list|(
name|MSG
operator|.
name|consentApproved
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|enrollment
operator|.
name|getApproval
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|a
operator|.
name|setParentSection
argument_list|(
name|MSG
operator|.
name|consentWaiting
argument_list|(
name|consent
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|a
operator|.
name|setExpected
argument_list|(
name|overExp
operator|.
name|getExpected
argument_list|(
name|section
operator|.
name|getLimit
argument_list|()
argument_list|,
name|expectations
operator|.
name|getExpectedSpace
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|messages
operator|!=
literal|null
condition|)
block|{
name|XEnrollments
name|enrollments
init|=
name|server
operator|.
name|getEnrollments
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|f
label|:
for|for
control|(
name|EnrollmentFailure
name|f
range|:
name|messages
control|)
block|{
name|XSection
name|section
init|=
name|f
operator|.
name|getSection
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
range|:
name|ca
operator|.
name|getClassAssignments
argument_list|()
control|)
if|if
condition|(
name|f
operator|.
name|getSection
argument_list|()
operator|.
name|getSectionId
argument_list|()
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
block|{
name|a
operator|.
name|setError
argument_list|(
name|f
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue
name|f
continue|;
block|}
name|ca
operator|.
name|setAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
expr_stmt|;
name|XSubpart
name|subpart
init|=
name|offering
operator|.
name|getSubpart
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|subpart
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExternalId
argument_list|(
name|section
operator|.
name|getExternalId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCancelled
argument_list|(
name|section
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|enrollments
operator|.
name|countEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
block|,
name|section
operator|.
name|getLimit
argument_list|()
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XRoom
name|room
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|a
operator|.
name|addRoom
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|XInstructor
name|instructor
range|:
name|section
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|a
operator|.
name|addInstructor
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmail
argument_list|(
name|instructor
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|instructor
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getParentId
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|offering
operator|.
name|getSection
argument_list|(
name|section
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|course
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCredit
argument_list|(
name|subpart
operator|.
name|getCredit
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Float
name|creditOverride
init|=
name|section
operator|.
name|getCreditOverride
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|creditOverride
operator|!=
literal|null
condition|)
name|a
operator|.
name|setCredit
argument_list|(
name|FixedCreditUnitConfig
operator|.
name|formatCredit
argument_list|(
name|creditOverride
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|dist
init|=
literal|0
decl_stmt|;
name|String
name|from
init|=
literal|null
decl_stmt|;
name|a
operator|.
name|setBackToBackDistance
argument_list|(
name|dist
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBackToBackRooms
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSaved
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDummy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|a
operator|.
name|setError
argument_list|(
name|f
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExpected
argument_list|(
name|overExp
operator|.
name|getExpected
argument_list|(
name|section
operator|.
name|getLimit
argument_list|()
argument_list|,
name|expectations
operator|.
name|getExpectedSpace
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|errors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ErrorMessage
name|f
range|:
name|errors
control|)
block|{
if|if
condition|(
operator|!
name|ca
operator|.
name|getCourseName
argument_list|()
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
range|:
name|ca
operator|.
name|getClassAssignments
argument_list|()
control|)
if|if
condition|(
name|a
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getSection
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|hasError
argument_list|()
condition|)
name|a
operator|.
name|setError
argument_list|(
name|a
operator|.
name|getError
argument_list|()
operator|+
literal|"\n"
operator|+
name|f
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|a
operator|.
name|setError
argument_list|(
name|f
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|request
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|r
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|request
decl_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|XRequest
name|q
range|:
name|studentRequests
control|)
block|{
if|if
condition|(
name|q
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|otherEnrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|q
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherEnrollment
operator|==
literal|null
condition|)
continue|continue;
name|XOffering
name|otherOffering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|otherEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|otherSection
range|:
name|otherOffering
operator|.
name|getSections
argument_list|(
name|otherEnrollment
argument_list|)
control|)
block|{
if|if
condition|(
name|otherSection
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|otherSection
operator|.
name|getTime
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|XCourse
name|otherCourse
init|=
name|otherOffering
operator|.
name|getCourse
argument_list|(
name|otherEnrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|XSubpart
name|otherSubpart
init|=
name|otherOffering
operator|.
name|getSubpart
argument_list|(
name|otherSection
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
name|ca
operator|.
name|addOverlap
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|otherCourse
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|otherCourse
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|otherSubpart
operator|.
name|getName
argument_list|()
argument_list|,
name|otherSection
operator|.
name|getName
argument_list|(
name|otherCourse
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|ca
operator|.
name|setAssigned
argument_list|(
name|ca
operator|.
name|getOverlaps
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|stored
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ErrorMessage
name|e
range|:
name|errors
control|)
block|{
name|ret
operator|.
name|addError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|messages
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|EnrollmentFailure
name|f
range|:
name|messages
control|)
block|{
if|if
condition|(
name|f
operator|.
name|hasErrors
argument_list|()
condition|)
for|for
control|(
name|EnrollmentError
name|err
range|:
name|f
operator|.
name|getErrors
argument_list|()
control|)
name|ret
operator|.
name|addError
argument_list|(
operator|new
name|ErrorMessage
argument_list|(
name|f
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|f
operator|.
name|getSection
argument_list|()
operator|.
name|getExternalId
argument_list|(
name|f
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|err
operator|.
name|getCode
argument_list|()
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fm
range|:
name|f
operator|.
name|getMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
control|)
block|{
name|String
name|message
init|=
name|MSG
operator|.
name|clazz
argument_list|(
name|f
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|f
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|f
operator|.
name|getSection
argument_list|()
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|f
operator|.
name|getSection
argument_list|()
operator|.
name|getName
argument_list|(
name|f
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|": "
operator|+
name|fm
decl_stmt|;
if|if
condition|(
name|added
operator|.
name|add
argument_list|(
name|message
argument_list|)
condition|)
name|ret
operator|.
name|addMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|includeRequest
condition|)
block|{
name|CourseRequestInterface
name|request
init|=
operator|new
name|CourseRequestInterface
argument_list|()
decl_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSaved
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAcademicSessionId
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCredit
argument_list|(
name|student
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setMaxCreditOverride
argument_list|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideExternalId
argument_list|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideTimeStamp
argument_list|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|status
init|=
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
operator|.
name|ordinal
argument_list|()
condition|)
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
operator|.
name|ordinal
argument_list|()
condition|)
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
condition|)
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
expr_stmt|;
block|}
name|CourseRequestInterface
operator|.
name|Request
name|lastRequest
init|=
literal|null
decl_stmt|;
name|int
name|lastRequestPriority
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|XRequest
name|cd
range|:
name|studentRequests
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cd
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|ftr
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|cd
decl_stmt|;
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
init|=
operator|new
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setStart
argument_list|(
name|ftr
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setLength
argument_list|(
name|ftr
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|day
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|ftr
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
name|ft
operator|.
name|addDay
argument_list|(
name|day
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastRequest
operator|!=
literal|null
operator|&&
name|lastRequestPriority
operator|==
name|cd
operator|.
name|getPriority
argument_list|()
operator|&&
name|lastRequest
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|lastRequest
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|lastRequest
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|addFreeTime
argument_list|(
name|ft
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
expr_stmt|;
name|RequestedCourse
name|rc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addFreeTime
argument_list|(
name|ft
argument_list|)
expr_stmt|;
if|if
condition|(
name|cd
operator|.
name|isAlternative
argument_list|()
condition|)
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|lastRequest
operator|=
name|r
expr_stmt|;
name|lastRequestPriority
operator|=
name|cd
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|SAVED
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|cd
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|r
operator|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
expr_stmt|;
for|for
control|(
name|XCourseId
name|courseId
range|:
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|XCourse
name|c
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|courseId
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
continue|continue;
name|RequestedCourse
name|rc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setCourseId
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCourseName
argument_list|(
name|c
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getCourseNumber
argument_list|()
operator|+
operator|(
name|c
operator|.
name|hasUniqueName
argument_list|()
operator|&&
operator|!
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
condition|?
literal|""
else|:
literal|" - "
operator|+
name|c
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCourseTitle
argument_list|(
name|c
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCredit
argument_list|(
name|c
operator|.
name|getMinCredit
argument_list|()
argument_list|,
name|c
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isEnrolled
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|setReadOnly
operator|&&
name|isEnrolled
condition|)
name|rc
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEnrolled
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|ENROLLED
argument_list|)
expr_stmt|;
else|else
block|{
name|Integer
name|status
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getOverrideStatus
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|SAVED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
operator|.
name|ordinal
argument_list|()
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
operator|.
name|ordinal
argument_list|()
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
argument_list|)
expr_stmt|;
else|else
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|setOverrideExternalId
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getOverrideExternalId
argument_list|(
name|courseId
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideTimeStamp
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getOverrideTimeStamp
argument_list|(
name|courseId
argument_list|)
argument_list|)
expr_stmt|;
name|OnlineSectioningHelper
operator|.
name|fillPreferencesIn
argument_list|(
name|rc
argument_list|,
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getPreferences
argument_list|(
name|courseId
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setWaitList
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|isWaitlist
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setCritical
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|isCritical
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setTimeStamp
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
if|if
condition|(
name|cd
operator|.
name|isAlternative
argument_list|()
condition|)
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|lastRequest
operator|=
name|r
expr_stmt|;
name|lastRequestPriority
operator|=
name|cd
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|setRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"get-assignment"
return|;
block|}
specifier|public
specifier|static
class|class
name|CourseSection
block|{
name|XCourse
name|iCourse
decl_stmt|;
name|XSection
name|iSection
decl_stmt|;
name|CourseSection
parameter_list|(
name|XCourse
name|course
parameter_list|,
name|XSection
name|section
parameter_list|)
block|{
name|iCourse
operator|=
name|course
expr_stmt|;
name|iSection
operator|=
name|section
expr_stmt|;
block|}
specifier|public
name|XCourse
name|getCourse
parameter_list|()
block|{
return|return
name|iCourse
return|;
block|}
specifier|public
name|XSection
name|getSection
parameter_list|()
block|{
return|return
name|iSection
return|;
block|}
block|}
block|}
end_class

end_unit

