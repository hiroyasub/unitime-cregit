begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|ListCourseOfferings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRoom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSubpart
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ListCourseOfferingsByExternalId
extends|extends
name|ListCourseOfferings
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|CourseAssignment
argument_list|>
name|listCourses
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|List
argument_list|<
name|CourseAssignment
argument_list|>
name|ret
init|=
name|customCourseLookup
argument_list|(
name|server
argument_list|,
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ret
return|;
name|ret
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|CourseAssignment
argument_list|>
name|courses
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iQuery
operator|!=
literal|null
operator|&&
name|iQuery
operator|.
name|length
argument_list|()
operator|>=
literal|3
condition|)
block|{
try|try
block|{
for|for
control|(
name|Object
index|[]
name|courseClassId
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c.uniqueId, z.uniqueId "
operator|+
literal|"from Class_ z inner join z.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings c "
operator|+
literal|"where c.subjectArea.session.uniqueId = :sessionId and c.subjectArea.department.allowStudentScheduling = true "
operator|+
literal|"and ((lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr || ' ' || z.classSuffix) like :q || '%' and :q like lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr || ' %')) or lower(z.classSuffix) like :q || '%') "
operator|+
literal|"order by c.subjectArea.subjectAreaAbbreviation, c.courseNbr, z.classSuffix"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|iQuery
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|courseClassId
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|sectionId
init|=
operator|(
name|Long
operator|)
name|courseClassId
index|[
literal|1
index|]
decl_stmt|;
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
operator|&&
operator|(
name|iMatcher
operator|==
literal|null
operator|||
name|iMatcher
operator|.
name|match
argument_list|(
name|course
argument_list|)
operator|)
condition|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|XSection
name|section
init|=
operator|(
name|offering
operator|==
literal|null
condition|?
literal|null
else|:
name|offering
operator|.
name|getSection
argument_list|(
name|sectionId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|courses
operator|==
literal|null
condition|)
name|courses
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|CourseAssignment
argument_list|>
argument_list|()
expr_stmt|;
name|CourseAssignment
name|ca
init|=
name|courses
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ca
operator|==
literal|null
condition|)
block|{
name|ca
operator|=
name|convert
argument_list|(
name|course
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|courses
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|ca
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
expr_stmt|;
name|XSubpart
name|subpart
init|=
name|offering
operator|.
name|getSubpart
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|subpart
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|courseId
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExternalId
argument_list|(
name|section
operator|.
name|getExternalId
argument_list|(
name|courseId
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCancelled
argument_list|(
name|section
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|course
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCredit
argument_list|(
name|subpart
operator|.
name|getCredit
argument_list|(
name|courseId
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCreditRange
argument_list|(
name|subpart
operator|.
name|getCreditMin
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|subpart
operator|.
name|getCreditMax
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Float
name|creditOverride
init|=
name|section
operator|.
name|getCreditOverride
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|creditOverride
operator|!=
literal|null
condition|)
name|a
operator|.
name|setCredit
argument_list|(
name|FixedCreditUnitConfig
operator|.
name|formatCredit
argument_list|(
name|creditOverride
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XRoom
name|rm
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|a
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|XInstructor
name|instructor
range|:
name|section
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|a
operator|.
name|addInstructor
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmail
argument_list|(
name|instructor
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|instructor
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getParentId
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|offering
operator|.
name|getSection
argument_list|(
name|section
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|(
name|courseId
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|subpart
operator|.
name|getSubpartId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|course
operator|.
name|getConsentLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iLimit
operator|!=
literal|null
operator|&&
name|iLimit
operator|>
literal|0
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|==
name|iLimit
condition|)
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
for|for
control|(
name|XCourseId
name|id
range|:
name|server
operator|.
name|findCourses
argument_list|(
name|iQuery
argument_list|,
name|iLimit
argument_list|,
name|iMatcher
argument_list|)
control|)
block|{
if|if
condition|(
name|courses
operator|!=
literal|null
operator|&&
name|courses
operator|.
name|containsKey
argument_list|(
name|id
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|id
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|course
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLimit
operator|!=
literal|null
operator|&&
name|iLimit
operator|>
literal|0
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|==
name|iLimit
condition|)
break|break;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

