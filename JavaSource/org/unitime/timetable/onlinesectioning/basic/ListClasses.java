begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|CourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_class
specifier|public
class|class
name|ListClasses
implements|implements
name|OnlineSectioningAction
argument_list|<
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|iCourse
decl_stmt|;
specifier|private
name|Long
name|iStudentId
decl_stmt|;
specifier|public
name|ListClasses
parameter_list|(
name|String
name|course
parameter_list|,
name|Long
name|studentId
parameter_list|)
block|{
name|iCourse
operator|=
name|course
expr_stmt|;
name|iStudentId
operator|=
name|studentId
expr_stmt|;
block|}
specifier|public
name|String
name|getCourse
parameter_list|()
block|{
return|return
name|iCourse
return|;
block|}
specifier|public
name|Long
name|getStudentId
parameter_list|()
block|{
return|return
name|iStudentId
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|Lock
name|lock
init|=
name|server
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|CourseInfo
name|c
init|=
name|server
operator|.
name|getCourseInfo
argument_list|(
name|getCourse
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|getCourse
argument_list|()
argument_list|)
argument_list|)
throw|;
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
name|server
operator|.
name|getSections
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sections
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Section
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Config
name|c1
parameter_list|,
name|Config
name|c2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|c1
operator|.
name|getName
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|c2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|c1
operator|.
name|getId
argument_list|()
argument_list|,
name|c2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isParent
parameter_list|(
name|Subpart
name|s1
parameter_list|,
name|Subpart
name|s2
parameter_list|)
block|{
name|Subpart
name|p1
init|=
name|s1
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|isParent
argument_list|(
name|p1
argument_list|,
name|s2
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Subpart
name|s1
parameter_list|,
name|Subpart
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|s1
operator|.
name|getConfig
argument_list|()
argument_list|,
name|s2
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|isParent
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|isParent
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|cmp
operator|=
name|s1
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|s1
operator|.
name|getId
argument_list|()
argument_list|,
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Section
name|s1
parameter_list|,
name|Section
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|s1
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|s2
operator|.
name|getSubpart
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|(
name|s1
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|s1
operator|.
name|getName
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|s1
operator|.
name|getId
argument_list|()
argument_list|,
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|courseAssign
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|()
decl_stmt|;
name|courseAssign
operator|.
name|setCourseId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|courseAssign
operator|.
name|setCourseNbr
argument_list|(
name|c
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|courseAssign
operator|.
name|setSubject
argument_list|(
name|c
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|sections
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|String
name|room
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RoomLocation
name|rm
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|room
operator|==
literal|null
condition|)
name|room
operator|=
literal|""
expr_stmt|;
else|else
name|room
operator|+=
literal|", "
expr_stmt|;
name|room
operator|+=
name|rm
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|courseAssign
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
block|,
name|section
operator|.
name|getLimit
argument_list|()
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|getStudentId
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|i
init|=
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|getStudentId
argument_list|()
condition|)
block|{
name|a
operator|.
name|setSaved
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|a
operator|.
name|addNote
argument_list|(
name|c
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCredit
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RoomLocation
name|rm
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|a
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|instructors
init|=
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|instructor
range|:
name|instructors
control|)
block|{
name|String
index|[]
name|nameEmail
init|=
name|instructor
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|a
operator|.
name|addInstructor
argument_list|(
name|nameEmail
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmailr
argument_list|(
name|nameEmail
operator|.
name|length
operator|<
literal|2
condition|?
literal|""
else|:
name|nameEmail
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|section
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|c
operator|.
name|getConsent
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExpected
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoClassesForCourse
argument_list|(
name|getCourse
argument_list|()
argument_list|)
argument_list|)
throw|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"list-classes"
return|;
block|}
block|}
end_class

end_unit

