begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|AssignmentComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|AssignmentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|SctAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|WaitListMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|advisors
operator|.
name|AdvisorGetCourseRequests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomCourseRequestsHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomCourseRequestsValidationHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|Customization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|WaitListValidationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|CourseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XFreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|SectioningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|WaitlistedOnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolver
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|GetRequest
extends|extends
name|WaitlistedOnlineSectioningAction
argument_list|<
name|CourseRequestInterface
argument_list|>
block|{
specifier|protected
specifier|static
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iStudentId
decl_stmt|;
specifier|private
name|boolean
name|iSectioning
decl_stmt|;
specifier|private
name|boolean
name|iCustomValidation
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iWaitListValidation
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iCustomRequests
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iAdvisorRequests
init|=
literal|true
decl_stmt|;
specifier|private
name|CourseMatcher
name|iMatcher
init|=
literal|null
decl_stmt|;
specifier|private
name|WaitListMode
name|iWaitListMode
init|=
literal|null
decl_stmt|;
specifier|public
name|GetRequest
name|forStudent
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|boolean
name|sectioning
parameter_list|)
block|{
name|iStudentId
operator|=
name|studentId
expr_stmt|;
name|iSectioning
operator|=
name|sectioning
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|GetRequest
name|forStudent
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
return|return
name|forStudent
argument_list|(
name|studentId
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|GetRequest
name|withCustomValidation
parameter_list|(
name|boolean
name|validation
parameter_list|)
block|{
name|iCustomValidation
operator|=
name|validation
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|GetRequest
name|withWaitListValidation
parameter_list|(
name|boolean
name|validation
parameter_list|)
block|{
name|iWaitListValidation
operator|=
name|validation
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|GetRequest
name|withCustomRequest
parameter_list|(
name|boolean
name|request
parameter_list|)
block|{
name|iCustomRequests
operator|=
name|request
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|GetRequest
name|withAdvisorRequests
parameter_list|(
name|boolean
name|adv
parameter_list|)
block|{
name|iAdvisorRequests
operator|=
name|adv
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|GetRequest
name|withCourseMatcher
parameter_list|(
name|CourseMatcher
name|matcher
parameter_list|)
block|{
name|iMatcher
operator|=
name|matcher
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|GetRequest
name|withWaitListMode
parameter_list|(
name|WaitListMode
name|mode
parameter_list|)
block|{
name|iWaitListMode
operator|=
name|mode
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|CourseRequestInterface
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
name|iStudentId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|CustomCourseRequestsHolder
operator|.
name|hasProvider
argument_list|()
operator|&&
name|iCustomRequests
condition|)
block|{
if|if
condition|(
name|iMatcher
operator|!=
literal|null
condition|)
name|iMatcher
operator|.
name|setServer
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|CourseRequestInterface
name|request
init|=
name|CustomCourseRequestsHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|getCourseRequests
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
operator|new
name|XStudent
argument_list|(
literal|null
argument_list|,
name|helper
operator|.
name|getStudentExternalId
argument_list|()
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|iMatcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
return|return
name|request
return|;
block|}
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
block|}
name|CourseRequestInterface
name|request
init|=
literal|null
decl_stmt|;
name|Lock
name|lock
init|=
name|server
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|helper
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|action
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|iStudentId
argument_list|)
argument_list|)
expr_stmt|;
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|iStudentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|action
operator|.
name|getStudentBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|getStudentBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|CustomCourseRequestsHolder
operator|.
name|hasProvider
argument_list|()
operator|&&
name|iCustomRequests
condition|)
block|{
if|if
condition|(
name|iMatcher
operator|!=
literal|null
condition|)
name|iMatcher
operator|.
name|setServer
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|request
operator|=
name|CustomCourseRequestsHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|getCourseRequests
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|iMatcher
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|request
return|;
block|}
name|request
operator|=
operator|new
name|CourseRequestInterface
argument_list|()
expr_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|iStudentId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSaved
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAcademicSessionId
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCredit
argument_list|(
name|student
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iWaitListMode
operator|==
literal|null
condition|)
name|request
operator|.
name|setWaitListMode
argument_list|(
name|student
operator|.
name|getWaitListMode
argument_list|(
name|helper
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|setWaitListMode
argument_list|(
name|iWaitListMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setMaxCreditOverride
argument_list|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideExternalId
argument_list|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideTimeStamp
argument_list|(
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|status
init|=
name|student
operator|.
name|getMaxCreditOverride
argument_list|()
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
operator|.
name|ordinal
argument_list|()
condition|)
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
operator|.
name|ordinal
argument_list|()
condition|)
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
condition|)
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|NOT_CHECKED
operator|.
name|ordinal
argument_list|()
condition|)
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
expr_stmt|;
block|}
name|CourseRequestInterface
operator|.
name|Request
name|lastRequest
init|=
literal|null
decl_stmt|;
name|int
name|lastRequestPriority
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|hasEnrollments
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XRequest
name|cd
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cd
operator|instanceof
name|XCourseRequest
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hasEnrollments
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|boolean
name|setReadOnly
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingMakeAssignedRequestReadOnly
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|boolean
name|setReadOnlyWhenReserved
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingMakeReservedRequestReadOnly
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|boolean
name|setInactive
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingMakeUnassignedRequestsInactive
operator|.
name|isTrue
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
operator|&&
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
condition|)
block|{
name|setReadOnly
operator|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingMakeAssignedRequestReadOnlyIfAdmin
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|setReadOnlyWhenReserved
operator|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingMakeReservedRequestReadOnlyIfAdmin
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|setInactive
operator|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingMakeUnassignedRequestsInactiveIfAdmin
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
name|boolean
name|reservedNoPriority
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingReservedRequestNoPriorityChanges
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|boolean
name|reservedNoAlternatives
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingReservedRequestNoAlternativeChanges
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|boolean
name|enrolledNoPriority
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingAssignedRequestNoPriorityChanges
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|boolean
name|enrolledNoAlternatives
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingAssignedRequestNoAlternativeChanges
operator|.
name|isTrue
argument_list|()
decl_stmt|;
if|if
condition|(
name|setInactive
operator|&&
operator|!
name|hasEnrollments
condition|)
name|setInactive
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|setInactive
operator|&&
name|server
operator|instanceof
name|StudentSolver
condition|)
name|setInactive
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|XRequest
name|cd
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cd
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|ftr
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|cd
decl_stmt|;
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
init|=
operator|new
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setStart
argument_list|(
name|ftr
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setLength
argument_list|(
name|ftr
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|day
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|ftr
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
name|ft
operator|.
name|addDay
argument_list|(
name|day
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastRequest
operator|!=
literal|null
operator|&&
name|lastRequestPriority
operator|==
name|cd
operator|.
name|getPriority
argument_list|()
operator|&&
name|lastRequest
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|lastRequest
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|lastRequest
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|addFreeTime
argument_list|(
name|ft
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
expr_stmt|;
name|RequestedCourse
name|rc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addFreeTime
argument_list|(
name|ft
argument_list|)
expr_stmt|;
if|if
condition|(
name|cd
operator|.
name|isAlternative
argument_list|()
condition|)
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|lastRequest
operator|=
name|r
expr_stmt|;
name|lastRequestPriority
operator|=
name|cd
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|SAVED
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|cd
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|r
operator|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
expr_stmt|;
for|for
control|(
name|XCourseId
name|courseId
range|:
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|XCourse
name|c
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|courseId
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
continue|continue;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|RequestedCourse
name|rc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setCourseId
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCourseName
argument_list|(
name|c
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getCourseNumber
argument_list|()
operator|+
operator|(
name|c
operator|.
name|hasUniqueName
argument_list|()
operator|&&
operator|!
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
condition|?
literal|""
else|:
literal|" - "
operator|+
name|c
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCourseTitle
argument_list|(
name|c
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCredit
argument_list|(
name|c
operator|.
name|getMinCredit
argument_list|()
argument_list|,
name|c
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isEnrolled
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isWaitListed
init|=
operator|!
name|isEnrolled
operator|&&
name|offering
operator|.
name|isWaitList
argument_list|()
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|isWaitlist
argument_list|(
name|request
operator|.
name|getWaitListMode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|setReadOnly
operator|&&
name|isEnrolled
condition|)
name|rc
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSectioning
operator|&&
name|setInactive
operator|&&
operator|!
name|isEnrolled
operator|&&
operator|!
name|isWaitListed
condition|)
name|rc
operator|.
name|setInactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iSectioning
operator|&&
name|isEnrolled
condition|)
block|{
name|rc
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCanDelete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrolledNoAlternatives
condition|)
name|rc
operator|.
name|setCanChangeAlternatives
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrolledNoPriority
condition|)
name|rc
operator|.
name|setCanChangePriority
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iSectioning
operator|&&
name|setReadOnlyWhenReserved
condition|)
block|{
if|if
condition|(
name|offering
operator|!=
literal|null
operator|&&
operator|(
name|offering
operator|.
name|hasIndividualReservation
argument_list|(
name|student
argument_list|,
name|c
argument_list|)
operator|||
name|offering
operator|.
name|hasGroupReservation
argument_list|(
name|student
argument_list|,
name|c
argument_list|)
operator|)
condition|)
block|{
name|rc
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCanDelete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservedNoAlternatives
condition|)
name|rc
operator|.
name|setCanChangeAlternatives
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservedNoPriority
condition|)
name|rc
operator|.
name|setCanChangePriority
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|rc
operator|.
name|setCanWaitList
argument_list|(
name|offering
operator|!=
literal|null
operator|&&
name|offering
operator|.
name|isWaitList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEnrolled
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|ENROLLED
argument_list|)
expr_stmt|;
else|else
block|{
name|Integer
name|status
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getOverrideStatus
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|SAVED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
operator|.
name|ordinal
argument_list|()
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
operator|.
name|ordinal
argument_list|()
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|NOT_CHECKED
operator|.
name|ordinal
argument_list|()
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|NOT_CHECKED
operator|.
name|ordinal
argument_list|()
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
argument_list|)
expr_stmt|;
else|else
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|setOverrideExternalId
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getOverrideExternalId
argument_list|(
name|courseId
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideTimeStamp
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getOverrideTimeStamp
argument_list|(
name|courseId
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|fillPreferencesIn
argument_list|(
name|rc
argument_list|,
name|courseId
argument_list|)
expr_stmt|;
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|.
name|isCanWaitList
argument_list|()
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|isWaitlist
argument_list|()
condition|)
block|{
name|rc
operator|.
name|setWaitListPosition
argument_list|(
name|getWaitListPosition
argument_list|(
name|offering
argument_list|,
name|student
argument_list|,
operator|(
name|XCourseRequest
operator|)
name|cd
argument_list|,
name|courseId
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|setWaitList
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|isWaitlist
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setNoSub
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|isNoSub
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setCritical
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getCritical
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setTimeStamp
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setWaitListedTimeStamp
argument_list|(
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getWaitListedTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
if|if
condition|(
name|cd
operator|.
name|isAlternative
argument_list|()
condition|)
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|isWaitList
argument_list|()
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
init|=
operator|new
name|AssignmentMap
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
name|courseRequest
init|=
name|SectioningRequest
operator|.
name|convert
argument_list|(
name|assignment
argument_list|,
operator|(
name|XCourseRequest
operator|)
name|cd
argument_list|,
name|server
argument_list|,
name|request
operator|.
name|getWaitListMode
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Enrollment
argument_list|>
name|enrls
init|=
name|courseRequest
operator|.
name|getEnrollmentsSkipSameTime
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
name|rc
label|:
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|XCourseId
name|cid
range|:
operator|(
operator|(
name|XCourseRequest
operator|)
name|cd
operator|)
operator|.
name|getCourseIds
argument_list|()
control|)
if|if
condition|(
name|cid
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|XOffering
name|off
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|cid
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|off
operator|==
literal|null
operator|||
operator|!
name|off
operator|.
name|isWaitList
argument_list|()
condition|)
continue|continue
name|rc
continue|;
block|}
name|TreeSet
argument_list|<
name|Enrollment
argument_list|>
name|overlap
init|=
operator|new
name|TreeSet
argument_list|<
name|Enrollment
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Enrollment
name|o1
parameter_list|,
name|Enrollment
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getRequest
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getRequest
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
argument_list|,
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|>
name|overlapingSections
init|=
operator|new
name|Hashtable
argument_list|<
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
argument_list|,
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Enrollment
name|noConfEnrl
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|e
init|=
name|enrls
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrl
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rc
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|boolean
name|overlaps
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Request
name|q
range|:
name|enrl
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|q
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
continue|continue;
name|Enrollment
name|x
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|SctAssignment
argument_list|>
name|i
init|=
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SctAssignment
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|isOverlapping
argument_list|(
name|enrl
operator|.
name|getAssignments
argument_list|()
argument_list|)
condition|)
block|{
name|overlaps
operator|=
literal|true
expr_stmt|;
name|overlap
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
condition|)
block|{
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
name|cr
init|=
operator|(
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
operator|)
name|x
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Section
argument_list|>
name|ss
init|=
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
name|ss
operator|=
operator|new
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|(
operator|new
name|AssignmentComparator
argument_list|<
name|Section
argument_list|,
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|overlapingSections
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
name|ss
operator|.
name|add
argument_list|(
operator|(
name|Section
operator|)
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|overlaps
operator|&&
name|noConfEnrl
operator|==
literal|null
condition|)
name|noConfEnrl
operator|=
name|enrl
expr_stmt|;
block|}
if|if
condition|(
name|noConfEnrl
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|overlaps
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enrollment
name|q
range|:
name|overlap
control|)
block|{
if|if
condition|(
name|q
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|overlaps
operator|.
name|add
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toString
argument_list|(
operator|(
name|FreeTimeRequest
operator|)
name|q
operator|.
name|getRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
name|cr
init|=
operator|(
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
operator|)
name|q
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Course
name|o
init|=
name|q
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|String
name|ov
init|=
name|MSG
operator|.
name|course
argument_list|(
name|o
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|o
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|s
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ov
operator|+=
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|ov
operator|+=
literal|","
expr_stmt|;
block|}
name|overlaps
operator|.
name|add
argument_list|(
name|ov
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|overlaps
operator|!=
literal|null
operator|&&
operator|!
name|overlaps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|overlaps
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|ov
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
name|message
operator|=
name|MSG
operator|.
name|conflictWithFirst
argument_list|(
name|ov
argument_list|)
expr_stmt|;
if|else if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|message
operator|+=
name|MSG
operator|.
name|conflictWithMiddle
argument_list|(
name|ov
argument_list|)
expr_stmt|;
else|else
name|message
operator|+=
name|MSG
operator|.
name|conflictWithLast
argument_list|(
name|ov
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|addConfirmationMessage
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"WL-OVERLAP"
argument_list|,
name|message
operator|+
literal|"."
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|lastRequest
operator|=
name|r
expr_stmt|;
name|lastRequestPriority
operator|=
name|cd
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
name|action
operator|.
name|addRequest
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|cd
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|.
name|getLastStudentChange
argument_list|()
operator|==
literal|null
operator|&&
operator|!
operator|(
name|server
operator|instanceof
name|StudentSolver
operator|)
operator|&&
name|iAdvisorRequests
operator|&&
operator|(
operator|!
name|iSectioning
operator|||
operator|!
name|hasEnrollments
operator|)
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|applyAdvisorRequests
argument_list|(
name|AdvisorGetCourseRequests
operator|.
name|getRequest
argument_list|(
name|student
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
argument_list|)
condition|)
name|request
operator|.
name|setPopupMessage
argument_list|(
name|ApplicationProperty
operator|.
name|PopupMessageCourseRequestsPrepopulatedWithAdvisorRecommendations
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|iCustomValidation
operator|&&
name|CustomCourseRequestsValidationHolder
operator|.
name|hasProvider
argument_list|()
condition|)
name|CustomCourseRequestsValidationHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|check
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|iWaitListValidation
operator|&&
name|request
operator|.
name|getWaitListMode
argument_list|()
operator|==
name|WaitListMode
operator|.
name|WaitList
operator|&&
name|Customization
operator|.
name|WaitListValidationProvider
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
name|WaitListValidationProvider
name|wp
init|=
name|Customization
operator|.
name|WaitListValidationProvider
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|wp
operator|.
name|check
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
return|return
name|request
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"get-request"
return|;
block|}
block|}
end_class

end_unit

