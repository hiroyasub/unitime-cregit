begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|reports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|reports
operator|.
name|OnlineSectioningReport
operator|.
name|Counter
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|FindAssignmentsReport
implements|implements
name|OnlineSectioningReport
operator|.
name|Report
block|{
annotation|@
name|Override
specifier|public
name|String
name|getYear
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2010"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTerm
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Spring"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCampus
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"campus"
argument_list|,
literal|"PWL"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|File
name|getReportFolder
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|,
literal|"~"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getOperations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"section"
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|OnlineSectioningReport
name|report
parameter_list|,
name|String
name|student
parameter_list|,
name|List
argument_list|<
name|Action
argument_list|>
name|actions
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|courses
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|Counter
name|cpu
init|=
operator|new
name|Counter
argument_list|()
decl_stmt|;
name|Counter
name|err
init|=
operator|new
name|Counter
argument_list|()
decl_stmt|;
name|Counter
name|req
init|=
operator|new
name|Counter
argument_list|()
decl_stmt|;
name|Counter
name|asgn
init|=
operator|new
name|Counter
argument_list|()
decl_stmt|;
name|Counter
name|val
init|=
operator|new
name|Counter
argument_list|()
decl_stmt|;
for|for
control|(
name|Action
name|action
range|:
name|actions
control|)
block|{
name|cpu
operator|.
name|inc
argument_list|(
name|action
operator|.
name|getCpuTime
argument_list|()
operator|/
literal|1e6
argument_list|)
expr_stmt|;
name|report
operator|.
name|inc
argument_list|(
literal|"CPU Time"
argument_list|,
name|action
operator|.
name|getCpuTime
argument_list|()
operator|/
literal|1e9
argument_list|)
expr_stmt|;
for|for
control|(
name|Message
name|message
range|:
name|action
operator|.
name|getMessageList
argument_list|()
control|)
block|{
if|if
condition|(
name|message
operator|.
name|getLevel
argument_list|()
operator|==
name|Message
operator|.
name|Level
operator|.
name|ERROR
operator|||
name|message
operator|.
name|getLevel
argument_list|()
operator|==
name|Message
operator|.
name|Level
operator|.
name|FATAL
condition|)
block|{
name|report
operator|.
name|inc
argument_list|(
literal|"Error "
operator|+
name|message
operator|.
name|getText
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|err
operator|.
name|inc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|Enrollment
name|computed
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|action
operator|.
name|getEnrollmentList
argument_list|()
control|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getType
argument_list|()
operator|==
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|COMPUTED
condition|)
block|{
name|computed
operator|=
name|enrollment
expr_stmt|;
break|break;
block|}
block|}
name|HashSet
argument_list|<
name|String
argument_list|>
name|assigned
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|computed
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|computed
operator|.
name|hasValue
argument_list|()
condition|)
block|{
name|report
operator|.
name|inc
argument_list|(
literal|"Value"
argument_list|,
name|computed
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|val
operator|.
name|inc
argument_list|(
name|computed
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|ac
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|computed
operator|.
name|getSectionList
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|hasCourse
argument_list|()
operator|&&
name|section
operator|.
name|getCourse
argument_list|()
operator|.
name|hasName
argument_list|()
condition|)
block|{
if|if
condition|(
name|assigned
operator|.
name|add
argument_list|(
name|section
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|report
operator|.
name|inc
argument_list|(
literal|"Courses"
argument_list|,
name|section
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Assigned"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ac
operator|++
expr_stmt|;
name|int
name|priority
init|=
literal|0
decl_stmt|;
name|boolean
name|alt
init|=
literal|false
decl_stmt|;
name|requests
label|:
for|for
control|(
name|Request
name|request
range|:
name|action
operator|.
name|getRequestList
argument_list|()
control|)
for|for
control|(
name|Entity
name|course
range|:
name|request
operator|.
name|getCourseList
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getUniqueId
argument_list|()
operator|==
name|section
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
condition|)
block|{
name|priority
operator|=
name|request
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|alt
operator|=
name|request
operator|.
name|getAlternative
argument_list|()
expr_stmt|;
break|break
name|requests
break|;
block|}
name|report
operator|.
name|inc
argument_list|(
literal|"Courses"
argument_list|,
name|section
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Priority"
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|report
operator|.
name|inc
argument_list|(
literal|"Courses"
argument_list|,
name|section
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Alternative"
argument_list|,
name|alt
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|asgn
operator|.
name|inc
argument_list|(
name|ac
argument_list|)
expr_stmt|;
block|}
name|int
name|rc
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|action
operator|.
name|getRequestList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|getAlternative
argument_list|()
operator|&&
name|request
operator|.
name|getCourseCount
argument_list|()
operator|>
literal|0
condition|)
name|rc
operator|++
expr_stmt|;
for|for
control|(
name|Entity
name|course
range|:
name|request
operator|.
name|getCourseList
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|hasName
argument_list|()
condition|)
block|{
name|courses
operator|.
name|add
argument_list|(
name|course
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|inc
argument_list|(
literal|"Courses"
argument_list|,
name|course
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Requested"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
name|report
operator|.
name|inc
argument_list|(
literal|"Courses"
argument_list|,
name|course
operator|.
name|getName
argument_list|()
argument_list|,
literal|"First"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
name|actions
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
name|report
operator|.
name|inc
argument_list|(
literal|"Courses"
argument_list|,
name|course
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Last"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|req
operator|.
name|inc
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
for|for
control|(
name|String
name|course
range|:
name|courses
control|)
block|{
name|report
operator|.
name|inc
argument_list|(
literal|"Courses"
argument_list|,
name|course
argument_list|,
literal|"Student"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|report
operator|.
name|inc
argument_list|(
literal|"Students"
argument_list|,
name|student
argument_list|,
literal|"Avg. CPU"
argument_list|,
name|cpu
operator|.
name|avg
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|inc
argument_list|(
literal|"Students"
argument_list|,
name|student
argument_list|,
literal|"Calls"
argument_list|,
name|cpu
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|inc
argument_list|(
literal|"Students"
argument_list|,
name|student
argument_list|,
literal|"Errors"
argument_list|,
name|err
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|inc
argument_list|(
literal|"Students"
argument_list|,
name|student
argument_list|,
literal|"Requests"
argument_list|,
name|req
operator|.
name|avg
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|inc
argument_list|(
literal|"Students"
argument_list|,
name|student
argument_list|,
literal|"Assigned"
argument_list|,
name|asgn
operator|.
name|avg
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|inc
argument_list|(
literal|"Students"
argument_list|,
name|student
argument_list|,
literal|"Value"
argument_list|,
name|val
operator|.
name|avg
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|inc
argument_list|(
literal|"Courses"
argument_list|,
name|req
operator|.
name|avg
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|inc
argument_list|(
literal|"Assigned"
argument_list|,
name|asgn
operator|.
name|avg
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
operator|new
name|OnlineSectioningReport
argument_list|(
operator|new
name|FindAssignmentsReport
argument_list|()
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

