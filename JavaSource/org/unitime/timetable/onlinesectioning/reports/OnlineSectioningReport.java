begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2011 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|reports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
operator|.
name|CSVField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|OnlineSectioningReport
implements|implements
name|Runnable
block|{
specifier|protected
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|OnlineSectioningReport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|DecimalFormat
name|sDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.00000"
argument_list|)
decl_stmt|;
specifier|private
name|Report
name|iReport
init|=
literal|null
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|iCounters
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
argument_list|>
argument_list|>
name|iReports
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|OnlineSectioningReport
parameter_list|(
name|Report
name|report
parameter_list|)
throws|throws
name|Exception
block|{
name|iReport
operator|=
name|report
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
literal|"DEBUG, A1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1"
argument_list|,
literal|"org.apache.log4j.ConsoleAppender"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout"
argument_list|,
literal|"org.apache.log4j.PatternLayout"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout.ConversionPattern"
argument_list|,
literal|"%-5p %c{2}: %m%n"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cfg"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cache.EhCacheProvider"
argument_list|,
literal|"ERROR"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.unitime.commons.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.net"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|props
argument_list|)
expr_stmt|;
try|try
block|{
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|fatal
argument_list|(
literal|"Unable to initialize hibernate: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|iReport
operator|.
name|getCampus
argument_list|()
argument_list|,
name|iReport
operator|.
name|getYear
argument_list|()
argument_list|,
name|iReport
operator|.
name|getTerm
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|fatal
argument_list|(
literal|"Academic session not found:"
operator|+
name|iReport
operator|.
name|getTerm
argument_list|()
operator|+
literal|" "
operator|+
name|iReport
operator|.
name|getYear
argument_list|()
operator|+
literal|" ("
operator|+
name|iReport
operator|.
name|getCampus
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
name|Long
name|sessionId
init|=
name|session
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|String
name|student
init|=
literal|null
decl_stmt|;
name|String
name|filter
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|operations
init|=
name|iReport
operator|.
name|getOperations
argument_list|()
decl_stmt|;
if|if
condition|(
name|operations
operator|==
literal|null
condition|)
block|{
name|filter
operator|=
literal|""
expr_stmt|;
block|}
if|else if
condition|(
name|operations
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|filter
operator|=
literal|"and l.operation = '"
operator|+
name|operations
index|[
literal|0
index|]
operator|+
literal|"'"
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
literal|"and l.operation in ("
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|filter
operator|+=
operator|(
name|i
operator|>
literal|0
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
literal|"'"
operator|+
name|operations
index|[
name|i
index|]
operator|+
literal|"'"
expr_stmt|;
block|}
name|filter
operator|+=
literal|")"
expr_stmt|;
block|}
name|List
argument_list|<
name|OnlineSectioningLog
operator|.
name|Action
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<
name|OnlineSectioningLog
operator|.
name|Action
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OnlineSectioningLog
argument_list|>
name|i
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select l from OnlineSectioningLog l where "
operator|+
literal|"l.session.uniqueId = :sessionId "
operator|+
name|filter
operator|+
literal|" order by l.student, l.timeStamp"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OnlineSectioningLog
name|l
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
name|student
operator|=
name|l
operator|.
name|getStudent
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|student
operator|.
name|equals
argument_list|(
name|l
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|actions
operator|.
name|isEmpty
argument_list|()
condition|)
name|iReport
operator|.
name|process
argument_list|(
name|this
argument_list|,
name|student
argument_list|,
name|actions
argument_list|)
expr_stmt|;
name|actions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|student
operator|=
name|l
operator|.
name|getStudent
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|actions
operator|.
name|add
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|parseFrom
argument_list|(
name|l
operator|.
name|getAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to parse action for "
operator|+
name|student
operator|+
literal|" (op="
operator|+
name|l
operator|.
name|getOperation
argument_list|()
operator|+
literal|", ts="
operator|+
name|l
operator|.
name|getTimeStamp
argument_list|()
operator|+
literal|"): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|actions
operator|.
name|isEmpty
argument_list|()
condition|)
name|iReport
operator|.
name|process
argument_list|(
name|this
argument_list|,
name|student
argument_list|,
name|actions
argument_list|)
expr_stmt|;
comment|// Write counters
for|for
control|(
name|String
name|name
range|:
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|iCounters
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|sLog
operator|.
name|info
argument_list|(
name|name
operator|+
literal|": "
operator|+
name|iCounters
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Write reports
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
argument_list|>
argument_list|>
name|report
range|:
name|iReports
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|rows
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|report
operator|.
name|getValue
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|CSVFile
name|csv
init|=
operator|new
name|CSVFile
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
argument_list|>
name|record
range|:
name|report
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|cols
operator|.
name|addAll
argument_list|(
name|record
operator|.
name|getValue
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|CSVField
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|CSVField
argument_list|>
argument_list|()
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|CSVField
argument_list|(
name|report
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|col
range|:
name|cols
control|)
name|header
operator|.
name|add
argument_list|(
operator|new
name|CSVField
argument_list|(
name|col
argument_list|)
argument_list|)
expr_stmt|;
name|csv
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|row
range|:
name|rows
control|)
block|{
name|List
argument_list|<
name|CSVField
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|CSVField
argument_list|>
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVField
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|table
init|=
name|report
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|col
range|:
name|cols
control|)
block|{
name|Counter
name|counter
init|=
name|table
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVField
argument_list|(
name|counter
operator|==
literal|null
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|counter
operator|.
name|sum
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|csv
operator|.
name|addLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|File
name|output
init|=
operator|new
name|File
argument_list|(
name|iReport
operator|.
name|getReportFolder
argument_list|()
argument_list|,
name|report
operator|.
name|getKey
argument_list|()
operator|+
literal|".csv"
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Writing "
operator|+
name|output
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|csv
operator|.
name|save
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to write report "
operator|+
name|report
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|closeHibernate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|double
name|inc
parameter_list|(
name|String
name|counter
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|Counter
name|cnt
init|=
name|iCounters
operator|.
name|get
argument_list|(
name|counter
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|null
condition|)
block|{
name|cnt
operator|=
operator|new
name|Counter
argument_list|()
expr_stmt|;
name|iCounters
operator|.
name|put
argument_list|(
name|counter
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
block|}
name|cnt
operator|.
name|inc
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|cnt
operator|.
name|sum
argument_list|()
return|;
block|}
specifier|public
name|void
name|inc
parameter_list|(
name|String
name|report
parameter_list|,
name|String
name|record
parameter_list|,
name|String
name|property
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
argument_list|>
name|table
init|=
name|iReports
operator|.
name|get
argument_list|(
name|report
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
name|table
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|iReports
operator|.
name|put
argument_list|(
name|report
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|line
init|=
name|table
operator|.
name|get
argument_list|(
name|record
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
name|line
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
argument_list|()
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|record
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|Counter
name|counter
init|=
name|line
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|==
literal|null
condition|)
block|{
name|counter
operator|=
operator|new
name|Counter
argument_list|()
expr_stmt|;
name|line
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
name|counter
operator|.
name|inc
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
interface|interface
name|Report
block|{
specifier|public
name|File
name|getReportFolder
parameter_list|()
function_decl|;
specifier|public
name|String
name|getYear
parameter_list|()
function_decl|;
specifier|public
name|String
name|getTerm
parameter_list|()
function_decl|;
specifier|public
name|String
name|getCampus
parameter_list|()
function_decl|;
specifier|public
name|String
index|[]
name|getOperations
parameter_list|()
function_decl|;
specifier|public
name|void
name|process
parameter_list|(
name|OnlineSectioningReport
name|report
parameter_list|,
name|String
name|student
parameter_list|,
name|List
argument_list|<
name|OnlineSectioningLog
operator|.
name|Action
argument_list|>
name|actions
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|Counter
block|{
specifier|private
name|double
name|iTotal
init|=
literal|0.0
decl_stmt|,
name|iMin
init|=
literal|0.0
decl_stmt|,
name|iMax
init|=
literal|0.0
decl_stmt|,
name|iTotalSquare
init|=
literal|0.0
decl_stmt|;
specifier|private
name|int
name|iCount
init|=
literal|0
decl_stmt|;
specifier|public
name|Counter
parameter_list|()
block|{
block|}
specifier|public
name|void
name|inc
parameter_list|(
name|double
name|value
parameter_list|)
block|{
if|if
condition|(
name|iCount
operator|==
literal|0
condition|)
block|{
name|iTotal
operator|=
name|value
expr_stmt|;
name|iMin
operator|=
name|value
expr_stmt|;
name|iMax
operator|=
name|value
expr_stmt|;
name|iTotalSquare
operator|=
name|value
operator|*
name|value
expr_stmt|;
block|}
else|else
block|{
name|iTotal
operator|+=
name|value
expr_stmt|;
name|iMin
operator|=
name|Math
operator|.
name|min
argument_list|(
name|iMin
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|iMax
operator|=
name|Math
operator|.
name|max
argument_list|(
name|iMax
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|iTotalSquare
operator|+=
name|value
operator|*
name|value
expr_stmt|;
block|}
name|iCount
operator|++
expr_stmt|;
block|}
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
name|iCount
return|;
block|}
specifier|public
name|double
name|sum
parameter_list|()
block|{
return|return
name|iTotal
return|;
block|}
specifier|public
name|double
name|min
parameter_list|()
block|{
return|return
name|iMin
return|;
block|}
specifier|public
name|double
name|max
parameter_list|()
block|{
return|return
name|iMax
return|;
block|}
specifier|public
name|double
name|rms
parameter_list|()
block|{
return|return
operator|(
name|iCount
operator|==
literal|0
condition|?
literal|0.0
else|:
name|Math
operator|.
name|sqrt
argument_list|(
name|iTotalSquare
operator|/
name|iCount
argument_list|)
operator|)
return|;
block|}
specifier|public
name|double
name|avg
parameter_list|()
block|{
return|return
operator|(
name|iCount
operator|==
literal|0
condition|?
literal|0.0
else|:
name|iTotal
operator|/
name|iCount
operator|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|sDF
operator|.
name|format
argument_list|(
name|sum
argument_list|()
argument_list|)
operator|+
literal|" (min: "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|min
argument_list|()
argument_list|)
operator|+
literal|", max: "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|max
argument_list|()
argument_list|)
operator|+
literal|", avg: "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|avg
argument_list|()
argument_list|)
operator|+
literal|", rms: "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|rms
argument_list|()
argument_list|)
operator|+
literal|", cnt: "
operator|+
name|count
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
block|}
end_class

end_unit

