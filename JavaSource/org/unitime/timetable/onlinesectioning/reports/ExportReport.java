begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|reports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExportReport
implements|implements
name|OnlineSectioningReport
operator|.
name|Report
block|{
specifier|protected
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExportReport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CodedOutputStream
name|iOut
init|=
literal|null
decl_stmt|;
specifier|private
name|PrintWriter
name|iPrint
init|=
literal|null
decl_stmt|;
specifier|public
name|ExportReport
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|PrintWriter
name|print
parameter_list|)
block|{
name|iOut
operator|=
name|CodedOutputStream
operator|.
name|newInstance
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|iPrint
operator|=
name|print
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getYear
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2013"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTerm
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Fall"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCampus
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"campus"
argument_list|,
literal|"PWL"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|File
name|getReportFolder
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|,
literal|"."
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getOperations
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"operations"
argument_list|,
literal|"section,suggestions,reload-student"
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getExcludeUsers
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"exclude"
argument_list|,
literal|"TEST"
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLastTimeStamp
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"before"
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|OnlineSectioningReport
name|report
parameter_list|,
name|String
name|student
parameter_list|,
name|List
argument_list|<
name|OnlineSectioningLog
operator|.
name|Action
argument_list|>
name|actions
parameter_list|)
block|{
try|try
block|{
name|OnlineSectioningLog
operator|.
name|ExportedLog
name|log
init|=
name|OnlineSectioningLog
operator|.
name|ExportedLog
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
operator|.
name|addAllAction
argument_list|(
name|actions
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|iOut
operator|!=
literal|null
condition|)
block|{
name|iOut
operator|.
name|writeInt32NoTag
argument_list|(
name|log
operator|.
name|getSerializedSize
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|writeTo
argument_list|(
name|iOut
argument_list|)
expr_stmt|;
name|iOut
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|iPrint
operator|!=
literal|null
condition|)
block|{
name|iPrint
operator|.
name|println
argument_list|(
literal|"student: "
operator|+
name|student
argument_list|)
expr_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Action
name|action
range|:
name|actions
control|)
name|iPrint
operator|.
name|println
argument_list|(
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
name|iPrint
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|report
operator|.
name|inc
argument_list|(
literal|"Log size [MB]"
argument_list|,
name|log
operator|.
name|getSerializedSize
argument_list|()
operator|/
literal|1048576.0
argument_list|)
expr_stmt|;
name|report
operator|.
name|inc
argument_list|(
literal|"Log count"
argument_list|,
name|actions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|op2cnt
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|op2size
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Action
name|action
range|:
name|actions
control|)
block|{
name|Integer
name|cnt
init|=
name|op2cnt
operator|.
name|get
argument_list|(
name|action
operator|.
name|getOperation
argument_list|()
argument_list|)
decl_stmt|;
name|op2cnt
operator|.
name|put
argument_list|(
name|action
operator|.
name|getOperation
argument_list|()
argument_list|,
literal|1
operator|+
operator|(
name|cnt
operator|==
literal|null
condition|?
literal|0
else|:
name|cnt
operator|)
argument_list|)
expr_stmt|;
name|Long
name|size
init|=
name|op2size
operator|.
name|get
argument_list|(
name|action
operator|.
name|getOperation
argument_list|()
argument_list|)
decl_stmt|;
name|op2size
operator|.
name|put
argument_list|(
name|action
operator|.
name|getOperation
argument_list|()
argument_list|,
name|action
operator|.
name|getSerializedSize
argument_list|()
operator|+
operator|(
name|size
operator|==
literal|null
condition|?
literal|0
else|:
name|size
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|op2cnt
operator|.
name|entrySet
argument_list|()
control|)
name|report
operator|.
name|inc
argument_list|(
literal|"Count "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|op2size
operator|.
name|entrySet
argument_list|()
control|)
name|report
operator|.
name|inc
argument_list|(
literal|"Avg. size "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" [kB]"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|/
operator|(
literal|1024.0
operator|*
name|op2cnt
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to export student "
operator|+
name|student
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
literal|"sectioning.dat"
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
literal|"sectioning.log"
argument_list|)
decl_stmt|;
operator|new
name|OnlineSectioningReport
argument_list|(
operator|new
name|ExportReport
argument_list|(
name|out
argument_list|,
name|pw
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

