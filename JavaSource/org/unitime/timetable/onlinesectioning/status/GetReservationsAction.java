begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|OverrideType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumOverrideReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|GroupOverrideReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualOverrideReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|LearningCommunityReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OverrideReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajorConcentration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstrOfferingConfigComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CurriculumReservationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LearningCommunityReservationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentGroupReservationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCurriculumReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XGroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XIndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XLearningCommunityReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XReservationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
operator|.
name|XGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|DatabaseServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|GetReservationsAction
implements|implements
name|OnlineSectioningAction
argument_list|<
name|List
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iOfferingId
decl_stmt|;
specifier|public
name|GetReservationsAction
name|forOfferingId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iOfferingId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ReservationInterface
argument_list|>
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
name|server
operator|instanceof
name|StudentSolverProxy
condition|)
block|{
return|return
operator|(
operator|(
name|StudentSolverProxy
operator|)
name|server
operator|)
operator|.
name|getReservations
argument_list|(
name|iOfferingId
argument_list|)
return|;
block|}
if|else if
condition|(
name|server
operator|instanceof
name|DatabaseServer
condition|)
block|{
name|List
argument_list|<
name|ReservationInterface
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Reservation
name|reservation
range|:
operator|(
name|List
argument_list|<
name|Reservation
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select r from Reservation r where r.instructionalOffering.uniqueId = :offeringId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|iOfferingId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ReservationInterface
name|r
init|=
name|convert
argument_list|(
name|reservation
argument_list|,
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
name|results
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
else|else
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|iOfferingId
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|XEnrollments
name|enrollments
init|=
name|server
operator|.
name|getEnrollments
argument_list|(
name|iOfferingId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReservationInterface
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XReservation
name|reservation
range|:
name|offering
operator|.
name|getReservations
argument_list|()
control|)
block|{
name|ReservationInterface
name|r
init|=
name|convert
argument_list|(
name|offering
argument_list|,
name|reservation
argument_list|,
name|enrollments
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
name|results
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
block|}
specifier|private
name|ReservationInterface
name|convert
parameter_list|(
name|Reservation
name|reservation
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|ReservationInterface
name|r
init|=
literal|null
decl_stmt|;
name|CourseOffering
name|co
init|=
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|CourseReservation
condition|)
block|{
name|co
operator|=
operator|(
operator|(
name|CourseReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
expr_stmt|;
name|ReservationInterface
operator|.
name|Course
name|course
init|=
operator|new
name|ReservationInterface
operator|.
name|Course
argument_list|()
decl_stmt|;
name|course
operator|.
name|setId
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setAbbv
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setControl
argument_list|(
name|co
operator|.
name|isIsControl
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setName
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setLimit
argument_list|(
name|co
operator|.
name|getReservation
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|CourseReservation
argument_list|()
expr_stmt|;
operator|(
operator|(
name|ReservationInterface
operator|.
name|CourseReservation
operator|)
name|r
operator|)
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|IndividualReservation
condition|)
block|{
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|IndividualReservation
argument_list|()
expr_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|OverrideReservation
condition|)
block|{
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|OverrideReservation
argument_list|(
operator|(
operator|(
name|OverrideReservation
operator|)
name|reservation
operator|)
operator|.
name|getOverrideType
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Student
name|student
range|:
operator|(
operator|(
name|IndividualReservation
operator|)
name|reservation
operator|)
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|s
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|s
operator|.
name|setId
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setAbbv
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setName
argument_list|(
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ReservationInterface
operator|.
name|IndividualReservation
operator|)
name|r
operator|)
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
operator|(
operator|(
name|ReservationInterface
operator|.
name|IndividualReservation
operator|)
name|r
operator|)
operator|.
name|getStudents
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
operator|.
name|IdName
name|s1
parameter_list|,
name|ReservationInterface
operator|.
name|IdName
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getAbbv
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|CurriculumReservation
condition|)
block|{
name|CurriculumReservation
name|cr
init|=
operator|(
name|CurriculumReservation
operator|)
name|reservation
decl_stmt|;
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|CurriculumReservation
argument_list|()
expr_stmt|;
name|ReservationInterface
operator|.
name|Areas
name|curriculum
init|=
operator|new
name|ReservationInterface
operator|.
name|Areas
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
name|cr
operator|.
name|getAreas
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|aa
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|aa
operator|.
name|setId
argument_list|(
name|area
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|aa
operator|.
name|setAbbv
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|aa
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|area
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getAreas
argument_list|()
operator|.
name|add
argument_list|(
name|aa
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AcademicClassification
name|classification
range|:
name|cr
operator|.
name|getClassifications
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|clasf
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|clasf
operator|.
name|setId
argument_list|(
name|classification
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|classification
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setAbbv
argument_list|(
name|classification
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PosMajor
name|major
range|:
name|cr
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|mj
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|mj
operator|.
name|setId
argument_list|(
name|major
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|mj
operator|.
name|setAbbv
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|mj
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|major
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicArea
name|aa
range|:
name|major
operator|.
name|getAcademicAreas
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getAreas
argument_list|()
operator|.
name|contains
argument_list|(
name|aa
argument_list|)
condition|)
block|{
name|mj
operator|.
name|setParentId
argument_list|(
name|aa
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
name|mj
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PosMinor
name|minor
range|:
name|cr
operator|.
name|getMinors
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|mn
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|mn
operator|.
name|setId
argument_list|(
name|minor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|mn
operator|.
name|setAbbv
argument_list|(
name|minor
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|mn
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|minor
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicArea
name|aa
range|:
name|minor
operator|.
name|getAcademicAreas
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getAreas
argument_list|()
operator|.
name|contains
argument_list|(
name|aa
argument_list|)
condition|)
block|{
name|mn
operator|.
name|setParentId
argument_list|(
name|aa
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|curriculum
operator|.
name|getMinors
argument_list|()
operator|.
name|add
argument_list|(
name|mn
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PosMajorConcentration
name|conc
range|:
name|cr
operator|.
name|getConcentrations
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|cc
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setId
argument_list|(
name|conc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setAbbv
argument_list|(
name|conc
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|conc
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setParentId
argument_list|(
name|conc
operator|.
name|getMajor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getConcentrations
argument_list|()
operator|.
name|add
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|curriculum
operator|.
name|getAreas
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|curriculum
operator|.
name|getAreas
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
operator|.
name|IdName
name|s1
parameter_list|,
name|ReservationInterface
operator|.
name|IdName
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|curriculum
operator|.
name|getMajors
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
operator|.
name|IdName
name|s1
parameter_list|,
name|ReservationInterface
operator|.
name|IdName
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|curriculum
operator|.
name|getClassifications
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
operator|.
name|IdName
name|s1
parameter_list|,
name|ReservationInterface
operator|.
name|IdName
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|curriculum
operator|.
name|getMinors
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
operator|.
name|IdName
name|s1
parameter_list|,
name|ReservationInterface
operator|.
name|IdName
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|curriculum
operator|.
name|getConcentrations
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
operator|.
name|IdName
name|s1
parameter_list|,
name|ReservationInterface
operator|.
name|IdName
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ReservationInterface
operator|.
name|CurriculumReservation
operator|)
name|r
operator|)
operator|.
name|setCurriculum
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|LearningCommunityReservation
condition|)
block|{
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|LCReservation
argument_list|()
expr_stmt|;
name|StudentGroup
name|sg
init|=
operator|(
operator|(
name|LearningCommunityReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|ReservationInterface
operator|.
name|IdName
name|group
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|group
operator|.
name|setId
argument_list|(
name|sg
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setName
argument_list|(
name|sg
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setAbbv
argument_list|(
name|sg
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setLimit
argument_list|(
name|sg
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ReservationInterface
operator|.
name|LCReservation
operator|)
name|r
operator|)
operator|.
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|co
operator|=
operator|(
operator|(
name|LearningCommunityReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
expr_stmt|;
name|ReservationInterface
operator|.
name|Course
name|course
init|=
operator|new
name|ReservationInterface
operator|.
name|Course
argument_list|()
decl_stmt|;
name|course
operator|.
name|setId
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setAbbv
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setControl
argument_list|(
name|co
operator|.
name|isIsControl
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setName
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setLimit
argument_list|(
name|co
operator|.
name|getReservation
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ReservationInterface
operator|.
name|LCReservation
operator|)
name|r
operator|)
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|GroupReservation
argument_list|()
expr_stmt|;
name|StudentGroup
name|sg
init|=
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|ReservationInterface
operator|.
name|IdName
name|group
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|group
operator|.
name|setId
argument_list|(
name|sg
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setName
argument_list|(
name|sg
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setAbbv
argument_list|(
name|sg
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setLimit
argument_list|(
name|sg
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ReservationInterface
operator|.
name|GroupReservation
operator|)
name|r
operator|)
operator|.
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
name|ReservationInterface
operator|.
name|Offering
name|offering
init|=
operator|new
name|ReservationInterface
operator|.
name|Offering
argument_list|()
decl_stmt|;
name|offering
operator|.
name|setAbbv
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|offering
operator|.
name|setName
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|offering
operator|.
name|setId
argument_list|(
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|offering
operator|.
name|setOffered
argument_list|(
operator|!
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setOffering
argument_list|(
name|offering
argument_list|)
expr_stmt|;
name|boolean
name|showClassSuffixes
init|=
name|ApplicationProperty
operator|.
name|ReservationsShowClassSufix
operator|.
name|isTrue
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|cx
range|:
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|Course
name|course
init|=
operator|new
name|ReservationInterface
operator|.
name|Course
argument_list|()
decl_stmt|;
name|course
operator|.
name|setId
argument_list|(
name|cx
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setAbbv
argument_list|(
name|cx
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setName
argument_list|(
name|cx
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setControl
argument_list|(
name|cx
operator|.
name|isIsControl
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setLimit
argument_list|(
name|cx
operator|.
name|getReservation
argument_list|()
argument_list|)
expr_stmt|;
name|offering
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|configs
init|=
operator|new
name|ArrayList
argument_list|<
name|InstrOfferingConfig
argument_list|>
argument_list|(
name|reservation
operator|.
name|getConfigurations
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|configs
argument_list|,
operator|new
name|InstrOfferingConfigComparator
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|ioc
range|:
name|configs
control|)
block|{
name|ReservationInterface
operator|.
name|Config
name|config
init|=
operator|new
name|ReservationInterface
operator|.
name|Config
argument_list|()
decl_stmt|;
name|config
operator|.
name|setId
argument_list|(
name|ioc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setName
argument_list|(
name|ioc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setAbbv
argument_list|(
name|ioc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setLimit
argument_list|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|?
literal|null
else|:
name|ioc
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|getConfigs
argument_list|()
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|reservation
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|classes
control|)
block|{
name|ReservationInterface
operator|.
name|Clazz
name|clazz
init|=
operator|new
name|ReservationInterface
operator|.
name|Clazz
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setAbbv
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getSectionNumberString
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setName
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|(
name|co
argument_list|,
name|showClassSuffixes
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setLimit
argument_list|(
name|c
operator|.
name|getClassLimit
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setStartDate
argument_list|(
name|reservation
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setExpirationDate
argument_list|(
name|reservation
operator|.
name|getExpirationDate
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setExpired
argument_list|(
name|reservation
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setLimit
argument_list|(
name|reservation
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setInclusive
argument_list|(
name|reservation
operator|.
name|getInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setId
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setOverride
argument_list|(
name|reservation
operator|instanceof
name|IndividualOverrideReservation
operator|||
name|reservation
operator|instanceof
name|GroupOverrideReservation
operator|||
name|reservation
operator|instanceof
name|CurriculumOverrideReservation
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAllowOverlaps
argument_list|(
name|reservation
operator|.
name|isAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMustBeUsed
argument_list|(
name|reservation
operator|.
name|isMustBeUsed
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAlwaysExpired
argument_list|(
name|reservation
operator|.
name|isAlwaysExpired
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setOverLimit
argument_list|(
name|reservation
operator|.
name|isCanAssignOverLimit
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CourseRequest
argument_list|>
name|requests
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|CourseReservation
condition|)
block|{
name|requests
operator|=
operator|(
name|List
argument_list|<
name|CourseRequest
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select cr from CourseRequest cr inner join fetch cr.courseDemand cd inner join fetch cd.student s where "
operator|+
literal|"cr.courseOffering = :courseId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
operator|(
operator|(
name|CourseReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|LearningCommunityReservation
condition|)
block|{
name|requests
operator|=
operator|(
name|List
argument_list|<
name|CourseRequest
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select cr from CourseRequest cr inner join fetch cr.courseDemand cd inner join fetch cd.student s where "
operator|+
literal|"cr.courseOffering = :courseId and s.uniqueId in "
operator|+
literal|"(select s.uniqueId from StudentGroupReservation r inner join r.group.students s where r.uniqueId = :reservationId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
operator|(
operator|(
name|LearningCommunityReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"reservationId"
argument_list|,
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|IndividualReservation
condition|)
block|{
name|requests
operator|=
operator|(
name|List
argument_list|<
name|CourseRequest
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select cr from CourseRequest cr inner join fetch cr.courseDemand cd inner join fetch cd.student s where "
operator|+
literal|"cr.courseOffering.instructionalOffering = :offeringId and s.uniqueId in "
operator|+
literal|"(select s.uniqueId from IndividualReservation r inner join r.students s where r.uniqueId = :reservationId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"reservationId"
argument_list|,
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
name|requests
operator|=
operator|(
name|List
argument_list|<
name|CourseRequest
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select cr from CourseRequest cr inner join fetch cr.courseDemand cd inner join fetch cd.student s where "
operator|+
literal|"cr.courseOffering.instructionalOffering = :offeringId and s.uniqueId in "
operator|+
literal|"(select s.uniqueId from StudentGroupReservation r inner join r.group.students s where r.uniqueId = :reservationId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"reservationId"
argument_list|,
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|requests
operator|=
operator|(
name|List
argument_list|<
name|CourseRequest
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select cr from CourseRequest cr inner join fetch cr.courseDemand cd inner join fetch cd.student s where "
operator|+
literal|"cr.courseOffering.instructionalOffering = :offeringId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
name|int
name|enrolled
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequest
name|request
range|:
name|requests
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|isApplicable
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
argument_list|,
name|request
argument_list|)
operator|&&
name|reservation
operator|.
name|isMatching
argument_list|(
name|request
operator|.
name|getClassEnrollments
argument_list|()
argument_list|)
condition|)
name|enrolled
operator|++
expr_stmt|;
block|}
name|r
operator|.
name|setEnrollment
argument_list|(
name|enrolled
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
specifier|private
name|ReservationInterface
name|convert
parameter_list|(
name|XOffering
name|offering
parameter_list|,
name|XReservation
name|reservation
parameter_list|,
name|XEnrollments
name|enrollments
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|ReservationInterface
name|r
init|=
literal|null
decl_stmt|;
name|XCourse
name|co
init|=
name|offering
operator|.
name|getControllingCourse
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|XCourseReservation
condition|)
block|{
name|co
operator|=
name|offering
operator|.
name|getCourse
argument_list|(
operator|(
operator|(
name|XCourseReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ReservationInterface
operator|.
name|Course
name|course
init|=
operator|new
name|ReservationInterface
operator|.
name|Course
argument_list|()
decl_stmt|;
name|course
operator|.
name|setId
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setAbbv
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setControl
argument_list|(
name|co
operator|.
name|isControlling
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setName
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setLimit
argument_list|(
name|co
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|?
literal|null
else|:
name|co
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|CourseReservation
argument_list|()
expr_stmt|;
operator|(
operator|(
name|ReservationInterface
operator|.
name|CourseReservation
operator|)
name|r
operator|)
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|XIndividualReservation
condition|)
block|{
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|IndividualReservation
argument_list|()
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|getType
argument_list|()
operator|==
name|XReservationType
operator|.
name|IndividualOverride
condition|)
block|{
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|OverrideReservation
argument_list|(
name|reservation
operator|.
name|isAllowOverlap
argument_list|()
operator|&&
name|reservation
operator|.
name|canAssignOverLimit
argument_list|()
condition|?
name|OverrideType
operator|.
name|AllowOverLimitTimeConflict
else|:
name|reservation
operator|.
name|isAllowOverlap
argument_list|()
condition|?
name|OverrideType
operator|.
name|AllowTimeConflict
else|:
name|reservation
operator|.
name|canAssignOverLimit
argument_list|()
condition|?
name|OverrideType
operator|.
name|AllowOverLimit
else|:
name|OverrideType
operator|.
name|Other
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Long
name|studentId
range|:
operator|(
operator|(
name|XIndividualReservation
operator|)
name|reservation
operator|)
operator|.
name|getStudentIds
argument_list|()
control|)
block|{
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|s
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|s
operator|.
name|setId
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setAbbv
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ReservationInterface
operator|.
name|IndividualReservation
operator|)
name|r
operator|)
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
operator|(
operator|(
name|ReservationInterface
operator|.
name|IndividualReservation
operator|)
name|r
operator|)
operator|.
name|getStudents
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
operator|.
name|IdName
name|s1
parameter_list|,
name|ReservationInterface
operator|.
name|IdName
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getAbbv
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|XCurriculumReservation
condition|)
block|{
name|XCurriculumReservation
name|cr
init|=
operator|(
name|XCurriculumReservation
operator|)
name|reservation
decl_stmt|;
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|CurriculumReservation
argument_list|()
expr_stmt|;
name|ReservationInterface
operator|.
name|Areas
name|curriculum
init|=
operator|new
name|ReservationInterface
operator|.
name|Areas
argument_list|()
decl_stmt|;
name|CurriculumReservation
name|ccr
init|=
name|CurriculumReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ccr
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AcademicArea
name|area
range|:
name|ccr
operator|.
name|getAreas
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|aa
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|aa
operator|.
name|setId
argument_list|(
name|area
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|aa
operator|.
name|setAbbv
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|aa
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|area
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getAreas
argument_list|()
operator|.
name|add
argument_list|(
name|aa
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AcademicClassification
name|classification
range|:
name|ccr
operator|.
name|getClassifications
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|clasf
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|clasf
operator|.
name|setId
argument_list|(
name|classification
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|classification
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setAbbv
argument_list|(
name|classification
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PosMajor
name|major
range|:
name|ccr
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|mj
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|mj
operator|.
name|setId
argument_list|(
name|major
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|mj
operator|.
name|setAbbv
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|mj
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|major
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicArea
name|aa
range|:
name|major
operator|.
name|getAcademicAreas
argument_list|()
control|)
if|if
condition|(
name|ccr
operator|.
name|getAreas
argument_list|()
operator|.
name|contains
argument_list|(
name|aa
argument_list|)
condition|)
block|{
name|mj
operator|.
name|setParentId
argument_list|(
name|aa
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
name|mj
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PosMinor
name|minor
range|:
name|ccr
operator|.
name|getMinors
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|mn
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|mn
operator|.
name|setId
argument_list|(
name|minor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|mn
operator|.
name|setAbbv
argument_list|(
name|minor
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|mn
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|minor
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicArea
name|aa
range|:
name|minor
operator|.
name|getAcademicAreas
argument_list|()
control|)
if|if
condition|(
name|ccr
operator|.
name|getAreas
argument_list|()
operator|.
name|contains
argument_list|(
name|aa
argument_list|)
condition|)
block|{
name|mn
operator|.
name|setParentId
argument_list|(
name|aa
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|curriculum
operator|.
name|getMinors
argument_list|()
operator|.
name|add
argument_list|(
name|mn
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PosMajorConcentration
name|conc
range|:
name|ccr
operator|.
name|getConcentrations
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|cc
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setId
argument_list|(
name|conc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setAbbv
argument_list|(
name|conc
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|conc
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setParentId
argument_list|(
name|conc
operator|.
name|getMajor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getConcentrations
argument_list|()
operator|.
name|add
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|long
name|areaId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|area
range|:
name|cr
operator|.
name|getAcademicAreas
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|aa
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|aa
operator|.
name|setId
argument_list|(
name|areaId
operator|++
argument_list|)
expr_stmt|;
name|aa
operator|.
name|setAbbv
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|aa
operator|.
name|setName
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getAreas
argument_list|()
operator|.
name|add
argument_list|(
name|aa
argument_list|)
expr_stmt|;
block|}
name|long
name|clasfId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|classification
range|:
name|cr
operator|.
name|getClassifications
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|clasf
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|clasf
operator|.
name|setId
argument_list|(
name|clasfId
operator|++
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setAbbv
argument_list|(
name|classification
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setName
argument_list|(
name|classification
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
block|}
name|long
name|majorId
init|=
literal|0
decl_stmt|,
name|concId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|major
range|:
name|cr
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|mj
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|mj
operator|.
name|setId
argument_list|(
name|majorId
argument_list|)
expr_stmt|;
name|mj
operator|.
name|setAbbv
argument_list|(
name|major
argument_list|)
expr_stmt|;
name|mj
operator|.
name|setName
argument_list|(
name|major
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
name|mj
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getConcentrations
argument_list|(
name|major
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|conc
range|:
name|cr
operator|.
name|getConcentrations
argument_list|(
name|major
argument_list|)
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|cc
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setId
argument_list|(
name|concId
operator|++
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setAbbv
argument_list|(
name|conc
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setParentId
argument_list|(
name|majorId
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setName
argument_list|(
name|conc
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getConcentrations
argument_list|()
operator|.
name|add
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
name|majorId
operator|++
expr_stmt|;
block|}
for|for
control|(
name|String
name|minor
range|:
name|cr
operator|.
name|getMinors
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|mn
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|mn
operator|.
name|setAbbv
argument_list|(
name|minor
argument_list|)
expr_stmt|;
name|mn
operator|.
name|setName
argument_list|(
name|minor
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getMinors
argument_list|()
operator|.
name|add
argument_list|(
name|mn
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|curriculum
operator|.
name|getAreas
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|curriculum
operator|.
name|getAreas
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
operator|.
name|IdName
name|s1
parameter_list|,
name|ReservationInterface
operator|.
name|IdName
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|curriculum
operator|.
name|getMajors
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
operator|.
name|IdName
name|s1
parameter_list|,
name|ReservationInterface
operator|.
name|IdName
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|curriculum
operator|.
name|getClassifications
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
operator|.
name|IdName
name|s1
parameter_list|,
name|ReservationInterface
operator|.
name|IdName
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|curriculum
operator|.
name|getMinors
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
operator|.
name|IdName
name|s1
parameter_list|,
name|ReservationInterface
operator|.
name|IdName
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|curriculum
operator|.
name|getConcentrations
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
operator|.
name|IdName
name|s1
parameter_list|,
name|ReservationInterface
operator|.
name|IdName
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ReservationInterface
operator|.
name|CurriculumReservation
operator|)
name|r
operator|)
operator|.
name|setCurriculum
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|XLearningCommunityReservation
condition|)
block|{
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|LCReservation
argument_list|()
expr_stmt|;
name|XGroup
name|sg
init|=
operator|(
operator|(
name|XLearningCommunityReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|ReservationInterface
operator|.
name|IdName
name|group
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|group
operator|.
name|setName
argument_list|(
name|sg
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setAbbv
argument_list|(
name|sg
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setLimit
argument_list|(
operator|(
operator|(
name|XLearningCommunityReservation
operator|)
name|reservation
operator|)
operator|.
name|getStudentIds
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ReservationInterface
operator|.
name|LCReservation
operator|)
name|r
operator|)
operator|.
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|LearningCommunityReservation
name|lcr
init|=
name|LearningCommunityReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lcr
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|setId
argument_list|(
name|lcr
operator|.
name|getGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setLimit
argument_list|(
name|lcr
operator|.
name|getGroup
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|co
operator|=
name|offering
operator|.
name|getCourse
argument_list|(
operator|(
operator|(
name|XLearningCommunityReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ReservationInterface
operator|.
name|Course
name|course
init|=
operator|new
name|ReservationInterface
operator|.
name|Course
argument_list|()
decl_stmt|;
name|course
operator|.
name|setId
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setAbbv
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setControl
argument_list|(
name|co
operator|.
name|isControlling
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setName
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setLimit
argument_list|(
name|co
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|?
literal|null
else|:
name|co
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ReservationInterface
operator|.
name|LCReservation
operator|)
name|r
operator|)
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|XGroupReservation
condition|)
block|{
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|GroupReservation
argument_list|()
expr_stmt|;
name|XGroup
name|sg
init|=
operator|(
operator|(
name|XGroupReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|ReservationInterface
operator|.
name|IdName
name|group
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|group
operator|.
name|setName
argument_list|(
name|sg
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setAbbv
argument_list|(
name|sg
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setLimit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|StudentGroupReservation
name|gr
init|=
name|StudentGroupReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|setId
argument_list|(
name|gr
operator|.
name|getGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setLimit
argument_list|(
name|gr
operator|.
name|getGroup
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|ReservationInterface
operator|.
name|GroupReservation
operator|)
name|r
operator|)
operator|.
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
name|ReservationInterface
operator|.
name|Offering
name|io
init|=
operator|new
name|ReservationInterface
operator|.
name|Offering
argument_list|()
decl_stmt|;
name|io
operator|.
name|setAbbv
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|setName
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|setId
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|setOffered
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|r
operator|.
name|setOffering
argument_list|(
name|io
argument_list|)
expr_stmt|;
for|for
control|(
name|XCourse
name|cx
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|Course
name|course
init|=
operator|new
name|ReservationInterface
operator|.
name|Course
argument_list|()
decl_stmt|;
name|course
operator|.
name|setId
argument_list|(
name|cx
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setAbbv
argument_list|(
name|cx
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setName
argument_list|(
name|cx
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setControl
argument_list|(
name|cx
operator|.
name|isControlling
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setLimit
argument_list|(
name|cx
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|?
literal|null
else|:
name|cx
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|XConfig
name|ioc
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|hasConfigRestriction
argument_list|(
name|ioc
operator|.
name|getConfigId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|hasSection
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XSubpart
name|subpart
range|:
name|ioc
operator|.
name|getSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|XSection
name|c
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|hasSectionRestriction
argument_list|(
name|c
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
name|hasSection
operator|=
literal|true
expr_stmt|;
name|ReservationInterface
operator|.
name|Clazz
name|clazz
init|=
operator|new
name|ReservationInterface
operator|.
name|Clazz
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getSectionId
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setAbbv
argument_list|(
name|c
operator|.
name|getName
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setName
argument_list|(
name|subpart
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getName
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setLimit
argument_list|(
name|c
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|?
literal|null
else|:
name|c
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasSection
condition|)
block|{
name|ReservationInterface
operator|.
name|Config
name|config
init|=
operator|new
name|ReservationInterface
operator|.
name|Config
argument_list|()
decl_stmt|;
name|config
operator|.
name|setId
argument_list|(
name|ioc
operator|.
name|getConfigId
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setName
argument_list|(
name|ioc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setAbbv
argument_list|(
name|ioc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setLimit
argument_list|(
name|ioc
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|?
literal|null
else|:
name|ioc
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|getConfigs
argument_list|()
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|XSubpart
name|subpart
range|:
name|ioc
operator|.
name|getSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|XSection
name|c
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|hasSectionRestriction
argument_list|(
name|c
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
name|ReservationInterface
operator|.
name|Clazz
name|clazz
init|=
operator|new
name|ReservationInterface
operator|.
name|Clazz
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getSectionId
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setAbbv
argument_list|(
name|c
operator|.
name|getName
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setName
argument_list|(
name|subpart
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getName
argument_list|(
name|co
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setLimit
argument_list|(
name|c
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|?
literal|null
else|:
name|c
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|r
operator|.
name|setStartDate
argument_list|(
name|reservation
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setExpirationDate
argument_list|(
name|reservation
operator|.
name|getExpirationDate
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setExpired
argument_list|(
name|reservation
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setLimit
argument_list|(
name|reservation
operator|.
name|getReservationLimit
argument_list|()
operator|<
literal|0
condition|?
literal|null
else|:
name|reservation
operator|.
name|getReservationLimit
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setInclusive
argument_list|(
name|reservation
operator|.
name|isInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setId
argument_list|(
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setOverride
argument_list|(
name|reservation
operator|.
name|getType
argument_list|()
operator|==
name|XReservationType
operator|.
name|IndividualOverride
operator|||
name|reservation
operator|.
name|getType
argument_list|()
operator|==
name|XReservationType
operator|.
name|CurriculumOverride
operator|||
name|reservation
operator|.
name|getType
argument_list|()
operator|==
name|XReservationType
operator|.
name|GroupOverride
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAllowOverlaps
argument_list|(
name|reservation
operator|.
name|isAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMustBeUsed
argument_list|(
name|reservation
operator|.
name|mustBeUsed
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAlwaysExpired
argument_list|(
name|reservation
operator|.
name|isAlwaysExpired
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setOverLimit
argument_list|(
name|reservation
operator|.
name|canAssignOverLimit
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|enrolled
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|enrollments
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XEnrollment
name|enrollment
range|:
name|enrollments
operator|.
name|getEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|isApplicable
argument_list|(
name|server
operator|.
name|getStudent
argument_list|(
name|enrollment
operator|.
name|getStudentId
argument_list|()
argument_list|)
argument_list|,
name|enrollment
argument_list|)
operator|&&
name|reservation
operator|.
name|isIncluded
argument_list|(
name|enrollment
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|offering
operator|.
name|getSections
argument_list|(
name|enrollment
argument_list|)
argument_list|)
condition|)
name|enrolled
operator|++
expr_stmt|;
block|}
block|}
name|r
operator|.
name|setEnrollment
argument_list|(
name|enrolled
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"get-reservations"
return|;
block|}
block|}
end_class

end_unit

