begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
operator|.
name|TermMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PersonInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingConsentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AcademicAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AcademicClassificationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|OfferingConsentTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|OnlineSectioningLogDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentAccomodationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentSectioningStatusDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XAcademicAreaCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRoom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|lookup
operator|.
name|PeopleLookupBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StatusPageSuggestionsAction
implements|implements
name|OnlineSectioningAction
argument_list|<
name|List
argument_list|<
name|String
index|[]
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|iQuery
decl_stmt|;
specifier|private
name|int
name|iLimit
decl_stmt|;
specifier|private
name|String
name|iUserId
decl_stmt|,
name|iUserName
decl_stmt|;
specifier|public
name|StatusPageSuggestionsAction
name|withParams
parameter_list|(
name|String
name|userId
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|query
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|iUserId
operator|=
name|userId
expr_stmt|;
name|iUserName
operator|=
name|userName
expr_stmt|;
name|iQuery
operator|=
operator|(
name|query
operator|==
literal|null
condition|?
literal|""
else|:
name|query
operator|)
expr_stmt|;
name|iLimit
operator|=
name|limit
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
try|try
block|{
name|helper
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|Long
name|sessionId
init|=
name|session
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?subject:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
for|for
control|(
name|SubjectArea
name|subject
range|:
operator|(
name|List
argument_list|<
name|SubjectArea
argument_list|>
operator|)
name|SubjectAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from SubjectArea a where"
operator|+
literal|" (lower(a.subjectAreaAbbreviation) like :q || '%'"
operator|+
operator|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|<=
literal|2
condition|?
literal|""
else|:
literal|" or lower(a.title) like '%' || :q || '%'"
operator|)
operator|+
literal|")"
operator|+
literal|" and a.session.uniqueId = :sessionId order by a.subjectAreaAbbreviation"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
operator|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|"\""
operator|+
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|"\""
else|:
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|)
block|,
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" - "
operator|+
operator|(
name|subject
operator|.
name|getTitle
argument_list|()
operator|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?department:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
for|for
control|(
name|Department
name|dept
range|:
operator|(
name|List
argument_list|<
name|Department
argument_list|>
operator|)
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from Department a where"
operator|+
literal|" (lower(a.abbreviation) like :q || '%' or lower(a.deptCode) like :q || '%'"
operator|+
operator|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|<=
literal|2
condition|?
literal|""
else|:
literal|" or lower(name) like '%' || :q || '%'"
operator|)
operator|+
literal|")"
operator|+
literal|" and a.session.uniqueId = :sessionId order by a.deptCode"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
operator|(
name|dept
operator|.
name|getDeptCode
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|"\""
operator|+
name|dept
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|"\""
else|:
name|dept
operator|.
name|getDeptCode
argument_list|()
operator|)
block|,
name|dept
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|dept
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?area:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
for|for
control|(
name|AcademicArea
name|area
range|:
operator|(
name|List
argument_list|<
name|AcademicArea
argument_list|>
operator|)
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from AcademicArea a where "
operator|+
literal|" (lower(a.academicAreaAbbreviation) like :q || '%'"
operator|+
operator|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|<=
literal|2
condition|?
literal|""
else|:
literal|" or lower(a.title) like '%' || :q || '%'"
operator|)
operator|+
literal|")"
operator|+
literal|" and a.session.uniqueId = :sessionId order by a.academicAreaAbbreviation"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
operator|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|"\""
operator|+
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|"\""
else|:
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|)
block|,
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|" - "
operator|+
name|area
operator|.
name|getTitle
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?classification:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
for|for
control|(
name|AcademicClassification
name|clasf
range|:
operator|(
name|List
argument_list|<
name|AcademicClassification
argument_list|>
operator|)
name|AcademicClassificationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from AcademicClassification a where "
operator|+
literal|" (lower(a.code) like :q || '%'"
operator|+
operator|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|<=
literal|2
condition|?
literal|""
else|:
literal|" or lower(a.name) like '%' || :q || '%'"
operator|)
operator|+
literal|")"
operator|+
literal|" and a.session.uniqueId = :sessionId order by a.code"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
operator|(
name|clasf
operator|.
name|getCode
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|"\""
operator|+
name|clasf
operator|.
name|getCode
argument_list|()
operator|+
literal|"\""
else|:
name|clasf
operator|.
name|getCode
argument_list|()
operator|)
block|,
name|clasf
operator|.
name|getCode
argument_list|()
operator|+
literal|" - "
operator|+
name|clasf
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?clasf:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
for|for
control|(
name|AcademicClassification
name|clasf
range|:
operator|(
name|List
argument_list|<
name|AcademicClassification
argument_list|>
operator|)
name|AcademicClassificationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from AcademicClassification a where "
operator|+
literal|" (lower(a.code) like :q || '%'"
operator|+
operator|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|<=
literal|2
condition|?
literal|""
else|:
literal|" or lower(a.name) like '%' || :q || '%'"
operator|)
operator|+
literal|")"
operator|+
literal|" and a.session.uniqueId = :sessionId order by a.code"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
operator|(
name|clasf
operator|.
name|getCode
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|"\""
operator|+
name|clasf
operator|.
name|getCode
argument_list|()
operator|+
literal|"\""
else|:
name|clasf
operator|.
name|getCode
argument_list|()
operator|)
block|,
name|clasf
operator|.
name|getCode
argument_list|()
operator|+
literal|" - "
operator|+
name|clasf
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?major:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|area
init|=
literal|null
decl_stmt|;
name|Matcher
name|x
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"area:[ ]?\"([^\\\"]*)\"|area:[ ]?(\\w*)"
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|find
argument_list|()
condition|)
name|area
operator|=
operator|(
name|x
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
name|x
operator|.
name|group
argument_list|(
literal|2
argument_list|)
else|:
name|x
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
expr_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
operator|(
name|List
argument_list|<
name|PosMajor
argument_list|>
operator|)
name|AcademicClassificationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from PosMajor a "
operator|+
operator|(
name|area
operator|==
literal|null
condition|?
literal|""
else|:
literal|"inner join a.academicAreas x "
operator|)
operator|+
literal|"where "
operator|+
literal|" (lower(a.code) like :q || '%'"
operator|+
operator|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|<=
literal|2
condition|?
literal|""
else|:
literal|" or lower(a.name) like '%' || :q || '%'"
operator|)
operator|+
literal|")"
operator|+
operator|(
name|area
operator|==
literal|null
condition|?
literal|""
else|:
literal|" and lower(x.academicAreaAbbreviation) = '"
operator|+
name|area
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'"
operator|)
operator|+
literal|" and a.session.uniqueId = :sessionId order by a.code"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
operator|(
name|major
operator|.
name|getCode
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|"\""
operator|+
name|major
operator|.
name|getCode
argument_list|()
operator|+
literal|"\""
else|:
name|major
operator|.
name|getCode
argument_list|()
operator|)
block|,
name|major
operator|.
name|getCode
argument_list|()
operator|+
literal|" - "
operator|+
name|major
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?course:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|subject
init|=
literal|null
decl_stmt|;
name|Matcher
name|x
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"subject:[ ]?\"([^\\\"]*)\"|subject:[ ]?(\\w*)"
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|find
argument_list|()
condition|)
name|subject
operator|=
operator|(
name|x
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
name|x
operator|.
name|group
argument_list|(
literal|2
argument_list|)
else|:
name|x
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
expr_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c where "
operator|+
literal|" (lower(c.courseNbr) like :q || '%' or lower(c.subjectArea.subjectAreaAbbreviation) like :q || '%'"
operator|+
operator|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|<=
literal|2
condition|?
literal|""
else|:
literal|" or lower(c.title) like '%' || :q || '%'"
operator|)
operator|+
literal|")"
operator|+
operator|(
name|subject
operator|==
literal|null
condition|?
literal|""
else|:
literal|" and lower(c.subjectArea.subjectAreaAbbreviation) = '"
operator|+
name|subject
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'"
operator|)
operator|+
literal|" and c.subjectArea.session.uniqueId = :sessionId order by c.subjectArea.subjectAreaAbbreviation, c.courseNbr"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"\""
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|"\""
block|,
name|course
operator|.
name|getCourseNameWithTitle
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?number:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|subject
init|=
literal|null
decl_stmt|;
name|Matcher
name|x
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"subject:[ ]?\"([^\\\"]*)\"|subject:[ ]?(\\w*)"
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|find
argument_list|()
condition|)
name|subject
operator|=
operator|(
name|x
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
name|x
operator|.
name|group
argument_list|(
literal|2
argument_list|)
else|:
name|x
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
expr_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c where "
operator|+
literal|" (lower(c.courseNbr) like :q || '%' or lower(c.subjectArea.subjectAreaAbbreviation) like :q || '%'"
operator|+
operator|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|<=
literal|2
condition|?
literal|""
else|:
literal|" or lower(c.title) like '%' || :q || '%'"
operator|)
operator|+
literal|")"
operator|+
operator|(
name|subject
operator|==
literal|null
condition|?
literal|""
else|:
literal|" and lower(c.subjectArea.subjectAreaAbbreviation) = '"
operator|+
name|subject
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'"
operator|)
operator|+
literal|" and c.subjectArea.session.uniqueId = :sessionId order by c.subjectArea.subjectAreaAbbreviation, c.courseNbr"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
operator|(
name|course
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|"\""
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|"\""
else|:
name|course
operator|.
name|getCourseNbr
argument_list|()
operator|)
operator|+
operator|(
name|subject
operator|==
literal|null
condition|?
literal|" subject: "
operator|+
operator|(
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|"\""
operator|+
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|"\""
else|:
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|)
else|:
literal|""
operator|)
block|,
name|course
operator|.
name|getCourseNameWithTitle
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?group:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
for|for
control|(
name|StudentGroup
name|group
range|:
operator|(
name|List
argument_list|<
name|StudentGroup
argument_list|>
operator|)
name|StudentGroupDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from StudentGroup a where "
operator|+
literal|" (lower(a.groupAbbreviation) like :q || '%'"
operator|+
operator|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|<=
literal|2
condition|?
literal|""
else|:
literal|" or lower(a.groupName) like '%' || :q || '%'"
operator|)
operator|+
literal|")"
operator|+
literal|" and a.session.uniqueId = :sessionId order by a.groupAbbreviation"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
operator|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|"\""
operator|+
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
operator|+
literal|"\""
else|:
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
operator|)
block|,
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
operator|+
literal|" - "
operator|+
name|group
operator|.
name|getGroupName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?accommodation:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
for|for
control|(
name|StudentAccomodation
name|accommodation
range|:
operator|(
name|List
argument_list|<
name|StudentAccomodation
argument_list|>
operator|)
name|StudentAccomodationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from StudentAccomodation a where "
operator|+
literal|" (lower(a.abbreviation) like :q || '%'"
operator|+
operator|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|<=
literal|2
condition|?
literal|""
else|:
literal|" or lower(a.name) like '%' || :q || '%'"
operator|)
operator|+
literal|")"
operator|+
literal|" and a.session.uniqueId = :sessionId order by a.abbreviation"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
operator|(
name|accommodation
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|"\""
operator|+
name|accommodation
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|"\""
else|:
name|accommodation
operator|.
name|getAbbreviation
argument_list|()
operator|)
block|,
name|accommodation
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" - "
operator|+
name|accommodation
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?student:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
operator|&&
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|PersonInterface
name|person
range|:
operator|new
name|PeopleLookupBackend
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|PersonInterface
operator|.
name|LookupRequest
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"mustHaveExternalId,source=students,session="
operator|+
name|sessionId
operator|+
literal|",maxResults="
operator|+
name|iLimit
argument_list|)
argument_list|,
literal|null
argument_list|)
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
operator|(
name|person
operator|.
name|getId
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|"\""
operator|+
name|person
operator|.
name|getId
argument_list|()
operator|+
literal|"\""
else|:
name|person
operator|.
name|getId
argument_list|()
operator|)
block|,
name|person
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?assigned:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"true"
block|,
literal|"true - Assigned enrollments"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"false"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"false"
block|,
literal|"false - Wait-listed course requests"
block|}
argument_list|)
expr_stmt|;
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?scheduled:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"true"
block|,
literal|"true - Assigned enrollments"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"false"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"false"
block|,
literal|"false - Wait-listed course requests"
block|}
argument_list|)
expr_stmt|;
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?waitlist:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"true"
block|,
literal|"true - Wait-listed course requests"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"false"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"false"
block|,
literal|"false - Assigned enrollments"
block|}
argument_list|)
expr_stmt|;
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?waitlisted:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"true"
block|,
literal|"true - Wait-listed course requests"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"false"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"false"
block|,
literal|"false - Assigned enrollments"
block|}
argument_list|)
expr_stmt|;
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?reservation:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"true"
block|,
literal|"true - Enrollments with a reservation"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"false"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"false"
block|,
literal|"false - Enrollments without a reservation"
block|}
argument_list|)
expr_stmt|;
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?reserved:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"true"
block|,
literal|"true - Enrollments with a reservation"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"false"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"false"
block|,
literal|"false - Enrollments without a reservation"
block|}
argument_list|)
expr_stmt|;
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?consent:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"none"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"none"
block|,
literal|"none - Courses with no consent"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"required"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"required"
block|,
literal|"required - Courses requiring a consent"
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|OfferingConsentType
name|consent
range|:
name|OfferingConsentTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
if|if
condition|(
name|consent
operator|.
name|getAbbv
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
operator|(
name|consent
operator|.
name|getAbbv
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|"\""
operator|+
name|consent
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"\""
else|:
name|consent
operator|.
name|getAbbv
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|()
block|,
name|consent
operator|.
name|getAbbv
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" - "
operator|+
name|consent
operator|.
name|getLabel
argument_list|()
operator|+
literal|" required"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"waiting"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"waiting"
block|,
literal|"waiting - Enrollments waiting for a consent"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"todo"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"todo"
block|,
literal|"todo - Enrollments waiting for my consent"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"approved"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"approved"
block|,
literal|"approved - Enrollments with an approved consent"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|TimetableManager
name|manager
range|:
operator|(
name|List
argument_list|<
name|TimetableManager
argument_list|>
operator|)
name|TimetableManagerDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct m from TimetableManager m inner join m.managerRoles r inner join m.departments d where "
operator|+
literal|" (lower(m.externalUniqueId) like :q || '%' or lower(m.emailAddress) like :q || '%' or lower(m.lastName) || ' ' || lower(m.firstName) like :q || '%')"
operator|+
literal|" and r.role.reference in ('Administrator', 'Dept Sched Mgr') and d.session.uniqueId = :sessionId order by m.lastName, m.firstName, m.middleName"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
operator|(
name|manager
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|"\""
operator|+
name|manager
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"\""
else|:
name|manager
operator|.
name|getExternalUniqueId
argument_list|()
operator|)
block|,
name|manager
operator|.
name|getLastName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" - Enrollments approved by "
operator|+
name|manager
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
name|iUserId
block|,
operator|(
name|iUserName
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
condition|?
name|iUserName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|iUserName
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
argument_list|)
operator|.
name|toLowerCase
argument_list|()
else|:
name|iUserName
operator|.
name|toLowerCase
argument_list|()
operator|)
operator|+
literal|" - "
operator|+
literal|"Enrollments approved by "
operator|+
name|iUserName
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?user:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|TimetableManager
name|manager
range|:
operator|(
name|List
argument_list|<
name|TimetableManager
argument_list|>
operator|)
name|TimetableManagerDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct m from TimetableManager m inner join m.managerRoles r inner join m.departments d where "
operator|+
literal|" (lower(m.externalUniqueId) like :q || '%' or lower(m.emailAddress) like :q || '%' or lower(m.lastName) || ' ' || lower(m.firstName) like :q || '%')"
operator|+
literal|" and r.role.reference in ('Administrator', 'Dept Sched Mgr') and d.session.uniqueId = :sessionId order by m.lastName, m.firstName, m.middleName"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
operator|(
name|manager
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|"\""
operator|+
name|manager
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"\""
else|:
name|manager
operator|.
name|getExternalUniqueId
argument_list|()
operator|)
block|,
name|manager
operator|.
name|getLastName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" - Enrollments approved by "
operator|+
name|manager
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
name|iUserId
block|,
operator|(
name|iUserName
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
condition|?
name|iUserName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|iUserName
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
argument_list|)
operator|.
name|toLowerCase
argument_list|()
else|:
name|iUserName
operator|.
name|toLowerCase
argument_list|()
operator|)
operator|+
literal|" - "
operator|+
literal|"Enrollments approved by "
operator|+
name|iUserName
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?operation:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|op
range|:
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|OnlineSectioningLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct operation from OnlineSectioningLog where "
operator|+
literal|"lower(operation) like :q || '%' and session.uniqueId = :sessionId order by operation"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
name|op
block|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|op
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|' '
argument_list|)
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?op:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|op
range|:
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|OnlineSectioningLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct operation from OnlineSectioningLog where "
operator|+
literal|"lower(operation) like :q || '%' and session.uniqueId = :sessionId order by operation"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
name|op
block|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|op
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|' '
argument_list|)
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?result:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
name|t
range|:
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|t
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
name|t
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
block|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|t
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|iQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|XCourseId
name|c
range|:
name|server
operator|.
name|findCourses
argument_list|(
name|iQuery
argument_list|,
name|iLimit
argument_list|,
literal|null
argument_list|)
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|c
operator|.
name|getCourseName
argument_list|()
block|,
name|c
operator|.
name|getCourseName
argument_list|()
operator|+
operator|(
name|c
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" - "
operator|+
name|c
operator|.
name|getTitle
argument_list|()
operator|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*\\W?status:[ ]?)(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"default"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"Default"
block|,
literal|"Default - Academic session default ("
operator|+
operator|(
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|==
literal|null
condition|?
literal|"No Restrictions"
else|:
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|)
operator|+
literal|")"
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentSectioningStatus
name|status
range|:
operator|(
name|List
argument_list|<
name|StudentSectioningStatus
argument_list|>
operator|)
name|StudentSectioningStatusDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from StudentSectioningStatus a where "
operator|+
literal|" (lower(a.reference) like :q || '%'"
operator|+
operator|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|<=
literal|2
condition|?
literal|""
else|:
literal|" or lower(a.label) like '%' || :q || '%'"
operator|)
operator|+
literal|")"
operator|+
literal|" order by a.reference"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
operator|(
name|status
operator|.
name|getReference
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|"\""
operator|+
name|status
operator|.
name|getReference
argument_list|()
operator|+
literal|"\""
else|:
name|status
operator|.
name|getReference
argument_list|()
operator|)
block|,
name|status
operator|.
name|getReference
argument_list|()
operator|+
literal|" - "
operator|+
name|status
operator|.
name|getLabel
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*[^: ][ ]+)?(\\w*)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|iQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"area"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
operator|+
literal|"area:"
block|,
literal|"area: Academic Area"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"classification"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
operator|+
literal|"classification:"
block|,
literal|"classification: Academic Classification"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"consent"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
operator|+
literal|"consent:"
block|,
literal|"consent: Courses with consent"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"course"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
operator|+
literal|"course:"
block|,
literal|"course: Course Offering"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"department"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
operator|+
literal|"department:"
block|,
literal|"department: Department"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"group"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
operator|+
literal|"group:"
block|,
literal|"group: Student Group"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"accommodation"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
operator|+
literal|"accommodation:"
block|,
literal|"accommodation: Student Accommodation"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"major"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
operator|+
literal|"major:"
block|,
literal|"major: Major"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"reservation"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
operator|+
literal|"reservation:"
block|,
literal|"reservation: Enrollments with a reservation"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"status"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
operator|+
literal|"status:"
block|,
literal|"status: Student Scheduling Status"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"student"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
operator|+
literal|"student:"
block|,
literal|"student: Student"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"subject"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
operator|+
literal|"subject:"
block|,
literal|"subject: Subject Area"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"waitlist"
operator|.
name|startsWith
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|)
operator|+
literal|"waitlist:"
block|,
literal|"waitlist: Wait-Listed Course Requests"
block|}
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CourseInfoMatcher
implements|implements
name|TermMatcher
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|XCourse
name|iInfo
decl_stmt|;
specifier|private
name|boolean
name|iConsentToDoCourse
decl_stmt|;
specifier|public
name|CourseInfoMatcher
parameter_list|(
name|XCourse
name|course
parameter_list|,
name|boolean
name|isConsentToDoCourse
parameter_list|)
block|{
name|iInfo
operator|=
name|course
expr_stmt|;
name|iConsentToDoCourse
operator|=
name|isConsentToDoCourse
expr_stmt|;
block|}
specifier|public
name|XCourse
name|info
parameter_list|()
block|{
return|return
name|iInfo
return|;
block|}
specifier|public
name|boolean
name|isConsentToDoCourse
parameter_list|()
block|{
return|return
name|iConsentToDoCourse
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
literal|"limit"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"name"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"course"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|info
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
name|info
argument_list|()
operator|.
name|getCourseNumber
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
operator|(
name|info
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|info
argument_list|()
operator|.
name|getCourseNumber
argument_list|()
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
if|if
condition|(
operator|(
name|attr
operator|==
literal|null
operator|&&
name|term
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|)
operator|||
literal|"title"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|info
argument_list|()
operator|.
name|getTitle
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
name|term
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"subject"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|info
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"number"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|info
argument_list|()
operator|.
name|getCourseNumber
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
if|if
condition|(
literal|"department"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|info
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
if|if
condition|(
literal|"consent"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"none"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
literal|"No Consent"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
name|info
argument_list|()
operator|.
name|getConsentLabel
argument_list|()
operator|==
literal|null
return|;
if|else if
condition|(
literal|"todo"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
literal|"To Do"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
name|isConsentToDoCourse
argument_list|()
return|;
else|else
return|return
name|info
argument_list|()
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
return|;
block|}
if|if
condition|(
literal|"registered"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
literal|"1"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
else|else
return|return
literal|false
return|;
block|}
return|return
name|attr
operator|!=
literal|null
return|;
comment|// pass unknown attributes lower
block|}
block|}
specifier|public
specifier|static
class|class
name|CourseRequestMatcher
extends|extends
name|CourseInfoMatcher
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|XStudent
name|iStudent
decl_stmt|;
specifier|private
name|XCourseRequest
name|iRequest
decl_stmt|;
specifier|private
name|XOffering
name|iOffering
decl_stmt|;
specifier|private
name|Date
name|iFirstDate
decl_stmt|;
specifier|private
name|String
name|iDefaultStatus
decl_stmt|;
specifier|public
name|CourseRequestMatcher
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|,
name|XCourse
name|info
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|XOffering
name|offering
parameter_list|,
name|XCourseRequest
name|request
parameter_list|,
name|boolean
name|isConsentToDoCourse
parameter_list|)
block|{
name|super
argument_list|(
name|info
argument_list|,
name|isConsentToDoCourse
argument_list|)
expr_stmt|;
name|iFirstDate
operator|=
name|session
operator|.
name|getDatePatternFirstDate
argument_list|()
expr_stmt|;
name|iStudent
operator|=
name|student
expr_stmt|;
name|iRequest
operator|=
name|request
expr_stmt|;
name|iDefaultStatus
operator|=
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
expr_stmt|;
name|iOffering
operator|=
name|offering
expr_stmt|;
block|}
specifier|public
name|XCourseRequest
name|request
parameter_list|()
block|{
return|return
name|iRequest
return|;
block|}
specifier|public
name|XEnrollment
name|enrollment
parameter_list|()
block|{
return|return
name|iRequest
operator|.
name|getEnrollment
argument_list|()
return|;
block|}
specifier|public
name|XStudent
name|student
parameter_list|()
block|{
return|return
name|iStudent
return|;
block|}
specifier|public
name|String
name|status
parameter_list|()
block|{
return|return
name|student
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|iDefaultStatus
else|:
name|student
argument_list|()
operator|.
name|getStatus
argument_list|()
return|;
block|}
specifier|public
name|XCourseId
name|course
parameter_list|()
block|{
if|if
condition|(
name|enrollment
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|enrollment
argument_list|()
return|;
for|for
control|(
name|XCourseId
name|course
range|:
name|request
argument_list|()
operator|.
name|getCourseIds
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|info
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
return|return
name|course
return|;
return|return
name|request
argument_list|()
operator|.
name|getCourseIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|XOffering
name|offering
parameter_list|()
block|{
return|return
name|iOffering
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"name"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"title"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"subject"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"number"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"course"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"department"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"registered"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
return|return
name|super
operator|.
name|match
argument_list|(
name|attr
argument_list|,
name|term
argument_list|)
return|;
if|if
condition|(
literal|"limit"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
literal|"area"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|XAcademicAreaCode
name|ac
range|:
name|student
argument_list|()
operator|.
name|getAcademicAreaClasiffications
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|ac
operator|.
name|getArea
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"clasf"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"classification"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|XAcademicAreaCode
name|ac
range|:
name|student
argument_list|()
operator|.
name|getAcademicAreaClasiffications
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|ac
operator|.
name|getCode
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"major"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|XAcademicAreaCode
name|ac
range|:
name|student
argument_list|()
operator|.
name|getMajors
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|ac
operator|.
name|getCode
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"group"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|group
range|:
name|student
argument_list|()
operator|.
name|getGroups
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|group
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"accommodation"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|acc
range|:
name|student
argument_list|()
operator|.
name|getAccomodations
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|acc
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"student"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|has
argument_list|(
name|student
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|student
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|student
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
return|;
block|}
if|if
condition|(
literal|"assignment"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"Assigned"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|enrollment
argument_list|()
operator|!=
literal|null
return|;
block|}
if|else if
condition|(
name|eq
argument_list|(
literal|"Reserved"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|enrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|enrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
return|;
block|}
if|else if
condition|(
name|eq
argument_list|(
literal|"Not Assigned"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|enrollment
argument_list|()
operator|==
literal|null
return|;
block|}
if|else if
condition|(
name|eq
argument_list|(
literal|"Wait-Listed"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|enrollment
argument_list|()
operator|==
literal|null
operator|&&
name|request
argument_list|()
operator|.
name|isWaitlist
argument_list|()
return|;
block|}
block|}
if|if
condition|(
literal|"assigned"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"scheduled"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"true"
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
literal|"1"
argument_list|,
name|term
argument_list|)
condition|)
return|return
name|enrollment
argument_list|()
operator|!=
literal|null
return|;
else|else
return|return
name|enrollment
argument_list|()
operator|==
literal|null
return|;
block|}
if|if
condition|(
literal|"waitlisted"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"waitlist"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"true"
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
literal|"1"
argument_list|,
name|term
argument_list|)
condition|)
return|return
name|enrollment
argument_list|()
operator|==
literal|null
operator|&&
name|request
argument_list|()
operator|.
name|isWaitlist
argument_list|()
return|;
else|else
return|return
name|enrollment
argument_list|()
operator|!=
literal|null
return|;
block|}
if|if
condition|(
literal|"reservation"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"reserved"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"true"
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
literal|"1"
argument_list|,
name|term
argument_list|)
condition|)
return|return
name|enrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|enrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
return|;
else|else
return|return
name|enrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|enrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|==
literal|null
return|;
block|}
if|if
condition|(
literal|"consent"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"none"
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
literal|"No Consent"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|info
argument_list|()
operator|.
name|getConsentLabel
argument_list|()
operator|==
literal|null
return|;
block|}
if|else if
condition|(
name|eq
argument_list|(
literal|"Required"
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
literal|"Consent"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|info
argument_list|()
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
name|enrollment
argument_list|()
operator|!=
literal|null
return|;
block|}
if|else if
condition|(
name|eq
argument_list|(
literal|"Approved"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|info
argument_list|()
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
name|enrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|!=
literal|null
return|;
block|}
if|else if
condition|(
name|eq
argument_list|(
literal|"Waiting"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|info
argument_list|()
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
name|enrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|==
literal|null
return|;
block|}
if|else if
condition|(
name|eq
argument_list|(
literal|"todo"
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
literal|"To Do"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|isConsentToDoCourse
argument_list|()
operator|&&
name|enrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|==
literal|null
return|;
block|}
else|else
block|{
return|return
name|info
argument_list|()
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|enrollment
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|has
argument_list|(
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
operator|)
operator|)
operator|||
name|eq
argument_list|(
name|info
argument_list|()
operator|.
name|getConsentAbbv
argument_list|()
argument_list|,
name|term
argument_list|)
operator|)
operator|)
return|;
block|}
block|}
if|if
condition|(
literal|"approver"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|info
argument_list|()
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|enrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|has
argument_list|(
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
operator|)
operator|)
operator|)
return|;
block|}
if|if
condition|(
literal|"status"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"default"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
literal|"Not Set"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
name|student
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
return|;
return|return
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|status
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|enrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XSection
name|section
range|:
name|offering
argument_list|()
operator|.
name|getSections
argument_list|(
name|enrollment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"crn"
argument_list|)
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"id"
argument_list|)
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"externalId"
argument_list|)
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"exid"
argument_list|)
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getName
argument_list|(
name|info
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
name|section
operator|.
name|getName
argument_list|(
name|info
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|term
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"day"
argument_list|)
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"none"
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|day
init|=
name|parseDay
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|day
operator|>
literal|0
operator|&&
operator|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|&
name|day
operator|)
operator|==
name|day
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"time"
argument_list|)
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"none"
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|start
init|=
name|parseStart
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|>=
literal|0
operator|&&
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|==
name|start
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|!=
literal|null
operator|&&
name|attr
operator|.
name|equals
argument_list|(
literal|"before"
argument_list|)
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|end
init|=
name|parseStart
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|>=
literal|0
operator|&&
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|-
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
operator|/
literal|5
operator|<=
name|end
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|!=
literal|null
operator|&&
name|attr
operator|.
name|equals
argument_list|(
literal|"after"
argument_list|)
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|start
init|=
name|parseStart
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|>=
literal|0
operator|&&
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|>=
name|start
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"date"
argument_list|)
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"none"
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getWeeks
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|df
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_PATTERN
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|iFirstDate
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getWeeks
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getWeeks
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|DayCode
name|day
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|day
operator|=
name|DayCode
operator|.
name|MON
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|day
operator|=
name|DayCode
operator|.
name|TUE
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|day
operator|=
name|DayCode
operator|.
name|WED
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|day
operator|=
name|DayCode
operator|.
name|THU
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|day
operator|=
name|DayCode
operator|.
name|FRI
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|day
operator|=
name|DayCode
operator|.
name|SAT
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|day
operator|=
name|DayCode
operator|.
name|SUN
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|&
name|day
operator|.
name|getCode
argument_list|()
operator|)
operator|==
name|day
operator|.
name|getCode
argument_list|()
condition|)
block|{
name|int
name|d
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
decl_stmt|;
name|int
name|m
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|df
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|d
operator|+
literal|"."
operator|+
name|m
operator|+
literal|"."
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|m
operator|+
literal|"/"
operator|+
name|d
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"room"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|section
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
operator|||
name|section
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"none"
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XRoom
name|r
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|has
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"instr"
argument_list|)
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"instructor"
argument_list|)
condition|)
block|{
if|if
condition|(
name|attr
operator|!=
literal|null
operator|&&
name|section
operator|.
name|getInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"none"
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|XInstructor
name|instuctor
range|:
name|section
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|has
argument_list|(
name|instuctor
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|instuctor
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|instuctor
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|email
init|=
name|instuctor
operator|.
name|getEmail
argument_list|()
decl_stmt|;
if|if
condition|(
name|email
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
operator|>=
literal|0
condition|)
name|email
operator|=
name|email
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|email
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|eq
argument_list|(
name|email
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
name|attr
operator|!=
literal|null
operator|&&
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|start
init|=
name|parseStart
argument_list|(
name|attr
operator|+
literal|":"
operator|+
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|>=
literal|0
operator|&&
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
operator|==
name|start
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|eq
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|has
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|eq
argument_list|(
name|name
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|String
name|t
range|:
name|name
operator|.
name|split
argument_list|(
literal|" |,"
argument_list|)
control|)
if|if
condition|(
name|t
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|int
name|parseDay
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|int
name|days
init|=
literal|0
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
do|do
block|{
name|found
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|longDays
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator||=
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|days
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator||=
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|days
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator||=
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator||=
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|freeTimeShortDays
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|freeTimeShortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator||=
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|freeTimeShortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|found
condition|)
do|;
return|return
operator|(
name|token
operator|.
name|isEmpty
argument_list|()
condition|?
name|days
else|:
literal|0
operator|)
return|;
block|}
specifier|private
name|int
name|parseStart
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|int
name|startHour
init|=
literal|0
decl_stmt|,
name|startMin
init|=
literal|0
decl_stmt|;
name|String
name|number
init|=
literal|""
decl_stmt|;
while|while
condition|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'0'
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|<=
literal|'9'
condition|)
block|{
name|number
operator|+=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|number
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|number
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
name|startHour
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
operator|/
literal|100
expr_stmt|;
name|startMin
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
operator|%
literal|100
expr_stmt|;
block|}
else|else
block|{
name|startHour
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|number
operator|=
literal|""
expr_stmt|;
while|while
condition|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'0'
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|<=
literal|'9'
condition|)
block|{
name|number
operator|+=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|number
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|startMin
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|hasAmOrPm
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"am"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"pm"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|startHour
operator|<
literal|12
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|startHour
operator|<
literal|12
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
block|}
if|if
condition|(
name|startHour
operator|<
literal|7
operator|&&
operator|!
name|hasAmOrPm
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
if|if
condition|(
name|startMin
operator|%
literal|5
operator|!=
literal|0
condition|)
name|startMin
operator|=
literal|5
operator|*
operator|(
operator|(
name|startMin
operator|+
literal|2
operator|)
operator|/
literal|5
operator|)
expr_stmt|;
if|if
condition|(
name|startHour
operator|==
literal|7
operator|&&
name|startMin
operator|==
literal|0
operator|&&
operator|!
name|hasAmOrPm
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
return|return
operator|(
literal|60
operator|*
name|startHour
operator|+
name|startMin
operator|)
operator|/
literal|5
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StudentMatcher
implements|implements
name|TermMatcher
block|{
specifier|private
name|XStudent
name|iStudent
decl_stmt|;
specifier|private
name|String
name|iDefaultStatus
decl_stmt|;
specifier|public
name|StudentMatcher
parameter_list|(
name|XStudent
name|student
parameter_list|,
name|String
name|defaultStatus
parameter_list|)
block|{
name|iStudent
operator|=
name|student
expr_stmt|;
name|iDefaultStatus
operator|=
name|defaultStatus
expr_stmt|;
block|}
specifier|public
name|XStudent
name|student
parameter_list|()
block|{
return|return
name|iStudent
return|;
block|}
specifier|public
name|String
name|status
parameter_list|()
block|{
return|return
operator|(
name|iStudent
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|iDefaultStatus
else|:
name|iStudent
operator|.
name|getStatus
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|attr
operator|==
literal|null
operator|&&
name|term
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
literal|"limit"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
literal|"area"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|XAcademicAreaCode
name|ac
range|:
name|student
argument_list|()
operator|.
name|getAcademicAreaClasiffications
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|ac
operator|.
name|getArea
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"clasf"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"classification"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|XAcademicAreaCode
name|ac
range|:
name|student
argument_list|()
operator|.
name|getAcademicAreaClasiffications
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|ac
operator|.
name|getCode
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"major"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|XAcademicAreaCode
name|ac
range|:
name|student
argument_list|()
operator|.
name|getMajors
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|ac
operator|.
name|getCode
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"group"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|group
range|:
name|student
argument_list|()
operator|.
name|getGroups
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|group
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"accommodation"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|acc
range|:
name|student
argument_list|()
operator|.
name|getAccomodations
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|acc
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"student"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|has
argument_list|(
name|student
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|student
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|student
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"registered"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"true"
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
literal|"1"
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|false
return|;
else|else
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"status"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"default"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
literal|"Not Set"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
name|student
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
return|;
return|return
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|status
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|eq
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|has
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|eq
argument_list|(
name|name
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|String
name|t
range|:
name|name
operator|.
name|split
argument_list|(
literal|" |,"
argument_list|)
control|)
if|if
condition|(
name|t
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"status-suggestions"
return|;
block|}
block|}
end_class

end_unit

