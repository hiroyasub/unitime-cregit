begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Advisor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|SectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|FindOnlineSectioningLogAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|DbFindOnlineSectioningLogAction
extends|extends
name|FindOnlineSectioningLogAction
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SectioningAction
argument_list|>
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|helper
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|SectioningAction
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|SectioningAction
argument_list|>
argument_list|()
decl_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|SectioningLogQueryFormatter
name|formatter
init|=
operator|new
name|SectioningLogQueryFormatter
argument_list|(
name|session
argument_list|,
name|helper
argument_list|)
decl_stmt|;
name|String
name|join
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|formatter
operator|.
name|getGroupTypes
argument_list|()
control|)
if|if
condition|(
name|getQuery
argument_list|()
operator|.
name|hasAttribute
argument_list|(
name|t
argument_list|)
condition|)
name|join
operator|+=
literal|"left outer join s.groups G_"
operator|+
name|t
operator|+
literal|" "
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Query
name|q
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select l, s from OnlineSectioningLog l, Student s "
operator|+
operator|(
name|getQuery
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"area"
argument_list|,
literal|"clasf"
argument_list|,
literal|"classification"
argument_list|,
literal|"major"
argument_list|,
literal|"concentration"
argument_list|)
condition|?
literal|"left outer join s.areaClasfMajors m "
else|:
literal|""
operator|)
operator|+
operator|(
name|getQuery
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"minor"
argument_list|)
condition|?
literal|"left outer join s.areaClasfMinors n "
else|:
literal|""
operator|)
operator|+
operator|(
name|getQuery
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"group"
argument_list|)
condition|?
literal|"left outer join s.groups g "
else|:
literal|""
operator|)
operator|+
operator|(
name|getQuery
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"accommodation"
argument_list|)
condition|?
literal|"left outer join s.accomodations a "
else|:
literal|""
operator|)
operator|+
operator|(
name|getQuery
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"course"
argument_list|)
operator|||
name|getQuery
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"lookup"
argument_list|)
operator|||
name|getQuery
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"im"
argument_list|)
condition|?
literal|"left outer join s.courseDemands cd left outer join cd.courseRequests cr "
else|:
literal|""
operator|)
operator|+
operator|(
name|getQuery
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"im"
argument_list|)
condition|?
literal|"left outer join cr.courseOffering.instructionalOffering.instrOfferingConfigs cfg left outer join cfg.instructionalMethod im "
else|:
literal|""
operator|)
operator|+
name|join
operator|+
literal|"where l.session.uniqueId = :sessionId and l.session = s.session and l.student = s.externalUniqueId "
operator|+
literal|"and ("
operator|+
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
name|formatter
argument_list|)
operator|+
literal|") "
operator|+
operator|(
name|getQuery
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"operation"
argument_list|)
condition|?
literal|""
else|:
literal|"and (l.result is not null or l.operation not in ('reload-offering', 'check-offering', 'reload-student')) "
operator|+
literal|"and (l.result != 3 or l.operation not in ('validate-overrides', 'critical-courses', 'banner-update')) "
operator|)
operator|+
literal|"order by l.uniqueId desc"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLimit
argument_list|()
operator|!=
literal|null
condition|)
name|q
operator|.
name|setMaxResults
argument_list|(
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|processedLogIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|q
operator|.
name|list
argument_list|()
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OnlineSectioningLog
name|log
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OnlineSectioningLog
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|processedLogIds
operator|.
name|add
argument_list|(
name|log
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setSessionId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanShowExternalId
argument_list|(
name|iCanShowExtIds
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
operator|new
name|TreeSet
argument_list|<
name|StudentAreaClassificationMajor
argument_list|>
argument_list|(
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
argument_list|)
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addMajor
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addConcentration
argument_list|(
name|acm
operator|.
name|getConcentration
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|acm
operator|.
name|getConcentration
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|acm
operator|.
name|getConcentration
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|acm
operator|.
name|getConcentration
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addDegree
argument_list|(
name|acm
operator|.
name|getDegree
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|acm
operator|.
name|getDegree
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|acm
operator|.
name|getDegree
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|acm
operator|.
name|getDegree
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentAreaClassificationMinor
name|acm
range|:
operator|new
name|TreeSet
argument_list|<
name|StudentAreaClassificationMinor
argument_list|>
argument_list|(
name|student
operator|.
name|getAreaClasfMinors
argument_list|()
argument_list|)
control|)
block|{
name|st
operator|.
name|addMinor
argument_list|(
name|acm
operator|.
name|getMinor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|acm
operator|.
name|getMinor
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentAccomodation
name|acc
range|:
name|student
operator|.
name|getAccomodations
argument_list|()
control|)
block|{
name|st
operator|.
name|addAccommodation
argument_list|(
name|acc
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|acc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentGroup
name|gr
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|gr
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|)
name|st
operator|.
name|addGroup
argument_list|(
name|gr
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|gr
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|st
operator|.
name|addGroup
argument_list|(
name|gr
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|gr
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|gr
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Advisor
name|a
range|:
name|student
operator|.
name|getAdvisors
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
condition|)
name|st
operator|.
name|addAdvisor
argument_list|(
name|helper
operator|.
name|getInstructorNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SectioningAction
name|a
init|=
operator|new
name|SectioningAction
argument_list|()
decl_stmt|;
name|a
operator|.
name|setLogId
argument_list|(
name|log
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStudent
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStudent
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|a
operator|.
name|setTimeStamp
argument_list|(
name|log
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setOperation
argument_list|(
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|log
operator|.
name|getOperation
argument_list|()
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|' '
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
operator|&&
name|log
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|st
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|)
block|{
name|a
operator|.
name|setUser
argument_list|(
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|log
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Advisor
name|advisor
init|=
name|Advisor
operator|.
name|findByExternalId
argument_list|(
name|log
operator|.
name|getUser
argument_list|()
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|advisor
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|setUser
argument_list|(
name|helper
operator|.
name|getInstructorNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|advisor
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TimetableManager
name|mgr
init|=
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|log
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mgr
operator|!=
literal|null
condition|)
name|a
operator|.
name|setUser
argument_list|(
name|helper
operator|.
name|getInstructorNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|mgr
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|a
operator|.
name|setUser
argument_list|(
name|log
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|log
operator|.
name|getResult
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
name|res
init|=
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|valueOf
argument_list|(
name|log
operator|.
name|getResult
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
name|a
operator|.
name|setResult
argument_list|(
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|res
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setMessage
argument_list|(
name|log
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCpuTime
argument_list|(
name|log
operator|.
name|getCpuTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setWallTime
argument_list|(
name|log
operator|.
name|getWallTime
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

