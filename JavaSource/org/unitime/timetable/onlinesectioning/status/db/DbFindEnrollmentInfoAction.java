begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|expectations
operator|.
name|OverExpectedCriterion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|NaturalOrderComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
operator|.
name|TermMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|EnrollmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Advisor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentInstrMthPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|FindEnrollmentInfoAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|SectioningStatusFilterAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|FindStudentInfoAction
operator|.
name|FindStudentInfoMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|SectioningStatusFilterAction
operator|.
name|Credit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|StatusPageSuggestionsAction
operator|.
name|CourseLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|DbFindEnrollmentInfoAction
extends|extends
name|FindEnrollmentInfoAction
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|boolean
name|isMyStudent
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
return|return
name|iMyStudents
operator|!=
literal|null
operator|&&
name|iMyStudents
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
name|execute
parameter_list|(
specifier|final
name|OnlineSectioningServer
name|server
parameter_list|,
specifier|final
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
name|iFilter
operator|==
literal|null
condition|)
return|return
name|super
operator|.
name|execute
argument_list|(
name|server
argument_list|,
name|helper
argument_list|)
return|;
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|EnrollmentInfo
argument_list|>
argument_list|()
decl_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|CourseLookup
name|lookup
init|=
operator|new
name|CourseLookup
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|matchingStudents
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|allStudents
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|gEnrl
init|=
literal|0
decl_stmt|,
name|gWait
init|=
literal|0
decl_stmt|,
name|gRes
init|=
literal|0
decl_stmt|,
name|gUnasg
init|=
literal|0
decl_stmt|,
name|gUnasgPrim
init|=
literal|0
decl_stmt|;
name|int
name|gtEnrl
init|=
literal|0
decl_stmt|,
name|gtWait
init|=
literal|0
decl_stmt|,
name|gtRes
init|=
literal|0
decl_stmt|,
name|gtUnasg
init|=
literal|0
decl_stmt|,
name|gtUnasgPrim
init|=
literal|0
decl_stmt|;
name|int
name|gConNeed
init|=
literal|0
decl_stmt|,
name|gtConNeed
init|=
literal|0
decl_stmt|,
name|gOvrNeed
init|=
literal|0
decl_stmt|,
name|gtOvrNeed
init|=
literal|0
decl_stmt|;
name|DbFindEnrollmentInfoCourseMatcher
name|m
init|=
operator|new
name|DbFindEnrollmentInfoCourseMatcher
argument_list|(
name|iCoursesIcoordinate
argument_list|,
name|iCoursesIcanApprove
argument_list|,
name|iSubjectAreas
argument_list|,
name|iQuery
argument_list|,
name|lookup
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|CourseRequest
argument_list|>
argument_list|>
name|requests
init|=
operator|new
name|HashMap
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|CourseRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequest
name|cr
range|:
operator|(
name|List
argument_list|<
name|CourseRequest
argument_list|>
operator|)
name|SectioningStatusFilterAction
operator|.
name|getCourseQuery
argument_list|(
name|iFilter
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
operator|.
name|select
argument_list|(
literal|"distinct cr"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|m
operator|.
name|match
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
condition|)
continue|continue;
name|List
argument_list|<
name|CourseRequest
argument_list|>
name|list
init|=
name|requests
operator|.
name|get
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
expr_stmt|;
name|requests
operator|.
name|put
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
name|boolean
name|checkOverrides
init|=
operator|!
name|query
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"override"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|CourseRequest
argument_list|>
argument_list|>
name|entry
range|:
name|requests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|CourseOffering
name|course
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|offering
init|=
name|course
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
name|boolean
name|isConsentToDoCourse
init|=
name|isConsentToDoCourse
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|EnrollmentInfo
name|e
init|=
operator|new
name|EnrollmentInfo
argument_list|()
decl_stmt|;
name|e
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setOfferingId
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTitle
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConsent
argument_list|(
name|course
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|course
operator|.
name|getConsentType
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|match
init|=
literal|0
decl_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|,
name|wait
init|=
literal|0
decl_stmt|,
name|res
init|=
literal|0
decl_stmt|,
name|unasg
init|=
literal|0
decl_stmt|,
name|unasgPrim
init|=
literal|0
decl_stmt|;
name|int
name|tEnrl
init|=
literal|0
decl_stmt|,
name|tWait
init|=
literal|0
decl_stmt|,
name|tRes
init|=
literal|0
decl_stmt|,
name|tUnasg
init|=
literal|0
decl_stmt|,
name|tUnasgPrim
init|=
literal|0
decl_stmt|;
name|int
name|conNeed
init|=
literal|0
decl_stmt|,
name|tConNeed
init|=
literal|0
decl_stmt|,
name|ovrNeed
init|=
literal|0
decl_stmt|,
name|tOvrNeed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequest
name|request
range|:
operator|(
name|List
argument_list|<
name|CourseRequest
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from CourseRequest where courseOffering.uniqueId = :courseId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|checkOverrides
operator|&&
operator|!
name|request
operator|.
name|isRequestApproved
argument_list|()
operator|&&
name|request
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|DbCourseRequestMatcher
name|crm
init|=
operator|new
name|DbCourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|request
argument_list|,
name|isConsentToDoCourse
argument_list|,
name|isMyStudent
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|,
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
argument_list|,
name|lookup
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|query
argument_list|()
operator|.
name|match
argument_list|(
name|crm
argument_list|)
condition|)
block|{
name|allStudents
operator|.
name|add
argument_list|(
name|crm
operator|.
name|student
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|crm
operator|.
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tEnrl
operator|++
expr_stmt|;
if|if
condition|(
name|crm
operator|.
name|reservation
argument_list|()
operator|!=
literal|null
condition|)
name|tRes
operator|++
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
name|crm
operator|.
name|approval
argument_list|()
operator|==
literal|null
condition|)
name|tConNeed
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|crm
operator|.
name|canAssign
argument_list|()
condition|)
block|{
name|tUnasg
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|request
operator|.
name|getOrder
argument_list|()
operator|==
literal|0
condition|)
block|{
name|tUnasgPrim
operator|++
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isWaitlist
argument_list|()
condition|)
name|tWait
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|addedStudents
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequest
name|request
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|checkOverrides
operator|&&
operator|!
name|request
operator|.
name|isRequestApproved
argument_list|()
operator|&&
name|request
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|Student
name|student
init|=
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
decl_stmt|;
if|if
condition|(
name|students
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|addedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|DbCourseRequestMatcher
name|crm
init|=
operator|new
name|DbCourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|request
argument_list|,
name|isConsentToDoCourse
argument_list|,
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|,
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
argument_list|,
name|lookup
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
argument_list|()
operator|.
name|match
argument_list|(
name|crm
argument_list|)
condition|)
block|{
name|matchingStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|match
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|crm
operator|.
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|enrl
operator|++
expr_stmt|;
if|if
condition|(
name|crm
operator|.
name|reservation
argument_list|()
operator|!=
literal|null
condition|)
name|res
operator|++
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
name|crm
operator|.
name|approval
argument_list|()
operator|==
literal|null
condition|)
name|conNeed
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|crm
operator|.
name|canAssign
argument_list|()
condition|)
block|{
name|unasg
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|request
operator|.
name|getOrder
argument_list|()
operator|==
literal|0
condition|)
block|{
name|unasgPrim
operator|++
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isWaitlist
argument_list|()
condition|)
name|wait
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|isRequestPending
argument_list|()
condition|)
name|ovrNeed
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|allStudents
operator|.
name|add
argument_list|(
name|crm
operator|.
name|student
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|crm
operator|.
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tEnrl
operator|++
expr_stmt|;
if|if
condition|(
name|crm
operator|.
name|reservation
argument_list|()
operator|!=
literal|null
condition|)
name|tRes
operator|++
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
name|crm
operator|.
name|approval
argument_list|()
operator|==
literal|null
condition|)
name|tConNeed
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|crm
operator|.
name|canAssign
argument_list|()
condition|)
block|{
name|tUnasg
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|request
operator|.
name|getOrder
argument_list|()
operator|==
literal|0
condition|)
block|{
name|tUnasgPrim
operator|++
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isWaitlist
argument_list|()
condition|)
name|tWait
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|request
operator|.
name|isRequestPending
argument_list|()
condition|)
name|tOvrNeed
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|match
operator|==
literal|0
condition|)
block|{
name|students
operator|.
name|removeAll
argument_list|(
name|addedStudents
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|gEnrl
operator|+=
name|enrl
expr_stmt|;
name|gWait
operator|+=
name|wait
expr_stmt|;
name|gUnasg
operator|+=
name|unasg
expr_stmt|;
name|gUnasgPrim
operator|+=
name|unasgPrim
expr_stmt|;
name|gRes
operator|+=
name|res
expr_stmt|;
name|gConNeed
operator|+=
name|conNeed
expr_stmt|;
name|gOvrNeed
operator|+=
name|ovrNeed
expr_stmt|;
name|gtEnrl
operator|+=
name|tEnrl
expr_stmt|;
name|gtWait
operator|+=
name|tWait
expr_stmt|;
name|gtUnasg
operator|+=
name|tUnasg
expr_stmt|;
name|gtUnasgPrim
operator|+=
name|tUnasgPrim
expr_stmt|;
name|gtRes
operator|+=
name|tRes
expr_stmt|;
name|gtConNeed
operator|+=
name|tConNeed
expr_stmt|;
name|gtOvrNeed
operator|+=
name|tOvrNeed
expr_stmt|;
name|int
name|limit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|config
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
block|{
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
else|else
block|{
name|limit
operator|+=
name|config
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
block|}
name|e
operator|.
name|setLimit
argument_list|(
name|course
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|?
name|course
operator|.
name|getReservation
argument_list|()
else|:
name|limit
argument_list|)
expr_stmt|;
name|e
operator|.
name|setProjection
argument_list|(
name|course
operator|.
name|getProjectedDemand
argument_list|()
operator|!=
literal|null
condition|?
name|course
operator|.
name|getProjectedDemand
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
name|course
operator|.
name|getDemand
argument_list|()
operator|!=
literal|null
condition|?
name|course
operator|.
name|getDemand
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
argument_list|)
expr_stmt|;
name|int
name|av
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|offering
operator|.
name|getUnreservedSpace
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|av
operator|>
name|e
operator|.
name|getLimit
argument_list|()
operator|-
name|course
operator|.
name|getEnrollment
argument_list|()
condition|)
name|av
operator|=
name|e
operator|.
name|getLimit
argument_list|()
operator|-
name|course
operator|.
name|getEnrollment
argument_list|()
expr_stmt|;
if|if
condition|(
name|av
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
name|av
operator|=
operator|-
literal|1
expr_stmt|;
name|e
operator|.
name|setAvailable
argument_list|(
name|av
argument_list|)
expr_stmt|;
if|if
condition|(
name|av
operator|>=
literal|0
condition|)
block|{
name|int
name|other
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseOffering
name|c
range|:
name|offering
operator|.
name|getCourseOfferings
argument_list|()
control|)
if|if
condition|(
operator|!
name|c
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
name|other
operator|+=
name|c
operator|.
name|getEnrollment
argument_list|()
expr_stmt|;
name|e
operator|.
name|setOther
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|e
operator|.
name|getLimit
argument_list|()
operator|-
name|course
operator|.
name|getEnrollment
argument_list|()
operator|-
name|av
argument_list|,
name|other
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|lim
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|f
range|:
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|lim
operator|<
literal|0
operator|||
name|f
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
name|lim
operator|=
operator|-
literal|1
expr_stmt|;
else|else
name|lim
operator|+=
name|f
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lim
operator|>=
literal|0
operator|&&
name|lim
operator|<
name|e
operator|.
name|getLimit
argument_list|()
condition|)
name|e
operator|.
name|setOther
argument_list|(
name|e
operator|.
name|getOther
argument_list|()
operator|+
name|e
operator|.
name|getLimit
argument_list|()
operator|-
name|limit
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|e
operator|.
name|setReservation
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|e
operator|.
name|setWaitlist
argument_list|(
name|wait
argument_list|)
expr_stmt|;
name|e
operator|.
name|setUnassigned
argument_list|(
name|unasg
argument_list|)
expr_stmt|;
name|e
operator|.
name|setUnassignedPrimary
argument_list|(
name|unasgPrim
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalEnrollment
argument_list|(
name|tEnrl
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalReservation
argument_list|(
name|tRes
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalWaitlist
argument_list|(
name|tWait
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalUnassigned
argument_list|(
name|tUnasg
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalUnassignedPrimary
argument_list|(
name|tUnasgPrim
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConsentNeeded
argument_list|(
name|conNeed
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalConsentNeeded
argument_list|(
name|tConNeed
argument_list|)
expr_stmt|;
name|e
operator|.
name|setOverrideNeeded
argument_list|(
name|ovrNeed
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalOverrideNeeded
argument_list|(
name|tOvrNeed
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
argument_list|()
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|>=
name|limit
argument_list|()
condition|)
break|break;
block|}
specifier|final
name|Comparator
name|noc
init|=
operator|new
name|NaturalOrderComparator
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|,
operator|new
name|Comparator
argument_list|<
name|EnrollmentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EnrollmentInfo
name|e1
parameter_list|,
name|EnrollmentInfo
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|noc
operator|.
name|compare
argument_list|(
name|e1
operator|.
name|getSubject
argument_list|()
argument_list|,
name|e2
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|EnrollmentInfo
name|t
init|=
operator|new
name|EnrollmentInfo
argument_list|()
decl_stmt|;
name|t
operator|.
name|setSubject
argument_list|(
name|MSG
operator|.
name|total
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setCourseNbr
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|t
operator|.
name|setLimit
argument_list|(
name|students
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setAvailable
argument_list|(
name|matchingStudents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setEnrollment
argument_list|(
name|gEnrl
argument_list|)
expr_stmt|;
name|t
operator|.
name|setReservation
argument_list|(
name|gRes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setWaitlist
argument_list|(
name|gWait
argument_list|)
expr_stmt|;
name|t
operator|.
name|setUnassigned
argument_list|(
name|gUnasg
argument_list|)
expr_stmt|;
name|t
operator|.
name|setUnassignedPrimary
argument_list|(
name|gUnasgPrim
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalEnrollment
argument_list|(
name|gtEnrl
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalReservation
argument_list|(
name|gtRes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalWaitlist
argument_list|(
name|gtWait
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalUnassigned
argument_list|(
name|gtUnasg
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalUnassignedPrimary
argument_list|(
name|gtUnasgPrim
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConsentNeeded
argument_list|(
name|gConNeed
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalConsentNeeded
argument_list|(
name|gtConNeed
argument_list|)
expr_stmt|;
name|t
operator|.
name|setOverrideNeeded
argument_list|(
name|gOvrNeed
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalOverrideNeeded
argument_list|(
name|gtOvrNeed
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|CourseOffering
name|course
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
return|return
name|ret
return|;
specifier|final
name|InstructionalOffering
name|offering
init|=
name|course
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
return|return
name|ret
return|;
name|List
argument_list|<
name|CourseRequest
argument_list|>
name|requests
init|=
operator|(
name|List
argument_list|<
name|CourseRequest
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from CourseRequest where courseOffering.instructionalOffering.uniqueId = :offeringId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|OverExpectedCriterion
name|overExp
init|=
name|server
operator|.
name|getOverExpectedCriterion
argument_list|()
decl_stmt|;
name|boolean
name|isConsentToDoCourse
init|=
name|isConsentToDoCourse
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
name|sections
operator|.
name|addAll
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sections
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Class_
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|InstrOfferingConfig
name|c1
parameter_list|,
name|InstrOfferingConfig
name|c2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|c1
operator|.
name|getName
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|c2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|c1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isParent
parameter_list|(
name|SchedulingSubpart
name|s1
parameter_list|,
name|SchedulingSubpart
name|s2
parameter_list|)
block|{
name|SchedulingSubpart
name|p1
init|=
name|s1
operator|.
name|getParentSubpart
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|isParent
argument_list|(
name|p1
argument_list|,
name|s2
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|SchedulingSubpart
name|s1
parameter_list|,
name|SchedulingSubpart
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|s1
operator|.
name|getInstrOfferingConfig
argument_list|()
argument_list|,
name|s2
operator|.
name|getInstrOfferingConfig
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|isParent
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|isParent
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|cmp
operator|=
name|s1
operator|.
name|getItype
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Class_
name|s1
parameter_list|,
name|Class_
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|s2
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|s1
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|s1
operator|.
name|getParentClass
argument_list|()
argument_list|,
name|s2
operator|.
name|getParentClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
try|try
block|{
name|int
name|cmp
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|s1
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|s1
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|s2
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|s2
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|int
name|cmp
init|=
operator|(
name|s1
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|s1
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|s2
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
name|Class_
name|x
init|=
name|s1
decl_stmt|;
while|while
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isParent
argument_list|(
name|s2
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|,
name|x
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|Class_
name|s
init|=
name|s2
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|s
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
name|int
name|cmp
init|=
name|compare
argument_list|(
name|x
argument_list|,
name|s
argument_list|)
decl_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|x
operator|.
name|equals
argument_list|(
name|s1
argument_list|)
condition|?
operator|-
literal|1
else|:
name|compare
argument_list|(
name|x
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|,
name|s
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
else|:
name|cmp
operator|)
return|;
block|}
name|x
operator|=
name|x
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
name|x
operator|=
name|s2
expr_stmt|;
while|while
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isParent
argument_list|(
name|s1
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|,
name|x
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|Class_
name|s
init|=
name|s1
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|s
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
name|int
name|cmp
init|=
name|compare
argument_list|(
name|s
argument_list|,
name|x
argument_list|)
decl_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|x
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|?
literal|1
else|:
name|compare
argument_list|(
name|x
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|,
name|x
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
else|:
name|cmp
operator|)
return|;
block|}
name|x
operator|=
name|x
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
name|int
name|cmp
init|=
name|compare
argument_list|(
name|s1
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|,
name|s2
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
try|try
block|{
name|cmp
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|s1
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|s1
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|s2
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|s2
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|cmp
operator|=
operator|(
name|s1
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|s1
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|s2
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|boolean
name|checkOverrides
init|=
operator|!
name|query
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"override"
argument_list|)
decl_stmt|;
for|for
control|(
name|Class_
name|section
range|:
name|sections
control|)
block|{
name|EnrollmentInfo
name|e
init|=
operator|new
name|EnrollmentInfo
argument_list|()
decl_stmt|;
name|e
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setOfferingId
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTitle
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConsent
argument_list|(
name|course
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|course
operator|.
name|getConsentType
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulingSubpart
name|subpart
init|=
name|section
operator|.
name|getSchedulingSubpart
argument_list|()
decl_stmt|;
name|InstrOfferingConfig
name|config
init|=
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
decl_stmt|;
name|e
operator|.
name|setConfig
argument_list|(
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConfigId
argument_list|(
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSubpart
argument_list|(
name|subpart
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalMethod
argument_list|()
operator|!=
literal|null
condition|)
name|e
operator|.
name|setSubpart
argument_list|(
name|e
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" ("
operator|+
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSubpartId
argument_list|(
name|subpart
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setClazz
argument_list|(
name|section
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getClazz
argument_list|()
operator|==
literal|null
condition|)
name|e
operator|.
name|setClazz
argument_list|(
name|section
operator|.
name|getSectionNumberString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setClazzId
argument_list|(
name|section
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|Class_
name|parent
init|=
name|section
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|incLevel
argument_list|()
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
name|int
name|match
init|=
literal|0
decl_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|,
name|wait
init|=
literal|0
decl_stmt|,
name|res
init|=
literal|0
decl_stmt|,
name|unasg
init|=
literal|0
decl_stmt|,
name|unasgPrim
init|=
literal|0
decl_stmt|;
name|int
name|tEnrl
init|=
literal|0
decl_stmt|,
name|tWait
init|=
literal|0
decl_stmt|,
name|tRes
init|=
literal|0
decl_stmt|,
name|tUnasg
init|=
literal|0
decl_stmt|,
name|tUnasgPrim
init|=
literal|0
decl_stmt|;
name|int
name|conNeed
init|=
literal|0
decl_stmt|,
name|tConNeed
init|=
literal|0
decl_stmt|;
name|int
name|other
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequest
name|request
range|:
name|requests
control|)
block|{
name|DbCourseRequestMatcher
name|m
init|=
operator|new
name|DbCourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|request
argument_list|,
name|isConsentToDoCourse
argument_list|,
name|isMyStudent
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|,
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
argument_list|,
name|lookup
argument_list|)
decl_stmt|;
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|x
range|:
name|m
operator|.
name|enrollment
argument_list|()
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getClazz
argument_list|()
operator|.
name|equals
argument_list|(
name|section
argument_list|)
condition|)
block|{
name|contains
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|contains
condition|)
continue|continue;
if|if
condition|(
operator|!
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
block|{
name|other
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|query
argument_list|()
operator|.
name|match
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|match
operator|++
expr_stmt|;
name|enrl
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|reservation
argument_list|()
operator|!=
literal|null
condition|)
name|res
operator|++
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|approval
argument_list|()
operator|==
literal|null
condition|)
name|conNeed
operator|++
expr_stmt|;
block|}
name|tEnrl
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|reservation
argument_list|()
operator|!=
literal|null
condition|)
name|tRes
operator|++
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|approval
argument_list|()
operator|==
literal|null
condition|)
name|tConNeed
operator|++
expr_stmt|;
block|}
for|for
control|(
name|CourseRequest
name|request
range|:
name|requests
control|)
block|{
name|DbCourseRequestMatcher
name|m
init|=
operator|new
name|DbCourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|request
argument_list|,
name|isConsentToDoCourse
argument_list|,
name|isMyStudent
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|,
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
argument_list|,
name|lookup
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|m
operator|.
name|canAssign
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|checkOverrides
operator|&&
operator|!
name|request
operator|.
name|isRequestApproved
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|query
argument_list|()
operator|.
name|match
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|match
operator|++
expr_stmt|;
name|unasg
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|request
operator|.
name|getOrder
argument_list|()
operator|==
literal|0
condition|)
block|{
name|unasgPrim
operator|++
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isWaitlist
argument_list|()
condition|)
name|wait
operator|++
expr_stmt|;
block|}
block|}
name|tUnasg
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|request
operator|.
name|getOrder
argument_list|()
operator|==
literal|0
condition|)
block|{
name|tUnasgPrim
operator|++
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isWaitlist
argument_list|()
condition|)
name|tWait
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|match
operator|==
literal|0
condition|)
continue|continue;
name|e
operator|.
name|setLimit
argument_list|(
name|section
operator|.
name|getSectioningLimit
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setOther
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|e
operator|.
name|setAvailable
argument_list|(
name|section
operator|.
name|isCancelled
argument_list|()
operator|||
operator|!
name|section
operator|.
name|isEnabledForStudentScheduling
argument_list|()
condition|?
literal|0
else|:
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|section
operator|.
name|getUnreservedSectionSpace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getAvailable
argument_list|()
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
name|e
operator|.
name|setAvailable
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|e
operator|.
name|setProjection
argument_list|(
name|tEnrl
operator|+
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|section
operator|.
name|getSectioningInfo
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|section
operator|.
name|getSectioningInfo
argument_list|()
operator|.
name|getNbrExpectedStudents
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|e
operator|.
name|setReservation
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|e
operator|.
name|setWaitlist
argument_list|(
name|wait
argument_list|)
expr_stmt|;
name|e
operator|.
name|setUnassigned
argument_list|(
name|unasg
argument_list|)
expr_stmt|;
name|e
operator|.
name|setUnassignedPrimary
argument_list|(
name|unasgPrim
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalEnrollment
argument_list|(
name|tEnrl
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalReservation
argument_list|(
name|tRes
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalWaitlist
argument_list|(
name|tWait
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalUnassigned
argument_list|(
name|tUnasg
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalUnassignedPrimary
argument_list|(
name|tUnasgPrim
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConsentNeeded
argument_list|(
name|conNeed
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalConsentNeeded
argument_list|(
name|tConNeed
argument_list|)
expr_stmt|;
name|ClassAssignment
name|a
init|=
operator|new
name|ClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|section
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|subpart
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalMethod
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setSubpart
argument_list|(
name|a
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" ("
operator|+
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|section
operator|.
name|getClassSuffix
argument_list|()
operator|==
literal|null
condition|?
name|section
operator|.
name|getSectionNumber
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|+
name|section
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSchedulingSubpartSuffix
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
else|:
name|section
operator|.
name|getClassSuffix
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|section
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExternalId
argument_list|(
name|section
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCancelled
argument_list|(
name|section
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|section
operator|.
name|getEnrollment
argument_list|()
block|,
name|section
operator|.
name|getSectioningLimit
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|Assignment
name|assignment
init|=
name|section
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|assignment
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|assignment
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|assignment
operator|.
name|getSlotPerMtg
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|assignment
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignment
operator|!=
literal|null
operator|&&
operator|!
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Location
name|rm
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|a
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|rm
operator|.
name|getLabelWithDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|isDisplayInstructor
argument_list|()
operator|&&
operator|!
name|section
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassInstructor
name|instructor
range|:
name|section
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
name|a
operator|.
name|addInstructor
argument_list|(
name|helper
operator|.
name|getInstructorNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmail
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|section
operator|.
name|getParentClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|section
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|course
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|section
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|setCredit
argument_list|(
name|section
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|section
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|section
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
operator|&&
name|course
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|setCredit
argument_list|(
name|course
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|course
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Float
name|creditOverride
init|=
name|section
operator|.
name|getCredit
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|creditOverride
operator|!=
literal|null
condition|)
name|a
operator|.
name|setCredit
argument_list|(
name|FixedCreditUnitConfig
operator|.
name|formatCredit
argument_list|(
name|creditOverride
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|consent
init|=
operator|(
name|course
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|course
operator|.
name|getConsentType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|consent
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|consent
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setExpected
argument_list|(
name|overExp
operator|.
name|getExpected
argument_list|(
name|section
operator|.
name|getSectioningLimit
argument_list|()
argument_list|,
name|section
operator|.
name|getSectioningInfo
argument_list|()
operator|==
literal|null
condition|?
literal|0.0
else|:
name|section
operator|.
name|getSectioningInfo
argument_list|()
operator|.
name|getNbrExpectedStudents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setAssignment
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|isConsentToDoCourse
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
return|return
name|iCoursesIcanApprove
operator|!=
literal|null
operator|&&
name|course
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
name|iCoursesIcanApprove
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|DbFindEnrollmentInfoCourseMatcher
extends|extends
name|FindEnrollmentInfoCourseMatcher
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|DbFindEnrollmentInfoCourseMatcher
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|coursesIcoordinate
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|coursesIcanApprove
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|subjects
parameter_list|,
name|Query
name|query
parameter_list|,
name|CourseLookup
name|lookup
parameter_list|)
block|{
name|super
argument_list|(
name|coursesIcoordinate
argument_list|,
name|coursesIcanApprove
argument_list|,
name|subjects
argument_list|,
name|query
argument_list|,
name|lookup
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isConsentToDoCourse
parameter_list|(
name|CourseOffering
name|co
parameter_list|)
block|{
return|return
name|iCoursesIcanApprove
operator|!=
literal|null
operator|&&
name|co
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
name|iCoursesIcanApprove
operator|.
name|contains
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|CourseOffering
name|co
parameter_list|)
block|{
return|return
name|co
operator|!=
literal|null
operator|&&
name|isCourseVisible
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|&&
name|hasMatchingSubjectArea
argument_list|(
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
operator|&&
name|iQuery
operator|.
name|match
argument_list|(
operator|new
name|DbCourseInfoMatcher
argument_list|(
name|co
argument_list|,
name|isConsentToDoCourse
argument_list|(
name|co
argument_list|)
argument_list|,
name|iLookup
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DbCourseInfoMatcher
implements|implements
name|TermMatcher
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|CourseOffering
name|iCourse
decl_stmt|;
specifier|private
name|boolean
name|iConsentToDoCourse
decl_stmt|;
specifier|private
name|CourseLookup
name|iLookup
decl_stmt|;
specifier|public
name|DbCourseInfoMatcher
parameter_list|(
name|CourseOffering
name|course
parameter_list|,
name|boolean
name|isConsentToDoCourse
parameter_list|,
name|CourseLookup
name|lookup
parameter_list|)
block|{
name|iCourse
operator|=
name|course
expr_stmt|;
name|iConsentToDoCourse
operator|=
name|isConsentToDoCourse
expr_stmt|;
name|iLookup
operator|=
name|lookup
expr_stmt|;
block|}
specifier|public
name|CourseOffering
name|course
parameter_list|()
block|{
return|return
name|iCourse
return|;
block|}
specifier|public
name|boolean
name|isConsentToDoCourse
parameter_list|()
block|{
return|return
name|iConsentToDoCourse
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
literal|"limit"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
literal|"lookup"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
name|iLookup
operator|.
name|getCourses
argument_list|(
name|term
argument_list|)
decl_stmt|;
return|return
operator|(
name|courseIds
operator|!=
literal|null
operator|&&
name|courseIds
operator|.
name|contains
argument_list|(
name|course
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
return|;
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"name"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"course"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|course
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
name|course
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
operator|(
name|course
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|course
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
if|if
condition|(
operator|(
name|attr
operator|==
literal|null
operator|&&
name|term
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|)
operator|||
literal|"title"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
operator|(
name|course
argument_list|()
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|course
argument_list|()
operator|.
name|getTitle
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
name|term
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"subject"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|course
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"number"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|course
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
if|if
condition|(
literal|"department"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
operator|(
name|course
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|==
literal|null
condition|?
name|course
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
else|:
name|course
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
if|if
condition|(
literal|"consent"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"none"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
literal|"No Consent"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
name|course
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
return|;
if|else if
condition|(
literal|"todo"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
literal|"To Do"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
name|isConsentToDoCourse
argument_list|()
return|;
else|else
return|return
name|course
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
return|;
block|}
if|if
condition|(
literal|"mode"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"registered"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
literal|"1"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
else|else
return|return
literal|false
return|;
block|}
return|return
name|attr
operator|!=
literal|null
return|;
comment|// pass unknown attributes lower
block|}
block|}
specifier|public
specifier|static
class|class
name|DbCourseRequestMatcher
extends|extends
name|DbCourseInfoMatcher
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|AcademicSessionInfo
name|iSession
decl_stmt|;
specifier|private
name|Student
name|iStudent
decl_stmt|;
specifier|private
name|CourseRequest
name|iRequest
decl_stmt|;
specifier|private
name|InstructionalOffering
name|iOffering
decl_stmt|;
specifier|private
name|String
name|iDefaultStatus
decl_stmt|;
specifier|private
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|iEnrollment
init|=
literal|null
decl_stmt|;
specifier|private
name|NameFormat
name|iFormat
init|=
literal|null
decl_stmt|;
specifier|private
name|Reservation
name|iReservation
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iReservationGuessed
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iMyStudent
init|=
literal|false
decl_stmt|;
specifier|public
name|DbCourseRequestMatcher
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|,
name|CourseRequest
name|request
parameter_list|,
name|boolean
name|isConsentToDoCourse
parameter_list|,
name|boolean
name|myStudent
parameter_list|,
name|NameFormat
name|format
parameter_list|,
name|CourseLookup
name|lookup
parameter_list|)
block|{
name|super
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
argument_list|,
name|isConsentToDoCourse
argument_list|,
name|lookup
argument_list|)
expr_stmt|;
name|iStudent
operator|=
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
expr_stmt|;
name|iRequest
operator|=
name|request
expr_stmt|;
name|iDefaultStatus
operator|=
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
expr_stmt|;
name|iOffering
operator|=
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
expr_stmt|;
name|iFormat
operator|=
name|format
expr_stmt|;
name|iMyStudent
operator|=
name|myStudent
expr_stmt|;
block|}
specifier|public
name|AcademicSessionInfo
name|session
parameter_list|()
block|{
return|return
name|iSession
return|;
block|}
specifier|public
name|CourseRequest
name|request
parameter_list|()
block|{
return|return
name|iRequest
return|;
block|}
specifier|public
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|enrollment
parameter_list|()
block|{
if|if
condition|(
name|iEnrollment
operator|==
literal|null
condition|)
name|iEnrollment
operator|=
name|iRequest
operator|.
name|getClassEnrollments
argument_list|()
expr_stmt|;
return|return
name|iEnrollment
return|;
block|}
specifier|public
name|Student
name|student
parameter_list|()
block|{
return|return
name|iStudent
return|;
block|}
specifier|public
name|String
name|status
parameter_list|()
block|{
return|return
name|student
argument_list|()
operator|.
name|getSectioningStatus
argument_list|()
operator|==
literal|null
condition|?
name|iDefaultStatus
else|:
name|student
argument_list|()
operator|.
name|getSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
return|;
block|}
specifier|public
name|InstructionalOffering
name|offering
parameter_list|()
block|{
return|return
name|iOffering
return|;
block|}
specifier|public
name|String
name|approval
parameter_list|()
block|{
if|if
condition|(
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|String
argument_list|>
name|approval
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|enrollment
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getApprovedBy
argument_list|()
operator|==
literal|null
operator|||
name|e
operator|.
name|getApprovedDate
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|approval
operator|.
name|add
argument_list|(
name|e
operator|.
name|getApprovedBy
argument_list|()
argument_list|)
condition|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"|"
operator|)
operator|+
name|e
operator|.
name|getApprovedBy
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Reservation
name|reservation
parameter_list|()
block|{
if|if
condition|(
operator|!
name|iReservationGuessed
condition|)
block|{
name|iReservation
operator|=
name|guessReservation
argument_list|()
expr_stmt|;
name|iReservationGuessed
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|iReservation
return|;
block|}
specifier|protected
name|Reservation
name|guessReservation
parameter_list|()
block|{
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|enrollment
init|=
name|enrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|Reservation
name|best
init|=
literal|null
decl_stmt|;
name|boolean
name|mustBeUsed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Reservation
name|reservation
range|:
name|iOffering
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|isApplicable
argument_list|(
name|iStudent
argument_list|,
name|iRequest
argument_list|)
operator|&&
name|reservation
operator|.
name|isMatching
argument_list|(
name|enrollment
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|mustBeUsed
operator|&&
name|reservation
operator|.
name|isMustBeUsed
argument_list|()
condition|)
block|{
name|best
operator|=
literal|null
expr_stmt|;
name|mustBeUsed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|mustBeUsed
operator|&&
operator|!
name|reservation
operator|.
name|isMustBeUsed
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|best
operator|==
literal|null
operator|||
name|reservation
operator|.
name|compareTo
argument_list|(
name|best
argument_list|)
operator|<
literal|0.0
condition|)
name|best
operator|=
name|reservation
expr_stmt|;
block|}
block|}
return|return
name|best
return|;
block|}
specifier|public
name|boolean
name|canAssign
parameter_list|()
block|{
if|if
condition|(
operator|!
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
name|int
name|alt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseDemand
name|demand
range|:
name|student
argument_list|()
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
name|boolean
name|course
init|=
operator|(
operator|!
name|demand
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|assigned
init|=
operator|!
name|course
decl_stmt|;
if|if
condition|(
name|course
condition|)
for|for
control|(
name|CourseRequest
name|request
range|:
name|demand
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
operator|!
name|request
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assigned
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|demand
operator|.
name|equals
argument_list|(
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|assigned
condition|)
return|return
literal|false
return|;
else|else
name|assigned
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|waitlist
init|=
operator|(
name|course
operator|&&
name|demand
operator|.
name|isWaitlist
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|demand
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
if|if
condition|(
name|assigned
condition|)
name|alt
operator|--
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|course
operator|&&
operator|!
name|waitlist
operator|&&
operator|!
name|assigned
condition|)
name|alt
operator|++
expr_stmt|;
block|}
block|}
return|return
name|alt
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"name"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"title"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"subject"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"number"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"course"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"lookup"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"department"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"registered"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
return|return
name|super
operator|.
name|match
argument_list|(
name|attr
argument_list|,
name|term
argument_list|)
return|;
if|if
condition|(
literal|"limit"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
literal|"area"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
name|student
argument_list|()
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"clasf"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"classification"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
name|student
argument_list|()
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"major"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
name|student
argument_list|()
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"group"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|StudentGroup
name|group
range|:
name|student
argument_list|()
operator|.
name|getGroups
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
for|for
control|(
name|StudentGroup
name|group
range|:
name|student
argument_list|()
operator|.
name|getGroups
argument_list|()
control|)
if|if
condition|(
name|group
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|attr
operator|!=
literal|null
operator|&&
name|eq
argument_list|(
name|group
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|attr
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|' '
argument_list|)
argument_list|)
operator|&&
name|eq
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"accommodation"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|StudentAccomodation
name|acc
range|:
name|student
argument_list|()
operator|.
name|getAccomodations
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|acc
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"student"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|DataExchangeTrimLeadingZerosFromExternalIds
operator|.
name|isTrue
argument_list|()
operator|&&
name|term
operator|.
name|startsWith
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
return|return
name|has
argument_list|(
name|iFormat
operator|.
name|format
argument_list|(
name|student
argument_list|()
argument_list|)
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|student
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|term
operator|.
name|replaceFirst
argument_list|(
literal|"^0+(?!$)"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|||
name|eq
argument_list|(
name|iFormat
operator|.
name|format
argument_list|(
name|student
argument_list|()
argument_list|)
argument_list|,
name|term
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|has
argument_list|(
name|iFormat
operator|.
name|format
argument_list|(
name|student
argument_list|()
argument_list|)
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|student
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|iFormat
operator|.
name|format
argument_list|(
name|student
argument_list|()
argument_list|)
argument_list|,
name|term
argument_list|)
return|;
block|}
block|}
if|if
condition|(
literal|"advisor"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|DataExchangeTrimLeadingZerosFromExternalIds
operator|.
name|isTrue
argument_list|()
operator|&&
name|term
operator|.
name|startsWith
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
for|for
control|(
name|Advisor
name|a
range|:
name|student
argument_list|()
operator|.
name|getAdvisors
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|a
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|term
operator|.
name|replaceFirst
argument_list|(
literal|"^0+(?!$)"
argument_list|,
literal|""
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
for|for
control|(
name|Advisor
name|a
range|:
name|student
argument_list|()
operator|.
name|getAdvisors
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|a
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
literal|"assignment"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"Assigned"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
operator|!
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
if|else if
condition|(
name|eq
argument_list|(
literal|"Reserved"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
operator|!
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|reservation
argument_list|()
operator|!=
literal|null
return|;
block|}
if|else if
condition|(
name|eq
argument_list|(
literal|"Not Assigned"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
if|else if
condition|(
name|eq
argument_list|(
literal|"Wait-Listed"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isWaitlist
argument_list|()
return|;
block|}
if|else if
condition|(
name|eq
argument_list|(
literal|"Critical"
argument_list|,
name|term
argument_list|)
condition|)
block|{
if|if
condition|(
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isCriticalOverride
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isCriticalOverride
argument_list|()
operator|.
name|booleanValue
argument_list|()
return|;
return|return
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isCritical
argument_list|()
operator|!=
literal|null
operator|&&
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isCritical
argument_list|()
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
if|if
condition|(
literal|"assigned"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"scheduled"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"true"
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
literal|"1"
argument_list|,
name|term
argument_list|)
condition|)
return|return
operator|!
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
else|else
return|return
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
if|if
condition|(
literal|"waitlisted"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"waitlist"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"true"
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
literal|"1"
argument_list|,
name|term
argument_list|)
condition|)
return|return
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isWaitlist
argument_list|()
return|;
else|else
return|return
operator|!
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
if|if
condition|(
literal|"reservation"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"reserved"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"true"
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
literal|"1"
argument_list|,
name|term
argument_list|)
condition|)
return|return
operator|!
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|reservation
argument_list|()
operator|!=
literal|null
return|;
else|else
return|return
operator|!
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|reservation
argument_list|()
operator|==
literal|null
return|;
block|}
if|if
condition|(
literal|"consent"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"none"
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
literal|"No Consent"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|course
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
return|;
block|}
if|else if
condition|(
name|eq
argument_list|(
literal|"Required"
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
literal|"Consent"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|course
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
if|else if
condition|(
name|eq
argument_list|(
literal|"Approved"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|course
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|approval
argument_list|()
operator|!=
literal|null
return|;
block|}
if|else if
condition|(
name|eq
argument_list|(
literal|"Waiting"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|course
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|approval
argument_list|()
operator|==
literal|null
return|;
block|}
if|else if
condition|(
name|eq
argument_list|(
literal|"todo"
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
literal|"To Do"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|isConsentToDoCourse
argument_list|()
operator|&&
name|course
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|approval
argument_list|()
operator|==
literal|null
return|;
block|}
else|else
block|{
return|return
name|course
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|(
name|approval
argument_list|()
operator|!=
literal|null
operator|&&
name|has
argument_list|(
name|approval
argument_list|()
argument_list|,
name|term
argument_list|)
operator|)
operator|||
name|eq
argument_list|(
name|course
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|term
argument_list|)
operator|)
operator|)
return|;
block|}
block|}
if|if
condition|(
literal|"mode"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"My Students"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|iMyStudent
return|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"approver"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|course
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|approval
argument_list|()
operator|!=
literal|null
operator|&&
name|has
argument_list|(
name|approval
argument_list|()
argument_list|,
name|term
argument_list|)
return|;
block|}
if|if
condition|(
literal|"status"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"default"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
literal|"Not Set"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
name|student
argument_list|()
operator|.
name|getSectioningStatus
argument_list|()
operator|==
literal|null
return|;
return|return
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|status
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
literal|"credit"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|float
name|min
init|=
literal|0
decl_stmt|,
name|max
init|=
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
name|Credit
name|prefix
init|=
name|Credit
operator|.
name|eq
decl_stmt|;
name|String
name|number
init|=
name|term
decl_stmt|;
if|if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|le
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|ge
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|lt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|gt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|eq
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|im
init|=
literal|null
decl_stmt|;
try|try
block|{
name|float
name|a
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|number
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|prefix
condition|)
block|{
case|case
name|eq
case|:
name|min
operator|=
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|// = a
case|case
name|le
case|:
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|//<= a
case|case
name|ge
case|:
name|min
operator|=
name|a
expr_stmt|;
break|break;
comment|//>= a
case|case
name|lt
case|:
name|max
operator|=
name|a
operator|-
literal|1
expr_stmt|;
break|break;
comment|//< a
case|case
name|gt
case|:
name|min
operator|=
name|a
operator|+
literal|1
expr_stmt|;
break|break;
comment|//> a
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9]+\\.?[0-9]*)([^0-9\\.].*)"
argument_list|)
operator|.
name|matcher
argument_list|(
name|number
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|float
name|a
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|im
operator|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|prefix
condition|)
block|{
case|case
name|eq
case|:
name|min
operator|=
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|// = a
case|case
name|le
case|:
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|//<= a
case|case
name|ge
case|:
name|min
operator|=
name|a
expr_stmt|;
break|break;
comment|//>= a
case|case
name|lt
case|:
name|max
operator|=
name|a
operator|-
literal|1
expr_stmt|;
break|break;
comment|//< a
case|case
name|gt
case|:
name|min
operator|=
name|a
operator|+
literal|1
expr_stmt|;
break|break;
comment|//> a
block|}
block|}
block|}
if|if
condition|(
name|term
operator|.
name|contains
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|a
init|=
name|term
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|term
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|b
init|=
name|term
operator|.
name|substring
argument_list|(
name|term
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
name|min
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|max
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9]+\\.?[0-9]*)\\.\\.([0-9]+\\.?[0-9]*)([^0-9].*)"
argument_list|)
operator|.
name|matcher
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|min
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|max
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|im
operator|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|float
name|credit
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|student
argument_list|()
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
name|courseIds
operator|.
name|add
argument_list|(
name|e
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|CourseCreditUnitConfig
name|config
init|=
name|e
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCredit
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"!"
operator|.
name|equals
argument_list|(
name|im
argument_list|)
operator|&&
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalMethod
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
if|if
condition|(
name|im
operator|!=
literal|null
operator|&&
operator|!
literal|"!"
operator|.
name|equals
argument_list|(
name|im
argument_list|)
operator|&&
operator|(
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|im
operator|.
name|equalsIgnoreCase
argument_list|(
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
operator|)
condition|)
continue|continue;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
name|credit
operator|+=
name|config
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|min
operator|<=
name|credit
operator|&&
name|credit
operator|<=
name|max
return|;
block|}
if|if
condition|(
literal|"overlap"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|int
name|min
init|=
literal|0
decl_stmt|,
name|max
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|Credit
name|prefix
init|=
name|Credit
operator|.
name|eq
decl_stmt|;
name|String
name|number
init|=
name|term
decl_stmt|;
if|if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|le
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|ge
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|lt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|gt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|eq
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|a
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|prefix
condition|)
block|{
case|case
name|eq
case|:
name|min
operator|=
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|// = a
case|case
name|le
case|:
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|//<= a
case|case
name|ge
case|:
name|min
operator|=
name|a
expr_stmt|;
break|break;
comment|//>= a
case|case
name|lt
case|:
name|max
operator|=
name|a
operator|-
literal|1
expr_stmt|;
break|break;
comment|//< a
case|case
name|gt
case|:
name|min
operator|=
name|a
operator|+
literal|1
expr_stmt|;
break|break;
comment|//> a
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|term
operator|.
name|contains
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|a
init|=
name|term
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|term
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|b
init|=
name|term
operator|.
name|substring
argument_list|(
name|term
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
name|min
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|max
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
name|int
name|share
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|section
range|:
name|student
argument_list|()
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
name|Assignment
name|assignment
init|=
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|StudentClassEnrollment
name|otherSection
range|:
name|student
argument_list|()
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|equals
argument_list|(
name|otherSection
argument_list|)
condition|)
continue|continue;
name|Assignment
name|otherAssignment
init|=
name|otherSection
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherAssignment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|otherAssignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
operator|&&
operator|!
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|isToIgnoreStudentConflictsWith
argument_list|(
name|otherSection
operator|.
name|getClazz
argument_list|()
argument_list|)
operator|&&
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|<
name|otherSection
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
condition|)
block|{
name|int
name|sh
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|nrSharedDays
argument_list|(
name|otherAssignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
operator|*
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|nrSharedHours
argument_list|(
name|otherAssignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|share
operator|+=
name|sh
expr_stmt|;
block|}
block|}
block|}
return|return
name|min
operator|<=
name|share
operator|&&
name|share
operator|<=
name|max
return|;
block|}
if|if
condition|(
literal|"override"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"null"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
literal|"None"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
name|request
argument_list|()
operator|.
name|getOverrideStatus
argument_list|()
operator|==
literal|null
return|;
name|CourseRequestOverrideStatus
name|status
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequestOverrideStatus
name|s
range|:
name|CourseRequestOverrideStatus
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
block|{
name|status
operator|=
name|s
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// if (student().getOverrideStatus() != null&& student().getOverrideStatus() == status.ordinal()) return true;
if|if
condition|(
name|request
argument_list|()
operator|.
name|getOverrideStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|request
argument_list|()
operator|.
name|getOverrideStatus
argument_list|()
operator|==
name|status
operator|.
name|ordinal
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
if|if
condition|(
literal|"prefer"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"Any Preference"
argument_list|,
name|term
argument_list|)
condition|)
return|return
operator|!
name|request
argument_list|()
operator|.
name|getPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
if|if
condition|(
name|eq
argument_list|(
literal|"Met Preference"
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
literal|"Unmet Preference"
argument_list|,
name|term
argument_list|)
condition|)
block|{
if|if
condition|(
name|enrollment
argument_list|()
operator|==
literal|null
operator|||
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"Unmet Preference"
argument_list|,
name|term
argument_list|)
condition|)
return|return
operator|!
name|request
argument_list|()
operator|.
name|getPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
return|return
literal|false
return|;
block|}
name|boolean
name|hasPref
init|=
literal|false
decl_stmt|,
name|hasIm
init|=
literal|false
decl_stmt|,
name|im
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allSubpart
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|selectedSubparts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentSectioningPref
name|p
range|:
name|request
argument_list|()
operator|.
name|getPreferences
argument_list|()
control|)
block|{
name|hasPref
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|StudentInstrMthPref
condition|)
block|{
name|hasIm
operator|=
literal|true
expr_stmt|;
name|StudentInstrMthPref
name|imp
init|=
operator|(
name|StudentInstrMthPref
operator|)
name|p
decl_stmt|;
name|InstructionalMethod
name|method
init|=
name|enrollment
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
operator|&&
name|method
operator|.
name|equals
argument_list|(
name|imp
operator|.
name|getInstructionalMethod
argument_list|()
argument_list|)
condition|)
block|{
name|im
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|p
operator|instanceof
name|StudentClassPref
condition|)
block|{
name|StudentClassPref
name|scp
init|=
operator|(
name|StudentClassPref
operator|)
name|p
decl_stmt|;
name|allSubpart
operator|.
name|add
argument_list|(
name|scp
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|section
range|:
name|enrollment
argument_list|()
control|)
block|{
if|if
condition|(
name|scp
operator|.
name|getClazz
argument_list|()
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
name|selectedSubparts
operator|.
name|add
argument_list|(
name|scp
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|eq
argument_list|(
literal|"Met Preference"
argument_list|,
name|term
argument_list|)
condition|)
return|return
name|hasPref
operator|&&
operator|(
name|hasIm
operator|==
name|im
operator|)
operator|&&
operator|(
name|selectedSubparts
operator|.
name|size
argument_list|()
operator|==
name|allSubpart
operator|.
name|size
argument_list|()
operator|)
return|;
else|else
return|return
name|hasPref
operator|&&
operator|(
name|hasIm
operator|!=
name|im
operator|||
name|selectedSubparts
operator|.
name|size
argument_list|()
operator|!=
name|allSubpart
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
for|for
control|(
name|StudentSectioningPref
name|p
range|:
name|request
argument_list|()
operator|.
name|getPreferences
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|p
operator|.
name|getLabel
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
if|if
condition|(
literal|"require"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"Any Requirement"
argument_list|,
name|term
argument_list|)
condition|)
block|{
for|for
control|(
name|StudentSectioningPref
name|p
range|:
name|request
argument_list|()
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|isRequired
argument_list|()
condition|)
continue|continue;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|eq
argument_list|(
literal|"Met Requirement"
argument_list|,
name|term
argument_list|)
condition|)
block|{
if|if
condition|(
name|enrollment
argument_list|()
operator|==
literal|null
operator|||
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|boolean
name|hasPref
init|=
literal|false
decl_stmt|,
name|hasIm
init|=
literal|false
decl_stmt|,
name|im
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allSubpart
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|selectedSubparts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentSectioningPref
name|p
range|:
name|request
argument_list|()
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|isRequired
argument_list|()
condition|)
continue|continue;
name|hasPref
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|StudentInstrMthPref
condition|)
block|{
name|hasIm
operator|=
literal|true
expr_stmt|;
name|StudentInstrMthPref
name|imp
init|=
operator|(
name|StudentInstrMthPref
operator|)
name|p
decl_stmt|;
name|InstructionalMethod
name|method
init|=
name|enrollment
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
operator|&&
name|method
operator|.
name|equals
argument_list|(
name|imp
operator|.
name|getInstructionalMethod
argument_list|()
argument_list|)
condition|)
block|{
name|im
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|p
operator|instanceof
name|StudentClassPref
condition|)
block|{
name|StudentClassPref
name|scp
init|=
operator|(
name|StudentClassPref
operator|)
name|p
decl_stmt|;
name|allSubpart
operator|.
name|add
argument_list|(
name|scp
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|section
range|:
name|enrollment
argument_list|()
control|)
block|{
if|if
condition|(
name|scp
operator|.
name|getClazz
argument_list|()
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
name|selectedSubparts
operator|.
name|add
argument_list|(
name|scp
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|hasPref
operator|&&
operator|(
name|hasIm
operator|==
name|im
operator|)
operator|&&
operator|(
name|selectedSubparts
operator|.
name|size
argument_list|()
operator|==
name|allSubpart
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
if|if
condition|(
name|eq
argument_list|(
literal|"Unmet Requirement"
argument_list|,
name|term
argument_list|)
condition|)
block|{
if|if
condition|(
name|enrollment
argument_list|()
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|StudentSectioningPref
name|p
range|:
name|request
argument_list|()
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|isRequired
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
for|for
control|(
name|StudentSectioningPref
name|p
range|:
name|request
argument_list|()
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|isRequired
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|eq
argument_list|(
name|p
operator|.
name|getLabel
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|enrollment
argument_list|()
control|)
block|{
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"crn"
argument_list|)
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"id"
argument_list|)
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"externalId"
argument_list|)
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"exid"
argument_list|)
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|e
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|term
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"day"
argument_list|)
condition|)
block|{
name|Assignment
name|assignment
init|=
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"none"
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|int
name|day
init|=
name|parseDay
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|day
operator|>
literal|0
operator|&&
operator|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|&
name|day
operator|)
operator|==
name|day
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"time"
argument_list|)
condition|)
block|{
name|Assignment
name|assignment
init|=
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"none"
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|int
name|start
init|=
name|parseStart
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|>=
literal|0
operator|&&
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|==
name|start
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|!=
literal|null
operator|&&
name|attr
operator|.
name|equals
argument_list|(
literal|"before"
argument_list|)
condition|)
block|{
name|Assignment
name|assignment
init|=
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|int
name|end
init|=
name|parseStart
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|>=
literal|0
operator|&&
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|+
name|assignment
operator|.
name|getSlotPerMtg
argument_list|()
operator|-
name|assignment
operator|.
name|getBreakTime
argument_list|()
operator|/
literal|5
operator|<=
name|end
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|!=
literal|null
operator|&&
name|attr
operator|.
name|equals
argument_list|(
literal|"after"
argument_list|)
condition|)
block|{
name|Assignment
name|assignment
init|=
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|int
name|start
init|=
name|parseStart
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|>=
literal|0
operator|&&
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|>=
name|start
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"date"
argument_list|)
condition|)
block|{
name|ClassEvent
name|event
init|=
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"none"
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|df
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_PATTERN
argument_list|)
decl_stmt|;
for|for
control|(
name|Meeting
name|m
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|eq
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"room"
argument_list|)
condition|)
block|{
name|Assignment
name|assignment
init|=
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|assignment
operator|==
literal|null
operator|||
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"none"
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Location
name|room
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|has
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"instr"
argument_list|)
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"instructor"
argument_list|)
condition|)
block|{
if|if
condition|(
name|attr
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"none"
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|ClassInstructor
name|instuctor
range|:
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|has
argument_list|(
name|iFormat
operator|.
name|format
argument_list|(
name|instuctor
operator|.
name|getInstructor
argument_list|()
argument_list|)
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|instuctor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|instuctor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|email
init|=
name|instuctor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
decl_stmt|;
if|if
condition|(
name|email
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
operator|>=
literal|0
condition|)
name|email
operator|=
name|email
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|email
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|eq
argument_list|(
name|email
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
name|int
name|start
init|=
name|parseStart
argument_list|(
name|attr
operator|+
literal|":"
operator|+
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|>=
literal|0
operator|&&
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|==
name|start
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|eq
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|has
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|eq
argument_list|(
name|name
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|String
name|t
range|:
name|name
operator|.
name|split
argument_list|(
literal|" |,"
argument_list|)
control|)
if|if
condition|(
name|t
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|int
name|parseDay
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|int
name|days
init|=
literal|0
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
do|do
block|{
name|found
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|longDays
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator||=
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|days
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator||=
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|days
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator||=
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator||=
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|freeTimeShortDays
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|freeTimeShortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator||=
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|freeTimeShortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|found
condition|)
do|;
return|return
operator|(
name|token
operator|.
name|isEmpty
argument_list|()
condition|?
name|days
else|:
literal|0
operator|)
return|;
block|}
specifier|private
name|int
name|parseStart
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|int
name|startHour
init|=
literal|0
decl_stmt|,
name|startMin
init|=
literal|0
decl_stmt|;
name|String
name|number
init|=
literal|""
decl_stmt|;
while|while
condition|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'0'
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|<=
literal|'9'
condition|)
block|{
name|number
operator|+=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|number
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|number
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
name|startHour
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
operator|/
literal|100
expr_stmt|;
name|startMin
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
operator|%
literal|100
expr_stmt|;
block|}
else|else
block|{
name|startHour
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|number
operator|=
literal|""
expr_stmt|;
while|while
condition|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'0'
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|<=
literal|'9'
condition|)
block|{
name|number
operator|+=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|number
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|startMin
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|hasAmOrPm
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"am"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"pm"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|startHour
operator|<
literal|12
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|startHour
operator|<
literal|12
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
block|}
if|if
condition|(
name|startHour
operator|<
literal|7
operator|&&
operator|!
name|hasAmOrPm
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
if|if
condition|(
name|startMin
operator|%
literal|5
operator|!=
literal|0
condition|)
name|startMin
operator|=
literal|5
operator|*
operator|(
operator|(
name|startMin
operator|+
literal|2
operator|)
operator|/
literal|5
operator|)
expr_stmt|;
if|if
condition|(
name|startHour
operator|==
literal|7
operator|&&
name|startMin
operator|==
literal|0
operator|&&
operator|!
name|hasAmOrPm
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
return|return
operator|(
literal|60
operator|*
name|startHour
operator|+
name|startMin
operator|)
operator|/
literal|5
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DbStudentMatcher
implements|implements
name|TermMatcher
block|{
specifier|private
name|Student
name|iStudent
decl_stmt|;
specifier|private
name|String
name|iDefaultStatus
decl_stmt|;
specifier|private
name|NameFormat
name|iFormat
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iMyStudent
init|=
literal|false
decl_stmt|;
specifier|public
name|DbStudentMatcher
parameter_list|(
name|Student
name|student
parameter_list|,
name|String
name|defaultStatus
parameter_list|,
name|NameFormat
name|format
parameter_list|,
name|boolean
name|myStudent
parameter_list|)
block|{
name|iStudent
operator|=
name|student
expr_stmt|;
name|iDefaultStatus
operator|=
name|defaultStatus
expr_stmt|;
name|iFormat
operator|=
name|format
expr_stmt|;
name|iMyStudent
operator|=
name|myStudent
expr_stmt|;
block|}
specifier|public
name|DbStudentMatcher
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|iStudent
operator|=
name|student
expr_stmt|;
name|iDefaultStatus
operator|=
operator|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
operator|)
expr_stmt|;
name|iFormat
operator|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingStudentNameFormat
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Student
name|student
parameter_list|()
block|{
return|return
name|iStudent
return|;
block|}
specifier|public
name|String
name|status
parameter_list|()
block|{
return|return
operator|(
name|iStudent
operator|.
name|getSectioningStatus
argument_list|()
operator|==
literal|null
condition|?
name|iDefaultStatus
else|:
name|iStudent
operator|.
name|getSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|attr
operator|==
literal|null
operator|&&
name|term
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
literal|"limit"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
literal|"area"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
name|student
argument_list|()
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"clasf"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"classification"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
name|student
argument_list|()
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"major"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
name|student
argument_list|()
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"group"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|StudentGroup
name|group
range|:
name|student
argument_list|()
operator|.
name|getGroups
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"accommodation"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|StudentAccomodation
name|acc
range|:
name|student
argument_list|()
operator|.
name|getAccomodations
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|acc
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"student"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|has
argument_list|(
name|iFormat
operator|.
name|format
argument_list|(
name|student
argument_list|()
argument_list|)
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|student
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|iFormat
operator|.
name|format
argument_list|(
name|student
argument_list|()
argument_list|)
argument_list|,
name|term
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"advisor"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|Advisor
name|a
range|:
name|student
argument_list|()
operator|.
name|getAdvisors
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|a
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
if|else if
condition|(
literal|"registered"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"true"
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
literal|"1"
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|false
return|;
else|else
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"status"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"default"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
literal|"Not Set"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
name|iStudent
operator|.
name|getSectioningStatus
argument_list|()
operator|==
literal|null
return|;
return|return
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|status
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"credit"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|float
name|min
init|=
literal|0
decl_stmt|,
name|max
init|=
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
name|Credit
name|prefix
init|=
name|Credit
operator|.
name|eq
decl_stmt|;
name|String
name|number
init|=
name|term
decl_stmt|;
if|if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|le
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|ge
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|lt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|gt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|eq
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|im
init|=
literal|null
decl_stmt|;
try|try
block|{
name|float
name|a
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|number
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|prefix
condition|)
block|{
case|case
name|eq
case|:
name|min
operator|=
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|// = a
case|case
name|le
case|:
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|//<= a
case|case
name|ge
case|:
name|min
operator|=
name|a
expr_stmt|;
break|break;
comment|//>= a
case|case
name|lt
case|:
name|max
operator|=
name|a
operator|-
literal|1
expr_stmt|;
break|break;
comment|//< a
case|case
name|gt
case|:
name|min
operator|=
name|a
operator|+
literal|1
expr_stmt|;
break|break;
comment|//> a
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9]+\\.?[0-9]*)([^0-9\\.].*)"
argument_list|)
operator|.
name|matcher
argument_list|(
name|number
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|float
name|a
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|im
operator|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|prefix
condition|)
block|{
case|case
name|eq
case|:
name|min
operator|=
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|// = a
case|case
name|le
case|:
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|//<= a
case|case
name|ge
case|:
name|min
operator|=
name|a
expr_stmt|;
break|break;
comment|//>= a
case|case
name|lt
case|:
name|max
operator|=
name|a
operator|-
literal|1
expr_stmt|;
break|break;
comment|//< a
case|case
name|gt
case|:
name|min
operator|=
name|a
operator|+
literal|1
expr_stmt|;
break|break;
comment|//> a
block|}
block|}
block|}
if|if
condition|(
name|term
operator|.
name|contains
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|a
init|=
name|term
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|term
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|b
init|=
name|term
operator|.
name|substring
argument_list|(
name|term
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
name|min
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|max
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9]+\\.?[0-9]*)\\.\\.([0-9]+\\.?[0-9]*)([^0-9].*)"
argument_list|)
operator|.
name|matcher
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|min
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|max
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|im
operator|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|float
name|credit
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|student
argument_list|()
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
name|courseIds
operator|.
name|add
argument_list|(
name|e
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|CourseCreditUnitConfig
name|config
init|=
name|e
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCredit
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"!"
operator|.
name|equals
argument_list|(
name|im
argument_list|)
operator|&&
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalMethod
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
if|if
condition|(
name|im
operator|!=
literal|null
operator|&&
operator|!
literal|"!"
operator|.
name|equals
argument_list|(
name|im
argument_list|)
operator|&&
operator|(
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|im
operator|.
name|equalsIgnoreCase
argument_list|(
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
operator|)
condition|)
continue|continue;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
name|credit
operator|+=
name|config
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|min
operator|<=
name|credit
operator|&&
name|credit
operator|<=
name|max
return|;
block|}
if|else if
condition|(
literal|"overlap"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|int
name|min
init|=
literal|0
decl_stmt|,
name|max
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|Credit
name|prefix
init|=
name|Credit
operator|.
name|eq
decl_stmt|;
name|String
name|number
init|=
name|term
decl_stmt|;
if|if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|le
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|ge
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|lt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|gt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|eq
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|a
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|prefix
condition|)
block|{
case|case
name|eq
case|:
name|min
operator|=
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|// = a
case|case
name|le
case|:
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|//<= a
case|case
name|ge
case|:
name|min
operator|=
name|a
expr_stmt|;
break|break;
comment|//>= a
case|case
name|lt
case|:
name|max
operator|=
name|a
operator|-
literal|1
expr_stmt|;
break|break;
comment|//< a
case|case
name|gt
case|:
name|min
operator|=
name|a
operator|+
literal|1
expr_stmt|;
break|break;
comment|//> a
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|term
operator|.
name|contains
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|a
init|=
name|term
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|term
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|b
init|=
name|term
operator|.
name|substring
argument_list|(
name|term
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
name|min
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|max
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
name|int
name|share
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|section
range|:
name|student
argument_list|()
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
name|Assignment
name|assignment
init|=
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|StudentClassEnrollment
name|otherSection
range|:
name|student
argument_list|()
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|equals
argument_list|(
name|otherSection
argument_list|)
condition|)
continue|continue;
name|Assignment
name|otherAssignment
init|=
name|otherSection
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherAssignment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|otherAssignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
operator|&&
operator|!
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|isToIgnoreStudentConflictsWith
argument_list|(
name|otherSection
operator|.
name|getClazz
argument_list|()
argument_list|)
operator|&&
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|<
name|otherSection
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
condition|)
block|{
name|int
name|sh
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|nrSharedDays
argument_list|(
name|otherAssignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
operator|*
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|nrSharedHours
argument_list|(
name|otherAssignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|share
operator|+=
name|sh
expr_stmt|;
block|}
block|}
block|}
return|return
name|min
operator|<=
name|share
operator|&&
name|share
operator|<=
name|max
return|;
block|}
if|else if
condition|(
literal|"override"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"null"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
literal|"None"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
block|{
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
argument_list|()
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideStatus
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|CourseRequestOverrideStatus
name|status
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequestOverrideStatus
name|s
range|:
name|CourseRequestOverrideStatus
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
block|{
name|status
operator|=
name|s
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|student
argument_list|()
operator|.
name|getOverrideStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|student
argument_list|()
operator|.
name|getOverrideStatus
argument_list|()
operator|==
name|status
operator|.
name|ordinal
argument_list|()
condition|)
return|return
literal|true
return|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
argument_list|()
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOverrideStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|cr
operator|.
name|getOverrideStatus
argument_list|()
operator|==
name|status
operator|.
name|ordinal
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
if|else if
condition|(
literal|"mode"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
literal|"My Students"
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
name|iMyStudent
return|;
block|}
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StudentGroup
name|group
range|:
name|student
argument_list|()
operator|.
name|getGroups
argument_list|()
control|)
if|if
condition|(
name|group
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|eq
argument_list|(
name|group
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|attr
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|' '
argument_list|)
argument_list|)
operator|&&
name|eq
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|eq
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|has
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|eq
argument_list|(
name|name
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|String
name|t
range|:
name|name
operator|.
name|split
argument_list|(
literal|" |,"
argument_list|)
control|)
if|if
condition|(
name|t
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DbFindStudentInfoMatcher
extends|extends
name|FindStudentInfoMatcher
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
name|NameFormat
name|iFormat
decl_stmt|;
specifier|public
name|DbFindStudentInfoMatcher
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|,
name|Query
name|query
parameter_list|,
name|NameFormat
name|format
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|myStudents
parameter_list|)
block|{
name|super
argument_list|(
name|session
argument_list|,
name|query
argument_list|,
name|myStudents
argument_list|)
expr_stmt|;
name|iFormat
operator|=
name|format
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMyStudent
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
return|return
name|iMyStudents
operator|!=
literal|null
operator|&&
name|iMyStudents
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
return|return
name|student
operator|!=
literal|null
operator|&&
name|iQuery
operator|.
name|match
argument_list|(
operator|new
name|DbStudentMatcher
argument_list|(
name|student
argument_list|,
name|iDefaultSectioningStatus
argument_list|,
name|iFormat
argument_list|,
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

