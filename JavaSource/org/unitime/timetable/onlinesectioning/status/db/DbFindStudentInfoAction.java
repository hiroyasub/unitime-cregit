begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|AdvisedInfoInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|StudentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Advisor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AdvisorCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentInstrMthPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentNote
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|FindStudentInfoAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|SectioningStatusFilterAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|StatusPageSuggestionsAction
operator|.
name|CourseLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|db
operator|.
name|DbFindEnrollmentInfoAction
operator|.
name|DbCourseRequestMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|db
operator|.
name|DbFindEnrollmentInfoAction
operator|.
name|DbFindStudentInfoMatcher
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|DbFindStudentInfoAction
extends|extends
name|FindStudentInfoAction
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|boolean
name|isMyStudent
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
return|return
name|iMyStudents
operator|!=
literal|null
operator|&&
name|iMyStudents
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isCanSelect
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
if|if
condition|(
name|iIsAdmin
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iIsAdvisor
condition|)
block|{
if|if
condition|(
name|iCanEditOtherStudents
operator|||
operator|(
name|iCanEditMyStudents
operator|&&
name|isMyStudent
argument_list|(
name|student
argument_list|)
operator|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|StudentInfo
argument_list|>
name|execute
parameter_list|(
specifier|final
name|OnlineSectioningServer
name|server
parameter_list|,
specifier|final
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
name|iFilter
operator|==
literal|null
condition|)
return|return
name|super
operator|.
name|execute
argument_list|(
name|server
argument_list|,
name|helper
argument_list|)
return|;
name|Map
argument_list|<
name|Long
argument_list|,
name|StudentInfo
argument_list|>
name|students
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|StudentInfo
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|gEnrl
init|=
literal|0
decl_stmt|,
name|gWait
init|=
literal|0
decl_stmt|,
name|gRes
init|=
literal|0
decl_stmt|,
name|gUnasg
init|=
literal|0
decl_stmt|;
name|int
name|gtEnrl
init|=
literal|0
decl_stmt|,
name|gtWait
init|=
literal|0
decl_stmt|,
name|gtRes
init|=
literal|0
decl_stmt|,
name|gtUnasg
init|=
literal|0
decl_stmt|;
name|int
name|gConNeed
init|=
literal|0
decl_stmt|,
name|gtConNeed
init|=
literal|0
decl_stmt|,
name|gOvrNeed
init|=
literal|0
decl_stmt|,
name|gtOvrNeed
init|=
literal|0
decl_stmt|;
name|int
name|gDist
init|=
literal|0
decl_stmt|,
name|gtDist
init|=
literal|0
decl_stmt|,
name|gNrDC
init|=
literal|0
decl_stmt|,
name|gtNrDC
init|=
literal|0
decl_stmt|,
name|gShr
init|=
literal|0
decl_stmt|,
name|gtShr
init|=
literal|0
decl_stmt|;
name|int
name|gFre
init|=
literal|0
decl_stmt|,
name|gtFre
init|=
literal|0
decl_stmt|,
name|gPIM
init|=
literal|0
decl_stmt|,
name|gtPIM
init|=
literal|0
decl_stmt|,
name|gPSec
init|=
literal|0
decl_stmt|,
name|gtPSec
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|unassigned
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|assignedRequests
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|CourseLookup
name|lookup
init|=
operator|new
name|CourseLookup
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|DistanceMetric
name|dm
init|=
name|server
operator|.
name|getDistanceMetric
argument_list|()
decl_stmt|;
name|DbFindStudentInfoMatcher
name|sm
init|=
operator|new
name|DbFindStudentInfoMatcher
argument_list|(
name|session
argument_list|,
name|iQuery
argument_list|,
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
argument_list|,
name|iMyStudents
argument_list|)
decl_stmt|;
name|sm
operator|.
name|setServer
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|CourseRequest
argument_list|>
argument_list|>
name|requests
init|=
operator|new
name|HashMap
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|CourseRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequest
name|cr
range|:
operator|(
name|List
argument_list|<
name|CourseRequest
argument_list|>
operator|)
name|SectioningStatusFilterAction
operator|.
name|getCourseQuery
argument_list|(
name|iFilter
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
operator|.
name|select
argument_list|(
literal|"distinct cr"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasMatchingSubjectArea
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|isCourseVisible
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|query
argument_list|()
operator|.
name|match
argument_list|(
operator|new
name|DbCourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|cr
argument_list|,
name|isConsentToDoCourse
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|,
name|isMyStudent
argument_list|(
name|cr
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|,
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
argument_list|,
name|lookup
argument_list|)
argument_list|)
condition|)
continue|continue;
name|List
argument_list|<
name|CourseRequest
argument_list|>
name|list
init|=
name|requests
operator|.
name|get
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
expr_stmt|;
name|requests
operator|.
name|put
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CourseOffering
argument_list|,
name|List
argument_list|<
name|CourseRequest
argument_list|>
argument_list|>
name|entry
range|:
name|requests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|CourseOffering
name|course
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|boolean
name|isConsentToDoCourse
init|=
name|isConsentToDoCourse
argument_list|(
name|course
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseRequest
name|request
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Student
name|student
init|=
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
decl_stmt|;
name|StudentInfo
name|s
init|=
name|students
operator|.
name|get
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
operator|new
name|StudentInfo
argument_list|()
expr_stmt|;
name|students
operator|.
name|put
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|s
operator|.
name|setStudent
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setSessionId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanShowExternalId
argument_list|(
name|iCanShowExtIds
argument_list|)
expr_stmt|;
name|StudentSectioningStatus
name|status
init|=
name|student
operator|.
name|getEffectiveStatus
argument_list|()
decl_stmt|;
name|st
operator|.
name|setCanRegister
argument_list|(
name|iCanRegister
operator|&&
operator|(
name|status
operator|==
literal|null
operator|||
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regenabled
argument_list|)
operator|||
operator|(
name|iIsAdmin
operator|&&
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regadmin
argument_list|)
operator|)
operator|||
operator|(
name|iIsAdvisor
operator|&&
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regadvisor
argument_list|)
operator|)
operator|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanUseAssistant
argument_list|(
name|iCanUseAssistant
operator|&&
operator|(
name|status
operator|==
literal|null
operator|||
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|enabled
argument_list|)
operator|||
operator|(
name|iIsAdmin
operator|&&
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|admin
argument_list|)
operator|)
operator|||
operator|(
name|iIsAdvisor
operator|&&
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|advisor
argument_list|)
operator|)
operator|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanSelect
argument_list|(
name|isCanSelect
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
operator|new
name|TreeSet
argument_list|<
name|StudentAreaClassificationMajor
argument_list|>
argument_list|(
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
argument_list|)
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addMajor
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentAccomodation
name|acc
range|:
name|student
operator|.
name|getAccomodations
argument_list|()
control|)
block|{
name|st
operator|.
name|addAccommodation
argument_list|(
name|acc
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentGroup
name|gr
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|gr
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|)
name|st
operator|.
name|addGroup
argument_list|(
name|gr
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|gr
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|st
operator|.
name|addGroup
argument_list|(
name|gr
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|gr
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|gr
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Advisor
name|a
range|:
name|student
operator|.
name|getAdvisors
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
condition|)
name|st
operator|.
name|addAdvisor
argument_list|(
name|helper
operator|.
name|getInstructorNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|tEnrl
init|=
literal|0
decl_stmt|,
name|tWait
init|=
literal|0
decl_stmt|,
name|tRes
init|=
literal|0
decl_stmt|,
name|tConNeed
init|=
literal|0
decl_stmt|,
name|tReq
init|=
literal|0
decl_stmt|,
name|tUnasg
init|=
literal|0
decl_stmt|,
name|tOvrNeed
init|=
literal|0
decl_stmt|,
name|ovrNeed
init|=
literal|0
decl_stmt|;
name|float
name|tCred
init|=
literal|0f
decl_stmt|;
name|int
name|nrDisCnf
init|=
literal|0
decl_stmt|,
name|maxDist
init|=
literal|0
decl_stmt|,
name|share
init|=
literal|0
decl_stmt|;
name|int
name|ftShare
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Float
argument_list|>
name|minsTot
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Float
argument_list|>
name|maxsTot
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Float
argument_list|>
name|mins
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Float
argument_list|>
name|maxs
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|nrCoursesTot
init|=
literal|0
decl_stmt|,
name|nrCourses
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseDemand
name|demand
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|demand
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Float
name|minTot
init|=
literal|null
decl_stmt|,
name|maxTot
init|=
literal|null
decl_stmt|;
name|Float
name|min
init|=
literal|null
decl_stmt|,
name|max
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|r
range|:
name|demand
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
name|CourseCreditUnitConfig
name|c
init|=
name|r
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|minTot
operator|==
literal|null
operator|||
name|minTot
operator|>
name|c
operator|.
name|getMinCredit
argument_list|()
condition|)
name|minTot
operator|=
name|c
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
if|if
condition|(
name|maxTot
operator|==
literal|null
operator|||
name|maxTot
operator|<
name|c
operator|.
name|getMaxCredit
argument_list|()
condition|)
name|maxTot
operator|=
name|c
operator|.
name|getMaxCredit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|isRequestPending
argument_list|()
condition|)
block|{
name|tOvrNeed
operator|++
expr_stmt|;
name|gtOvrNeed
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|query
argument_list|()
operator|.
name|match
argument_list|(
operator|new
name|DbCourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|r
argument_list|,
name|isConsentToDoCourse
argument_list|(
name|r
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|,
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|,
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
argument_list|,
name|lookup
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|min
operator|==
literal|null
operator|||
name|min
operator|>
name|c
operator|.
name|getMinCredit
argument_list|()
condition|)
name|min
operator|=
name|c
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
if|if
condition|(
name|max
operator|==
literal|null
operator|||
name|max
operator|<
name|c
operator|.
name|getMaxCredit
argument_list|()
condition|)
name|max
operator|=
name|c
operator|.
name|getMaxCredit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|isRequestPending
argument_list|()
condition|)
block|{
name|ovrNeed
operator|++
expr_stmt|;
name|gOvrNeed
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|minTot
operator|!=
literal|null
condition|)
block|{
name|minsTot
operator|.
name|add
argument_list|(
name|minTot
argument_list|)
expr_stmt|;
name|maxsTot
operator|.
name|add
argument_list|(
name|maxTot
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|demand
operator|.
name|isAlternative
argument_list|()
condition|)
name|nrCoursesTot
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
name|mins
operator|.
name|add
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|maxs
operator|.
name|add
argument_list|(
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|demand
operator|.
name|isAlternative
argument_list|()
condition|)
name|nrCourses
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|demand
operator|.
name|isAlternative
argument_list|()
condition|)
name|tReq
operator|++
expr_stmt|;
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|enrollment
init|=
literal|null
decl_stmt|;
name|CourseRequest
name|assigned
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|r
range|:
name|demand
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
name|enrollment
operator|=
name|r
operator|.
name|getClassEnrollments
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|enrollment
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assigned
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|enrollment
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CourseRequest
name|first
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|r
range|:
name|demand
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
operator|||
name|r
operator|.
name|getOrder
argument_list|()
operator|<
name|first
operator|.
name|getOrder
argument_list|()
condition|)
name|first
operator|=
name|r
expr_stmt|;
block|}
name|DbCourseRequestMatcher
name|crm
init|=
operator|new
name|DbCourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|first
argument_list|,
name|isConsentToDoCourse
argument_list|(
name|first
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|,
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|,
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
argument_list|,
name|lookup
argument_list|)
decl_stmt|;
if|if
condition|(
name|crm
operator|.
name|canAssign
argument_list|()
condition|)
block|{
name|tUnasg
operator|++
expr_stmt|;
name|gtUnasg
operator|++
expr_stmt|;
if|if
condition|(
name|demand
operator|.
name|isWaitlist
argument_list|()
condition|)
block|{
name|tWait
operator|++
expr_stmt|;
name|gtWait
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|tEnrl
operator|++
expr_stmt|;
name|gtEnrl
operator|++
expr_stmt|;
name|DbCourseRequestMatcher
name|crm
init|=
operator|new
name|DbCourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|assigned
argument_list|,
name|isConsentToDoCourse
argument_list|(
name|assigned
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|,
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|,
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
argument_list|,
name|lookup
argument_list|)
decl_stmt|;
if|if
condition|(
name|crm
operator|.
name|reservation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tRes
operator|++
expr_stmt|;
name|gtRes
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|assigned
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
name|crm
operator|.
name|approval
argument_list|()
operator|==
literal|null
condition|)
block|{
name|tConNeed
operator|++
expr_stmt|;
name|gtConNeed
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|assigned
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tCred
operator|+=
name|assigned
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|enrollment
control|)
block|{
name|InstructionalMethod
name|im
init|=
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|im
operator|!=
literal|null
condition|)
name|s
operator|.
name|addIMTotalCredit
argument_list|(
name|im
operator|.
name|getReference
argument_list|()
argument_list|,
name|assigned
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|getMinCredit
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|enrollment
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tCred
operator|+=
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
name|InstructionalMethod
name|im
init|=
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|im
operator|!=
literal|null
condition|)
name|s
operator|.
name|addIMTotalCredit
argument_list|(
name|im
operator|.
name|getReference
argument_list|()
argument_list|,
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|getMinCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|StudentClassEnrollment
name|section
range|:
name|enrollment
control|)
block|{
name|Assignment
name|assignment
init|=
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|StudentClassEnrollment
name|otherSection
range|:
name|student
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|equals
argument_list|(
name|otherSection
argument_list|)
condition|)
continue|continue;
name|Assignment
name|otherAssignment
init|=
name|otherSection
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherAssignment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|isDistanceConflict
argument_list|(
name|student
argument_list|,
name|assignment
argument_list|,
name|otherAssignment
argument_list|,
name|dm
argument_list|)
condition|)
block|{
name|nrDisCnf
operator|++
expr_stmt|;
name|gtNrDC
operator|++
expr_stmt|;
name|int
name|d
init|=
name|getDistanceInMinutes
argument_list|(
name|assignment
argument_list|,
name|otherAssignment
argument_list|,
name|dm
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>
name|maxDist
condition|)
name|maxDist
operator|=
name|d
expr_stmt|;
if|if
condition|(
name|d
operator|>
name|gtDist
condition|)
name|gtDist
operator|=
name|d
expr_stmt|;
block|}
if|if
condition|(
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|otherAssignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
operator|&&
operator|!
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|isToIgnoreStudentConflictsWith
argument_list|(
name|otherSection
operator|.
name|getClazz
argument_list|()
argument_list|)
operator|&&
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|<
name|otherSection
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
condition|)
block|{
name|int
name|sh
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|nrSharedDays
argument_list|(
name|otherAssignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
operator|*
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|nrSharedHours
argument_list|(
name|otherAssignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|share
operator|+=
name|sh
expr_stmt|;
name|gtShr
operator|+=
name|sh
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TimeLocation
name|ft
init|=
operator|new
name|TimeLocation
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0.0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|session
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|hasIntersection
argument_list|(
name|assignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|sh
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|nrSharedDays
argument_list|(
name|ft
argument_list|)
operator|*
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|nrSharedHours
argument_list|(
name|ft
argument_list|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|ftShare
operator|+=
name|sh
expr_stmt|;
name|gtFre
operator|+=
name|sh
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|mins
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|maxs
argument_list|)
expr_stmt|;
name|float
name|min
init|=
literal|0f
decl_stmt|,
name|max
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrCourses
condition|;
name|i
operator|++
control|)
block|{
name|min
operator|+=
name|mins
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|max
operator|+=
name|maxs
operator|.
name|get
argument_list|(
name|maxs
operator|.
name|size
argument_list|()
operator|-
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|minsTot
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|maxsTot
argument_list|)
expr_stmt|;
name|float
name|minTot
init|=
literal|0f
decl_stmt|,
name|maxTot
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrCoursesTot
condition|;
name|i
operator|++
control|)
block|{
name|minTot
operator|+=
name|minsTot
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|maxTot
operator|+=
name|maxsTot
operator|.
name|get
argument_list|(
name|maxsTot
operator|.
name|size
argument_list|()
operator|-
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|.
name|isRequestPending
argument_list|()
condition|)
block|{
if|if
condition|(
name|nrCourses
operator|==
name|nrCoursesTot
condition|)
block|{
name|gOvrNeed
operator|++
expr_stmt|;
name|ovrNeed
operator|++
expr_stmt|;
block|}
name|gtOvrNeed
operator|++
expr_stmt|;
name|tOvrNeed
operator|++
expr_stmt|;
block|}
name|s
operator|.
name|setRequestCredit
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalRequestCredit
argument_list|(
name|minTot
argument_list|,
name|maxTot
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalEnrollment
argument_list|(
name|tEnrl
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalReservation
argument_list|(
name|tRes
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalWaitlist
argument_list|(
name|tWait
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalUnassigned
argument_list|(
name|tUnasg
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalConsentNeeded
argument_list|(
name|tConNeed
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalOverrideNeeded
argument_list|(
name|tOvrNeed
argument_list|)
expr_stmt|;
name|s
operator|.
name|setEnrollment
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setReservation
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setWaitlist
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setUnassigned
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setConsentNeeded
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setOverrideNeeded
argument_list|(
name|ovrNeed
argument_list|)
expr_stmt|;
name|s
operator|.
name|setRequested
argument_list|(
name|tReq
argument_list|)
expr_stmt|;
name|s
operator|.
name|setStatus
argument_list|(
name|student
operator|.
name|getSectioningStatus
argument_list|()
operator|==
literal|null
condition|?
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
else|:
name|student
operator|.
name|getSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setEmailDate
argument_list|(
name|student
operator|.
name|getScheduleEmailedDate
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|student
operator|.
name|getScheduleEmailedDate
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setCredit
argument_list|(
literal|0f
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalCredit
argument_list|(
name|tCred
argument_list|)
expr_stmt|;
name|s
operator|.
name|setNrDistanceConflicts
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLongestDistanceMinutes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setOverlappingMinutes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalNrDistanceConflicts
argument_list|(
name|nrDisCnf
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalLongestDistanceMinutes
argument_list|(
name|maxDist
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalOverlappingMinutes
argument_list|(
name|share
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFreeTimeOverlappingMins
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalFreeTimeOverlappingMins
argument_list|(
name|ftShare
argument_list|)
expr_stmt|;
name|s
operator|.
name|setPrefInstrMethConflict
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalPrefInstrMethConflict
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setPrefSectionConflict
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalPrefSectionConflict
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|StudentNote
name|note
init|=
literal|null
decl_stmt|;
for|for
control|(
name|StudentNote
name|n
range|:
name|student
operator|.
name|getNotes
argument_list|()
control|)
if|if
condition|(
name|note
operator|==
literal|null
operator|||
name|note
operator|.
name|compareTo
argument_list|(
name|n
argument_list|)
operator|>
literal|0
condition|)
name|note
operator|=
name|n
expr_stmt|;
if|if
condition|(
name|note
operator|!=
literal|null
condition|)
name|s
operator|.
name|setNote
argument_list|(
name|note
operator|.
name|getTextNote
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMyStudent
argument_list|(
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setAdvisedInfo
argument_list|(
name|getAdvisedInfo
argument_list|(
name|student
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DbCourseRequestMatcher
name|crm
init|=
operator|new
name|DbCourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|request
argument_list|,
name|isConsentToDoCourse
argument_list|,
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|,
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
argument_list|,
name|lookup
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|crm
operator|.
name|enrollment
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|assignedRequests
operator|.
name|add
argument_list|(
name|crm
operator|.
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|s
operator|.
name|setEnrollment
argument_list|(
name|s
operator|.
name|getEnrollment
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gEnrl
operator|++
expr_stmt|;
if|if
condition|(
name|crm
operator|.
name|reservation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|setReservation
argument_list|(
name|s
operator|.
name|getReservation
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gRes
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
name|crm
operator|.
name|approval
argument_list|()
operator|==
literal|null
condition|)
block|{
name|s
operator|.
name|setConsentNeeded
argument_list|(
name|s
operator|.
name|getConsentNeeded
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gConNeed
operator|++
expr_stmt|;
block|}
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|crm
operator|.
name|enrollment
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getTimestamp
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|getEnrolledDate
argument_list|()
operator|==
literal|null
condition|)
name|s
operator|.
name|setEnrolledDate
argument_list|(
name|e
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|e
operator|.
name|getTimestamp
argument_list|()
operator|.
name|after
argument_list|(
name|s
operator|.
name|getEnrolledDate
argument_list|()
argument_list|)
condition|)
name|s
operator|.
name|setEnrolledDate
argument_list|(
name|e
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|crm
operator|.
name|approval
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|crm
operator|.
name|enrollment
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getApprovedDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|getApprovedDate
argument_list|()
operator|==
literal|null
condition|)
name|s
operator|.
name|setApprovedDate
argument_list|(
name|e
operator|.
name|getApprovedDate
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|e
operator|.
name|getApprovedDate
argument_list|()
operator|.
name|after
argument_list|(
name|s
operator|.
name|getApprovedDate
argument_list|()
argument_list|)
condition|)
name|s
operator|.
name|setApprovedDate
argument_list|(
name|e
operator|.
name|getApprovedDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|course
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|setCredit
argument_list|(
name|s
operator|.
name|getCredit
argument_list|()
operator|+
name|course
operator|.
name|getCredit
argument_list|()
operator|.
name|getMinCredit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|crm
operator|.
name|enrollment
argument_list|()
control|)
block|{
name|InstructionalMethod
name|im
init|=
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|im
operator|!=
literal|null
condition|)
name|s
operator|.
name|addIMCredit
argument_list|(
name|im
operator|.
name|getReference
argument_list|()
argument_list|,
name|course
operator|.
name|getCredit
argument_list|()
operator|.
name|getMinCredit
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|crm
operator|.
name|enrollment
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|setCredit
argument_list|(
name|s
operator|.
name|getCredit
argument_list|()
operator|+
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|getMinCredit
argument_list|()
argument_list|)
expr_stmt|;
name|InstructionalMethod
name|im
init|=
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|im
operator|!=
literal|null
condition|)
name|s
operator|.
name|addIMCredit
argument_list|(
name|im
operator|.
name|getReference
argument_list|()
argument_list|,
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|getMinCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|hasIm
init|=
literal|false
decl_stmt|;
name|boolean
name|im
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allSubpart
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|selectedSubparts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentSectioningPref
name|pref
range|:
name|request
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
name|pref
operator|instanceof
name|StudentInstrMthPref
condition|)
block|{
name|StudentInstrMthPref
name|imp
init|=
operator|(
name|StudentInstrMthPref
operator|)
name|pref
decl_stmt|;
name|InstructionalMethod
name|method
init|=
name|crm
operator|.
name|enrollment
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
decl_stmt|;
name|hasIm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|im
operator|&&
name|method
operator|!=
literal|null
operator|&&
name|method
operator|.
name|equals
argument_list|(
name|imp
operator|.
name|getInstructionalMethod
argument_list|()
argument_list|)
condition|)
block|{
name|im
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pref
operator|instanceof
name|StudentClassPref
condition|)
block|{
name|StudentClassPref
name|scp
init|=
operator|(
name|StudentClassPref
operator|)
name|pref
decl_stmt|;
name|allSubpart
operator|.
name|add
argument_list|(
name|scp
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|section
range|:
name|crm
operator|.
name|enrollment
argument_list|()
control|)
block|{
if|if
condition|(
name|scp
operator|.
name|getClazz
argument_list|()
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
name|selectedSubparts
operator|.
name|add
argument_list|(
name|scp
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|hasIm
condition|)
block|{
name|s
operator|.
name|setTotalPrefInstrMethConflict
argument_list|(
name|s
operator|.
name|getTotalPrefInstrMethConflict
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gtPIM
operator|++
expr_stmt|;
if|if
condition|(
name|im
condition|)
block|{
name|s
operator|.
name|setPrefInstrMethConflict
argument_list|(
name|s
operator|.
name|getPrefInstrMethConflict
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gPIM
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|allSubpart
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|s
operator|.
name|setTotalPrefSectionConflict
argument_list|(
name|s
operator|.
name|getTotalPrefSectionConflict
argument_list|()
operator|+
name|allSubpart
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|gtPSec
operator|+=
name|allSubpart
operator|.
name|size
argument_list|()
expr_stmt|;
name|s
operator|.
name|setPrefSectionConflict
argument_list|(
name|s
operator|.
name|getPrefSectionConflict
argument_list|()
operator|+
name|selectedSubparts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|gPSec
operator|+=
name|selectedSubparts
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|StudentClassEnrollment
name|section
range|:
name|crm
operator|.
name|enrollment
argument_list|()
control|)
block|{
name|Assignment
name|assignment
init|=
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|StudentClassEnrollment
name|otherSection
range|:
name|student
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|equals
argument_list|(
name|otherSection
argument_list|)
condition|)
continue|continue;
name|Assignment
name|otherAssignment
init|=
name|otherSection
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherAssignment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|isDistanceConflict
argument_list|(
name|student
argument_list|,
name|assignment
argument_list|,
name|otherAssignment
argument_list|,
name|dm
argument_list|)
condition|)
block|{
name|s
operator|.
name|setNrDistanceConflicts
argument_list|(
name|s
operator|.
name|getNrDistanceConflicts
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gNrDC
operator|++
expr_stmt|;
name|int
name|d
init|=
name|getDistanceInMinutes
argument_list|(
name|assignment
argument_list|,
name|otherAssignment
argument_list|,
name|dm
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>
name|s
operator|.
name|getLongestDistanceMinutes
argument_list|()
condition|)
name|s
operator|.
name|setLongestDistanceMinutes
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|>
name|gDist
condition|)
name|gDist
operator|=
name|d
expr_stmt|;
block|}
if|if
condition|(
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|otherAssignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
operator|&&
operator|!
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|isToIgnoreStudentConflictsWith
argument_list|(
name|otherSection
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|<
name|otherSection
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|||
operator|!
name|query
argument_list|()
operator|.
name|match
argument_list|(
operator|new
name|DbCourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|otherSection
operator|.
name|getCourseRequest
argument_list|()
argument_list|,
name|isConsentToDoCourse
argument_list|(
name|otherSection
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|,
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|,
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
argument_list|,
name|lookup
argument_list|)
argument_list|)
condition|)
block|{
name|int
name|sh
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|nrSharedDays
argument_list|(
name|otherAssignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
operator|*
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|nrSharedHours
argument_list|(
name|otherAssignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|s
operator|.
name|setOverlappingMinutes
argument_list|(
name|s
operator|.
name|getOverlappingMinutes
argument_list|()
operator|+
name|sh
argument_list|)
expr_stmt|;
name|gShr
operator|+=
name|sh
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TimeLocation
name|ft
init|=
operator|new
name|TimeLocation
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0.0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|session
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|hasIntersection
argument_list|(
name|assignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|sh
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|nrSharedDays
argument_list|(
name|ft
argument_list|)
operator|*
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|nrSharedHours
argument_list|(
name|ft
argument_list|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|s
operator|.
name|setFreeTimeOverlappingMins
argument_list|(
name|s
operator|.
name|getFreeTimeOverlappingMins
argument_list|()
operator|+
name|sh
argument_list|)
expr_stmt|;
name|gFre
operator|+=
name|sh
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|else if
condition|(
name|unassigned
operator|.
name|add
argument_list|(
name|crm
operator|.
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|crm
operator|.
name|canAssign
argument_list|()
condition|)
block|{
if|if
condition|(
name|crm
operator|.
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isWaitlist
argument_list|()
condition|)
block|{
name|s
operator|.
name|setWaitlist
argument_list|(
name|s
operator|.
name|getWaitlist
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gWait
operator|++
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getTopWaitingPriority
argument_list|()
operator|==
literal|null
condition|)
name|s
operator|.
name|setTopWaitingPriority
argument_list|(
literal|1
operator|+
name|crm
operator|.
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|s
operator|.
name|setTopWaitingPriority
argument_list|(
name|Math
operator|.
name|min
argument_list|(
literal|1
operator|+
name|crm
operator|.
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|,
name|s
operator|.
name|getTopWaitingPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|setUnassigned
argument_list|(
name|s
operator|.
name|getUnassigned
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gUnasg
operator|++
expr_stmt|;
block|}
for|for
control|(
name|CourseRequest
name|c
range|:
name|crm
operator|.
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
name|boolean
name|reqIm
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|reqSubparts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentSectioningPref
name|pref
range|:
name|c
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|pref
operator|.
name|isRequired
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|pref
operator|instanceof
name|StudentInstrMthPref
condition|)
block|{
name|reqIm
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|pref
operator|instanceof
name|StudentClassPref
condition|)
block|{
name|StudentClassPref
name|scp
init|=
operator|(
name|StudentClassPref
operator|)
name|pref
decl_stmt|;
name|reqSubparts
operator|.
name|add
argument_list|(
name|scp
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reqIm
condition|)
block|{
name|s
operator|.
name|setTotalPrefInstrMethConflict
argument_list|(
name|s
operator|.
name|getTotalPrefInstrMethConflict
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gtPIM
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|reqSubparts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|s
operator|.
name|setTotalPrefSectionConflict
argument_list|(
name|s
operator|.
name|getTotalPrefSectionConflict
argument_list|()
operator|+
name|reqSubparts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|gtPSec
operator|+=
name|reqSubparts
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|crm
operator|.
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getTimestamp
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|getRequestedDate
argument_list|()
operator|==
literal|null
condition|)
name|s
operator|.
name|setRequestedDate
argument_list|(
name|crm
operator|.
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|crm
operator|.
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getTimestamp
argument_list|()
operator|.
name|after
argument_list|(
name|s
operator|.
name|getRequestedDate
argument_list|()
argument_list|)
condition|)
name|s
operator|.
name|setRequestedDate
argument_list|(
name|crm
operator|.
name|request
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|StudentInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|StudentInfo
argument_list|>
argument_list|(
name|students
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|iSubjectAreas
operator|==
literal|null
operator|&&
name|iCoursesIcoordinate
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Student
name|student
range|:
operator|(
name|List
argument_list|<
name|Student
argument_list|>
operator|)
name|SectioningStatusFilterAction
operator|.
name|getQuery
argument_list|(
name|iFilter
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
operator|.
name|select
argument_list|(
literal|"distinct s"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|students
operator|.
name|containsKey
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|sm
operator|.
name|match
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
name|StudentInfo
name|s
init|=
operator|new
name|StudentInfo
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|s
operator|.
name|setStudent
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setSessionId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanShowExternalId
argument_list|(
name|iCanShowExtIds
argument_list|)
expr_stmt|;
name|StudentSectioningStatus
name|status
init|=
name|student
operator|.
name|getEffectiveStatus
argument_list|()
decl_stmt|;
name|st
operator|.
name|setCanRegister
argument_list|(
name|iCanRegister
operator|&&
operator|(
name|status
operator|==
literal|null
operator|||
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regenabled
argument_list|)
operator|||
operator|(
name|iIsAdmin
operator|&&
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regadmin
argument_list|)
operator|)
operator|||
operator|(
name|iIsAdvisor
operator|&&
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regadvisor
argument_list|)
operator|)
operator|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanUseAssistant
argument_list|(
name|iCanUseAssistant
operator|&&
operator|(
name|status
operator|==
literal|null
operator|||
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|enabled
argument_list|)
operator|||
operator|(
name|iIsAdmin
operator|&&
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|admin
argument_list|)
operator|)
operator|||
operator|(
name|iIsAdvisor
operator|&&
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|advisor
argument_list|)
operator|)
operator|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanSelect
argument_list|(
name|isCanSelect
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
operator|new
name|TreeSet
argument_list|<
name|StudentAreaClassificationMajor
argument_list|>
argument_list|(
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
argument_list|)
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addMajor
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentAccomodation
name|acc
range|:
name|student
operator|.
name|getAccomodations
argument_list|()
control|)
block|{
name|st
operator|.
name|addAccommodation
argument_list|(
name|acc
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentGroup
name|gr
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|gr
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|)
name|st
operator|.
name|addGroup
argument_list|(
name|gr
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|gr
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|st
operator|.
name|addGroup
argument_list|(
name|gr
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|gr
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|gr
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Advisor
name|a
range|:
name|student
operator|.
name|getAdvisors
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
condition|)
name|st
operator|.
name|addAdvisor
argument_list|(
name|helper
operator|.
name|getInstructorNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|setStatus
argument_list|(
name|student
operator|.
name|getSectioningStatus
argument_list|()
operator|==
literal|null
condition|?
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
else|:
name|student
operator|.
name|getSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setEmailDate
argument_list|(
name|student
operator|.
name|getScheduleEmailedDate
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|student
operator|.
name|getScheduleEmailedDate
argument_list|()
argument_list|)
expr_stmt|;
name|StudentNote
name|note
init|=
literal|null
decl_stmt|;
for|for
control|(
name|StudentNote
name|n
range|:
name|student
operator|.
name|getNotes
argument_list|()
control|)
if|if
condition|(
name|note
operator|==
literal|null
operator|||
name|note
operator|.
name|compareTo
argument_list|(
name|n
argument_list|)
operator|>
literal|0
condition|)
name|note
operator|=
name|n
expr_stmt|;
if|if
condition|(
name|note
operator|!=
literal|null
condition|)
name|s
operator|.
name|setNote
argument_list|(
name|note
operator|.
name|getTextNote
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMyStudent
argument_list|(
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setAdvisedInfo
argument_list|(
name|getAdvisedInfo
argument_list|(
name|student
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|,
operator|new
name|Comparator
argument_list|<
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|StudentInfo
name|s1
parameter_list|,
name|StudentInfo
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|new
name|Long
argument_list|(
name|s1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
argument_list|()
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|>=
name|limit
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|StudentInfo
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|StudentInfo
argument_list|>
argument_list|(
name|limit
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StudentInfo
name|i
range|:
name|ret
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|size
argument_list|()
operator|==
name|limit
argument_list|()
condition|)
break|break;
block|}
name|ret
operator|=
name|r
expr_stmt|;
block|}
comment|// if (students.size()> 0) {
name|StudentInfo
name|t
init|=
operator|new
name|StudentInfo
argument_list|()
decl_stmt|;
name|t
operator|.
name|setEnrollment
argument_list|(
name|gEnrl
argument_list|)
expr_stmt|;
name|t
operator|.
name|setReservation
argument_list|(
name|gRes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setWaitlist
argument_list|(
name|gWait
argument_list|)
expr_stmt|;
name|t
operator|.
name|setUnassigned
argument_list|(
name|gUnasg
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalEnrollment
argument_list|(
name|gtEnrl
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalReservation
argument_list|(
name|gtRes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalWaitlist
argument_list|(
name|gtWait
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalUnassigned
argument_list|(
name|gtUnasg
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConsentNeeded
argument_list|(
name|gConNeed
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalConsentNeeded
argument_list|(
name|gtConNeed
argument_list|)
expr_stmt|;
name|t
operator|.
name|setOverrideNeeded
argument_list|(
name|gOvrNeed
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalOverrideNeeded
argument_list|(
name|gtOvrNeed
argument_list|)
expr_stmt|;
name|t
operator|.
name|setNrDistanceConflicts
argument_list|(
name|gNrDC
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalNrDistanceConflicts
argument_list|(
name|gtNrDC
argument_list|)
expr_stmt|;
name|t
operator|.
name|setLongestDistanceMinutes
argument_list|(
name|gDist
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalLongestDistanceMinutes
argument_list|(
name|gtDist
argument_list|)
expr_stmt|;
name|t
operator|.
name|setOverlappingMinutes
argument_list|(
name|gShr
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalOverlappingMinutes
argument_list|(
name|gtShr
argument_list|)
expr_stmt|;
name|t
operator|.
name|setFreeTimeOverlappingMins
argument_list|(
name|gFre
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalFreeTimeOverlappingMins
argument_list|(
name|gtFre
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPrefInstrMethConflict
argument_list|(
name|gPIM
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalPrefInstrMethConflict
argument_list|(
name|gtPIM
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPrefSectionConflict
argument_list|(
name|gPSec
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalPrefSectionConflict
argument_list|(
name|gtPSec
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getDistanceInMinutes
parameter_list|(
name|Assignment
name|as1
parameter_list|,
name|Assignment
name|as2
parameter_list|,
name|DistanceMetric
name|m
parameter_list|)
block|{
name|Placement
name|p1
init|=
name|as1
operator|.
name|getPlacement
argument_list|()
decl_stmt|,
name|p2
init|=
name|as2
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
operator|||
name|p2
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|TimeLocation
name|t1
init|=
name|p1
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|,
name|t2
init|=
name|p2
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|t1
operator|==
literal|null
operator|||
name|t2
operator|==
literal|null
operator|||
operator|!
name|t1
operator|.
name|shareDays
argument_list|(
name|t2
argument_list|)
operator|||
operator|!
name|t1
operator|.
name|shareWeeks
argument_list|(
name|t2
argument_list|)
condition|)
return|return
literal|0
return|;
name|int
name|a1
init|=
name|t1
operator|.
name|getStartSlot
argument_list|()
decl_stmt|,
name|a2
init|=
name|t2
operator|.
name|getStartSlot
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|doComputeDistanceConflictsBetweenNonBTBClasses
argument_list|()
condition|)
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getLength
argument_list|()
operator|<=
name|a2
condition|)
block|{
name|int
name|dist
init|=
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|m
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
decl_stmt|;
if|if
condition|(
name|dist
operator|>
name|t1
operator|.
name|getBreakTime
argument_list|()
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|a2
operator|-
name|a1
operator|-
name|t1
operator|.
name|getLength
argument_list|()
operator|)
condition|)
return|return
name|dist
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getLength
argument_list|()
operator|==
name|a2
condition|)
return|return
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|m
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|boolean
name|isDistanceConflict
parameter_list|(
name|Student
name|student
parameter_list|,
name|Assignment
name|as1
parameter_list|,
name|Assignment
name|as2
parameter_list|,
name|DistanceMetric
name|m
parameter_list|)
block|{
name|Placement
name|p1
init|=
name|as1
operator|.
name|getPlacement
argument_list|()
decl_stmt|,
name|p2
init|=
name|as2
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
operator|||
name|p2
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|TimeLocation
name|t1
init|=
name|p1
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|,
name|t2
init|=
name|p2
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|t1
operator|==
literal|null
operator|||
name|t2
operator|==
literal|null
operator|||
operator|!
name|t1
operator|.
name|shareDays
argument_list|(
name|t2
argument_list|)
operator|||
operator|!
name|t1
operator|.
name|shareWeeks
argument_list|(
name|t2
argument_list|)
condition|)
return|return
literal|false
return|;
name|int
name|a1
init|=
name|t1
operator|.
name|getStartSlot
argument_list|()
decl_stmt|,
name|a2
init|=
name|t2
operator|.
name|getStartSlot
argument_list|()
decl_stmt|;
name|boolean
name|sd
init|=
literal|false
decl_stmt|;
for|for
control|(
name|StudentAccomodation
name|a
range|:
name|student
operator|.
name|getAccomodations
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getShortDistanceAccommodationReference
argument_list|()
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
condition|)
block|{
name|sd
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|sd
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|doComputeDistanceConflictsBetweenNonBTBClasses
argument_list|()
condition|)
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getLength
argument_list|()
operator|<=
name|a2
condition|)
block|{
name|int
name|dist
init|=
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|m
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
decl_stmt|;
return|return
operator|(
name|dist
operator|>
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|a2
operator|-
name|a1
operator|-
name|t1
operator|.
name|getLength
argument_list|()
operator|)
operator|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getLength
argument_list|()
operator|==
name|a2
condition|)
return|return
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|m
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
operator|>
literal|0
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|m
operator|.
name|doComputeDistanceConflictsBetweenNonBTBClasses
argument_list|()
condition|)
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getLength
argument_list|()
operator|<=
name|a2
condition|)
block|{
name|int
name|dist
init|=
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|m
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
decl_stmt|;
return|return
operator|(
name|dist
operator|>
name|t1
operator|.
name|getBreakTime
argument_list|()
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|a2
operator|-
name|a1
operator|-
name|t1
operator|.
name|getLength
argument_list|()
operator|)
operator|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getLength
argument_list|()
operator|==
name|a2
condition|)
return|return
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|m
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
operator|>
name|t1
operator|.
name|getBreakTime
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isConsentToDoCourse
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
return|return
name|iCoursesIcanApprove
operator|!=
literal|null
operator|&&
name|course
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
operator|&&
name|iCoursesIcanApprove
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|AdvisedInfoInterface
name|getAdvisedInfo
parameter_list|(
name|Student
name|student
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
name|student
operator|.
name|getAdvisorCourseRequests
argument_list|()
operator|==
literal|null
operator|||
name|student
operator|.
name|getAdvisorCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|AdvisorCourseRequest
argument_list|>
name|acrs
init|=
operator|new
name|ArrayList
argument_list|<
name|AdvisorCourseRequest
argument_list|>
argument_list|(
name|student
operator|.
name|getAdvisorCourseRequests
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|acrs
argument_list|)
expr_stmt|;
name|AdvisedInfoInterface
name|info
init|=
operator|new
name|AdvisedInfoInterface
argument_list|()
decl_stmt|;
name|AdvisorCourseRequest
name|last
init|=
literal|null
decl_stmt|;
name|CourseOffering
name|advFirstChoice
init|=
literal|null
decl_stmt|;
name|CourseRequest
name|firstChoice
init|=
literal|null
decl_stmt|;
name|boolean
name|firstChoiceCritical
init|=
literal|false
decl_stmt|;
name|float
name|minCred
init|=
literal|0f
decl_stmt|,
name|maxCred
init|=
literal|0f
decl_stmt|,
name|cm
init|=
literal|0f
decl_stmt|,
name|cx
init|=
literal|0f
decl_stmt|;
name|int
name|nrCourses
init|=
literal|0
decl_stmt|,
name|nrCriticalCourses
init|=
literal|0
decl_stmt|,
name|nrCoursesFound
init|=
literal|0
decl_stmt|,
name|nrCriticalCoursesFound
init|=
literal|0
decl_stmt|,
name|nrSubstMisMatch
init|=
literal|0
decl_stmt|;
name|int
name|foundPrioMin
init|=
literal|0
decl_stmt|,
name|foundPrioMax
init|=
literal|0
decl_stmt|;
name|int
name|points
init|=
literal|0
decl_stmt|,
name|maxPoints
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AdvisorCourseRequest
name|acr
range|:
name|acrs
control|)
block|{
if|if
condition|(
name|acr
operator|.
name|getPriority
argument_list|()
operator|==
operator|-
literal|1
condition|)
continue|continue;
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|getPriority
argument_list|()
operator|!=
name|acr
operator|.
name|getPriority
argument_list|()
condition|)
block|{
name|minCred
operator|+=
name|cm
expr_stmt|;
name|maxCred
operator|+=
name|cx
expr_stmt|;
name|cm
operator|=
literal|0
expr_stmt|;
name|cx
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|advFirstChoice
operator|!=
literal|null
condition|)
block|{
comment|// ignore requests without any courses
if|if
condition|(
name|firstChoiceCritical
operator|&&
name|nrCoursesFound
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|nrCourses
operator|>
literal|1
condition|)
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingCriticalCourseWithAlts
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingCriticalCourse
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|last
operator|.
name|isSubstitute
argument_list|()
operator|&&
name|nrCoursesFound
operator|-
name|nrSubstMisMatch
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|nrCourses
operator|>
literal|1
condition|)
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingCourseWithAlts
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingCourse
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|last
operator|.
name|isSubstitute
argument_list|()
operator|&&
name|nrCoursesFound
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|nrCourses
operator|>
literal|1
condition|)
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingSubstituteCourseWithAlts
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingSubstituteCourse
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|firstChoice
operator|==
literal|null
operator|&&
name|firstChoiceCritical
condition|)
block|{
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingCriticalCourseHasAlts
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|firstChoice
operator|==
literal|null
condition|)
block|{
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingCourseHasAlts
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|nrCoursesFound
operator|<
name|nrCourses
condition|)
block|{
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingAlternatives
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 1st choice course match
name|maxPoints
operator|+=
literal|4
operator|+
operator|(
name|firstChoiceCritical
condition|?
literal|2
else|:
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|firstChoice
operator|!=
literal|null
condition|)
block|{
name|points
operator|+=
literal|2
expr_stmt|;
comment|// first choice course is present
if|if
condition|(
name|firstChoiceCritical
operator|&&
name|firstChoice
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isCritical
argument_list|()
operator|!=
literal|null
operator|&&
name|firstChoice
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isCritical
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|points
operator|+=
literal|2
expr_stmt|;
comment|// also is critical
if|if
condition|(
name|firstChoice
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|==
name|last
operator|.
name|isSubstitute
argument_list|()
condition|)
name|points
operator|++
expr_stmt|;
comment|// in the same table
if|if
condition|(
name|firstChoice
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getFirstChoiceCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|advFirstChoice
argument_list|)
condition|)
name|points
operator|++
expr_stmt|;
comment|// also first as choice (not alt to something else)
block|}
comment|// number of courses match
name|maxPoints
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|nrCourses
operator|==
name|nrCoursesFound
condition|)
name|points
operator|+=
literal|2
expr_stmt|;
comment|// all courses exist
if|if
condition|(
name|nrCourses
operator|>
literal|1
condition|)
name|maxPoints
operator|++
expr_stmt|;
if|if
condition|(
name|nrCourses
operator|>
literal|1
operator|&&
name|nrCoursesFound
operator|>=
literal|1
condition|)
name|points
operator|++
expr_stmt|;
comment|// at least one
if|if
condition|(
name|nrCourses
operator|>
literal|0
operator|&&
operator|!
name|last
operator|.
name|isSubstitute
argument_list|()
condition|)
name|maxPoints
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|nrCourses
operator|>
literal|0
operator|&&
name|nrCoursesFound
operator|>=
literal|1
operator|&&
operator|!
name|last
operator|.
name|isSubstitute
argument_list|()
operator|&&
name|nrCoursesFound
operator|-
name|nrSubstMisMatch
operator|>
literal|0
condition|)
name|points
operator|+=
literal|2
expr_stmt|;
comment|// and are proprity
if|if
condition|(
name|nrCourses
operator|>
literal|1
condition|)
name|maxPoints
operator|++
expr_stmt|;
if|if
condition|(
name|nrCourses
operator|>
literal|1
operator|&&
name|nrCoursesFound
operator|>
literal|1
condition|)
name|points
operator|++
expr_stmt|;
comment|// at least two
if|if
condition|(
name|nrCourses
operator|>
literal|2
condition|)
name|maxPoints
operator|++
expr_stmt|;
if|if
condition|(
name|nrCourses
operator|>
literal|2
operator|&&
name|nrCoursesFound
operator|>
literal|2
condition|)
name|points
operator|++
expr_stmt|;
comment|// at least three
if|if
condition|(
name|nrCoursesFound
operator|>
literal|1
condition|)
name|maxPoints
operator|++
expr_stmt|;
if|if
condition|(
name|nrCoursesFound
operator|>
literal|1
operator|&&
name|foundPrioMin
operator|==
name|foundPrioMax
condition|)
name|points
operator|++
expr_stmt|;
comment|// and have same priority
name|maxPoints
operator|++
expr_stmt|;
if|if
condition|(
name|nrSubstMisMatch
operator|==
literal|0
operator|&&
name|nrCoursesFound
operator|>
literal|0
condition|)
name|points
operator|++
expr_stmt|;
comment|// not priority mismatch
if|if
condition|(
name|nrCriticalCourses
operator|>
literal|1
condition|)
name|maxPoints
operator|+=
literal|3
expr_stmt|;
if|if
condition|(
name|nrCriticalCourses
operator|>
literal|1
operator|&&
name|nrCriticalCoursesFound
operator|>
literal|1
condition|)
name|points
operator|+=
literal|3
expr_stmt|;
comment|// critical
block|}
name|nrCourses
operator|=
literal|0
expr_stmt|;
name|nrCriticalCourses
operator|=
literal|0
expr_stmt|;
name|nrCoursesFound
operator|=
literal|0
expr_stmt|;
name|nrCriticalCoursesFound
operator|=
literal|0
expr_stmt|;
name|nrSubstMisMatch
operator|=
literal|0
expr_stmt|;
name|advFirstChoice
operator|=
literal|null
expr_stmt|;
name|firstChoice
operator|=
literal|null
expr_stmt|;
name|firstChoiceCritical
operator|=
literal|false
expr_stmt|;
name|foundPrioMin
operator|=
literal|0
expr_stmt|;
name|foundPrioMax
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|acr
operator|.
name|isSubstitute
argument_list|()
condition|)
block|{
name|CourseCreditUnitConfig
name|credit
init|=
operator|(
name|acr
operator|.
name|getCourseOffering
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|acr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|acr
operator|.
name|getAlternative
argument_list|()
operator|==
literal|0
operator|||
name|credit
operator|.
name|getMinCredit
argument_list|()
operator|<
name|cm
condition|)
name|cm
operator|=
name|credit
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
if|if
condition|(
name|acr
operator|.
name|getAlternative
argument_list|()
operator|==
literal|0
operator|||
name|credit
operator|.
name|getMaxCredit
argument_list|()
operator|>
name|cx
condition|)
name|cx
operator|=
name|credit
operator|.
name|getMaxCredit
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|acr
operator|.
name|getAlternative
argument_list|()
operator|==
literal|0
condition|)
block|{
name|cm
operator|=
name|acr
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
name|cx
operator|=
name|acr
operator|.
name|getCreditMax
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|acr
operator|.
name|getCourseOffering
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nrCourses
operator|++
expr_stmt|;
if|if
condition|(
name|acr
operator|.
name|isCritical
argument_list|()
operator|&&
operator|!
name|acr
operator|.
name|isSubstitute
argument_list|()
condition|)
name|nrCriticalCourses
operator|++
expr_stmt|;
name|CourseRequest
name|request
init|=
literal|null
decl_stmt|;
name|cd
label|:
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|acr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
condition|)
block|{
name|request
operator|=
name|cr
expr_stmt|;
break|break
name|cd
break|;
block|}
block|}
block|}
if|if
condition|(
name|advFirstChoice
operator|==
literal|null
condition|)
block|{
name|advFirstChoice
operator|=
name|acr
operator|.
name|getCourseOffering
argument_list|()
expr_stmt|;
name|firstChoiceCritical
operator|=
name|acr
operator|.
name|isCritical
argument_list|()
expr_stmt|;
name|firstChoice
operator|=
name|request
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|nrCoursesFound
operator|++
expr_stmt|;
if|if
condition|(
name|nrCoursesFound
operator|==
literal|1
condition|)
block|{
name|foundPrioMin
operator|=
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|foundPrioMax
operator|=
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|<
name|foundPrioMin
condition|)
name|foundPrioMin
operator|=
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getPriority
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|>
name|foundPrioMax
condition|)
name|foundPrioMax
operator|=
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|acr
operator|.
name|isSubstitute
argument_list|()
operator|!=
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|)
name|nrSubstMisMatch
operator|++
expr_stmt|;
if|if
condition|(
name|acr
operator|.
name|isCritical
argument_list|()
operator|&&
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isCritical
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isCritical
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|&&
operator|!
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|)
name|nrCriticalCoursesFound
operator|++
expr_stmt|;
block|}
block|}
name|last
operator|=
name|acr
expr_stmt|;
block|}
name|minCred
operator|+=
name|cm
expr_stmt|;
name|maxCred
operator|+=
name|cx
expr_stmt|;
name|info
operator|.
name|setMinCredit
argument_list|(
name|minCred
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMaxCredit
argument_list|(
name|maxCred
argument_list|)
expr_stmt|;
if|if
condition|(
name|advFirstChoice
operator|!=
literal|null
condition|)
block|{
comment|// ignore requests without any courses
if|if
condition|(
name|firstChoiceCritical
operator|&&
name|nrCoursesFound
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|nrCourses
operator|>
literal|1
condition|)
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingCriticalCourseWithAlts
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingCriticalCourse
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|last
operator|.
name|isSubstitute
argument_list|()
operator|&&
name|nrCoursesFound
operator|-
name|nrSubstMisMatch
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|nrCourses
operator|>
literal|1
condition|)
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingCourseWithAlts
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingCourse
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|last
operator|.
name|isSubstitute
argument_list|()
operator|&&
name|nrCoursesFound
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|nrCourses
operator|>
literal|1
condition|)
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingSubstituteCourseWithAlts
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingSubstituteCourse
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|firstChoice
operator|==
literal|null
operator|&&
name|firstChoiceCritical
condition|)
block|{
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingCriticalCourseHasAlts
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|firstChoice
operator|==
literal|null
condition|)
block|{
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingCourseHasAlts
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|nrCoursesFound
operator|<
name|nrCourses
condition|)
block|{
name|info
operator|.
name|addMessage
argument_list|(
name|MSG
operator|.
name|advMessageMissingAlternatives
argument_list|(
name|advFirstChoice
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 1st choice course match
name|maxPoints
operator|+=
literal|4
operator|+
operator|(
name|firstChoiceCritical
condition|?
literal|2
else|:
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|firstChoice
operator|!=
literal|null
condition|)
block|{
name|points
operator|+=
literal|2
expr_stmt|;
comment|// first choice course is present
if|if
condition|(
name|firstChoiceCritical
operator|&&
name|firstChoice
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isCritical
argument_list|()
operator|!=
literal|null
operator|&&
name|firstChoice
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isCritical
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|points
operator|+=
literal|2
expr_stmt|;
comment|// also is critical
if|if
condition|(
name|firstChoice
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|==
name|last
operator|.
name|isSubstitute
argument_list|()
condition|)
name|points
operator|++
expr_stmt|;
comment|// in the same table
if|if
condition|(
name|firstChoice
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getFirstChoiceCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|advFirstChoice
argument_list|)
condition|)
name|points
operator|++
expr_stmt|;
comment|// also first as choice (not alt to something else)
block|}
comment|// number of courses match
name|maxPoints
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|nrCourses
operator|==
name|nrCoursesFound
condition|)
name|points
operator|+=
literal|2
expr_stmt|;
comment|// all courses exist
if|if
condition|(
name|nrCourses
operator|>
literal|1
condition|)
name|maxPoints
operator|++
expr_stmt|;
if|if
condition|(
name|nrCourses
operator|>
literal|1
operator|&&
name|nrCoursesFound
operator|>=
literal|1
condition|)
name|points
operator|++
expr_stmt|;
comment|// at least one
if|if
condition|(
name|nrCourses
operator|>
literal|0
operator|&&
operator|!
name|last
operator|.
name|isSubstitute
argument_list|()
condition|)
name|maxPoints
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|nrCourses
operator|>
literal|0
operator|&&
name|nrCoursesFound
operator|>=
literal|1
operator|&&
operator|!
name|last
operator|.
name|isSubstitute
argument_list|()
operator|&&
name|nrCoursesFound
operator|-
name|nrSubstMisMatch
operator|>
literal|0
condition|)
name|points
operator|+=
literal|2
expr_stmt|;
comment|// and are proprity
if|if
condition|(
name|nrCourses
operator|>
literal|1
condition|)
name|maxPoints
operator|++
expr_stmt|;
if|if
condition|(
name|nrCourses
operator|>
literal|1
operator|&&
name|nrCoursesFound
operator|>
literal|1
condition|)
name|points
operator|++
expr_stmt|;
comment|// at least two
if|if
condition|(
name|nrCourses
operator|>
literal|2
condition|)
name|maxPoints
operator|++
expr_stmt|;
if|if
condition|(
name|nrCourses
operator|>
literal|2
operator|&&
name|nrCoursesFound
operator|>
literal|2
condition|)
name|points
operator|++
expr_stmt|;
comment|// at least three
if|if
condition|(
name|nrCoursesFound
operator|>
literal|1
condition|)
name|maxPoints
operator|++
expr_stmt|;
if|if
condition|(
name|nrCoursesFound
operator|>
literal|1
operator|&&
name|foundPrioMin
operator|==
name|foundPrioMax
condition|)
name|points
operator|++
expr_stmt|;
comment|// and have same priority
name|maxPoints
operator|++
expr_stmt|;
if|if
condition|(
name|nrSubstMisMatch
operator|==
literal|0
operator|&&
name|nrCoursesFound
operator|>
literal|0
condition|)
name|points
operator|++
expr_stmt|;
comment|// not priority mismatch
if|if
condition|(
name|nrCriticalCourses
operator|>
literal|1
condition|)
name|maxPoints
operator|+=
literal|3
expr_stmt|;
if|if
condition|(
name|nrCriticalCourses
operator|>
literal|1
operator|&&
name|nrCriticalCoursesFound
operator|>
literal|1
condition|)
name|points
operator|+=
literal|3
expr_stmt|;
comment|// critical
block|}
name|info
operator|.
name|setPercentage
argument_list|(
operator|(
operator|(
name|float
operator|)
name|points
operator|)
operator|/
name|maxPoints
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
block|}
end_class

end_unit

