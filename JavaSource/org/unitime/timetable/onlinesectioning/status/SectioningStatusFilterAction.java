begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Advisor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AdvisorCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingConsentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentGroupTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomCourseLookupHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|DatabaseServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SectioningStatusFilterAction
implements|implements
name|OnlineSectioningAction
argument_list|<
name|FilterRpcResponse
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FilterRpcRequest
name|iRequest
init|=
literal|null
decl_stmt|;
specifier|public
name|SectioningStatusFilterAction
name|forRequest
parameter_list|(
name|FilterRpcRequest
name|request
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|FilterRpcResponse
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
switch|switch
condition|(
name|iRequest
operator|.
name|getCommand
argument_list|()
condition|)
block|{
case|case
name|LOAD
case|:
return|return
name|load
argument_list|(
name|server
argument_list|,
name|helper
argument_list|)
return|;
case|case
name|SUGGESTIONS
case|:
return|return
name|suggestions
argument_list|(
name|server
argument_list|,
name|helper
argument_list|)
return|;
case|case
name|ENUMERATE
case|:
return|return
name|enumarate
argument_list|(
name|server
argument_list|,
name|helper
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|FilterRpcResponse
name|load
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|FilterRpcResponse
name|response
init|=
operator|new
name|FilterRpcResponse
argument_list|()
decl_stmt|;
name|StudentQuery
name|query
init|=
name|getQuery
argument_list|(
name|iRequest
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
decl_stmt|;
name|CourseQuery
name|courseQuery
init|=
name|getCourseQuery
argument_list|(
name|iRequest
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
name|areas
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"aac.academicArea.uniqueId, aac.academicArea.academicAreaAbbreviation, aac.academicArea.title, count(distinct s.uniqueId)"
argument_list|)
operator|.
name|order
argument_list|(
literal|"aac.academicArea.academicAreaAbbreviation, aac.academicArea.title"
argument_list|)
operator|.
name|group
argument_list|(
literal|"aac.academicArea.uniqueId, aac.academicArea.academicAreaAbbreviation, aac.academicArea.title"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"area"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"major"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"concentration"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"minor"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"course"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"im"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|a
init|=
operator|new
name|Entity
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|a
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|areas
operator|.
name|put
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"aam.academicArea.uniqueId, aam.academicArea.academicAreaAbbreviation, aam.academicArea.title, count(distinct s.uniqueId)"
argument_list|)
operator|.
name|from
argument_list|(
literal|"StudentAreaClassificationMinor aam"
argument_list|)
operator|.
name|where
argument_list|(
literal|"aam.student = s"
argument_list|)
operator|.
name|order
argument_list|(
literal|"aam.academicArea.academicAreaAbbreviation, aam.academicArea.title"
argument_list|)
operator|.
name|group
argument_list|(
literal|"aam.academicArea.uniqueId, aam.academicArea.academicAreaAbbreviation, aam.academicArea.title"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"area"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"major"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"concentration"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"minor"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"course"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"im"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|a
init|=
name|areas
operator|.
name|get
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|a
operator|=
operator|new
name|Entity
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|areas
operator|.
name|put
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|a
operator|.
name|setCount
argument_list|(
name|a
operator|.
name|getCount
argument_list|()
operator|+
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|areas
operator|.
name|put
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"area"
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|areas
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRequest
operator|.
name|hasOptions
argument_list|(
literal|"area"
argument_list|)
condition|)
block|{
name|StudentQuery
name|q
init|=
operator|new
name|StudentQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
name|String
name|area
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|a
range|:
name|iRequest
operator|.
name|getOptions
argument_list|(
literal|"area"
argument_list|)
control|)
block|{
name|area
operator|+=
operator|(
name|area
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xar"
operator|+
name|id
expr_stmt|;
name|q
operator|.
name|addParameter
argument_list|(
literal|"area"
argument_list|,
literal|"Xar"
operator|+
name|id
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|q
operator|.
name|addWhere
argument_list|(
literal|"xxx"
argument_list|,
literal|"aac.academicArea.academicAreaAbbreviation in ("
operator|+
name|area
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Entity
argument_list|>
name|majors
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|q
operator|.
name|select
argument_list|(
literal|"aac.major.uniqueId, aac.major.code, aac.major.name, count(distinct s)"
argument_list|)
operator|.
name|order
argument_list|(
literal|"aac.major.code, aac.major.name"
argument_list|)
operator|.
name|group
argument_list|(
literal|"aac.major.uniqueId, aac.major.code, aac.major.name"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"major"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"concentration"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"course"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"im"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|m
init|=
operator|new
name|Entity
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|m
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|majors
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"major"
argument_list|,
name|majors
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRequest
operator|.
name|hasOptions
argument_list|(
literal|"major"
argument_list|)
condition|)
block|{
name|StudentQuery
name|q
init|=
operator|new
name|StudentQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
name|String
name|area
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|iRequest
operator|.
name|hasOptions
argument_list|(
literal|"area"
argument_list|)
condition|)
for|for
control|(
name|String
name|a
range|:
name|iRequest
operator|.
name|getOptions
argument_list|(
literal|"area"
argument_list|)
control|)
block|{
name|area
operator|+=
operator|(
name|area
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xar"
operator|+
name|id
expr_stmt|;
name|q
operator|.
name|addParameter
argument_list|(
literal|"area"
argument_list|,
literal|"Xar"
operator|+
name|id
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|String
name|major
init|=
literal|""
decl_stmt|;
name|id
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|String
name|a
range|:
name|iRequest
operator|.
name|getOptions
argument_list|(
literal|"major"
argument_list|)
control|)
block|{
name|major
operator|+=
operator|(
name|major
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xmj"
operator|+
name|id
expr_stmt|;
name|q
operator|.
name|addParameter
argument_list|(
literal|"major"
argument_list|,
literal|"Xmj"
operator|+
name|id
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|q
operator|.
name|addWhere
argument_list|(
literal|"xxx"
argument_list|,
operator|(
name|area
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"aac.academicArea.academicAreaAbbreviation in ("
operator|+
name|area
operator|+
literal|") and "
operator|)
operator|+
literal|"aac.major.code in ("
operator|+
name|major
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Entity
argument_list|>
name|concentrations
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|q
operator|.
name|select
argument_list|(
literal|"aac.concentration.uniqueId, aac.concentration.code, aac.concentration.name, count(distinct s)"
argument_list|)
operator|.
name|order
argument_list|(
literal|"aac.concentration.code, aac.concentration.name"
argument_list|)
operator|.
name|group
argument_list|(
literal|"aac.concentration.uniqueId, aac.concentration.code, aac.concentration.name"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"concentration"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"course"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"im"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|m
init|=
operator|new
name|Entity
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|m
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|concentrations
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"concentration"
argument_list|,
name|concentrations
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRequest
operator|.
name|hasOptions
argument_list|(
literal|"area"
argument_list|)
condition|)
block|{
name|StudentQuery
name|q
init|=
operator|new
name|StudentQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
name|String
name|area
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|a
range|:
name|iRequest
operator|.
name|getOptions
argument_list|(
literal|"area"
argument_list|)
control|)
block|{
name|area
operator|+=
operator|(
name|area
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xar"
operator|+
name|id
expr_stmt|;
name|q
operator|.
name|addParameter
argument_list|(
literal|"area"
argument_list|,
literal|"Xar"
operator|+
name|id
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|q
operator|.
name|addFrom
argument_list|(
literal|"area"
argument_list|,
literal|"StudentAreaClassificationMinor aam"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addWhere
argument_list|(
literal|"area"
argument_list|,
literal|"aam.student = s and aam.academicArea.academicAreaAbbreviation in ("
operator|+
name|area
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Entity
argument_list|>
name|minors
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|q
operator|.
name|select
argument_list|(
literal|"aam.minor.uniqueId, aam.minor.code, aam.minor.name, count(distinct s)"
argument_list|)
operator|.
name|order
argument_list|(
literal|"aam.minor.code, aam.minor.name"
argument_list|)
operator|.
name|group
argument_list|(
literal|"aam.minor.uniqueId, aam.minor.code, aam.minor.name"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"minor"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"classification"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"course"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"im"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|m
init|=
operator|new
name|Entity
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|m
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|minors
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"minor"
argument_list|,
name|minors
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Entity
argument_list|>
name|classifications
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"aac.academicClassification.uniqueId, aac.academicClassification.code, aac.academicClassification.name, count(distinct s)"
argument_list|)
operator|.
name|order
argument_list|(
literal|"aac.academicClassification.code, aac.academicClassification.name"
argument_list|)
operator|.
name|group
argument_list|(
literal|"aac.academicClassification.uniqueId, aac.academicClassification.code, aac.academicClassification.name"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"classification"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"course"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"im"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|c
init|=
operator|new
name|Entity
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|c
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|classifications
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"classification"
argument_list|,
name|classifications
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Entity
argument_list|>
name|degrees
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"aac.degree.uniqueId, aac.degree.reference, aac.degree.label, count(distinct s)"
argument_list|)
operator|.
name|order
argument_list|(
literal|"aac.degree.reference, aac.degree.label"
argument_list|)
operator|.
name|group
argument_list|(
literal|"aac.degree.uniqueId, aac.degree.reference, aac.degree.label"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"degree"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"course"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"im"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|c
init|=
operator|new
name|Entity
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|c
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|degrees
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"degree"
argument_list|,
name|degrees
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Entity
argument_list|>
name|programs
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"aac.program.uniqueId, aac.program.reference, aac.program.label, count(distinct s)"
argument_list|)
operator|.
name|order
argument_list|(
literal|"aac.program.reference, aac.program.label"
argument_list|)
operator|.
name|group
argument_list|(
literal|"aac.program.uniqueId, aac.program.reference, aac.program.label"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"program"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"course"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"im"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|c
init|=
operator|new
name|Entity
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|c
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|programs
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"program"
argument_list|,
name|programs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|server
operator|instanceof
name|StudentSolver
operator|)
condition|)
block|{
name|List
argument_list|<
name|Entity
argument_list|>
name|campuses
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasDefaultCampus
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"aac.campus.uniqueId, aac.campus.reference, aac.campus.label, count(distinct s)"
argument_list|)
operator|.
name|order
argument_list|(
literal|"aac.campus.reference, aac.campus.label"
argument_list|)
operator|.
name|group
argument_list|(
literal|"aac.campus.uniqueId, aac.campus.reference, aac.campus.label"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"course"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"im"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|c
init|=
operator|new
name|Entity
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|c
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getCampus
argument_list|()
operator|.
name|equals
argument_list|(
name|o
index|[
literal|1
index|]
argument_list|)
condition|)
name|hasDefaultCampus
operator|=
literal|true
expr_stmt|;
name|campuses
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|campuses
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|hasDefaultCampus
condition|)
name|campuses
operator|.
name|clear
argument_list|()
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"campus"
argument_list|,
name|campuses
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Entity
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"g.uniqueId, g.groupAbbreviation, g.groupName, count(distinct s)"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join s.groups g"
argument_list|)
operator|.
name|where
argument_list|(
literal|"g.type is null"
argument_list|)
operator|.
name|order
argument_list|(
literal|"g.groupAbbreviation, g.groupName"
argument_list|)
operator|.
name|group
argument_list|(
literal|"g.uniqueId, g.groupAbbreviation, g.groupName"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"group"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"course"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"im"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|c
init|=
operator|new
name|Entity
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|c
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"group"
argument_list|,
name|groups
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentGroupType
name|type
range|:
name|StudentGroupTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
control|)
block|{
name|List
argument_list|<
name|Entity
argument_list|>
name|groupsOfThisType
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"gt.uniqueId, gt.groupAbbreviation, gt.groupName, count(distinct s)"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join s.groups gt"
argument_list|)
operator|.
name|where
argument_list|(
literal|"gt.type = :groupTypeId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"groupTypeId"
argument_list|,
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|order
argument_list|(
literal|"gt.groupAbbreviation, gt.groupName"
argument_list|)
operator|.
name|group
argument_list|(
literal|"gt.uniqueId, gt.groupAbbreviation, gt.groupName"
argument_list|)
operator|.
name|exclude
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"course"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"im"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|c
init|=
operator|new
name|Entity
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|c
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|groupsOfThisType
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|,
name|groupsOfThisType
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|getLabel
argument_list|()
operator|!=
literal|null
condition|)
name|response
operator|.
name|setTypeLabel
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|,
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Entity
argument_list|>
name|acc
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"a.uniqueId, a.abbreviation, a.name, count(distinct s)"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join s.accomodations a"
argument_list|)
operator|.
name|order
argument_list|(
literal|"a.abbreviation, a.name"
argument_list|)
operator|.
name|group
argument_list|(
literal|"a.uniqueId, a.abbreviation, a.name"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"accommodation"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"course"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"im"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|c
init|=
operator|new
name|Entity
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|c
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|acc
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"accommodation"
argument_list|,
name|acc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Entity
argument_list|>
name|states
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|defaultStatus
init|=
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct s)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"s.sectioningStatus is null"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"status"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultStatus
operator|>
literal|0
condition|)
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
name|Entity
name|s
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|==
literal|null
condition|)
block|{
name|s
operator|=
operator|new
name|Entity
argument_list|(
literal|0l
argument_list|,
literal|"Not Set"
argument_list|,
literal|"No Restrictions (Default)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
operator|new
name|Entity
argument_list|(
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|"Not Set"
argument_list|,
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
operator|+
literal|" (Default)"
argument_list|,
literal|"hint"
argument_list|,
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|setCount
argument_list|(
name|defaultStatus
argument_list|)
expr_stmt|;
name|states
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"s.sectioningStatus.uniqueId, s.sectioningStatus.reference, s.sectioningStatus.label, count(distinct s)"
argument_list|)
operator|.
name|order
argument_list|(
literal|"s.sectioningStatus.reference, s.sectioningStatus.label"
argument_list|)
operator|.
name|group
argument_list|(
literal|"s.sectioningStatus.uniqueId, s.sectioningStatus.reference, s.sectioningStatus.label"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"status"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|s
init|=
operator|new
name|Entity
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
literal|"hint"
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|s
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|states
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|states
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|response
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
name|states
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|crit2count
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|courseQuery
operator|.
name|select
argument_list|(
literal|"cr.courseDemand.critical, count(distinct cr.courseDemand)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cr.courseDemand.critical is not null and cr.courseDemand.criticalOverride is null"
argument_list|)
operator|.
name|order
argument_list|(
literal|"cr.courseDemand.critical"
argument_list|)
operator|.
name|group
argument_list|(
literal|"cr.courseDemand.critical"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"assignment"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|crit2count
operator|.
name|put
argument_list|(
operator|(
name|Integer
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|courseQuery
operator|.
name|select
argument_list|(
literal|"cr.courseDemand.criticalOverride, count(distinct cr.courseDemand)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cr.courseDemand.criticalOverride is not null"
argument_list|)
operator|.
name|order
argument_list|(
literal|"cr.courseDemand.criticalOverride"
argument_list|)
operator|.
name|group
argument_list|(
literal|"cr.courseDemand.criticalOverride"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"assignment"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Integer
name|pref
init|=
name|crit2count
operator|.
name|get
argument_list|(
operator|(
name|Integer
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|crit2count
operator|.
name|put
argument_list|(
operator|(
name|Integer
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
operator|+
operator|(
name|pref
operator|==
literal|null
condition|?
literal|0
else|:
name|pref
operator|.
name|intValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Entity
argument_list|>
name|assignment
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|0l
argument_list|,
literal|"Assigned"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|1l
argument_list|,
literal|"Reserved"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|1
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|2l
argument_list|,
literal|"Not Assigned"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|2
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|crit2count
operator|.
name|containsKey
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|CRITICAL
operator|.
name|ordinal
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
operator|.
name|length
operator|>
literal|4
condition|)
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|4l
argument_list|,
literal|"Critical"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|4
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|4l
argument_list|,
literal|"Critical"
argument_list|,
literal|"Critical"
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|get
argument_list|(
name|assignment
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|setCount
argument_list|(
name|crit2count
operator|.
name|get
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|CRITICAL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
operator|.
name|length
operator|>
literal|5
condition|)
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|5l
argument_list|,
literal|"Assigned Critical"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|5
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|5l
argument_list|,
literal|"Assigned Critical"
argument_list|,
literal|"Assigned Critical"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
operator|.
name|length
operator|>
literal|6
condition|)
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|6l
argument_list|,
literal|"Not Assigned Critical"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|6
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|6
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|6l
argument_list|,
literal|"Not Assigned Critical"
argument_list|,
literal|"Not Assigned Critical"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crit2count
operator|.
name|containsKey
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|VITAL
operator|.
name|ordinal
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
operator|.
name|length
operator|>
literal|13
condition|)
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|13l
argument_list|,
literal|"Vital"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|13
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|13
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|13l
argument_list|,
literal|"Vital"
argument_list|,
literal|"Vital"
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|get
argument_list|(
name|assignment
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|setCount
argument_list|(
name|crit2count
operator|.
name|get
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|VITAL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
operator|.
name|length
operator|>
literal|14
condition|)
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|14l
argument_list|,
literal|"Assigned Vital"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|14
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|14
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|14l
argument_list|,
literal|"Assigned Vital"
argument_list|,
literal|"Assigned Vital"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
operator|.
name|length
operator|>
literal|15
condition|)
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|15l
argument_list|,
literal|"Not Assigned Vital"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|15
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|15
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|15l
argument_list|,
literal|"Not Assigned Vital"
argument_list|,
literal|"Not Assigned Vital"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crit2count
operator|.
name|containsKey
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|IMPORTANT
operator|.
name|ordinal
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
operator|.
name|length
operator|>
literal|7
condition|)
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|7l
argument_list|,
literal|"Important"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|7
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|7
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|7l
argument_list|,
literal|"Important"
argument_list|,
literal|"Important"
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|get
argument_list|(
name|assignment
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|setCount
argument_list|(
name|crit2count
operator|.
name|get
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|IMPORTANT
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
operator|.
name|length
operator|>
literal|8
condition|)
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|8l
argument_list|,
literal|"Assigned Important"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|8
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|8
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|8l
argument_list|,
literal|"Assigned Important"
argument_list|,
literal|"Assigned Important"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
operator|.
name|length
operator|>
literal|9
condition|)
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|9l
argument_list|,
literal|"Not Assigned Important"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|9
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|9
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|9l
argument_list|,
literal|"Not Assigned Important"
argument_list|,
literal|"Not Assigned Important"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
operator|.
name|length
operator|>
literal|10
condition|)
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|10l
argument_list|,
literal|"No-Substitutes"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|10
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|10l
argument_list|,
literal|"No-Substitutes"
argument_list|,
literal|"No-Substitutes"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
operator|.
name|length
operator|>
literal|11
condition|)
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|11l
argument_list|,
literal|"Assigned No-Subs"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|11
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|11
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|11l
argument_list|,
literal|"Assigned No-Subs"
argument_list|,
literal|"Assigned No-Subs"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
operator|.
name|length
operator|>
literal|12
condition|)
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|12l
argument_list|,
literal|"Not Assigned No-Subs"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|12
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|12
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|12l
argument_list|,
literal|"Not Assigned No-Subs"
argument_list|,
literal|"Not Assigned No-Subs"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|server
operator|instanceof
name|StudentSolver
operator|)
condition|)
name|assignment
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|3l
argument_list|,
literal|"Wait-Listed"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|3
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"assignment"
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Entity
argument_list|>
name|consent
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
name|consent
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
operator|-
literal|1l
argument_list|,
literal|"Consent"
argument_list|,
name|CONSTANTS
operator|.
name|consentTypeAbbv
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|consentTypeAbbv
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OfferingConsentType
name|type
range|:
name|OfferingConsentType
operator|.
name|getConsentTypeList
argument_list|()
control|)
name|consent
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|type
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|consent
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
operator|-
literal|2l
argument_list|,
literal|"No Consent"
argument_list|,
name|CONSTANTS
operator|.
name|consentTypeAbbv
argument_list|()
index|[
literal|1
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|consentTypeAbbv
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|consent
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
operator|-
literal|3l
argument_list|,
literal|"Waiting"
argument_list|,
name|CONSTANTS
operator|.
name|consentTypeAbbv
argument_list|()
index|[
literal|2
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|consentTypeAbbv
argument_list|()
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|consent
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
operator|-
literal|4l
argument_list|,
literal|"Approved"
argument_list|,
name|CONSTANTS
operator|.
name|consentTypeAbbv
argument_list|()
index|[
literal|3
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|consentTypeAbbv
argument_list|()
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|consent
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
operator|-
literal|5l
argument_list|,
literal|"To Do"
argument_list|,
name|CONSTANTS
operator|.
name|consentTypeAbbv
argument_list|()
index|[
literal|4
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|consentTypeAbbv
argument_list|()
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"consent"
argument_list|,
name|consent
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|iRequest
operator|.
name|getOption
argument_list|(
literal|"online"
argument_list|)
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Entity
argument_list|>
name|overrides
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
name|status
range|:
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|overrides
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
operator|-
name|status
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|status
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|CONSTANTS
operator|.
name|overrideType
argument_list|()
index|[
name|status
operator|.
name|ordinal
argument_list|()
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|overrideType
argument_list|()
index|[
name|status
operator|.
name|ordinal
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
operator|!
name|iRequest
operator|.
name|hasOptions
argument_list|(
literal|"assignment"
argument_list|)
condition|)
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"s.overrideStatus, count(distinct s)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"s.overrideStatus is not null"
argument_list|)
operator|.
name|order
argument_list|(
literal|"s.overrideStatus"
argument_list|)
operator|.
name|group
argument_list|(
literal|"s.overrideStatus"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"override"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|e
init|=
name|overrides
operator|.
name|get
argument_list|(
operator|(
name|Integer
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|e
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|courseQuery
operator|.
name|select
argument_list|(
literal|"cr.overrideStatus, count(distinct cr)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cr.overrideStatus is not null"
argument_list|)
operator|.
name|order
argument_list|(
literal|"cr.overrideStatus"
argument_list|)
operator|.
name|group
argument_list|(
literal|"cr.overrideStatus"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"override"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|e
init|=
name|overrides
operator|.
name|get
argument_list|(
operator|(
name|Integer
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|e
operator|.
name|setCount
argument_list|(
name|e
operator|.
name|getCount
argument_list|()
operator|+
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Entity
argument_list|>
name|i
init|=
name|overrides
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|getCount
argument_list|()
operator|==
literal|0
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|overrides
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Entity
name|none
init|=
operator|new
name|Entity
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
operator|-
literal|100
argument_list|)
argument_list|,
literal|"none"
argument_list|,
name|CONSTANTS
operator|.
name|noOverride
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|noOverride
argument_list|()
argument_list|)
decl_stmt|;
comment|// none.setCount(((Number)query.select("count(distinct xcr)").where("xcr.overrideStatus is null").from("inner join s.courseDemands xcd inner join xcd.courseRequests xcr").exclude("override").query(helper.getHibSession()).uniqueResult()).intValue());
name|overrides
operator|.
name|add
argument_list|(
name|none
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"override"
argument_list|,
name|overrides
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Entity
argument_list|>
name|modes
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|iRequest
operator|.
name|hasOption
argument_list|(
literal|"role"
argument_list|)
condition|)
block|{
name|int
name|myStudents
init|=
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct s)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"s.uniqueId in (select ads.uniqueId from Advisor adv inner join adv.students ads where adv.externalUniqueId = :Xuser and adv.role.reference = :Xrole and adv.session.uniqueId = s.session.uniqueId)"
argument_list|)
operator|.
name|set
argument_list|(
literal|"Xuser"
argument_list|,
name|iRequest
operator|.
name|getOption
argument_list|(
literal|"user"
argument_list|)
argument_list|)
operator|.
name|set
argument_list|(
literal|"Xrole"
argument_list|,
name|iRequest
operator|.
name|getOption
argument_list|(
literal|"role"
argument_list|)
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|myStudents
operator|>
literal|0
condition|)
block|{
name|Entity
name|myE
init|=
operator|new
name|Entity
argument_list|(
operator|-
literal|1l
argument_list|,
literal|"My Students"
argument_list|,
name|MESSAGES
operator|.
name|modeMyStudents
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|modeMyStudents
argument_list|()
argument_list|)
decl_stmt|;
name|myE
operator|.
name|setCount
argument_list|(
name|myStudents
argument_list|)
expr_stmt|;
name|modes
operator|.
name|add
argument_list|(
name|myE
argument_list|)
expr_stmt|;
name|int
name|myAdvised
init|=
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct s)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"s.uniqueId in (select ads.uniqueId from Advisor adv inner join adv.students ads where adv.externalUniqueId = :Xuser and adv.role.reference = :Xrole and adv.session.uniqueId = s.session.uniqueId) and s.advisorCourseRequests is not empty"
argument_list|)
operator|.
name|set
argument_list|(
literal|"Xuser"
argument_list|,
name|iRequest
operator|.
name|getOption
argument_list|(
literal|"user"
argument_list|)
argument_list|)
operator|.
name|set
argument_list|(
literal|"Xrole"
argument_list|,
name|iRequest
operator|.
name|getOption
argument_list|(
literal|"role"
argument_list|)
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|myAdvised
operator|>
literal|0
condition|)
block|{
name|Entity
name|myA
init|=
operator|new
name|Entity
argument_list|(
operator|-
literal|1l
argument_list|,
literal|"My Advised"
argument_list|,
name|MESSAGES
operator|.
name|modeMyStudentsAdvised
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|modeMyStudentsAdvised
argument_list|()
argument_list|)
decl_stmt|;
name|myA
operator|.
name|setCount
argument_list|(
name|myAdvised
argument_list|)
expr_stmt|;
name|modes
operator|.
name|add
argument_list|(
name|myA
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myAdvised
operator|<
name|myStudents
condition|)
block|{
name|Entity
name|myA
init|=
operator|new
name|Entity
argument_list|(
operator|-
literal|1l
argument_list|,
literal|"My Not Advised"
argument_list|,
name|MESSAGES
operator|.
name|modeMyStudentsNotAdvised
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|modeMyStudentsNotAdvised
argument_list|()
argument_list|)
decl_stmt|;
name|myA
operator|.
name|setCount
argument_list|(
name|myStudents
operator|-
name|myAdvised
argument_list|)
expr_stmt|;
name|modes
operator|.
name|add
argument_list|(
name|myA
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|advised
init|=
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct s)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"s.advisorCourseRequests is not empty"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|advised
operator|>
literal|0
condition|)
block|{
name|Entity
name|adv
init|=
operator|new
name|Entity
argument_list|(
operator|-
literal|1l
argument_list|,
literal|"Advised"
argument_list|,
name|MESSAGES
operator|.
name|modeAdvised
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|modeAdvised
argument_list|()
argument_list|)
decl_stmt|;
name|adv
operator|.
name|setCount
argument_list|(
name|advised
argument_list|)
expr_stmt|;
name|modes
operator|.
name|add
argument_list|(
name|adv
argument_list|)
expr_stmt|;
name|int
name|notAdvised
init|=
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct s)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"s.advisorCourseRequests is empty"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"credit"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|notAdvised
operator|>
literal|0
condition|)
block|{
name|Entity
name|notAdv
init|=
operator|new
name|Entity
argument_list|(
operator|-
literal|1l
argument_list|,
literal|"Not Advised"
argument_list|,
name|MESSAGES
operator|.
name|modeNotAdvised
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|modeNotAdvised
argument_list|()
argument_list|)
decl_stmt|;
name|notAdv
operator|.
name|setCount
argument_list|(
name|notAdvised
argument_list|)
expr_stmt|;
name|modes
operator|.
name|add
argument_list|(
name|notAdv
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|modes
operator|.
name|isEmpty
argument_list|()
condition|)
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|modes
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Entity
argument_list|>
name|preferences
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
name|preferences
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|0l
argument_list|,
literal|"Any Preference"
argument_list|,
name|MESSAGES
operator|.
name|termAnyPreference
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|termAnyPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|1l
argument_list|,
literal|"Met Preference"
argument_list|,
name|MESSAGES
operator|.
name|termMetPreference
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|termMetPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|2l
argument_list|,
literal|"Unmet Preference"
argument_list|,
name|MESSAGES
operator|.
name|termUnmetPreference
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|termUnmetPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"prefer"
argument_list|,
name|preferences
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Entity
argument_list|>
name|requires
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
name|requires
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|0l
argument_list|,
literal|"Any Requirement"
argument_list|,
name|MESSAGES
operator|.
name|termAnyRequirement
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|termAnyRequirement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|requires
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|1l
argument_list|,
literal|"Met Requirement"
argument_list|,
name|MESSAGES
operator|.
name|termMetRequirement
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|termMetRequirement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|requires
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|2l
argument_list|,
literal|"Unmet Requirement"
argument_list|,
name|MESSAGES
operator|.
name|termUnmetRequirement
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|termUnmetRequirement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"require"
argument_list|,
name|requires
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Entity
argument_list|>
name|instructionalMethods
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructionalMethod
name|im
range|:
name|InstructionalMethod
operator|.
name|findAll
argument_list|()
control|)
name|instructionalMethods
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
name|im
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|im
operator|.
name|getReference
argument_list|()
argument_list|,
name|im
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"im"
argument_list|,
name|instructionalMethods
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
specifier|public
name|FilterRpcResponse
name|suggestions
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|FilterRpcResponse
name|response
init|=
operator|new
name|FilterRpcResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|CustomCourseLookupHolder
operator|.
name|hasProvider
argument_list|()
operator|&&
operator|!
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|response
operator|.
name|getSuggestions
argument_list|()
operator|==
literal|null
operator|||
name|response
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|20
operator|)
condition|)
block|{
try|try
block|{
name|CustomCourseLookupHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|addSuggestions
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
name|String
name|studentIdPattern
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingStudentIdPattern
operator|.
name|value
argument_list|()
decl_stmt|;
name|boolean
name|studentIdMatch
init|=
operator|(
name|studentIdPattern
operator|!=
literal|null
operator|&&
operator|!
name|studentIdPattern
operator|.
name|isEmpty
argument_list|()
operator|&&
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|matches
argument_list|(
name|studentIdPattern
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|response
operator|.
name|getSuggestions
argument_list|()
operator|==
literal|null
operator|||
name|response
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|20
operator|)
operator|&&
operator|!
name|studentIdMatch
condition|)
block|{
name|List
argument_list|<
name|SubjectArea
argument_list|>
name|subjects
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s from SubjectArea s where s.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(s.subjectAreaAbbreviation) like :name or lower(' ' || s.title) like :title) "
operator|+
literal|"order by s.subjectAreaAbbreviation"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"title"
argument_list|,
literal|"% "
operator|+
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|20
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|SubjectArea
name|subject
range|:
name|subjects
control|)
name|response
operator|.
name|addSuggestion
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" - "
operator|+
name|subject
operator|.
name|getTitle
argument_list|()
argument_list|,
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
literal|"Subject Area"
argument_list|,
literal|"course"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|subjects
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|CourseOffering
name|course
range|:
operator|new
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|(
name|subjects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
condition|)
continue|continue;
name|response
operator|.
name|addSuggestion
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
operator|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" - "
operator|+
name|course
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"Course Offering"
argument_list|,
literal|"course"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|subjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c inner join c.subjectArea s where s.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(s.subjectAreaAbbreviation || ' ' || c.courseNbr) like :name or lower(' ' || c.title) like :title) and c.instructionalOffering.notOffered = false "
operator|+
literal|"order by s.subjectAreaAbbreviation, c.courseNbr"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"title"
argument_list|,
literal|"% "
operator|+
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|20
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|courses
control|)
block|{
name|response
operator|.
name|addSuggestion
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
operator|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" - "
operator|+
name|course
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"Course Offering"
argument_list|,
literal|"course"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|StudentQuery
name|query
init|=
name|getQuery
argument_list|(
name|iRequest
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|response
operator|.
name|getSuggestions
argument_list|()
operator|==
literal|null
operator|||
name|response
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|20
operator|)
condition|)
block|{
if|if
condition|(
name|studentIdMatch
condition|)
block|{
name|StudentQuery
operator|.
name|QueryInstance
name|instance
init|=
name|query
operator|.
name|select
argument_list|(
literal|"distinct s"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"student"
argument_list|)
operator|.
name|order
argument_list|(
literal|"s.lastName, s.firstName, s.middleName"
argument_list|)
decl_stmt|;
name|instance
operator|.
name|where
argument_list|(
literal|"s.externalUniqueId = :id"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|DataExchangeTrimLeadingZerosFromExternalIds
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|instance
operator|.
name|set
argument_list|(
literal|"id"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"^0+(?!$)"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|instance
operator|.
name|set
argument_list|(
literal|"id"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Student
name|student
range|:
operator|(
name|List
argument_list|<
name|Student
argument_list|>
operator|)
name|instance
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|response
operator|.
name|addSuggestion
argument_list|(
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|student
argument_list|)
argument_list|,
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
literal|"Student"
argument_list|,
literal|"student"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StudentQuery
operator|.
name|QueryInstance
name|instance
init|=
name|query
operator|.
name|select
argument_list|(
literal|"distinct s"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"student"
argument_list|)
operator|.
name|order
argument_list|(
literal|"s.lastName, s.firstName, s.middleName"
argument_list|)
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
name|String
name|where
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|", "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|s
operator|.
name|nextToken
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|where
operator|.
name|isEmpty
argument_list|()
condition|)
name|where
operator|+=
literal|" and "
expr_stmt|;
name|where
operator|+=
literal|"(upper(s.firstName) like :cn"
operator|+
name|id
operator|+
literal|" || '%' or upper(s.middleName) like :cn"
operator|+
name|id
operator|+
literal|" || '%' or upper(s.lastName) like :cn"
operator|+
name|id
operator|+
literal|" || '%' or upper(s.email) like :cn"
operator|+
name|id
operator|+
literal|")"
expr_stmt|;
name|instance
operator|.
name|set
argument_list|(
literal|"cn"
operator|+
name|id
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|>
literal|0
condition|)
block|{
name|instance
operator|.
name|where
argument_list|(
literal|"("
operator|+
name|where
operator|+
literal|") or upper(trim(trailing ' ' from s.lastName || ', ' || s.firstName || ' ' || s.middleName)) = :name or s.externalUniqueId = :id"
argument_list|)
expr_stmt|;
name|instance
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|DataExchangeTrimLeadingZerosFromExternalIds
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|instance
operator|.
name|set
argument_list|(
literal|"id"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"^0+(?!$)"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|instance
operator|.
name|set
argument_list|(
literal|"id"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Student
name|student
range|:
operator|(
name|List
argument_list|<
name|Student
argument_list|>
operator|)
name|instance
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|response
operator|.
name|addSuggestion
argument_list|(
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|student
argument_list|)
argument_list|,
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
literal|"Student"
argument_list|,
literal|"student"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|response
operator|.
name|getSuggestions
argument_list|()
operator|==
literal|null
operator|||
name|response
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|20
operator|)
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|iRequest
operator|.
name|getOption
argument_list|(
literal|"approval"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|TimetableManager
name|manager
range|:
operator|(
name|List
argument_list|<
name|TimetableManager
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct m from TimetableManager m inner join m.managerRoles r inner join m.departments d where "
operator|+
literal|" (lower(m.externalUniqueId) like :q || '%' or lower(m.emailAddress) like :q || '%' or lower(m.lastName) || ' ' || lower(m.firstName) like :q || '%')"
operator|+
literal|" and 'ConsentApproval' in elements(r.role.rights) and d.session.uniqueId = :sessionId order by m.lastName, m.firstName, m.middleName"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|20
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|response
operator|.
name|addSuggestion
argument_list|(
name|manager
operator|.
name|getName
argument_list|()
argument_list|,
name|manager
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Approved by"
argument_list|,
literal|"approver"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DepartmentalInstructor
name|coordinator
range|:
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct i from CourseOffering c inner join c.instructionalOffering.offeringCoordinators oc inner join oc.instructor i where "
operator|+
literal|"c.subjectArea.session.uniqueId = :sessionId and c.consentType.reference != :reference and "
operator|+
literal|"(lower(i.externalUniqueId) like :q || '%' or lower(i.email) like :q || '%' or lower(i.lastName) || ' ' || lower(i.firstName) like :q || '%') "
operator|+
literal|"order by i.lastName, i.firstName, i.middleName"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"reference"
argument_list|,
literal|"IN"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|20
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|response
operator|.
name|addSuggestion
argument_list|(
name|coordinator
operator|.
name|getNameLastFirst
argument_list|()
argument_list|,
name|coordinator
operator|.
name|getNameLastFirst
argument_list|()
argument_list|,
literal|"Approved by"
argument_list|,
literal|"approver"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
operator|(
name|response
operator|.
name|getSuggestions
argument_list|()
operator|==
literal|null
operator|||
name|response
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|20
operator|)
operator|&&
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|matches
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingDashboardSuggestionsOperationPattern
operator|.
name|value
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|days
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingDashboardSuggestionsLogDays
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|days
operator|>
literal|0
condition|)
block|{
name|StudentQuery
operator|.
name|QueryInstance
name|instance
init|=
name|query
operator|.
name|select
argument_list|(
literal|"distinct l.operation"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"operation"
argument_list|)
operator|.
name|order
argument_list|(
literal|"l.operation"
argument_list|)
operator|.
name|from
argument_list|(
literal|"OnlineSectioningLog l"
argument_list|)
operator|.
name|where
argument_list|(
literal|"l.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|where
argument_list|(
literal|"l.student = s.externalUniqueId"
argument_list|)
operator|.
name|where
argument_list|(
literal|"l.timeStamp> "
operator|+
name|HibernateUtil
operator|.
name|addDate
argument_list|(
literal|"current_date()"
argument_list|,
literal|":days"
argument_list|)
argument_list|)
operator|.
name|set
argument_list|(
literal|"days"
argument_list|,
operator|-
name|days
argument_list|)
decl_stmt|;
name|String
name|q
init|=
name|iRequest
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"operation"
operator|.
name|startsWith
argument_list|(
name|q
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|instance
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|instance
operator|.
name|where
argument_list|(
literal|"l.operation like :q || '%'"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|op
range|:
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|instance
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|response
operator|.
name|addSuggestion
argument_list|(
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|op
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|' '
argument_list|)
argument_list|)
argument_list|,
name|op
argument_list|,
literal|"Operation"
argument_list|,
literal|"operation"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|days
operator|<
literal|0
condition|)
block|{
name|StudentQuery
operator|.
name|QueryInstance
name|instance
init|=
name|query
operator|.
name|select
argument_list|(
literal|"distinct l.operation"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"operation"
argument_list|)
operator|.
name|order
argument_list|(
literal|"l.operation"
argument_list|)
operator|.
name|from
argument_list|(
literal|"OnlineSectioningLog l"
argument_list|)
operator|.
name|where
argument_list|(
literal|"l.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|where
argument_list|(
literal|"l.student = s.externalUniqueId"
argument_list|)
decl_stmt|;
name|String
name|q
init|=
name|iRequest
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"operation"
operator|.
name|startsWith
argument_list|(
name|q
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|instance
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|instance
operator|.
name|where
argument_list|(
literal|"l.operation like :q || '%'"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|op
range|:
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|instance
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|response
operator|.
name|addSuggestion
argument_list|(
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|op
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|' '
argument_list|)
argument_list|)
argument_list|,
name|op
argument_list|,
literal|"Operation"
argument_list|,
literal|"operation"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
operator|(
name|response
operator|.
name|getSuggestions
argument_list|()
operator|==
literal|null
operator|||
name|response
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|20
operator|)
condition|)
block|{
name|StudentQuery
operator|.
name|QueryInstance
name|instance
init|=
name|query
operator|.
name|select
argument_list|(
literal|"distinct im.label"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join s.courseDemands pcd inner join pcd.courseRequests pcr inner join pcr.preferences pp inner join pp.instructionalMethod im"
argument_list|)
operator|.
name|where
argument_list|(
literal|"lower(im.reference) like :q || '%' or lower(im.label) like :q || '%'"
argument_list|)
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|im
range|:
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|instance
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|response
operator|.
name|addSuggestion
argument_list|(
name|im
argument_list|,
name|im
argument_list|,
literal|"Prefer"
argument_list|,
literal|"prefer"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
operator|(
name|response
operator|.
name|getSuggestions
argument_list|()
operator|==
literal|null
operator|||
name|response
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|20
operator|)
condition|)
block|{
name|StudentQuery
operator|.
name|QueryInstance
name|instance
init|=
name|query
operator|.
name|select
argument_list|(
literal|"distinct im.label"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join s.courseDemands pcd inner join pcd.courseRequests pcr inner join pcr.preferences pp inner join pp.instructionalMethod im"
argument_list|)
operator|.
name|where
argument_list|(
literal|"lower(im.reference) like :q || '%' or lower(im.label) like :q || '%'"
argument_list|)
operator|.
name|where
argument_list|(
literal|"pp.required = true"
argument_list|)
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|im
range|:
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|instance
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|response
operator|.
name|addSuggestion
argument_list|(
name|im
argument_list|,
name|im
argument_list|,
literal|"Require"
argument_list|,
literal|"require"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
operator|(
name|response
operator|.
name|getSuggestions
argument_list|()
operator|==
literal|null
operator|||
name|response
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|20
operator|)
condition|)
block|{
name|StudentQuery
operator|.
name|QueryInstance
name|instance
init|=
name|query
operator|.
name|select
argument_list|(
literal|"distinct c, pcr.courseOffering"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join s.courseDemands pcd inner join pcd.courseRequests pcr inner join pcr.preferences pp inner join pp.clazz c"
argument_list|)
operator|.
name|where
argument_list|(
literal|"lower(pp.label) like :q || '%'"
argument_list|)
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|instance
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|response
operator|.
name|addSuggestion
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|(
name|co
argument_list|,
literal|true
argument_list|)
argument_list|,
name|c
operator|.
name|getClassPrefLabel
argument_list|(
name|co
argument_list|)
argument_list|,
literal|"Prefer"
argument_list|,
literal|"prefer"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
operator|(
name|response
operator|.
name|getSuggestions
argument_list|()
operator|==
literal|null
operator|||
name|response
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|20
operator|)
condition|)
block|{
name|StudentQuery
operator|.
name|QueryInstance
name|instance
init|=
name|query
operator|.
name|select
argument_list|(
literal|"distinct c, pcr.courseOffering"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"prefer"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"require"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join s.courseDemands pcd inner join pcd.courseRequests pcr inner join pcr.preferences pp inner join pp.clazz c"
argument_list|)
operator|.
name|where
argument_list|(
literal|"lower(pp.label) like :q || '%'"
argument_list|)
operator|.
name|where
argument_list|(
literal|"pp.required = true"
argument_list|)
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|instance
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|response
operator|.
name|addSuggestion
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|(
name|co
argument_list|,
literal|true
argument_list|)
argument_list|,
name|c
operator|.
name|getClassPrefLabel
argument_list|(
name|co
argument_list|)
argument_list|,
literal|"Require"
argument_list|,
literal|"require"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|response
operator|.
name|getSuggestions
argument_list|()
operator|==
literal|null
operator|||
name|response
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|20
operator|)
condition|)
block|{
if|if
condition|(
name|studentIdMatch
condition|)
block|{
name|StudentQuery
operator|.
name|QueryInstance
name|instance
init|=
name|query
operator|.
name|select
argument_list|(
literal|"distinct ax"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"advisor"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join s.advisors ax"
argument_list|)
operator|.
name|where
argument_list|(
literal|"ax.lastName is not null"
argument_list|)
operator|.
name|order
argument_list|(
literal|"ax.lastName, ax.firstName, ax.middleName"
argument_list|)
decl_stmt|;
name|instance
operator|.
name|where
argument_list|(
literal|"ax.externalUniqueId = :id"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|DataExchangeTrimLeadingZerosFromExternalIds
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|instance
operator|.
name|set
argument_list|(
literal|"id"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"^0+(?!$)"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|instance
operator|.
name|set
argument_list|(
literal|"id"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Advisor
name|advisor
range|:
operator|(
name|List
argument_list|<
name|Advisor
argument_list|>
operator|)
name|instance
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|response
operator|.
name|addSuggestion
argument_list|(
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|advisor
argument_list|)
argument_list|,
name|advisor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
literal|"Advisor"
argument_list|,
literal|"advisor"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StudentQuery
operator|.
name|QueryInstance
name|instance
init|=
name|query
operator|.
name|select
argument_list|(
literal|"distinct ax"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"advisor"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join s.advisors ax"
argument_list|)
operator|.
name|where
argument_list|(
literal|"ax.lastName is not null"
argument_list|)
operator|.
name|order
argument_list|(
literal|"ax.lastName, ax.firstName, ax.middleName"
argument_list|)
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
name|String
name|where
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|", "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|s
operator|.
name|nextToken
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|where
operator|.
name|isEmpty
argument_list|()
condition|)
name|where
operator|+=
literal|" and "
expr_stmt|;
name|where
operator|+=
literal|"(upper(ax.firstName) like :cn"
operator|+
name|id
operator|+
literal|" || '%' or upper(ax.middleName) like :cn"
operator|+
name|id
operator|+
literal|" || '%' or upper(ax.lastName) like :cn"
operator|+
name|id
operator|+
literal|" || '%' or upper(ax.email) like :cn"
operator|+
name|id
operator|+
literal|")"
expr_stmt|;
name|instance
operator|.
name|set
argument_list|(
literal|"cn"
operator|+
name|id
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|>
literal|0
condition|)
block|{
name|instance
operator|.
name|where
argument_list|(
literal|"("
operator|+
name|where
operator|+
literal|") or upper(trim(trailing ' ' from ax.lastName || ', ' || ax.firstName || ' ' || ax.middleName)) = :name or ax.externalUniqueId = :id"
argument_list|)
expr_stmt|;
name|instance
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|DataExchangeTrimLeadingZerosFromExternalIds
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|instance
operator|.
name|set
argument_list|(
literal|"id"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"^0+(?!$)"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|instance
operator|.
name|set
argument_list|(
literal|"id"
argument_list|,
name|iRequest
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Advisor
name|advisor
range|:
operator|(
name|List
argument_list|<
name|Advisor
argument_list|>
operator|)
name|instance
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|response
operator|.
name|addSuggestion
argument_list|(
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|advisor
argument_list|)
argument_list|,
name|advisor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
literal|"Advisor"
argument_list|,
literal|"advisor"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|response
return|;
block|}
specifier|public
name|FilterRpcResponse
name|enumarate
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|FilterRpcResponse
name|response
init|=
operator|new
name|FilterRpcResponse
argument_list|()
decl_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"filter-"
operator|+
name|iRequest
operator|.
name|getCommand
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|StudentQuery
name|getQuery
parameter_list|(
name|FilterRpcRequest
name|request
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|groupTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentGroupType
name|type
range|:
name|StudentGroupTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
control|)
name|groupTypes
operator|.
name|add
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|StudentQuery
name|query
init|=
operator|new
name|StudentQuery
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getText
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// ?
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"lookup"
argument_list|)
operator|&&
name|CustomCourseLookupHolder
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
try|try
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
name|CustomCourseLookupHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|getCourseIds
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"lookup"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseIds
operator|!=
literal|null
operator|&&
operator|!
name|courseIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|where
init|=
literal|null
decl_stmt|;
name|String
name|course
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Long
name|c
range|:
name|courseIds
control|)
block|{
name|course
operator|+=
operator|(
name|course
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xcx"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"lookup"
argument_list|,
literal|"Xcx"
operator|+
name|id
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|id
operator|%
literal|1000
operator|)
operator|==
literal|0
condition|)
block|{
name|where
operator|=
operator|(
name|where
operator|==
literal|null
condition|?
literal|""
else|:
name|where
operator|+
literal|" or "
operator|)
operator|+
literal|"co.uniqueId in ("
operator|+
name|course
operator|+
literal|")"
expr_stmt|;
name|course
operator|=
literal|""
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|course
operator|.
name|isEmpty
argument_list|()
condition|)
name|where
operator|=
operator|(
name|where
operator|==
literal|null
condition|?
literal|""
else|:
name|where
operator|+
literal|" or "
operator|)
operator|+
literal|"co.uniqueId in ("
operator|+
name|course
operator|+
literal|")"
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"lookup"
argument_list|,
name|where
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFrom
argument_list|(
literal|"lookup"
argument_list|,
literal|"inner join s.courseDemands cd inner join cd.courseRequests cr inner join cr.courseOffering co"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
if|else if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"lookup"
argument_list|)
operator|&&
name|CustomCourseLookupHolder
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
try|try
block|{
name|String
name|course
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|lookup
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"lookup"
argument_list|)
control|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
name|CustomCourseLookupHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|getCourseIds
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|,
name|lookup
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseIds
operator|!=
literal|null
operator|&&
operator|!
name|courseIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Long
name|c
range|:
name|courseIds
control|)
block|{
name|course
operator|+=
operator|(
name|course
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xcx"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"lookup"
argument_list|,
literal|"Xcx"
operator|+
name|id
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|id
operator|>
literal|0
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"lookup"
argument_list|,
literal|"co.uniqueId in ("
operator|+
name|course
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFrom
argument_list|(
literal|"lookup"
argument_list|,
literal|"inner join s.courseDemands cd inner join cd.courseRequests cr inner join cr.courseOffering co"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
name|String
name|area
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"area"
argument_list|)
condition|)
block|{
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|a
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"area"
argument_list|)
control|)
block|{
name|area
operator|+=
operator|(
name|area
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xar"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"area"
argument_list|,
literal|"Xar"
operator|+
name|id
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"area"
argument_list|,
literal|"aac.academicArea.academicAreaAbbreviation in ("
operator|+
name|area
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"classification"
argument_list|)
condition|)
block|{
name|String
name|classf
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"classification"
argument_list|)
control|)
block|{
name|classf
operator|+=
operator|(
name|classf
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xcf"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"classification"
argument_list|,
literal|"Xcf"
operator|+
name|id
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"classification"
argument_list|,
literal|"aac.academicClassification.code in ("
operator|+
name|classf
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"degree"
argument_list|)
condition|)
block|{
name|String
name|degr
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|d
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"degree"
argument_list|)
control|)
block|{
name|degr
operator|+=
operator|(
name|degr
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xdg"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"degree"
argument_list|,
literal|"Xdg"
operator|+
name|id
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"degree"
argument_list|,
literal|"aac.degree.reference in ("
operator|+
name|degr
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"program"
argument_list|)
condition|)
block|{
name|boolean
name|like
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|d
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"program"
argument_list|)
control|)
block|{
if|if
condition|(
name|d
operator|.
name|indexOf
argument_list|(
literal|'%'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|like
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|like
condition|)
block|{
name|String
name|q
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|d
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"program"
argument_list|)
control|)
block|{
name|q
operator|+=
operator|(
name|q
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" or "
operator|)
operator|+
literal|"aac.program.reference like :Xpr"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"program"
argument_list|,
literal|"Xpr"
operator|+
name|id
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"program"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|prog
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|d
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"program"
argument_list|)
control|)
block|{
name|prog
operator|+=
operator|(
name|prog
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xpr"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"program"
argument_list|,
literal|"Xpr"
operator|+
name|id
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"program"
argument_list|,
literal|"aac.program.reference in ("
operator|+
name|prog
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"campus"
argument_list|)
condition|)
block|{
name|boolean
name|like
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|d
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"campus"
argument_list|)
control|)
block|{
if|if
condition|(
name|d
operator|.
name|indexOf
argument_list|(
literal|'%'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|like
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|like
condition|)
block|{
name|String
name|q
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|d
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"campus"
argument_list|)
control|)
block|{
name|q
operator|+=
operator|(
name|q
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" or "
operator|)
operator|+
literal|"aac.campus.reference like :Xcp"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"campus"
argument_list|,
literal|"Xcp"
operator|+
name|id
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"campus"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|prog
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|d
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"campus"
argument_list|)
control|)
block|{
name|prog
operator|+=
operator|(
name|prog
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xcp"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"campus"
argument_list|,
literal|"Xcp"
operator|+
name|id
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"campus"
argument_list|,
literal|"aac.campus.reference in ("
operator|+
name|prog
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"major"
argument_list|)
condition|)
block|{
name|String
name|major
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|m
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"major"
argument_list|)
control|)
block|{
name|major
operator|+=
operator|(
name|major
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xmj"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"major"
argument_list|,
literal|"Xmj"
operator|+
name|id
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"major"
argument_list|,
literal|"aac.major.code in ("
operator|+
name|major
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"concentration"
argument_list|)
condition|)
block|{
name|String
name|conc
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|m
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"concentration"
argument_list|)
control|)
block|{
name|conc
operator|+=
operator|(
name|conc
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xcn"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"concentration"
argument_list|,
literal|"Xcn"
operator|+
name|id
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"concentration"
argument_list|,
literal|"aac.concentration.code in ("
operator|+
name|conc
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"minor"
argument_list|)
condition|)
block|{
name|String
name|minor
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|m
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"minor"
argument_list|)
control|)
block|{
name|minor
operator|+=
operator|(
name|minor
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xmn"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"minor"
argument_list|,
literal|"Xmn"
operator|+
name|id
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|area
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"area"
argument_list|,
literal|"StudentAreaClassificationMinor aam"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"area"
argument_list|,
literal|"aam.student = s and (aac.academicArea.academicAreaAbbreviation in ("
operator|+
name|area
operator|+
literal|") or aam.academicArea.academicAreaAbbreviation in ("
operator|+
name|area
operator|+
literal|"))"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"minor"
argument_list|,
literal|"aam.minor.code in ("
operator|+
name|minor
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"minor"
argument_list|,
literal|"StudentAreaClassificationMinor aam"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"minor"
argument_list|,
literal|"aam.student = s and aam.minor.code in ("
operator|+
name|minor
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|gid
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"group"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"group"
argument_list|,
literal|"StudentGroup g"
argument_list|)
expr_stmt|;
name|String
name|group
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|g
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"group"
argument_list|)
control|)
block|{
name|group
operator|+=
operator|(
name|group
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xgr"
operator|+
name|gid
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"group"
argument_list|,
literal|"Xgr"
operator|+
name|gid
argument_list|,
name|g
argument_list|)
expr_stmt|;
name|gid
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"group"
argument_list|,
literal|"g in elements(s.groups) and g.groupAbbreviation in ("
operator|+
name|group
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|type
range|:
name|groupTypes
control|)
block|{
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
name|type
argument_list|,
literal|"StudentGroup g_"
operator|+
name|type
argument_list|)
expr_stmt|;
name|String
name|group
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|g
range|:
name|request
operator|.
name|getOptions
argument_list|(
name|type
argument_list|)
control|)
block|{
name|group
operator|+=
operator|(
name|group
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xgr"
operator|+
name|gid
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
name|type
argument_list|,
literal|"Xgr"
operator|+
name|gid
argument_list|,
name|g
argument_list|)
expr_stmt|;
name|gid
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
name|type
argument_list|,
literal|"g_"
operator|+
name|type
operator|+
literal|" in elements(s.groups) and g_"
operator|+
name|type
operator|+
literal|".groupAbbreviation in ("
operator|+
name|group
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"accommodation"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"accommodation"
argument_list|,
literal|"StudentAccomodation a"
argument_list|)
expr_stmt|;
name|String
name|acc
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|a
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"accommodation"
argument_list|)
control|)
block|{
name|acc
operator|+=
operator|(
name|acc
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xacc"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"accommodation"
argument_list|,
literal|"Xacc"
operator|+
name|id
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"accommodation"
argument_list|,
literal|"a in elements(s.accomodations) and a.abbreviation in ("
operator|+
name|acc
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"status"
argument_list|)
condition|)
block|{
name|String
name|status
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
name|boolean
name|hasDefault
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"status"
argument_list|)
control|)
block|{
if|if
condition|(
literal|"Not Set"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|hasDefault
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|status
operator|+=
operator|(
name|status
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xst"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"status"
argument_list|,
literal|"Xst"
operator|+
name|id
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|hasDefault
condition|)
name|query
operator|.
name|addWhere
argument_list|(
literal|"status"
argument_list|,
literal|"s.sectioningStatus is null or s.sectioningStatus.reference in ("
operator|+
name|status
operator|+
literal|")"
argument_list|)
expr_stmt|;
else|else
name|query
operator|.
name|addWhere
argument_list|(
literal|"status"
argument_list|,
literal|"s.sectioningStatus.reference in ("
operator|+
name|status
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|hasDefault
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"status"
argument_list|,
literal|"s.sectioningStatus is null"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"student"
argument_list|)
condition|)
block|{
name|String
name|student
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"student"
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
literal|", "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|s
operator|.
name|nextToken
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|student
operator|+=
operator|(
name|student
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|"(upper(s.firstName) like :Xstd"
operator|+
name|id
operator|+
literal|" || '%' or "
operator|+
literal|"upper(s.middleName) like :Xstd"
operator|+
name|id
operator|+
literal|" || '%' or upper(s.lastName) like :Xstd"
operator|+
name|id
operator|+
literal|" || '%' or upper(s.email) like :Xstd"
operator|+
name|id
operator|+
literal|" || '%')"
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"student"
argument_list|,
literal|"Xstd"
operator|+
name|id
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|>
literal|0
condition|)
block|{
name|student
operator|=
literal|"("
operator|+
name|student
operator|+
literal|") or (upper(trim(trailing ' ' from s.lastName || ', ' || s.firstName || ' ' || s.middleName)) = :Xstd) or (s.externalUniqueId = :Xsid)"
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"student"
argument_list|,
literal|"Xstd"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"student"
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|DataExchangeTrimLeadingZerosFromExternalIds
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"student"
argument_list|,
literal|"Xsid"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"student"
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"^0+(?!$)"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"student"
argument_list|,
literal|"Xsid"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"student"
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"student"
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"advisor"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"advisor"
argument_list|,
literal|"Xadv"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"advisor"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"advisor"
argument_list|,
literal|"s.uniqueId in (select ads.uniqueId from Advisor adv inner join adv.students ads where adv.externalUniqueId = :Xadv and adv.session.uniqueId = s.session.uniqueId)"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"course"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"course"
argument_list|,
literal|"Xco"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"course"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"course"
argument_list|,
literal|"co.subjectAreaAbbv = :Xco or co.subjectAreaAbbv || ' ' || co.courseNbr = :Xco"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFrom
argument_list|(
literal|"course"
argument_list|,
literal|"inner join s.courseDemands cd inner join cd.courseRequests cr inner join cr.courseOffering co"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"course"
argument_list|)
condition|)
block|{
name|String
name|course
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"course"
argument_list|)
control|)
block|{
name|course
operator|+=
operator|(
name|course
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xco"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"course"
argument_list|,
literal|"Xco"
operator|+
name|id
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"course"
argument_list|,
literal|"co.subjectAreaAbbv in ("
operator|+
name|course
operator|+
literal|") or co.subjectAreaAbbv || ' ' || co.courseNbr in ("
operator|+
name|course
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFrom
argument_list|(
literal|"course"
argument_list|,
literal|"inner join s.courseDemands cd inner join cd.courseRequests cr inner join cr.courseOffering co"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"credit"
argument_list|)
operator|&&
operator|!
operator|(
name|server
operator|instanceof
name|StudentSolver
operator|)
operator|&&
operator|(
name|server
operator|instanceof
name|DatabaseServer
operator|||
name|ApplicationProperty
operator|.
name|OnlineSchedulingDashboardCreditFilterUseDatabase
operator|.
name|isTrue
argument_list|()
operator|)
condition|)
block|{
name|String
name|term
init|=
name|request
operator|.
name|getOption
argument_list|(
literal|"credit"
argument_list|)
decl_stmt|;
name|float
name|min
init|=
literal|0
decl_stmt|,
name|max
init|=
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
name|Credit
name|prefix
init|=
name|Credit
operator|.
name|eq
decl_stmt|;
name|String
name|number
init|=
name|term
decl_stmt|;
if|if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|le
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|ge
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|lt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|gt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Credit
operator|.
name|eq
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|im
init|=
literal|null
decl_stmt|;
try|try
block|{
name|float
name|a
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|number
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|prefix
condition|)
block|{
case|case
name|eq
case|:
name|min
operator|=
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|// = a
case|case
name|le
case|:
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|//<= a
case|case
name|ge
case|:
name|min
operator|=
name|a
expr_stmt|;
break|break;
comment|//>= a
case|case
name|lt
case|:
name|max
operator|=
name|a
operator|-
literal|1
expr_stmt|;
break|break;
comment|//< a
case|case
name|gt
case|:
name|min
operator|=
name|a
operator|+
literal|1
expr_stmt|;
break|break;
comment|//> a
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9]+\\.?[0-9]*)([^0-9\\.].*)"
argument_list|)
operator|.
name|matcher
argument_list|(
name|number
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|float
name|a
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|im
operator|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|prefix
condition|)
block|{
case|case
name|eq
case|:
name|min
operator|=
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|// = a
case|case
name|le
case|:
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|//<= a
case|case
name|ge
case|:
name|min
operator|=
name|a
expr_stmt|;
break|break;
comment|//>= a
case|case
name|lt
case|:
name|max
operator|=
name|a
operator|-
literal|1
expr_stmt|;
break|break;
comment|//< a
case|case
name|gt
case|:
name|min
operator|=
name|a
operator|+
literal|1
expr_stmt|;
break|break;
comment|//> a
block|}
block|}
block|}
if|if
condition|(
name|term
operator|.
name|contains
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|a
init|=
name|term
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|term
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|b
init|=
name|term
operator|.
name|substring
argument_list|(
name|term
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
name|min
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|max
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9]+\\.?[0-9]*)\\.\\.([0-9]+\\.?[0-9]*)([^0-9].*)"
argument_list|)
operator|.
name|matcher
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|min
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|max
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|im
operator|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|String
name|creditTerm
init|=
literal|"(select coalesce(sum(fixedUnits),0) + coalesce(sum(minUnits),0) from CourseCreditUnitConfig where courseOwner in (select courseOffering.uniqueId from StudentClassEnrollment where student = s))"
decl_stmt|;
if|if
condition|(
literal|"!"
operator|.
name|equals
argument_list|(
name|im
argument_list|)
condition|)
block|{
name|creditTerm
operator|=
literal|"(select coalesce(sum(fixedUnits),0) + coalesce(sum(minUnits),0) from CourseCreditUnitConfig where courseOwner in (select courseOffering.uniqueId from StudentClassEnrollment where student = s and clazz.schedulingSubpart.instrOfferingConfig.instructionalMethod is null))"
expr_stmt|;
block|}
if|else if
condition|(
name|im
operator|!=
literal|null
operator|&&
name|im
operator|.
name|equals
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultInstructionalMethod
argument_list|()
argument_list|)
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"credit"
argument_list|,
literal|"Xim"
argument_list|,
name|im
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|creditTerm
operator|=
literal|"(select coalesce(sum(fixedUnits),0) + coalesce(sum(minUnits),0) from CourseCreditUnitConfig where courseOwner in (select sce.courseOffering.uniqueId from StudentClassEnrollment sce left outer join sce.clazz.schedulingSubpart.instrOfferingConfig.instructionalMethod im where sce.student = s and (im is null or lower(im.reference) = :Xim)))"
expr_stmt|;
block|}
if|else if
condition|(
name|im
operator|!=
literal|null
condition|)
block|{
name|creditTerm
operator|=
literal|"(select coalesce(sum(fixedUnits),0) + coalesce(sum(minUnits),0) from CourseCreditUnitConfig where courseOwner in (select courseOffering.uniqueId from StudentClassEnrollment where student = s and lower(clazz.schedulingSubpart.instrOfferingConfig.instructionalMethod.reference) = :Xim))"
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"credit"
argument_list|,
literal|"Xim"
argument_list|,
name|im
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|min
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|max
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"credit"
argument_list|,
name|creditTerm
operator|+
literal|" between :Xmin and :Xmax"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"credit"
argument_list|,
literal|"Xmin"
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"credit"
argument_list|,
literal|"Xmax"
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"credit"
argument_list|,
name|creditTerm
operator|+
literal|">= :Xmin"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"credit"
argument_list|,
literal|"Xmin"
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|max
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"credit"
argument_list|,
name|creditTerm
operator|+
literal|"<= :Xmax"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"credit"
argument_list|,
literal|"Xmax"
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"mode"
argument_list|)
operator|&&
literal|"My Students"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
operator|&&
name|request
operator|.
name|hasOption
argument_list|(
literal|"role"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"s.uniqueId in (select ads.uniqueId from Advisor adv inner join adv.students ads where adv.externalUniqueId = :Xuser and adv.role.reference = :Xrole and adv.session.uniqueId = s.session.uniqueId)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"mode"
argument_list|,
literal|"Xuser"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"mode"
argument_list|,
literal|"Xrole"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"role"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"mode"
argument_list|)
operator|&&
literal|"My Advised"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
operator|&&
name|request
operator|.
name|hasOption
argument_list|(
literal|"role"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"s.uniqueId in (select ads.uniqueId from Advisor adv inner join adv.students ads where adv.externalUniqueId = :Xuser and adv.role.reference = :Xrole and adv.session.uniqueId = s.session.uniqueId) and s.advisorCourseRequests is not empty"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"mode"
argument_list|,
literal|"Xuser"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"mode"
argument_list|,
literal|"Xrole"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"role"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"mode"
argument_list|)
operator|&&
literal|"My Not Advised"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
operator|&&
name|request
operator|.
name|hasOption
argument_list|(
literal|"role"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"s.uniqueId in (select ads.uniqueId from Advisor adv inner join adv.students ads where adv.externalUniqueId = :Xuser and adv.role.reference = :Xrole and adv.session.uniqueId = s.session.uniqueId) and s.advisorCourseRequests is empty"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"mode"
argument_list|,
literal|"Xuser"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"mode"
argument_list|,
literal|"Xrole"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"role"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"mode"
argument_list|)
operator|&&
literal|"Advised"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"s.advisorCourseRequests is not empty"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"mode"
argument_list|)
operator|&&
literal|"Not Advised"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"s.advisorCourseRequests is empty"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"override"
argument_list|)
condition|)
block|{
name|String
name|where
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
name|boolean
name|none
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|o
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"override"
argument_list|)
control|)
block|{
if|if
condition|(
literal|"none"
operator|.
name|equalsIgnoreCase
argument_list|(
name|o
argument_list|)
operator|||
literal|"null"
operator|.
name|equalsIgnoreCase
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|none
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|CourseRequestOverrideStatus
name|status
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequestOverrideStatus
name|s
range|:
name|CourseRequestOverrideStatus
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|s
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|status
operator|=
name|s
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|where
operator|+=
operator|(
name|where
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xstatus"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"override"
argument_list|,
literal|"Xstatus"
operator|+
name|id
argument_list|,
name|status
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|id
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|none
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"override"
argument_list|,
literal|"CourseRequest xcr"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"override"
argument_list|,
literal|"xcr.courseDemand.student = s and (xcr.overrideStatus is null or s.overrideStatus in ("
operator|+
name|where
operator|+
literal|") or xcr.overrideStatus in ("
operator|+
name|where
operator|+
literal|"))"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"override"
argument_list|,
literal|"CourseRequest xcr"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"override"
argument_list|,
literal|"xcr.courseDemand.student = s and (s.overrideStatus in ("
operator|+
name|where
operator|+
literal|") or xcr.overrideStatus in ("
operator|+
name|where
operator|+
literal|"))"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|none
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"override"
argument_list|,
literal|"CourseRequest xcr"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"override"
argument_list|,
literal|"xcr.courseDemand.student = s and xcr.overrideStatus is null"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"prefer"
argument_list|)
condition|)
block|{
name|String
name|where
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"prefer"
argument_list|)
control|)
block|{
if|if
condition|(
literal|"Any Preference"
operator|.
name|equalsIgnoreCase
argument_list|(
name|p
argument_list|)
operator|||
literal|"Met Preference"
operator|.
name|equalsIgnoreCase
argument_list|(
name|p
argument_list|)
operator|||
literal|"Unmet Preference"
operator|.
name|equalsIgnoreCase
argument_list|(
name|p
argument_list|)
condition|)
continue|continue;
name|where
operator|+=
operator|(
name|where
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xprf"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"prefer"
argument_list|,
literal|"Xprf"
operator|+
name|id
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addFrom
argument_list|(
literal|"prefer"
argument_list|,
literal|"inner join s.courseDemands pcd inner join pcd.courseRequests pcr inner join pcr.preferences pp"
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|>
literal|0
condition|)
name|query
operator|.
name|addWhere
argument_list|(
literal|"prefer"
argument_list|,
literal|"pp.label in ("
operator|+
name|where
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"require"
argument_list|)
condition|)
block|{
name|String
name|where
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"require"
argument_list|)
control|)
block|{
if|if
condition|(
literal|"Any Requirement"
operator|.
name|equalsIgnoreCase
argument_list|(
name|p
argument_list|)
operator|||
literal|"Met Requirement"
operator|.
name|equalsIgnoreCase
argument_list|(
name|p
argument_list|)
operator|||
literal|"Unmet Requirement"
operator|.
name|equalsIgnoreCase
argument_list|(
name|p
argument_list|)
condition|)
continue|continue;
name|where
operator|+=
operator|(
name|where
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xprf"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"require"
argument_list|,
literal|"Xprf"
operator|+
name|id
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addFrom
argument_list|(
literal|"require"
argument_list|,
literal|"inner join s.courseDemands rcd inner join rcd.courseRequests rcr inner join rcr.preferences rp"
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|>
literal|0
condition|)
name|query
operator|.
name|addWhere
argument_list|(
literal|"require"
argument_list|,
literal|"rp.label in ("
operator|+
name|where
operator|+
literal|") and rp.required = true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"assignment"
argument_list|)
operator|&&
literal|"Wait-Listed"
operator|.
name|equalsIgnoreCase
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"assignment"
argument_list|)
argument_list|)
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"assignment"
argument_list|,
literal|"CourseRequest wcr"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|OfferingWaitListDefault
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"assignment"
argument_list|,
literal|"wcr.courseDemand.waitlist = true and wcr.courseDemand.student = s and (wcr.courseOffering.instructionalOffering.waitlist is null or wcr.courseOffering.instructionalOffering.waitlist = true)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"assignment"
argument_list|,
literal|"wcr.courseDemand.waitlist = true and wcr.courseDemand.student = s and wcr.courseOffering.instructionalOffering.waitlist = true"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"im"
argument_list|)
condition|)
block|{
name|String
name|ims
init|=
literal|""
decl_stmt|;
name|boolean
name|hasDefault
init|=
literal|false
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|im
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"im"
argument_list|)
control|)
block|{
if|if
condition|(
name|im
operator|.
name|equals
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultInstructionalMethod
argument_list|()
argument_list|)
condition|)
name|hasDefault
operator|=
literal|true
expr_stmt|;
name|ims
operator|+=
operator|(
name|ims
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xim"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"im"
argument_list|,
literal|"Xim"
operator|+
name|id
argument_list|,
name|im
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|hasDefault
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"im"
argument_list|,
literal|"im is null or im.reference in ("
operator|+
name|ims
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFrom
argument_list|(
literal|"im"
argument_list|,
literal|"inner join s.courseDemands cd inner join cd.courseRequests cr inner join cr.courseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg left outer join cfg.instructionalMethod im"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"im"
argument_list|,
literal|"cfg.instructionalMethod.reference in ("
operator|+
name|ims
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFrom
argument_list|(
literal|"im"
argument_list|,
literal|"inner join s.courseDemands cd inner join cd.courseRequests cr inner join cr.courseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|query
return|;
block|}
specifier|public
specifier|static
enum|enum
name|Credit
block|{
name|eq
block|,
name|lt
block|,
name|gt
block|,
name|le
block|,
name|ge
block|}
empty_stmt|;
specifier|public
specifier|static
class|class
name|StudentQuery
block|{
specifier|protected
name|Long
name|iSessionId
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iFrom
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iWhere
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|StudentQuery
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
block|}
specifier|public
name|StudentQuery
parameter_list|(
name|StudentQuery
name|q
parameter_list|)
block|{
name|iSessionId
operator|=
name|q
operator|.
name|iSessionId
expr_stmt|;
name|iFrom
operator|.
name|putAll
argument_list|(
name|q
operator|.
name|iFrom
argument_list|)
expr_stmt|;
name|iWhere
operator|.
name|putAll
argument_list|(
name|q
operator|.
name|iWhere
argument_list|)
expr_stmt|;
name|iParams
operator|.
name|putAll
argument_list|(
name|q
operator|.
name|iParams
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addFrom
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|from
parameter_list|)
block|{
if|if
condition|(
name|from
operator|==
literal|null
condition|)
name|iFrom
operator|.
name|remove
argument_list|(
name|option
argument_list|)
expr_stmt|;
else|else
name|iFrom
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|from
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWhere
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|where
parameter_list|)
block|{
if|if
condition|(
name|where
operator|==
literal|null
condition|)
name|iWhere
operator|.
name|remove
argument_list|(
name|option
argument_list|)
expr_stmt|;
else|else
name|iWhere
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|where
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addParameter
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|iParams
operator|.
name|get
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|iParams
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|params
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
else|else
name|params
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getFrom
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
name|String
name|from
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|iFrom
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|from
operator|+=
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"inner join"
argument_list|)
condition|?
literal|" "
else|:
literal|", "
operator|)
operator|+
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|from
return|;
block|}
specifier|public
name|String
name|getWhere
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
name|String
name|where
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|iWhere
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|where
operator|+=
literal|" and ("
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|where
return|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Query
name|setParams
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|iParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|param
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Integer
condition|)
block|{
name|query
operator|.
name|setInteger
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Integer
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Long
condition|)
block|{
name|query
operator|.
name|setLong
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Long
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Float
condition|)
block|{
name|query
operator|.
name|setFloat
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Float
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Double
condition|)
block|{
name|query
operator|.
name|setDouble
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Double
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Number
condition|)
block|{
name|query
operator|.
name|setDouble
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|param
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Boolean
condition|)
block|{
name|query
operator|.
name|setBoolean
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Boolean
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Date
condition|)
block|{
name|query
operator|.
name|setDate
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Date
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|query
return|;
block|}
specifier|public
name|QueryInstance
name|select
parameter_list|(
name|String
name|select
parameter_list|)
block|{
return|return
operator|new
name|QueryInstance
argument_list|(
name|select
argument_list|)
return|;
block|}
specifier|public
class|class
name|QueryInstance
block|{
specifier|protected
name|String
name|iSelect
init|=
literal|null
decl_stmt|,
name|iFrom
init|=
literal|null
decl_stmt|,
name|iWhere
init|=
literal|null
decl_stmt|,
name|iOrderBy
init|=
literal|null
decl_stmt|,
name|iGroupBy
init|=
literal|null
decl_stmt|,
name|iType
init|=
literal|"Student"
decl_stmt|;
specifier|protected
name|Integer
name|iLimit
init|=
literal|null
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|iExclude
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|iParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|QueryInstance
parameter_list|(
name|String
name|select
parameter_list|)
block|{
name|iSelect
operator|=
name|select
expr_stmt|;
block|}
specifier|public
name|QueryInstance
name|from
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|iFrom
operator|=
name|from
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|where
parameter_list|(
name|String
name|where
parameter_list|)
block|{
if|if
condition|(
name|iWhere
operator|==
literal|null
condition|)
name|iWhere
operator|=
literal|"("
operator|+
name|where
operator|+
literal|")"
expr_stmt|;
else|else
name|iWhere
operator|+=
literal|" and ("
operator|+
name|where
operator|+
literal|")"
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|order
parameter_list|(
name|String
name|orderBy
parameter_list|)
block|{
name|iOrderBy
operator|=
name|orderBy
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|group
parameter_list|(
name|String
name|groupBy
parameter_list|)
block|{
name|iGroupBy
operator|=
name|groupBy
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|exclude
parameter_list|(
name|String
name|excludeOption
parameter_list|)
block|{
name|iExclude
operator|.
name|add
argument_list|(
name|excludeOption
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|set
parameter_list|(
name|String
name|param
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|iParams
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|limit
parameter_list|(
name|Integer
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
operator|(
name|limit
operator|==
literal|null
operator|||
name|limit
operator|<=
literal|0
condition|?
literal|null
else|:
name|limit
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|query
parameter_list|()
block|{
return|return
literal|"select "
operator|+
operator|(
name|iSelect
operator|==
literal|null
condition|?
literal|"distinct s"
else|:
name|iSelect
operator|)
operator|+
literal|" from "
operator|+
name|iType
operator|+
literal|" s left outer join s.areaClasfMajors aac "
operator|+
operator|(
name|iFrom
operator|==
literal|null
condition|?
literal|""
else|:
name|iFrom
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"inner join"
argument_list|)
condition|?
literal|" "
operator|+
name|iFrom
else|:
literal|", "
operator|+
name|iFrom
operator|)
operator|+
name|getFrom
argument_list|(
name|iExclude
argument_list|)
operator|+
literal|" where s.session.uniqueId = :sessionId"
operator|+
name|getWhere
argument_list|(
name|iExclude
argument_list|)
operator|+
operator|(
name|iWhere
operator|==
literal|null
condition|?
literal|""
else|:
literal|" and ("
operator|+
name|iWhere
operator|+
literal|")"
operator|)
operator|+
operator|(
name|iGroupBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" group by "
operator|+
name|iGroupBy
operator|)
operator|+
operator|(
name|iOrderBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" order by "
operator|+
name|iOrderBy
operator|)
return|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
init|=
name|setParams
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
argument_list|()
argument_list|)
argument_list|,
name|iExclude
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|param
range|:
name|iParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Integer
condition|)
block|{
name|query
operator|.
name|setInteger
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Integer
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Long
condition|)
block|{
name|query
operator|.
name|setLong
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Long
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Float
condition|)
block|{
name|query
operator|.
name|setFloat
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Float
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Double
condition|)
block|{
name|query
operator|.
name|setDouble
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Double
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Number
condition|)
block|{
name|query
operator|.
name|setDouble
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|param
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Boolean
condition|)
block|{
name|query
operator|.
name|setBoolean
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Boolean
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Date
condition|)
block|{
name|query
operator|.
name|setDate
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Date
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iLimit
operator|!=
literal|null
condition|)
name|query
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
block|}
block|}
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getStudentIds
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|getQuery
argument_list|(
name|iRequest
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
operator|.
name|select
argument_list|(
literal|"distinct s.uniqueId"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|AdvisorCourseRequest
argument_list|>
argument_list|>
name|getAdvisorCourseRequests
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|AdvisorCourseRequest
argument_list|>
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|AdvisorCourseRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|getQuery
argument_list|(
name|iRequest
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
operator|.
name|select
argument_list|(
literal|"s.uniqueId, acr"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join s.advisorCourseRequests acr"
argument_list|)
operator|.
name|order
argument_list|(
literal|"s.uniqueId, acr.priority, acr.alternative"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|AdvisorCourseRequest
name|acr
init|=
operator|(
name|AdvisorCourseRequest
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|AdvisorCourseRequest
argument_list|>
name|acrs
init|=
name|ret
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|acrs
operator|==
literal|null
condition|)
block|{
name|acrs
operator|=
operator|new
name|ArrayList
argument_list|<
name|AdvisorCourseRequest
argument_list|>
argument_list|()
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|acrs
argument_list|)
expr_stmt|;
block|}
name|acrs
operator|.
name|add
argument_list|(
name|acr
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|XStudent
argument_list|>
name|getStudens
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|List
argument_list|<
name|XStudent
argument_list|>
name|students
init|=
operator|new
name|ArrayList
argument_list|<
name|XStudent
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
operator|(
name|List
argument_list|<
name|Student
argument_list|>
operator|)
name|getQuery
argument_list|(
name|iRequest
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
operator|.
name|select
argument_list|(
literal|"distinct s"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|students
operator|.
name|add
argument_list|(
operator|new
name|XStudent
argument_list|(
name|student
argument_list|,
name|helper
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDatePatternFirstDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|students
return|;
block|}
specifier|public
specifier|static
name|CourseQuery
name|getCourseQuery
parameter_list|(
name|FilterRpcRequest
name|request
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|CourseQuery
name|query
init|=
operator|new
name|CourseQuery
argument_list|(
name|getQuery
argument_list|(
name|request
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"lookup"
argument_list|)
operator|&&
name|CustomCourseLookupHolder
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"lookup"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"course"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"course"
argument_list|,
literal|"Xco"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"course"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"course"
argument_list|,
literal|"co.subjectAreaAbbv = :Xco or co.subjectAreaAbbv || ' ' || co.courseNbr = :Xco"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFrom
argument_list|(
literal|"course"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"course"
argument_list|)
condition|)
block|{
name|String
name|course
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"course"
argument_list|)
control|)
block|{
name|course
operator|+=
operator|(
name|course
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xco"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"course"
argument_list|,
literal|"Xco"
operator|+
name|id
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"course"
argument_list|,
literal|"co.subjectAreaAbbv in ("
operator|+
name|course
operator|+
literal|") or co.subjectAreaAbbv || ' ' || co.courseNbr in ("
operator|+
name|course
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFrom
argument_list|(
literal|"course"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"prefer"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"prefer"
argument_list|,
literal|"inner join cr.preferences pp"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"require"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"require"
argument_list|,
literal|"inner join cr.preferences rp"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"im"
argument_list|)
condition|)
block|{
name|String
name|ims
init|=
literal|""
decl_stmt|;
name|boolean
name|hasDefault
init|=
literal|false
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|im
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"im"
argument_list|)
control|)
block|{
if|if
condition|(
name|im
operator|.
name|equals
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getDefaultInstructionalMethod
argument_list|()
argument_list|)
condition|)
name|hasDefault
operator|=
literal|true
expr_stmt|;
name|ims
operator|+=
operator|(
name|ims
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xim"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"im"
argument_list|,
literal|"Xim"
operator|+
name|id
argument_list|,
name|im
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|hasDefault
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"im"
argument_list|,
literal|"im is null or im.reference in ("
operator|+
name|ims
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFrom
argument_list|(
literal|"im"
argument_list|,
literal|"inner join co.instructionalOffering.instrOfferingConfigs cfg left outer join cfg.instructionalMethod im"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"im"
argument_list|,
literal|"cfg.instructionalMethod.reference in ("
operator|+
name|ims
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFrom
argument_list|(
literal|"im"
argument_list|,
literal|"inner join co.instructionalOffering.instrOfferingConfigs cfg"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"assignment"
argument_list|)
operator|&&
literal|"Wait-Listed"
operator|.
name|equalsIgnoreCase
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"assignment"
argument_list|)
argument_list|)
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"assignment"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|OfferingWaitListDefault
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"assignment"
argument_list|,
literal|"(co.instructionalOffering.waitlist is null or co.instructionalOffering.waitlist = true) and cd.waitlist = true"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"assignment"
argument_list|,
literal|"co.instructionalOffering.waitlist = true and cd.waitlist = true"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"override"
argument_list|)
condition|)
block|{
name|String
name|where
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
name|boolean
name|none
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|o
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"override"
argument_list|)
control|)
block|{
if|if
condition|(
literal|"none"
operator|.
name|equalsIgnoreCase
argument_list|(
name|o
argument_list|)
operator|||
literal|"null"
operator|.
name|equalsIgnoreCase
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|none
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|CourseRequestOverrideStatus
name|status
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequestOverrideStatus
name|s
range|:
name|CourseRequestOverrideStatus
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|s
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|status
operator|=
name|s
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|where
operator|+=
operator|(
name|where
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xstatus"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"override"
argument_list|,
literal|"Xstatus"
operator|+
name|id
argument_list|,
name|status
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|id
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|none
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"override"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"override"
argument_list|,
literal|"cr.overrideStatus is null or cr.overrideStatus in ("
operator|+
name|where
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"override"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"override"
argument_list|,
literal|"cr.overrideStatus in ("
operator|+
name|where
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|none
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"override"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"override"
argument_list|,
literal|"cr.overrideStatus is null"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|query
return|;
block|}
specifier|public
name|List
argument_list|<
name|XCourseId
argument_list|>
name|getCourseIds
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|List
argument_list|<
name|XCourseId
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|XCourseId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|line
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|getCourseQuery
argument_list|(
name|iRequest
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
operator|.
name|select
argument_list|(
literal|"distinct co.instructionalOffering.uniqueId, co.uniqueId, co.subjectAreaAbbv, co.courseNbr"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
operator|new
name|XCourseId
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|line
index|[
literal|0
index|]
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|line
index|[
literal|1
index|]
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|line
index|[
literal|2
index|]
argument_list|,
operator|(
name|String
operator|)
name|line
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ids
return|;
block|}
specifier|public
name|List
argument_list|<
name|XCourse
argument_list|>
name|getCourses
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|List
argument_list|<
name|XCourse
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|XCourse
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|getCourseQuery
argument_list|(
name|iRequest
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
operator|.
name|select
argument_list|(
literal|"distinct co"
argument_list|)
operator|.
name|query
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|courses
operator|.
name|add
argument_list|(
operator|new
name|XCourse
argument_list|(
name|co
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|courses
return|;
block|}
specifier|public
specifier|static
class|class
name|CourseQuery
extends|extends
name|StudentQuery
block|{
specifier|public
name|CourseQuery
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|super
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CourseQuery
parameter_list|(
name|StudentQuery
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|QueryInstance
name|select
parameter_list|(
name|String
name|select
parameter_list|)
block|{
return|return
operator|new
name|QueryInstance
argument_list|(
name|select
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|query
parameter_list|()
block|{
return|return
literal|"select "
operator|+
operator|(
name|iSelect
operator|==
literal|null
condition|?
literal|"distinct co"
else|:
name|iSelect
operator|)
operator|+
literal|" from CourseRequest cr inner join cr.courseOffering co inner join cr.courseDemand cd inner join cd.student s left outer join s.areaClasfMajors aac "
operator|+
operator|(
name|iFrom
operator|==
literal|null
condition|?
literal|""
else|:
name|iFrom
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"inner join"
argument_list|)
condition|?
literal|" "
operator|+
name|iFrom
else|:
literal|", "
operator|+
name|iFrom
operator|)
operator|+
name|getFrom
argument_list|(
name|iExclude
argument_list|)
operator|+
literal|" where s.session.uniqueId = :sessionId"
operator|+
name|getWhere
argument_list|(
name|iExclude
argument_list|)
operator|+
operator|(
name|iWhere
operator|==
literal|null
condition|?
literal|""
else|:
literal|" and ("
operator|+
name|iWhere
operator|+
literal|")"
operator|)
operator|+
operator|(
name|iGroupBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" group by "
operator|+
name|iGroupBy
operator|)
operator|+
operator|(
name|iOrderBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" order by "
operator|+
name|iOrderBy
operator|)
return|;
block|}
block|}
return|;
block|}
specifier|public
name|QueryInstance
name|selectCourses
parameter_list|(
name|String
name|select
parameter_list|,
name|FilterRpcRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"assignment"
argument_list|)
operator|&&
literal|"Wait-Listed"
operator|.
name|equalsIgnoreCase
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"assignment"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|OfferingWaitListDefault
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|addWhere
argument_list|(
literal|"assignment"
argument_list|,
literal|"not co.instructionalOffering.waitlist = false"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addWhere
argument_list|(
literal|"assignment"
argument_list|,
literal|"co.instructionalOffering.waitlist = true"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|QueryInstance
argument_list|(
name|select
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|query
parameter_list|()
block|{
return|return
literal|"select "
operator|+
operator|(
name|iSelect
operator|==
literal|null
condition|?
literal|"distinct co"
else|:
name|iSelect
operator|)
operator|+
literal|" from CourseOffering co "
operator|+
operator|(
name|iFrom
operator|==
literal|null
condition|?
literal|""
else|:
name|iFrom
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"inner join"
argument_list|)
condition|?
literal|" "
operator|+
name|iFrom
else|:
literal|", "
operator|+
name|iFrom
operator|)
operator|+
name|getFrom
argument_list|(
name|iExclude
argument_list|)
operator|+
literal|" where co.instructionalOffering.session.uniqueId = :sessionId and co.instructionalOffering.notOffered = false"
operator|+
name|getWhere
argument_list|(
name|iExclude
argument_list|)
operator|+
operator|(
name|iWhere
operator|==
literal|null
condition|?
literal|""
else|:
literal|" and ("
operator|+
name|iWhere
operator|+
literal|")"
operator|)
operator|+
operator|(
name|iGroupBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" group by "
operator|+
name|iGroupBy
operator|)
operator|+
operator|(
name|iOrderBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" order by "
operator|+
name|iOrderBy
operator|)
return|;
block|}
block|}
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|hasNoMatchCourses
parameter_list|(
name|FilterRpcRequest
name|request
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"prefer"
argument_list|)
operator|||
name|request
operator|.
name|hasOptions
argument_list|(
literal|"require"
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"area"
argument_list|)
operator|||
name|request
operator|.
name|hasOptions
argument_list|(
literal|"classification"
argument_list|)
operator|||
name|request
operator|.
name|hasOptions
argument_list|(
literal|"degree"
argument_list|)
operator|||
name|request
operator|.
name|hasOptions
argument_list|(
literal|"program"
argument_list|)
operator|||
name|request
operator|.
name|hasOptions
argument_list|(
literal|"campus"
argument_list|)
operator|||
name|request
operator|.
name|hasOptions
argument_list|(
literal|"major"
argument_list|)
operator|||
name|request
operator|.
name|hasOptions
argument_list|(
literal|"concentration"
argument_list|)
operator|||
name|request
operator|.
name|hasOptions
argument_list|(
literal|"minor"
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"group"
argument_list|)
operator|||
name|request
operator|.
name|hasOptions
argument_list|(
literal|"accommodation"
argument_list|)
condition|)
return|return
literal|false
return|;
for|for
control|(
name|StudentGroupType
name|type
range|:
name|StudentGroupTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"student"
argument_list|)
operator|||
name|request
operator|.
name|hasOption
argument_list|(
literal|"advisor"
argument_list|)
operator|||
name|request
operator|.
name|hasOption
argument_list|(
literal|"credit"
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"mode"
argument_list|)
operator|||
name|request
operator|.
name|hasOptions
argument_list|(
literal|"override"
argument_list|)
operator|||
name|request
operator|.
name|hasOptions
argument_list|(
literal|"prefer"
argument_list|)
operator|||
name|request
operator|.
name|hasOptions
argument_list|(
literal|"require"
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"assignment"
argument_list|)
operator|&&
operator|!
literal|"Wait-Listed"
operator|.
name|equalsIgnoreCase
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"assignment"
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|request
operator|.
name|hasText
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"consent"
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"approver"
argument_list|)
operator|||
name|request
operator|.
name|hasOptions
argument_list|(
literal|"accommodation"
argument_list|)
operator|||
name|request
operator|.
name|hasOptions
argument_list|(
literal|"operation"
argument_list|)
operator|||
name|request
operator|.
name|hasOptions
argument_list|(
literal|"overlap"
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

