begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
operator|.
name|QueryFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|SectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentGroupTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XAreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|FindOnlineSectioningLogAction
implements|implements
name|OnlineSectioningAction
argument_list|<
name|List
argument_list|<
name|SectioningAction
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|StudentSectioningConstants
name|CONST
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Query
name|iQuery
decl_stmt|;
specifier|private
name|Integer
name|iLimit
init|=
literal|100
decl_stmt|;
specifier|protected
name|boolean
name|iCanShowExtIds
init|=
literal|false
decl_stmt|;
specifier|public
name|FindOnlineSectioningLogAction
name|forQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|boolean
name|canShowExtIds
parameter_list|)
block|{
name|iQuery
operator|=
operator|new
name|Query
argument_list|(
name|query
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"limit:100"
else|:
name|query
argument_list|)
expr_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"limit:[ ]?([0-9]*)"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|iLimit
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iCanShowExtIds
operator|=
name|canShowExtIds
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|iQuery
return|;
block|}
specifier|public
name|Integer
name|getLimit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SectioningAction
argument_list|>
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|helper
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|SectioningAction
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|SectioningAction
argument_list|>
argument_list|()
decl_stmt|;
name|DateFormat
name|df
init|=
name|Localization
operator|.
name|getDateFormat
argument_list|(
name|CONST
operator|.
name|timeStampFormat
argument_list|()
argument_list|)
decl_stmt|;
name|NumberFormat
name|nf
init|=
name|Localization
operator|.
name|getNumberFormat
argument_list|(
name|CONST
operator|.
name|executionTimeFormat
argument_list|()
argument_list|)
decl_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|SectioningLogQueryFormatter
name|formatter
init|=
operator|new
name|SectioningLogQueryFormatter
argument_list|(
name|helper
argument_list|)
decl_stmt|;
name|String
name|join
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|formatter
operator|.
name|getGroupTypes
argument_list|()
control|)
name|join
operator|+=
literal|"left outer join s.groups G_"
operator|+
name|t
operator|+
literal|" "
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Query
name|q
init|=
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select l, s.uniqueId from OnlineSectioningLog l, Student s "
operator|+
operator|(
name|getQuery
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"area"
argument_list|,
literal|"clasf"
argument_list|,
literal|"classification"
argument_list|,
literal|"major"
argument_list|)
condition|?
literal|"left outer join s.areaClasfMajors m "
else|:
literal|""
operator|)
operator|+
operator|(
name|getQuery
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"minor"
argument_list|)
condition|?
literal|"left outer join s.areaClasfMinors n "
else|:
literal|""
operator|)
operator|+
operator|(
name|getQuery
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"group"
argument_list|)
condition|?
literal|"left outer join s.groups g "
else|:
literal|""
operator|)
operator|+
operator|(
name|getQuery
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"accommodation"
argument_list|)
condition|?
literal|"left outer join s.accomodations a "
else|:
literal|""
operator|)
operator|+
operator|(
name|getQuery
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"course"
argument_list|)
condition|?
literal|"left outer join s.courseDemands cd left outer join cd.courseRequests cr "
else|:
literal|""
operator|)
operator|+
name|join
operator|+
literal|"where l.session.uniqueId = :sessionId and l.session = s.session and l.student = s.externalUniqueId "
operator|+
literal|"and ("
operator|+
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
name|formatter
argument_list|)
operator|+
literal|") "
operator|+
literal|"and (l.result is not null or l.operation not in ('reload-offering', 'check-offering')) order by l.timeStamp desc, l.uniqueId desc"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLimit
argument_list|()
operator|!=
literal|null
condition|)
name|q
operator|.
name|setMaxResults
argument_list|(
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|processedLogIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|q
operator|.
name|list
argument_list|()
control|)
block|{
try|try
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OnlineSectioningLog
name|log
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OnlineSectioningLog
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|processedLogIds
operator|.
name|add
argument_list|(
name|log
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setSessionId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanShowExternalId
argument_list|(
name|iCanShowExtIds
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XAreaClassificationMajor
name|acm
range|:
name|student
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|acm
operator|.
name|getClassification
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addMajor
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|acc
range|:
name|student
operator|.
name|getAccomodations
argument_list|()
control|)
block|{
name|st
operator|.
name|addAccommodation
argument_list|(
name|acc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|XStudent
operator|.
name|XGroup
name|gr
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|st
operator|.
name|addGroup
argument_list|(
name|gr
operator|.
name|getType
argument_list|()
argument_list|,
name|gr
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SectioningAction
name|a
init|=
operator|new
name|SectioningAction
argument_list|()
decl_stmt|;
name|a
operator|.
name|setStudent
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|a
operator|.
name|setTimeStamp
argument_list|(
name|log
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setOperation
argument_list|(
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|log
operator|.
name|getOperation
argument_list|()
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|' '
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Action
name|action
init|=
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|parseFrom
argument_list|(
name|log
operator|.
name|getAction
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|.
name|hasCpuTime
argument_list|()
condition|)
name|a
operator|.
name|setCpuTime
argument_list|(
name|action
operator|.
name|getCpuTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|.
name|hasStartTime
argument_list|()
operator|&&
name|action
operator|.
name|hasEndTime
argument_list|()
condition|)
name|a
operator|.
name|setWallTime
argument_list|(
name|action
operator|.
name|getEndTime
argument_list|()
operator|-
name|action
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|.
name|hasUser
argument_list|()
condition|)
name|a
operator|.
name|setUser
argument_list|(
name|action
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|.
name|hasResult
argument_list|()
condition|)
name|a
operator|.
name|setResult
argument_list|(
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|action
operator|.
name|getResult
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// a.setProto(action.toString().replace("<", "&lt;").replace(">", "&gt;").replace(" ", "&nbsp;").replace("\n", "<br>"));
name|String
name|html
init|=
literal|"<table class='unitime-ChangeLog'>"
decl_stmt|;
name|html
operator|+=
literal|"<tr><td class='unitime-MainTableHeader' colspan='2'>General</td></tr>"
expr_stmt|;
name|html
operator|+=
literal|"<tr><td><b>"
operator|+
name|MSG
operator|.
name|colOperation
argument_list|()
operator|+
literal|":</b></td><td>"
operator|+
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|log
operator|.
name|getOperation
argument_list|()
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|' '
argument_list|)
argument_list|)
operator|+
literal|"</td></tr>"
expr_stmt|;
if|if
condition|(
name|action
operator|.
name|hasResult
argument_list|()
condition|)
name|html
operator|+=
literal|"<tr><td><b>"
operator|+
name|MSG
operator|.
name|colResult
argument_list|()
operator|+
literal|":</b></td><td>"
operator|+
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|action
operator|.
name|getResult
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|+
literal|"</td></tr>"
expr_stmt|;
if|if
condition|(
name|action
operator|.
name|hasStudent
argument_list|()
condition|)
block|{
name|XStudent
name|s
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|action
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|html
operator|+=
literal|"<tr><td><b>"
operator|+
name|MSG
operator|.
name|colStudent
argument_list|()
operator|+
literal|":</b></td><td>"
operator|+
name|s
operator|.
name|getName
argument_list|()
operator|+
literal|"</td></tr>"
expr_stmt|;
block|}
block|}
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|other
range|:
name|action
operator|.
name|getOtherList
argument_list|()
control|)
block|{
name|html
operator|+=
literal|"<tr><td><b>"
operator|+
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|other
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|+
literal|":</b></td><td>"
operator|+
name|other
operator|.
name|getName
argument_list|()
operator|+
literal|"</td></tr>"
expr_stmt|;
block|}
name|html
operator|+=
literal|"<tr><td><b>Time Stamp:</b></td><td>"
operator|+
name|df
operator|.
name|format
argument_list|(
name|log
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
operator|+
literal|"</td></tr>"
expr_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Property
name|p
range|:
name|action
operator|.
name|getOptionList
argument_list|()
control|)
block|{
name|html
operator|+=
literal|"<tr><td><b>"
operator|+
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|p
operator|.
name|getKey
argument_list|()
argument_list|)
operator|+
literal|":</b></td><td><div class='property'>"
operator|+
operator|(
name|p
operator|.
name|hasValue
argument_list|()
condition|?
name|p
operator|.
name|getValue
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|"</div></td></tr>"
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|.
name|hasCpuTime
argument_list|()
condition|)
block|{
name|html
operator|+=
literal|"<tr><td><b>"
operator|+
name|MSG
operator|.
name|colCpuTime
argument_list|()
operator|+
literal|":</b></td><td>"
operator|+
name|nf
operator|.
name|format
argument_list|(
literal|0.000000001
operator|*
name|action
operator|.
name|getCpuTime
argument_list|()
argument_list|)
operator|+
literal|"</td></tr>"
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|.
name|hasStartTime
argument_list|()
operator|&&
name|action
operator|.
name|hasEndTime
argument_list|()
condition|)
block|{
name|html
operator|+=
literal|"<tr><td nowrap><b>"
operator|+
name|MSG
operator|.
name|colWallTime
argument_list|()
operator|+
literal|":</b></td><td>"
operator|+
name|nf
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|action
operator|.
name|getEndTime
argument_list|()
operator|-
name|action
operator|.
name|getStartTime
argument_list|()
operator|)
argument_list|)
operator|+
literal|"</td></tr>"
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|.
name|hasApiGetTime
argument_list|()
condition|)
block|{
name|html
operator|+=
literal|"<tr><td nowrap><b>"
operator|+
name|MSG
operator|.
name|colApiGetTime
argument_list|()
operator|+
literal|":</b></td><td>"
operator|+
name|nf
operator|.
name|format
argument_list|(
literal|0.001
operator|*
name|action
operator|.
name|getApiGetTime
argument_list|()
argument_list|)
operator|+
literal|"</td></tr>"
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|.
name|hasApiPostTime
argument_list|()
condition|)
block|{
name|html
operator|+=
literal|"<tr><td nowrap><b>"
operator|+
name|MSG
operator|.
name|colApiPostTime
argument_list|()
operator|+
literal|":</b></td><td>"
operator|+
name|nf
operator|.
name|format
argument_list|(
literal|0.001
operator|*
name|action
operator|.
name|getApiPostTime
argument_list|()
argument_list|)
operator|+
literal|"</td></tr>"
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|.
name|hasApiException
argument_list|()
condition|)
block|{
name|html
operator|+=
literal|"<tr><td nowrap><b>"
operator|+
name|MSG
operator|.
name|colApiException
argument_list|()
operator|+
literal|":</b></td><td>"
operator|+
name|action
operator|.
name|getApiException
argument_list|()
operator|+
literal|"</td></tr>"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|action
operator|.
name|getRequestList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|html
operator|+=
literal|"<tr><td class='unitime-MainTableHeader' colspan='2'>"
operator|+
name|MSG
operator|.
name|courseRequestsCourses
argument_list|()
operator|+
literal|"</td></tr>"
expr_stmt|;
name|html
operator|+=
literal|"<tr><td colspan='2'><table cellspacing='0' cellpadding='2'>"
operator|+
literal|"<td class='unitime-TableHeader'>"
operator|+
name|MSG
operator|.
name|colPriority
argument_list|()
operator|+
literal|"</td>"
operator|+
literal|"<td class='unitime-TableHeader'>"
operator|+
name|MSG
operator|.
name|colCourse
argument_list|()
operator|+
literal|"</td>"
operator|+
literal|"<td class='unitime-TableHeader'>"
operator|+
name|MSG
operator|.
name|colPreferences
argument_list|()
operator|+
literal|"</td></tr>"
expr_stmt|;
block|}
name|String
name|request
init|=
literal|""
decl_stmt|;
name|String
name|selected
init|=
literal|""
decl_stmt|;
name|int
name|notAlt
init|=
literal|0
decl_stmt|,
name|lastFT
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Request
name|r
range|:
name|action
operator|.
name|getRequestList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|getAlternative
argument_list|()
condition|)
name|notAlt
operator|=
name|r
operator|.
name|getPriority
argument_list|()
operator|+
literal|1
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Time
name|f
range|:
name|r
operator|.
name|getFreeTimeList
argument_list|()
control|)
block|{
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
block|{
name|html
operator|+=
operator|(
name|r
operator|.
name|getPriority
argument_list|()
operator|>
literal|0
operator|&&
name|lastFT
operator|!=
name|r
operator|.
name|getPriority
argument_list|()
condition|?
literal|"<tr><td class='top-border-dashed'>"
else|:
literal|"<tr><td>"
operator|)
operator|+
operator|(
name|lastFT
operator|==
name|r
operator|.
name|getPriority
argument_list|()
condition|?
literal|""
else|:
operator|!
name|r
operator|.
name|getAlternative
argument_list|()
condition|?
name|MSG
operator|.
name|courseRequestsPriority
argument_list|(
literal|1
operator|+
name|r
operator|.
name|getPriority
argument_list|()
argument_list|)
else|:
name|MSG
operator|.
name|courseRequestsAlternative
argument_list|(
literal|1
operator|+
name|r
operator|.
name|getPriority
argument_list|()
operator|-
name|notAlt
argument_list|)
operator|)
operator|+
literal|"</td>"
expr_stmt|;
name|html
operator|+=
operator|(
name|r
operator|.
name|getPriority
argument_list|()
operator|>
literal|0
operator|&&
name|lastFT
operator|!=
name|r
operator|.
name|getPriority
argument_list|()
condition|?
literal|"<td class='top-border-dashed' colspan='2'>"
else|:
literal|"<td colspan='2'>"
operator|)
operator|+
name|CONST
operator|.
name|freePrefix
argument_list|()
operator|+
literal|" "
expr_stmt|;
name|request
operator|+=
operator|(
name|lastFT
operator|==
name|r
operator|.
name|getPriority
argument_list|()
condition|?
literal|", "
else|:
operator|(
name|request
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
operator|(
name|r
operator|.
name|getAlternative
argument_list|()
condition|?
literal|"A"
operator|+
operator|(
literal|1
operator|+
name|r
operator|.
name|getPriority
argument_list|()
operator|-
name|notAlt
operator|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|r
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|)
operator|+
literal|". "
operator|+
name|CONST
operator|.
name|freePrefix
argument_list|()
operator|+
literal|" "
operator|)
expr_stmt|;
block|}
else|else
block|{
name|html
operator|+=
literal|", "
expr_stmt|;
name|request
operator|+=
literal|", "
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
name|html
operator|+=
name|DayCode
operator|.
name|toString
argument_list|(
name|f
operator|.
name|getDays
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|time
argument_list|(
name|f
operator|.
name|getStart
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|time
argument_list|(
name|f
operator|.
name|getStart
argument_list|()
operator|+
name|f
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|+=
name|DayCode
operator|.
name|toString
argument_list|(
name|f
operator|.
name|getDays
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|time
argument_list|(
name|f
operator|.
name|getStart
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|time
argument_list|(
name|f
operator|.
name|getStart
argument_list|()
operator|+
name|f
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|html
operator|+=
literal|"</td></tr>"
expr_stmt|;
name|lastFT
operator|=
name|r
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|getFreeTimeList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|e
range|:
name|r
operator|.
name|getCourseList
argument_list|()
control|)
block|{
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
block|{
name|html
operator|+=
operator|(
name|r
operator|.
name|getPriority
argument_list|()
operator|>
literal|0
condition|?
literal|"<tr><td class='top-border-dashed'>"
else|:
literal|"<tr><td>"
operator|)
operator|+
operator|(
operator|!
name|r
operator|.
name|getAlternative
argument_list|()
condition|?
name|MSG
operator|.
name|courseRequestsPriority
argument_list|(
literal|1
operator|+
name|r
operator|.
name|getPriority
argument_list|()
argument_list|)
else|:
name|MSG
operator|.
name|courseRequestsAlternative
argument_list|(
literal|1
operator|+
name|r
operator|.
name|getPriority
argument_list|()
operator|-
name|notAlt
argument_list|)
operator|)
operator|+
literal|"</td>"
expr_stmt|;
name|html
operator|+=
operator|(
name|r
operator|.
name|getPriority
argument_list|()
operator|>
literal|0
condition|?
literal|"<td class='top-border-dashed'>"
else|:
literal|"<td>"
operator|)
expr_stmt|;
name|request
operator|+=
operator|(
name|request
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
operator|(
name|r
operator|.
name|getAlternative
argument_list|()
condition|?
literal|"A"
operator|+
operator|(
literal|1
operator|+
name|r
operator|.
name|getPriority
argument_list|()
operator|-
name|notAlt
operator|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|r
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|)
operator|+
literal|". "
expr_stmt|;
block|}
else|else
block|{
name|html
operator|+=
literal|"<tr><td></td><td>"
expr_stmt|;
name|request
operator|+=
literal|", "
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
name|html
operator|+=
name|e
operator|.
name|getName
argument_list|()
expr_stmt|;
name|request
operator|+=
name|e
operator|.
name|getName
argument_list|()
expr_stmt|;
name|html
operator|+=
operator|(
name|r
operator|.
name|getPriority
argument_list|()
operator|>
literal|0
operator|&&
name|idx
operator|==
literal|1
condition|?
literal|"</td><td class='top-border-dashed'>"
else|:
literal|"</td><td>"
operator|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|e
operator|.
name|getParameterCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|html
operator|+=
operator|(
name|i
operator|>
literal|0
condition|?
literal|", "
else|:
literal|""
operator|)
operator|+
name|e
operator|.
name|getParameter
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|html
operator|+=
literal|"</td></tr>"
expr_stmt|;
block|}
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Section
name|s
range|:
name|r
operator|.
name|getSectionList
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getPreference
argument_list|()
operator|==
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Preference
operator|.
name|SELECTED
condition|)
block|{
if|if
condition|(
operator|!
name|selected
operator|.
name|isEmpty
argument_list|()
condition|)
name|selected
operator|+=
literal|"<br>"
expr_stmt|;
name|String
name|loc
init|=
literal|""
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|e
range|:
name|s
operator|.
name|getLocationList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|loc
operator|.
name|isEmpty
argument_list|()
condition|)
name|loc
operator|+=
literal|", "
expr_stmt|;
name|loc
operator|+=
name|e
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|String
name|instr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|e
range|:
name|s
operator|.
name|getInstructorList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|instr
operator|.
name|isEmpty
argument_list|()
condition|)
name|instr
operator|+=
literal|", "
expr_stmt|;
name|instr
operator|+=
name|e
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|selected
operator|+=
name|s
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|s
operator|.
name|hasTime
argument_list|()
condition|?
name|DayCode
operator|.
name|toString
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|time
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|time
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getStart
argument_list|()
operator|+
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|" "
operator|+
name|loc
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|action
operator|.
name|getRequestList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|html
operator|+=
literal|"</table></td></tr>"
expr_stmt|;
block|}
name|String
name|enrollment
init|=
literal|""
decl_stmt|;
name|Map
argument_list|<
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
argument_list|,
name|String
argument_list|>
name|enrollmentByType
init|=
operator|new
name|HashMap
argument_list|<
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Enrollment
name|e
range|:
name|action
operator|.
name|getEnrollmentList
argument_list|()
control|)
block|{
name|enrollment
operator|=
literal|""
expr_stmt|;
name|html
operator|+=
literal|"<tr><td class='unitime-MainTableHeader' colspan='2'>"
operator|+
operator|(
name|e
operator|.
name|hasType
argument_list|()
condition|?
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|e
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|MSG
operator|.
name|enrollmentsTable
argument_list|()
operator|+
literal|"</td></tr>"
expr_stmt|;
name|html
operator|+=
literal|"<tr><td colspan='2'><table cellspacing='0' cellpadding='2'>"
operator|+
literal|"<td class='unitime-TableHeader'>"
operator|+
name|MSG
operator|.
name|colCourse
argument_list|()
operator|+
literal|"</td>"
operator|+
literal|"<td class='unitime-TableHeader'>"
operator|+
name|MSG
operator|.
name|colSubject
argument_list|()
operator|+
literal|"</td>"
operator|+
literal|"<td class='unitime-TableHeader'>"
operator|+
name|MSG
operator|.
name|colClass
argument_list|()
operator|+
literal|"</td>"
operator|+
literal|"<td class='unitime-TableHeader'>"
operator|+
name|MSG
operator|.
name|colDays
argument_list|()
operator|+
literal|"</td>"
operator|+
literal|"<td class='unitime-TableHeader'>"
operator|+
name|MSG
operator|.
name|colStart
argument_list|()
operator|+
literal|"</td>"
operator|+
literal|"<td class='unitime-TableHeader'>"
operator|+
name|MSG
operator|.
name|colEnd
argument_list|()
operator|+
literal|"</td>"
operator|+
literal|"<td class='unitime-TableHeader'>"
operator|+
name|MSG
operator|.
name|colDate
argument_list|()
operator|+
literal|"</td>"
operator|+
literal|"<td class='unitime-TableHeader'>"
operator|+
name|MSG
operator|.
name|colRoom
argument_list|()
operator|+
literal|"</td>"
operator|+
literal|"<td class='unitime-TableHeader'>"
operator|+
name|MSG
operator|.
name|colInstructor
argument_list|()
operator|+
literal|"</td></tr>"
expr_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Section
name|s
range|:
name|e
operator|.
name|getSectionList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|hasCourse
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|enrollment
operator|.
name|isEmpty
argument_list|()
condition|)
name|enrollment
operator|+=
literal|"<br>"
expr_stmt|;
name|String
name|loc
init|=
literal|""
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|r
range|:
name|s
operator|.
name|getLocationList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|loc
operator|.
name|isEmpty
argument_list|()
condition|)
name|loc
operator|+=
literal|", "
expr_stmt|;
name|loc
operator|+=
name|r
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|String
name|instr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|r
range|:
name|s
operator|.
name|getInstructorList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|instr
operator|.
name|isEmpty
argument_list|()
condition|)
name|instr
operator|+=
literal|", "
expr_stmt|;
name|instr
operator|+=
name|r
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|html
operator|+=
literal|"<tr>"
operator|+
literal|"<td>"
operator|+
name|s
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"</td>"
operator|+
literal|"<td>"
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"</td>"
operator|+
literal|"<td>"
operator|+
name|s
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"</td>"
operator|+
literal|"<td>"
operator|+
operator|(
name|s
operator|.
name|hasTime
argument_list|()
condition|?
name|DayCode
operator|.
name|toString
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|"</td>"
operator|+
literal|"<td>"
operator|+
operator|(
name|s
operator|.
name|hasTime
argument_list|()
condition|?
name|time
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|"</td>"
operator|+
literal|"<td>"
operator|+
operator|(
name|s
operator|.
name|hasTime
argument_list|()
condition|?
name|time
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getStart
argument_list|()
operator|+
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|"</td>"
operator|+
literal|"<td>"
operator|+
operator|(
name|s
operator|.
name|hasTime
argument_list|()
operator|&&
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|hasPattern
argument_list|()
condition|?
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getPattern
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|"</td>"
operator|+
literal|"<td>"
operator|+
name|loc
operator|+
literal|"</td>"
operator|+
literal|"<td>"
operator|+
name|instr
operator|+
literal|"</td>"
operator|+
literal|"</tr>"
expr_stmt|;
name|enrollment
operator|+=
name|s
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|s
operator|.
name|hasTime
argument_list|()
condition|?
name|DayCode
operator|.
name|toString
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|time
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|" "
operator|+
name|loc
expr_stmt|;
block|}
name|html
operator|+=
literal|"</table></td></tr>"
expr_stmt|;
name|enrollmentByType
operator|.
name|put
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|enrollment
argument_list|)
expr_stmt|;
block|}
name|String
name|message
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|action
operator|.
name|getMessageList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|html
operator|+=
literal|"<tr><td class='unitime-MainTableHeader' colspan='2'>"
operator|+
name|MSG
operator|.
name|tableMessages
argument_list|()
operator|+
literal|"</td></tr>"
expr_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Message
name|m
range|:
name|action
operator|.
name|getMessageList
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|hasText
argument_list|()
condition|)
block|{
name|html
operator|+=
literal|"<tr><td><b>"
operator|+
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|":</b></td><td>"
operator|+
name|m
operator|.
name|getText
argument_list|()
operator|+
literal|"</td></tr>"
expr_stmt|;
name|message
operator|=
name|m
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|html
operator|+=
literal|"<tr><td><b>Exception:</b></td><td>"
operator|+
name|m
operator|.
name|getException
argument_list|()
operator|+
literal|"</td></tr>"
expr_stmt|;
name|message
operator|=
name|m
operator|.
name|getException
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|html
operator|+=
literal|"<tr><td class='unitime-MainTableHeader' colspan='2'>"
operator|+
name|MSG
operator|.
name|tableProto
argument_list|()
operator|+
literal|"</td></tr>"
expr_stmt|;
name|html
operator|+=
literal|"<tr><td colspan='2' class='proto'>"
operator|+
name|action
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<"
argument_list|,
literal|"&lt;"
argument_list|)
operator|.
name|replace
argument_list|(
literal|">"
argument_list|,
literal|"&gt;"
argument_list|)
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
operator|+
literal|"</td></tr>"
expr_stmt|;
name|html
operator|+=
literal|"</table>"
expr_stmt|;
if|if
condition|(
literal|"student-email"
operator|.
name|equals
argument_list|(
name|log
operator|.
name|getOperation
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Property
name|p
range|:
name|action
operator|.
name|getOptionList
argument_list|()
control|)
if|if
condition|(
literal|"email"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|p
operator|.
name|hasValue
argument_list|()
condition|)
name|html
operator|=
name|p
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|.
name|hasResult
argument_list|()
operator|&&
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FAILURE
operator|.
name|equals
argument_list|(
name|action
operator|.
name|getResult
argument_list|()
argument_list|)
operator|&&
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|a
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"suggestions"
operator|.
name|equals
argument_list|(
name|log
operator|.
name|getOperation
argument_list|()
argument_list|)
condition|)
block|{
name|a
operator|.
name|setMessage
argument_list|(
name|selected
operator|.
name|isEmpty
argument_list|()
condition|?
name|message
else|:
name|selected
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"section"
operator|.
name|equals
argument_list|(
name|log
operator|.
name|getOperation
argument_list|()
argument_list|)
condition|)
block|{
name|a
operator|.
name|setMessage
argument_list|(
name|request
operator|.
name|isEmpty
argument_list|()
condition|?
name|message
else|:
name|request
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|enrollmentByType
operator|.
name|containsKey
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|REQUESTED
argument_list|)
condition|)
block|{
name|a
operator|.
name|setMessage
argument_list|(
name|enrollmentByType
operator|.
name|get
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|REQUESTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|a
operator|.
name|setMessage
argument_list|(
name|enrollment
operator|.
name|isEmpty
argument_list|()
condition|?
name|request
operator|.
name|isEmpty
argument_list|()
condition|?
name|message
else|:
name|request
else|:
name|enrollment
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setProto
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
block|}
block|}
name|helper
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|String
name|time
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|int
name|h
init|=
name|slot
operator|/
literal|12
decl_stmt|;
name|int
name|m
init|=
literal|5
operator|*
operator|(
name|slot
operator|%
literal|12
operator|)
decl_stmt|;
if|if
condition|(
name|CONST
operator|.
name|useAmPm
argument_list|()
condition|)
return|return
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|h
operator|==
literal|24
condition|?
literal|"a"
else|:
name|h
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
else|else
return|return
name|h
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
return|;
block|}
specifier|public
specifier|static
class|class
name|SectioningLogQueryFormatter
implements|implements
name|QueryFormatter
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|iGroupTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|SectioningLogQueryFormatter
parameter_list|(
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
for|for
control|(
name|StudentGroupType
name|type
range|:
name|StudentGroupTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
control|)
name|iGroupTypes
operator|.
name|add
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|body
parameter_list|)
block|{
if|if
condition|(
name|body
operator|!=
literal|null
operator|&&
operator|!
name|body
operator|.
name|isEmpty
argument_list|()
condition|)
name|body
operator|=
name|StringEscapeUtils
operator|.
name|escapeSql
argument_list|(
name|body
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"id"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
operator|||
literal|"student"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|DataExchangeTrimLeadingZerosFromExternalIds
operator|.
name|isTrue
argument_list|()
operator|&&
name|body
operator|.
name|startsWith
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
return|return
literal|"s.externalUniqueId = '"
operator|+
name|body
operator|.
name|replaceFirst
argument_list|(
literal|"^0+(?!$)"
argument_list|,
literal|""
argument_list|)
operator|+
literal|"'"
return|;
block|}
else|else
block|{
return|return
literal|"s.externalUniqueId = '"
operator|+
name|body
operator|+
literal|"'"
return|;
block|}
block|}
if|else if
condition|(
literal|"operation"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
operator|||
literal|"op"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|"lower(l.operation) = '"
operator|+
name|body
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'"
return|;
block|}
if|else if
condition|(
literal|"max-age"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
operator|||
literal|"age"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|HibernateUtil
operator|.
name|addDate
argument_list|(
literal|"l.timeStamp"
argument_list|,
name|body
argument_list|)
operator|+
literal|"> current_date()"
return|;
block|}
if|else if
condition|(
literal|"limit"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|"1 = 1"
return|;
block|}
if|else if
condition|(
literal|"area"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|"lower(m.academicArea.academicAreaAbbreviation) = '"
operator|+
name|body
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'"
return|;
block|}
if|else if
condition|(
literal|"clasf"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
operator|||
literal|"classification"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|"lower(m.academicClassification.code) = '"
operator|+
name|body
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'"
return|;
block|}
if|else if
condition|(
literal|"major"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|"lower(m.major.code) = '"
operator|+
name|body
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'"
return|;
block|}
if|else if
condition|(
literal|"minor"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|"lower(n.minor.code) = '"
operator|+
name|body
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'"
return|;
block|}
if|else if
condition|(
literal|"group"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|"lower(g.groupAbbreviation) = '"
operator|+
name|body
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'"
return|;
block|}
if|else if
condition|(
name|attr
operator|!=
literal|null
operator|&&
name|iGroupTypes
operator|.
name|contains
argument_list|(
name|attr
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"lower(G_"
operator|+
name|attr
operator|+
literal|".groupAbbreviation) = '"
operator|+
name|body
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'"
return|;
block|}
if|else if
condition|(
literal|"accommodation"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|"lower(a.abbreviation) = '"
operator|+
name|body
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'"
return|;
block|}
if|else if
condition|(
literal|"user"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
operator|(
literal|"none"
operator|.
name|equalsIgnoreCase
argument_list|(
name|body
argument_list|)
condition|?
literal|"l.user is null"
else|:
literal|"l.user = '"
operator|+
name|body
operator|+
literal|"'"
operator|)
return|;
block|}
if|else if
condition|(
literal|"result"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
name|t
range|:
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|t
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|body
argument_list|)
condition|)
return|return
literal|"l.result = "
operator|+
name|t
operator|.
name|getNumber
argument_list|()
return|;
if|if
condition|(
literal|"none"
operator|.
name|equalsIgnoreCase
argument_list|(
name|body
argument_list|)
operator|||
literal|"unknown"
operator|.
name|equalsIgnoreCase
argument_list|(
name|body
argument_list|)
condition|)
return|return
literal|"l.result is null"
return|;
else|else
return|return
literal|"1 = 1"
return|;
block|}
if|else if
condition|(
literal|"status"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"Not Set"
operator|.
name|equalsIgnoreCase
argument_list|(
name|body
argument_list|)
condition|)
return|return
literal|"s.sectioningStatus is null"
return|;
else|else
return|return
literal|"lower(s.sectioningStatus.reference) = '"
operator|+
name|body
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'"
return|;
block|}
if|else if
condition|(
literal|"over"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
try|try
block|{
return|return
literal|"l.wallTime>= "
operator|+
literal|1000
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|body
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|"1 = 1"
return|;
block|}
block|}
if|else if
condition|(
literal|"under"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
try|try
block|{
return|return
literal|"l.wallTime<= "
operator|+
literal|1000
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|body
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|"1 = 1"
return|;
block|}
block|}
if|else if
condition|(
literal|"api"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
try|try
block|{
return|return
literal|"l.apiGetTime>= "
operator|+
literal|1000
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|body
operator|.
name|trim
argument_list|()
argument_list|)
operator|+
literal|"or l.apiPostTime>= "
operator|+
literal|1000
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|body
operator|.
name|trim
argument_list|()
argument_list|)
operator|+
literal|" or (l.apiGetTime + l.apiPostTime)>= "
operator|+
literal|1000
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|body
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|"l.apiException like '%"
operator|+
name|body
operator|+
literal|"%'"
return|;
block|}
block|}
if|else if
condition|(
literal|"message"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|"l.message like '%"
operator|+
name|body
operator|+
literal|"%' or l.apiException like '%"
operator|+
name|body
operator|+
literal|"%'"
return|;
block|}
if|else if
condition|(
literal|"get"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
try|try
block|{
return|return
literal|"l.apiGetTime>= "
operator|+
literal|1000
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|body
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|"1 = 1"
return|;
block|}
block|}
if|else if
condition|(
literal|"post"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
try|try
block|{
return|return
literal|"l.apiPostTime>= "
operator|+
literal|1000
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|body
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|"1 = 1"
return|;
block|}
block|}
if|else if
condition|(
literal|"course"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|"cr.courseOffering.subjectAreaAbbv = '"
operator|+
name|body
operator|+
literal|"' or (cr.courseOffering.subjectAreaAbbv || ' ' || cr.courseOffering.courseNbr) = '"
operator|+
name|body
operator|+
literal|"'"
return|;
block|}
if|else if
condition|(
name|attr
operator|==
literal|null
operator|&&
operator|!
name|body
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"lower(s.firstName || ' ' || s.middleName || ' ' || s.lastName) like '%"
operator|+
name|body
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%'"
return|;
block|}
else|else
block|{
return|return
literal|"1 = 1"
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getGroupTypes
parameter_list|()
block|{
return|return
name|iGroupTypes
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"sectioning-log"
return|;
block|}
block|}
end_class

end_unit

