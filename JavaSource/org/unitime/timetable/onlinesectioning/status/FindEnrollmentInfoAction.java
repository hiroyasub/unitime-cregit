begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|AssignmentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|expectations
operator|.
name|OverExpectedCriterion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|LongType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|NaturalOrderComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
operator|.
name|SectioningStatusFilterBox
operator|.
name|SectioningStatusFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|EnrollmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|AbstractCourseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XExpectations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOverride
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRoom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|SectioningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|StatusPageSuggestionsAction
operator|.
name|CourseInfoMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|StatusPageSuggestionsAction
operator|.
name|CourseLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|StatusPageSuggestionsAction
operator|.
name|CourseRequestMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolver
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|FindEnrollmentInfoAction
implements|implements
name|OnlineSectioningAction
argument_list|<
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Query
name|iQuery
decl_stmt|;
specifier|protected
name|Integer
name|iLimit
init|=
literal|null
decl_stmt|;
specifier|protected
name|Long
name|iCourseId
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|Long
argument_list|>
name|iCoursesIcoordinate
decl_stmt|,
name|iCoursesIcanApprove
decl_stmt|,
name|iMyStudents
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|iSubjectAreas
decl_stmt|;
specifier|public
name|FindEnrollmentInfoAction
name|withParams
parameter_list|(
name|String
name|query
parameter_list|,
name|Long
name|courseId
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|coursesIcoordinage
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|coursesIcanApprove
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|myStudents
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|subjects
parameter_list|)
block|{
name|iQuery
operator|=
operator|new
name|Query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|iCourseId
operator|=
name|courseId
expr_stmt|;
name|iCoursesIcanApprove
operator|=
name|coursesIcanApprove
expr_stmt|;
name|iCoursesIcoordinate
operator|=
name|coursesIcoordinage
expr_stmt|;
name|iMyStudents
operator|=
name|myStudents
expr_stmt|;
name|iSubjectAreas
operator|=
name|subjects
expr_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"limit:[ ]?([0-9]*)"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|iLimit
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|protected
name|SectioningStatusFilterRpcRequest
name|iFilter
init|=
literal|null
decl_stmt|;
specifier|public
name|FindEnrollmentInfoAction
name|withFilter
parameter_list|(
name|SectioningStatusFilterRpcRequest
name|filter
parameter_list|)
block|{
name|iFilter
operator|=
name|filter
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|isMyStudent
parameter_list|(
name|XStudentId
name|student
parameter_list|)
block|{
return|return
name|iMyStudents
operator|!=
literal|null
operator|&&
name|iMyStudents
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Query
name|query
parameter_list|()
block|{
return|return
name|iQuery
return|;
block|}
specifier|public
name|Integer
name|limit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|Long
name|courseId
parameter_list|()
block|{
return|return
name|iCourseId
return|;
block|}
specifier|public
name|boolean
name|isCourseVisible
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
return|return
name|iCoursesIcoordinate
operator|==
literal|null
operator|||
name|iCoursesIcoordinate
operator|.
name|contains
argument_list|(
name|courseId
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isConsentToDoCourse
parameter_list|(
name|XCourse
name|course
parameter_list|)
block|{
return|return
name|iCoursesIcanApprove
operator|!=
literal|null
operator|&&
name|course
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
name|iCoursesIcanApprove
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasMatchingSubjectArea
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
return|return
name|iSubjectAreas
operator|==
literal|null
operator|||
name|iSubjectAreas
operator|.
name|contains
argument_list|(
name|subject
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|getClassSnapshots
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c.uniqueId, c.snapshotLimit from "
operator|+
literal|"Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.uniqueId = :courseId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|courseId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|classId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Integer
name|limit
init|=
operator|(
name|Integer
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|classId
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|getOfferingSnapshots
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|XCourseId
argument_list|>
name|courseIds
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|XCourseId
name|courseId
range|:
name|courseIds
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|courseId
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|==
literal|1000
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select io.uniqueId, io.snapshotLimit from "
operator|+
literal|"InstructionalOffering io where "
operator|+
literal|"io.uniqueId in :ids"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"ids"
argument_list|,
name|ids
argument_list|,
name|LongType
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|classId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Integer
name|limit
init|=
operator|(
name|Integer
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|classId
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select io.uniqueId, io.snapshotLimit from "
operator|+
literal|"InstructionalOffering io where "
operator|+
literal|"io.uniqueId in :ids"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"ids"
argument_list|,
name|ids
argument_list|,
name|LongType
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|classId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Integer
name|limit
init|=
operator|(
name|Integer
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|classId
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
name|execute
parameter_list|(
specifier|final
name|OnlineSectioningServer
name|server
parameter_list|,
specifier|final
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|EnrollmentInfo
argument_list|>
argument_list|()
decl_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|CourseLookup
name|lookup
init|=
operator|new
name|CourseLookup
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|boolean
name|solver
init|=
operator|(
name|server
operator|instanceof
name|StudentSolver
operator|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|solver
condition|)
name|studentIds
operator|=
operator|(
name|iFilter
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|createAction
argument_list|(
name|SectioningStatusFilterAction
operator|.
name|class
argument_list|)
operator|.
name|forRequest
argument_list|(
name|iFilter
argument_list|)
operator|.
name|getStudentIds
argument_list|(
name|server
argument_list|,
name|helper
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|courseId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|matchingStudents
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|gEnrl
init|=
literal|0
decl_stmt|,
name|gWait
init|=
literal|0
decl_stmt|,
name|gRes
init|=
literal|0
decl_stmt|,
name|gUnasg
init|=
literal|0
decl_stmt|,
name|gUnasgPrim
init|=
literal|0
decl_stmt|;
name|int
name|gtEnrl
init|=
literal|0
decl_stmt|,
name|gtWait
init|=
literal|0
decl_stmt|,
name|gtRes
init|=
literal|0
decl_stmt|,
name|gtUnasg
init|=
literal|0
decl_stmt|,
name|gtUnasgPrim
init|=
literal|0
decl_stmt|;
name|int
name|gConNeed
init|=
literal|0
decl_stmt|,
name|gtConNeed
init|=
literal|0
decl_stmt|,
name|gOvrNeed
init|=
literal|0
decl_stmt|,
name|gtOvrNeed
init|=
literal|0
decl_stmt|;
name|Collection
argument_list|<
name|?
extends|extends
name|XCourseId
argument_list|>
name|courses
init|=
name|server
operator|.
name|findCourses
argument_list|(
operator|new
name|FindEnrollmentInfoCourseMatcher
argument_list|(
name|iCoursesIcoordinate
argument_list|,
name|iCoursesIcanApprove
argument_list|,
name|iSubjectAreas
argument_list|,
name|iQuery
argument_list|,
name|lookup
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|snapshots
init|=
name|getOfferingSnapshots
argument_list|(
name|courses
argument_list|,
name|helper
argument_list|)
decl_stmt|;
for|for
control|(
name|XCourseId
name|info
range|:
name|courses
control|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|info
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
name|offering
operator|.
name|getCourse
argument_list|(
name|info
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|XEnrollments
name|enrollments
init|=
name|server
operator|.
name|getEnrollments
argument_list|(
name|info
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isConsentToDoCourse
init|=
name|isConsentToDoCourse
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|EnrollmentInfo
name|e
init|=
operator|new
name|EnrollmentInfo
argument_list|()
decl_stmt|;
name|e
operator|.
name|setCourseId
argument_list|(
name|info
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setOfferingId
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTitle
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConsent
argument_list|(
name|course
operator|.
name|getConsentAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|match
init|=
literal|0
decl_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|,
name|wait
init|=
literal|0
decl_stmt|,
name|res
init|=
literal|0
decl_stmt|,
name|unasg
init|=
literal|0
decl_stmt|,
name|unasgPrim
init|=
literal|0
decl_stmt|;
name|int
name|tEnrl
init|=
literal|0
decl_stmt|,
name|tWait
init|=
literal|0
decl_stmt|,
name|tRes
init|=
literal|0
decl_stmt|,
name|tUnasg
init|=
literal|0
decl_stmt|,
name|tUnasgPrim
init|=
literal|0
decl_stmt|;
name|int
name|conNeed
init|=
literal|0
decl_stmt|,
name|tConNeed
init|=
literal|0
decl_stmt|,
name|ovrNeed
init|=
literal|0
decl_stmt|,
name|tOvrNeed
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|addedStudents
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|checkOverrides
init|=
operator|!
name|query
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"override"
argument_list|)
decl_stmt|;
for|for
control|(
name|XCourseRequest
name|request
range|:
name|enrollments
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasCourse
argument_list|(
name|info
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|students
operator|.
name|add
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
name|addedStudents
operator|.
name|add
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|checkOverrides
operator|&&
name|request
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|XOverride
name|override
init|=
name|request
operator|.
name|getOverride
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|override
operator|!=
literal|null
operator|&&
operator|!
name|override
operator|.
name|isApproved
argument_list|()
condition|)
continue|continue;
block|}
if|if
condition|(
name|studentIds
operator|!=
literal|null
operator|&&
operator|!
name|studentIds
operator|.
name|contains
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tEnrl
operator|++
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|tRes
operator|++
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|==
literal|null
condition|)
name|tConNeed
operator|++
expr_stmt|;
block|}
else|else
block|{
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
operator|&&
name|student
operator|.
name|canAssign
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|tUnasg
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|isAlternative
argument_list|()
operator|&&
name|request
operator|.
name|isPrimary
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|tUnasgPrim
operator|++
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|isWaitlist
argument_list|()
condition|)
name|tWait
operator|++
expr_stmt|;
block|}
block|}
block|}
continue|continue;
block|}
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
name|CourseRequestMatcher
name|m
init|=
operator|new
name|CourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|course
argument_list|,
name|student
argument_list|,
name|offering
argument_list|,
name|request
argument_list|,
name|isConsentToDoCourse
argument_list|,
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|,
name|lookup
argument_list|,
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
argument_list|()
operator|.
name|match
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|matchingStudents
operator|.
name|add
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
name|match
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|enrl
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|res
operator|++
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|==
literal|null
condition|)
name|conNeed
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|m
operator|.
name|student
argument_list|()
operator|.
name|canAssign
argument_list|(
name|m
operator|.
name|request
argument_list|()
argument_list|)
condition|)
block|{
name|unasg
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|request
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|m
operator|.
name|request
argument_list|()
operator|.
name|isPrimary
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|unasgPrim
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|request
argument_list|()
operator|.
name|isWaitlist
argument_list|()
condition|)
name|wait
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|m
operator|.
name|request
argument_list|()
operator|.
name|isOverridePending
argument_list|(
name|course
argument_list|)
condition|)
name|ovrNeed
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|solver
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tEnrl
operator|++
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|tRes
operator|++
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|==
literal|null
condition|)
name|tConNeed
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|student
operator|!=
literal|null
operator|&&
name|student
operator|.
name|canAssign
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|tUnasg
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|isAlternative
argument_list|()
operator|&&
name|request
operator|.
name|isPrimary
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|tUnasgPrim
operator|++
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|isWaitlist
argument_list|()
condition|)
name|tWait
operator|++
expr_stmt|;
block|}
block|}
block|}
continue|continue;
block|}
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tEnrl
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|tRes
operator|++
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|==
literal|null
condition|)
name|tConNeed
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|m
operator|.
name|student
argument_list|()
operator|.
name|canAssign
argument_list|(
name|m
operator|.
name|request
argument_list|()
argument_list|)
condition|)
block|{
name|tUnasg
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|request
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|m
operator|.
name|request
argument_list|()
operator|.
name|isPrimary
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|tUnasgPrim
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|request
argument_list|()
operator|.
name|isWaitlist
argument_list|()
condition|)
name|tWait
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|m
operator|.
name|request
argument_list|()
operator|.
name|isOverridePending
argument_list|(
name|course
argument_list|)
condition|)
name|tOvrNeed
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|match
operator|==
literal|0
condition|)
block|{
name|students
operator|.
name|removeAll
argument_list|(
name|addedStudents
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|gEnrl
operator|+=
name|enrl
expr_stmt|;
name|gWait
operator|+=
name|wait
expr_stmt|;
name|gUnasg
operator|+=
name|unasg
expr_stmt|;
name|gUnasgPrim
operator|+=
name|unasgPrim
expr_stmt|;
name|gRes
operator|+=
name|res
expr_stmt|;
name|gConNeed
operator|+=
name|conNeed
expr_stmt|;
name|gOvrNeed
operator|+=
name|ovrNeed
expr_stmt|;
name|gtEnrl
operator|+=
name|tEnrl
expr_stmt|;
name|gtWait
operator|+=
name|tWait
expr_stmt|;
name|gtUnasg
operator|+=
name|tUnasg
expr_stmt|;
name|gtUnasgPrim
operator|+=
name|tUnasgPrim
expr_stmt|;
name|gtRes
operator|+=
name|tRes
expr_stmt|;
name|gtConNeed
operator|+=
name|tConNeed
expr_stmt|;
name|gtOvrNeed
operator|+=
name|tOvrNeed
expr_stmt|;
name|int
name|limit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|config
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
block|{
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
else|else
block|{
name|limit
operator|+=
name|config
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
block|}
name|e
operator|.
name|setLimit
argument_list|(
name|course
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setProjection
argument_list|(
name|course
operator|.
name|getProjected
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSnapshot
argument_list|(
name|snapshots
operator|.
name|get
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|av
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|offering
operator|.
name|getUnreservedSpace
argument_list|(
name|enrollments
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|av
operator|>
name|course
operator|.
name|getLimit
argument_list|()
operator|-
name|enrollments
operator|.
name|countEnrollmentsForCourse
argument_list|(
name|info
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
name|av
operator|=
name|course
operator|.
name|getLimit
argument_list|()
operator|-
name|enrollments
operator|.
name|countEnrollmentsForCourse
argument_list|(
name|info
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|av
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
name|av
operator|=
operator|-
literal|1
expr_stmt|;
name|e
operator|.
name|setAvailable
argument_list|(
name|av
argument_list|)
expr_stmt|;
if|if
condition|(
name|av
operator|>=
literal|0
condition|)
block|{
name|int
name|other
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XCourse
name|c
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
operator|!
name|c
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
name|other
operator|+=
name|enrollments
operator|.
name|countEnrollmentsForCourse
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setOther
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|course
operator|.
name|getLimit
argument_list|()
operator|-
name|enrollments
operator|.
name|countEnrollmentsForCourse
argument_list|(
name|info
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|-
name|av
argument_list|,
name|other
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|lim
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XConfig
name|f
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|lim
operator|<
literal|0
operator|||
name|f
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
name|lim
operator|=
operator|-
literal|1
expr_stmt|;
else|else
name|lim
operator|+=
name|f
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lim
operator|>=
literal|0
operator|&&
name|lim
operator|<
name|course
operator|.
name|getLimit
argument_list|()
condition|)
name|e
operator|.
name|setOther
argument_list|(
name|e
operator|.
name|getOther
argument_list|()
operator|+
name|course
operator|.
name|getLimit
argument_list|()
operator|-
name|limit
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|e
operator|.
name|setReservation
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|e
operator|.
name|setWaitlist
argument_list|(
name|wait
argument_list|)
expr_stmt|;
name|e
operator|.
name|setUnassigned
argument_list|(
name|unasg
argument_list|)
expr_stmt|;
name|e
operator|.
name|setUnassignedPrimary
argument_list|(
name|unasgPrim
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalEnrollment
argument_list|(
name|tEnrl
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalReservation
argument_list|(
name|tRes
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalWaitlist
argument_list|(
name|tWait
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalUnassigned
argument_list|(
name|tUnasg
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalUnassignedPrimary
argument_list|(
name|tUnasgPrim
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConsentNeeded
argument_list|(
name|conNeed
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalConsentNeeded
argument_list|(
name|tConNeed
argument_list|)
expr_stmt|;
name|e
operator|.
name|setOverrideNeeded
argument_list|(
name|ovrNeed
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalOverrideNeeded
argument_list|(
name|tOvrNeed
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
argument_list|()
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|>=
name|limit
argument_list|()
condition|)
break|break;
block|}
specifier|final
name|Comparator
name|noc
init|=
operator|new
name|NaturalOrderComparator
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|,
operator|new
name|Comparator
argument_list|<
name|EnrollmentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EnrollmentInfo
name|e1
parameter_list|,
name|EnrollmentInfo
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|noc
operator|.
name|compare
argument_list|(
name|e1
operator|.
name|getSubject
argument_list|()
argument_list|,
name|e2
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|EnrollmentInfo
name|t
init|=
operator|new
name|EnrollmentInfo
argument_list|()
decl_stmt|;
name|t
operator|.
name|setSubject
argument_list|(
name|MSG
operator|.
name|total
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setCourseNbr
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|t
operator|.
name|setLimit
argument_list|(
name|students
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setAvailable
argument_list|(
name|matchingStudents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setEnrollment
argument_list|(
name|gEnrl
argument_list|)
expr_stmt|;
name|t
operator|.
name|setReservation
argument_list|(
name|gRes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setWaitlist
argument_list|(
name|gWait
argument_list|)
expr_stmt|;
name|t
operator|.
name|setUnassigned
argument_list|(
name|gUnasg
argument_list|)
expr_stmt|;
name|t
operator|.
name|setUnassignedPrimary
argument_list|(
name|gUnasgPrim
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalEnrollment
argument_list|(
name|gtEnrl
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalReservation
argument_list|(
name|gtRes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalWaitlist
argument_list|(
name|gtWait
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalUnassigned
argument_list|(
name|gtUnasg
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalUnassignedPrimary
argument_list|(
name|gtUnasgPrim
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConsentNeeded
argument_list|(
name|gConNeed
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalConsentNeeded
argument_list|(
name|gtConNeed
argument_list|)
expr_stmt|;
name|t
operator|.
name|setOverrideNeeded
argument_list|(
name|gOvrNeed
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalOverrideNeeded
argument_list|(
name|gtOvrNeed
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|snapshots
init|=
name|getClassSnapshots
argument_list|(
name|courseId
argument_list|()
argument_list|,
name|helper
argument_list|)
decl_stmt|;
name|XCourse
name|info
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|courseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
return|return
name|ret
return|;
specifier|final
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|info
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
return|return
name|ret
return|;
name|XCourse
name|course
init|=
name|offering
operator|.
name|getCourse
argument_list|(
name|info
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
return|return
name|ret
return|;
name|XEnrollments
name|enrollments
init|=
name|server
operator|.
name|getEnrollments
argument_list|(
name|info
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|OverExpectedCriterion
name|overExp
init|=
name|server
operator|.
name|getOverExpectedCriterion
argument_list|()
decl_stmt|;
name|XExpectations
name|expectations
init|=
name|server
operator|.
name|getExpectations
argument_list|(
name|info
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isConsentToDoCourse
init|=
name|isConsentToDoCourse
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
name|sections
operator|.
name|addAll
argument_list|(
name|subpart
operator|.
name|getSections
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sections
argument_list|,
operator|new
name|Comparator
argument_list|<
name|XSection
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|XConfig
name|c1
parameter_list|,
name|XConfig
name|c2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|c1
operator|.
name|getName
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|c2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|c1
operator|.
name|getConfigId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getConfigId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isParent
parameter_list|(
name|XSubpart
name|s1
parameter_list|,
name|XSubpart
name|s2
parameter_list|)
block|{
name|XSubpart
name|p1
init|=
operator|(
name|s1
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|offering
operator|.
name|getSubpart
argument_list|(
name|s1
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|p1
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|isParent
argument_list|(
name|p1
argument_list|,
name|s2
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|XSubpart
name|s1
parameter_list|,
name|XSubpart
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|offering
operator|.
name|getConfig
argument_list|(
name|s1
operator|.
name|getConfigId
argument_list|()
argument_list|)
argument_list|,
name|offering
operator|.
name|getConfig
argument_list|(
name|s2
operator|.
name|getConfigId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|isParent
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|isParent
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|cmp
operator|=
name|s1
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getSubpartId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getSubpartId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|XSection
name|s1
parameter_list|,
name|XSection
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|.
name|getSubpartId
argument_list|()
operator|.
name|equals
argument_list|(
name|s2
operator|.
name|getSubpartId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|s1
operator|.
name|getParentId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|offering
operator|.
name|getSection
argument_list|(
name|s1
operator|.
name|getParentId
argument_list|()
argument_list|)
argument_list|,
name|offering
operator|.
name|getSection
argument_list|(
name|s2
operator|.
name|getParentId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
try|try
block|{
name|int
name|cmp
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|int
name|cmp
init|=
operator|(
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getSectionId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getSectionId
argument_list|()
argument_list|)
return|;
block|}
name|XSection
name|x
init|=
name|s1
decl_stmt|;
while|while
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isParent
argument_list|(
name|offering
operator|.
name|getSubpart
argument_list|(
name|s2
operator|.
name|getSubpartId
argument_list|()
argument_list|)
argument_list|,
name|offering
operator|.
name|getSubpart
argument_list|(
name|x
operator|.
name|getSubpartId
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|XSection
name|s
init|=
name|offering
operator|.
name|getSection
argument_list|(
name|s2
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|s
operator|.
name|getSubpartId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getSubpartId
argument_list|()
argument_list|)
condition|)
block|{
name|s
operator|=
name|offering
operator|.
name|getSection
argument_list|(
name|s
operator|.
name|getParentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|cmp
init|=
name|compare
argument_list|(
name|x
argument_list|,
name|s
argument_list|)
decl_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|x
operator|.
name|equals
argument_list|(
name|s1
argument_list|)
condition|?
operator|-
literal|1
else|:
name|compare
argument_list|(
name|offering
operator|.
name|getSubpart
argument_list|(
name|x
operator|.
name|getSubpartId
argument_list|()
argument_list|)
argument_list|,
name|offering
operator|.
name|getSubpart
argument_list|(
name|s
operator|.
name|getSubpartId
argument_list|()
argument_list|)
argument_list|)
else|:
name|cmp
operator|)
return|;
block|}
name|x
operator|=
name|offering
operator|.
name|getSection
argument_list|(
name|x
operator|.
name|getParentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|x
operator|=
name|s2
expr_stmt|;
while|while
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isParent
argument_list|(
name|offering
operator|.
name|getSubpart
argument_list|(
name|s1
operator|.
name|getSubpartId
argument_list|()
argument_list|)
argument_list|,
name|offering
operator|.
name|getSubpart
argument_list|(
name|x
operator|.
name|getSubpartId
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|XSection
name|s
init|=
name|offering
operator|.
name|getSection
argument_list|(
name|s1
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|s
operator|.
name|getSubpartId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getSubpartId
argument_list|()
argument_list|)
condition|)
block|{
name|s
operator|=
name|offering
operator|.
name|getSection
argument_list|(
name|s
operator|.
name|getParentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|cmp
init|=
name|compare
argument_list|(
name|s
argument_list|,
name|x
argument_list|)
decl_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|x
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|?
literal|1
else|:
name|compare
argument_list|(
name|offering
operator|.
name|getSubpart
argument_list|(
name|s
operator|.
name|getSubpartId
argument_list|()
argument_list|)
argument_list|,
name|offering
operator|.
name|getSubpart
argument_list|(
name|x
operator|.
name|getSubpartId
argument_list|()
argument_list|)
argument_list|)
else|:
name|cmp
operator|)
return|;
block|}
name|x
operator|=
name|offering
operator|.
name|getSection
argument_list|(
name|x
operator|.
name|getParentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|cmp
init|=
name|compare
argument_list|(
name|offering
operator|.
name|getSubpart
argument_list|(
name|s1
operator|.
name|getSubpartId
argument_list|()
argument_list|)
argument_list|,
name|offering
operator|.
name|getSubpart
argument_list|(
name|s2
operator|.
name|getSubpartId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
try|try
block|{
name|cmp
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|cmp
operator|=
operator|(
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getSectionId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getSectionId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|boolean
name|checkOverrides
init|=
operator|!
name|query
argument_list|()
operator|.
name|hasAttribute
argument_list|(
literal|"override"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|section2students
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XCourseRequest
name|request
range|:
name|enrollments
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|||
operator|!
name|request
operator|.
name|hasCourse
argument_list|(
name|courseId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
operator|||
operator|!
name|student
operator|.
name|canAssign
argument_list|(
name|request
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|checkOverrides
operator|&&
name|request
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|XOverride
name|override
init|=
name|request
operator|.
name|getOverride
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|override
operator|!=
literal|null
operator|&&
operator|!
name|override
operator|.
name|isApproved
argument_list|()
condition|)
continue|continue;
block|}
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
init|=
operator|new
name|AssignmentMap
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|CourseRequest
name|r
init|=
name|SectioningRequest
operator|.
name|convert
argument_list|(
name|assignment
argument_list|,
name|request
argument_list|,
name|server
argument_list|)
decl_stmt|;
name|values
label|:
for|for
control|(
name|Enrollment
name|en
range|:
name|r
operator|.
name|values
argument_list|(
name|assignment
argument_list|)
control|)
block|{
for|for
control|(
name|Request
name|x
range|:
name|r
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|xe
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|x
operator|.
name|equals
argument_list|(
name|r
argument_list|)
operator|&&
name|xe
operator|!=
literal|null
operator|&&
name|xe
operator|.
name|isOverlapping
argument_list|(
name|en
argument_list|)
condition|)
block|{
continue|continue
name|values
continue|;
block|}
block|}
for|for
control|(
name|Section
name|s
range|:
name|en
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
operator|(
name|Set
argument_list|<
name|Long
argument_list|>
operator|)
name|section2students
operator|.
name|get
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|section2students
operator|.
name|put
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
block|{
name|EnrollmentInfo
name|e
init|=
operator|new
name|EnrollmentInfo
argument_list|()
decl_stmt|;
name|e
operator|.
name|setCourseId
argument_list|(
name|info
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setOfferingId
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSubject
argument_list|(
name|info
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCourseNbr
argument_list|(
name|info
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTitle
argument_list|(
name|info
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConsent
argument_list|(
name|info
operator|.
name|getConsentAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|XSubpart
name|subpart
init|=
name|offering
operator|.
name|getSubpart
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
name|XConfig
name|config
init|=
name|offering
operator|.
name|getConfig
argument_list|(
name|subpart
operator|.
name|getConfigId
argument_list|()
argument_list|)
decl_stmt|;
name|e
operator|.
name|setConfig
argument_list|(
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConfigId
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSubpart
argument_list|(
name|subpart
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSubpartId
argument_list|(
name|subpart
operator|.
name|getSubpartId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setClazz
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setClazzId
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
expr_stmt|;
name|XSection
name|parent
init|=
operator|(
name|section
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|offering
operator|.
name|getSection
argument_list|(
name|section
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|incLevel
argument_list|()
expr_stmt|;
name|parent
operator|=
operator|(
name|parent
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|offering
operator|.
name|getSection
argument_list|(
name|parent
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
name|int
name|match
init|=
literal|0
decl_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|,
name|wait
init|=
literal|0
decl_stmt|,
name|res
init|=
literal|0
decl_stmt|,
name|unasg
init|=
literal|0
decl_stmt|,
name|unasgPrim
init|=
literal|0
decl_stmt|;
name|int
name|tEnrl
init|=
literal|0
decl_stmt|,
name|tWait
init|=
literal|0
decl_stmt|,
name|tRes
init|=
literal|0
decl_stmt|,
name|tUnasg
init|=
literal|0
decl_stmt|,
name|tUnasgPrim
init|=
literal|0
decl_stmt|;
name|int
name|conNeed
init|=
literal|0
decl_stmt|,
name|tConNeed
init|=
literal|0
decl_stmt|;
name|int
name|other
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XCourseRequest
name|request
range|:
name|enrollments
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|XEnrollment
name|enrollment
init|=
name|request
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|==
literal|null
operator|||
operator|!
name|enrollment
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|request
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|courseId
argument_list|()
argument_list|)
condition|)
block|{
name|other
operator|++
expr_stmt|;
continue|continue;
block|}
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
name|CourseRequestMatcher
name|m
init|=
operator|new
name|CourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|info
argument_list|,
name|student
argument_list|,
name|offering
argument_list|,
name|request
argument_list|,
name|isConsentToDoCourse
argument_list|,
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|,
name|lookup
argument_list|,
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
argument_list|()
operator|.
name|match
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|match
operator|++
expr_stmt|;
name|enrl
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|res
operator|++
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|==
literal|null
condition|)
name|conNeed
operator|++
expr_stmt|;
block|}
name|tEnrl
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|tRes
operator|++
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|==
literal|null
condition|)
name|tConNeed
operator|++
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
operator|(
name|Set
argument_list|<
name|Long
argument_list|>
operator|)
name|section2students
operator|.
name|get
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|!=
literal|null
condition|)
for|for
control|(
name|XCourseRequest
name|request
range|:
name|enrollments
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|students
operator|.
name|contains
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|request
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|||
operator|!
name|request
operator|.
name|hasCourse
argument_list|(
name|courseId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
operator|||
operator|!
name|student
operator|.
name|canAssign
argument_list|(
name|request
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|checkOverrides
operator|&&
name|request
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|XOverride
name|override
init|=
name|request
operator|.
name|getOverride
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|override
operator|!=
literal|null
operator|&&
operator|!
name|override
operator|.
name|isApproved
argument_list|()
condition|)
continue|continue;
block|}
name|CourseRequestMatcher
name|m
init|=
operator|new
name|CourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|info
argument_list|,
name|student
argument_list|,
name|offering
argument_list|,
name|request
argument_list|,
name|isConsentToDoCourse
argument_list|,
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|,
name|lookup
argument_list|,
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
argument_list|()
operator|.
name|match
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|match
operator|++
expr_stmt|;
name|unasg
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|isAlternative
argument_list|()
operator|&&
name|request
operator|.
name|isPrimary
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|unasgPrim
operator|++
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|isWaitlist
argument_list|()
condition|)
name|wait
operator|++
expr_stmt|;
block|}
block|}
name|tUnasg
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|isAlternative
argument_list|()
operator|&&
name|request
operator|.
name|isPrimary
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|tUnasgPrim
operator|++
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|isWaitlist
argument_list|()
condition|)
name|tWait
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|match
operator|==
literal|0
condition|)
continue|continue;
name|e
operator|.
name|setLimit
argument_list|(
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setOther
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|e
operator|.
name|setAvailable
argument_list|(
name|section
operator|.
name|isCancelled
argument_list|()
operator|||
operator|!
name|section
operator|.
name|isEnabledForScheduling
argument_list|()
condition|?
literal|0
else|:
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|offering
operator|.
name|getUnreservedSectionSpace
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|,
name|enrollments
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getAvailable
argument_list|()
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
name|e
operator|.
name|setAvailable
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|e
operator|.
name|setProjection
argument_list|(
name|tEnrl
operator|+
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|expectations
operator|.
name|getExpectedSpace
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSnapshot
argument_list|(
name|snapshots
operator|.
name|get
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|e
operator|.
name|setReservation
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|e
operator|.
name|setWaitlist
argument_list|(
name|wait
argument_list|)
expr_stmt|;
name|e
operator|.
name|setUnassigned
argument_list|(
name|unasg
argument_list|)
expr_stmt|;
name|e
operator|.
name|setUnassignedPrimary
argument_list|(
name|unasgPrim
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalEnrollment
argument_list|(
name|tEnrl
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalReservation
argument_list|(
name|tRes
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalWaitlist
argument_list|(
name|tWait
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalUnassigned
argument_list|(
name|tUnasg
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalUnassignedPrimary
argument_list|(
name|tUnasgPrim
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConsentNeeded
argument_list|(
name|conNeed
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalConsentNeeded
argument_list|(
name|tConNeed
argument_list|)
expr_stmt|;
name|ClassAssignment
name|a
init|=
operator|new
name|ClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExternalId
argument_list|(
name|section
operator|.
name|getExternalId
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCancelled
argument_list|(
name|section
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|enrollments
operator|.
name|countEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
block|,
name|section
operator|.
name|getLimit
argument_list|()
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getNrRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|XRoom
name|rm
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|a
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getInstructors
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XInstructor
name|instructor
range|:
name|section
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|a
operator|.
name|addInstructor
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmail
argument_list|(
name|instructor
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getParentId
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|offering
operator|.
name|getSection
argument_list|(
name|section
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|course
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCredit
argument_list|(
name|subpart
operator|.
name|getCredit
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCreditRange
argument_list|(
name|subpart
operator|.
name|getCreditMin
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|subpart
operator|.
name|getCreditMax
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Float
name|creditOverride
init|=
name|section
operator|.
name|getCreditOverride
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|creditOverride
operator|!=
literal|null
condition|)
name|a
operator|.
name|setCredit
argument_list|(
name|FixedCreditUnitConfig
operator|.
name|formatCredit
argument_list|(
name|creditOverride
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|consent
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|.
name|getConsentLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|consent
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|consent
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setExpected
argument_list|(
name|overExp
operator|.
name|getExpected
argument_list|(
name|section
operator|.
name|getLimit
argument_list|()
argument_list|,
name|expectations
operator|.
name|getExpectedSpace
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setAssignment
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"find-enrollment-info"
return|;
block|}
specifier|public
specifier|static
class|class
name|FindEnrollmentInfoCourseMatcher
extends|extends
name|AbstractCourseMatcher
block|{
specifier|protected
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|Long
argument_list|>
name|iCoursesIcoordinate
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|Long
argument_list|>
name|iCoursesIcanApprove
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|iSubjectAreas
decl_stmt|;
specifier|protected
name|Query
name|iQuery
decl_stmt|;
specifier|protected
name|CourseLookup
name|iLookup
decl_stmt|;
specifier|public
name|FindEnrollmentInfoCourseMatcher
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|coursesIcoordinate
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|coursesIcanApprove
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|subjects
parameter_list|,
name|Query
name|query
parameter_list|,
name|CourseLookup
name|lookup
parameter_list|)
block|{
name|iCoursesIcoordinate
operator|=
name|coursesIcoordinate
expr_stmt|;
name|iCoursesIcanApprove
operator|=
name|coursesIcanApprove
expr_stmt|;
name|iSubjectAreas
operator|=
name|subjects
expr_stmt|;
name|iQuery
operator|=
name|query
expr_stmt|;
name|iLookup
operator|=
name|lookup
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCourseVisible
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
return|return
name|iCoursesIcoordinate
operator|==
literal|null
operator|||
name|iCoursesIcoordinate
operator|.
name|contains
argument_list|(
name|courseId
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isConsentToDoCourse
parameter_list|(
name|XCourse
name|course
parameter_list|)
block|{
return|return
name|iCoursesIcanApprove
operator|!=
literal|null
operator|&&
name|course
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
name|iCoursesIcanApprove
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasMatchingSubjectArea
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
return|return
name|iSubjectAreas
operator|==
literal|null
operator|||
name|iSubjectAreas
operator|.
name|contains
argument_list|(
name|subject
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|XCourseId
name|id
parameter_list|)
block|{
name|XCourse
name|course
init|=
operator|(
name|id
operator|instanceof
name|XCourse
condition|?
operator|(
name|XCourse
operator|)
name|id
else|:
name|getServer
argument_list|()
operator|.
name|getCourse
argument_list|(
name|id
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
return|return
name|course
operator|!=
literal|null
operator|&&
name|isCourseVisible
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|&&
name|hasMatchingSubjectArea
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
operator|&&
name|iQuery
operator|.
name|match
argument_list|(
operator|new
name|CourseInfoMatcher
argument_list|(
name|course
argument_list|,
name|isConsentToDoCourse
argument_list|(
name|course
argument_list|)
argument_list|,
name|iLookup
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

