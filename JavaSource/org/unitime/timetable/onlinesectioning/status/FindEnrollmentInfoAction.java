begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.3 (University Timetabling Application)  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|EnrollmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|CourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|StatusPageSuggestionsAction
operator|.
name|CourseInfoMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|StatusPageSuggestionsAction
operator|.
name|CourseRequestMatcher
import|;
end_import

begin_class
specifier|public
class|class
name|FindEnrollmentInfoAction
implements|implements
name|OnlineSectioningAction
argument_list|<
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Query
name|iQuery
decl_stmt|;
specifier|private
name|Integer
name|iLimit
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iCourseId
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|iCoursesIcoordinate
decl_stmt|,
name|iCoursesIcanApprove
decl_stmt|;
specifier|public
name|FindEnrollmentInfoAction
parameter_list|(
name|String
name|query
parameter_list|,
name|Long
name|courseId
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|coursesIcoordinage
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|coursesIcanApprove
parameter_list|)
block|{
name|iQuery
operator|=
operator|new
name|Query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|iCourseId
operator|=
name|courseId
expr_stmt|;
name|iCoursesIcanApprove
operator|=
name|coursesIcanApprove
expr_stmt|;
name|iCoursesIcoordinate
operator|=
name|coursesIcoordinage
expr_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"limit:[ ]?([0-9]*)"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|iLimit
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Query
name|query
parameter_list|()
block|{
return|return
name|iQuery
return|;
block|}
specifier|public
name|Integer
name|limit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|Long
name|courseId
parameter_list|()
block|{
return|return
name|iCourseId
return|;
block|}
specifier|public
name|boolean
name|isConsentToDoCourse
parameter_list|(
name|CourseInfo
name|course
parameter_list|)
block|{
return|return
name|iCoursesIcanApprove
operator|!=
literal|null
operator|&&
name|course
operator|.
name|getConsent
argument_list|()
operator|!=
literal|null
operator|&&
name|iCoursesIcanApprove
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isCourseVisible
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
return|return
name|iCoursesIcoordinate
operator|==
literal|null
operator|||
name|iCoursesIcoordinate
operator|.
name|contains
argument_list|(
name|courseId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
specifier|final
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|EnrollmentInfo
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|courseId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|matchingStudents
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|gEnrl
init|=
literal|0
decl_stmt|,
name|gWait
init|=
literal|0
decl_stmt|,
name|gRes
init|=
literal|0
decl_stmt|;
name|int
name|gtEnrl
init|=
literal|0
decl_stmt|,
name|gtWait
init|=
literal|0
decl_stmt|,
name|gtRes
init|=
literal|0
decl_stmt|;
name|int
name|gConNeed
init|=
literal|0
decl_stmt|,
name|gtConNeed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseInfo
name|info
range|:
name|server
operator|.
name|findCourses
argument_list|(
operator|new
name|OnlineSectioningServer
operator|.
name|CourseInfoMatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|CourseInfo
name|course
parameter_list|)
block|{
return|return
name|isCourseVisible
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|&&
name|query
argument_list|()
operator|.
name|match
argument_list|(
operator|new
name|CourseInfoMatcher
argument_list|(
name|helper
argument_list|,
name|course
argument_list|,
name|isConsentToDoCourse
argument_list|(
name|course
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
control|)
block|{
name|Course
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|info
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|boolean
name|isConsentToDoCourse
init|=
name|isConsentToDoCourse
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|EnrollmentInfo
name|e
init|=
operator|new
name|EnrollmentInfo
argument_list|()
decl_stmt|;
name|e
operator|.
name|setCourseId
argument_list|(
name|info
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setOfferingId
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSubject
argument_list|(
name|info
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCourseNbr
argument_list|(
name|info
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTitle
argument_list|(
name|info
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConsent
argument_list|(
name|info
operator|.
name|getConsentAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|match
init|=
literal|0
decl_stmt|,
name|nomatch
init|=
literal|0
decl_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|,
name|wait
init|=
literal|0
decl_stmt|,
name|res
init|=
literal|0
decl_stmt|;
name|int
name|tEnrl
init|=
literal|0
decl_stmt|,
name|tWait
init|=
literal|0
decl_stmt|,
name|tRes
init|=
literal|0
decl_stmt|;
name|int
name|conNeed
init|=
literal|0
decl_stmt|,
name|tConNeed
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|addedStudents
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequest
name|request
range|:
name|course
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|students
operator|.
name|add
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|addedStudents
operator|.
name|add
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getAssignment
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
name|course
operator|.
name|getId
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|CourseRequestMatcher
name|m
init|=
operator|new
name|CourseRequestMatcher
argument_list|(
name|helper
argument_list|,
name|server
argument_list|,
name|info
argument_list|,
name|request
argument_list|,
name|isConsentToDoCourse
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
argument_list|()
operator|.
name|match
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|matchingStudents
operator|.
name|add
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|match
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|enrl
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|res
operator|++
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getConsent
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|==
literal|null
condition|)
name|conNeed
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|m
operator|.
name|student
argument_list|()
operator|.
name|canAssign
argument_list|(
name|m
operator|.
name|request
argument_list|()
argument_list|)
condition|)
block|{
name|wait
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|nomatch
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tEnrl
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|tRes
operator|++
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getConsent
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|==
literal|null
condition|)
name|tConNeed
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|m
operator|.
name|student
argument_list|()
operator|.
name|canAssign
argument_list|(
name|m
operator|.
name|request
argument_list|()
argument_list|)
condition|)
block|{
name|tWait
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|match
operator|==
literal|0
condition|)
block|{
name|students
operator|.
name|removeAll
argument_list|(
name|addedStudents
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|gEnrl
operator|+=
name|enrl
expr_stmt|;
name|gWait
operator|+=
name|wait
expr_stmt|;
name|gRes
operator|+=
name|res
expr_stmt|;
name|gConNeed
operator|+=
name|conNeed
expr_stmt|;
name|gtEnrl
operator|+=
name|tEnrl
expr_stmt|;
name|gtWait
operator|+=
name|tWait
expr_stmt|;
name|gtRes
operator|+=
name|tRes
expr_stmt|;
name|gtConNeed
operator|+=
name|tConNeed
expr_stmt|;
name|int
name|limit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|config
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
block|{
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
else|else
block|{
name|limit
operator|+=
name|config
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
block|}
name|e
operator|.
name|setLimit
argument_list|(
name|course
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setProjection
argument_list|(
name|course
operator|.
name|getProjected
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|av
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0.0
argument_list|,
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getUnreservedSpace
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|av
operator|>
name|course
operator|.
name|getLimit
argument_list|()
operator|-
name|course
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
condition|)
name|av
operator|=
name|course
operator|.
name|getLimit
argument_list|()
operator|-
name|course
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|av
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
name|av
operator|=
operator|-
literal|1
expr_stmt|;
name|e
operator|.
name|setAvailable
argument_list|(
name|av
argument_list|)
expr_stmt|;
if|if
condition|(
name|av
operator|>=
literal|0
condition|)
block|{
name|int
name|other
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Course
name|c
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
operator|!
name|c
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
name|other
operator|+=
name|c
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|e
operator|.
name|setOther
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|course
operator|.
name|getLimit
argument_list|()
operator|-
name|course
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
operator|-
name|av
argument_list|,
name|other
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|lim
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Config
name|f
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|lim
operator|<
literal|0
operator|||
name|f
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
name|lim
operator|=
operator|-
literal|1
expr_stmt|;
else|else
name|lim
operator|+=
name|f
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lim
operator|>=
literal|0
operator|&&
name|lim
operator|<
name|course
operator|.
name|getLimit
argument_list|()
condition|)
name|e
operator|.
name|setOther
argument_list|(
name|e
operator|.
name|getOther
argument_list|()
operator|+
name|course
operator|.
name|getLimit
argument_list|()
operator|-
name|limit
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|e
operator|.
name|setReservation
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|e
operator|.
name|setWaitlist
argument_list|(
name|wait
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalEnrollment
argument_list|(
name|tEnrl
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalReservation
argument_list|(
name|tRes
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalWaitlist
argument_list|(
name|tWait
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConsentNeeded
argument_list|(
name|conNeed
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalConsentNeeded
argument_list|(
name|tConNeed
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
argument_list|()
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|>=
name|limit
argument_list|()
condition|)
break|break;
block|}
comment|// if students.size()> 0) {
name|EnrollmentInfo
name|t
init|=
operator|new
name|EnrollmentInfo
argument_list|()
decl_stmt|;
name|t
operator|.
name|setSubject
argument_list|(
name|MSG
operator|.
name|total
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setCourseNbr
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|t
operator|.
name|setLimit
argument_list|(
name|students
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setAvailable
argument_list|(
name|matchingStudents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setEnrollment
argument_list|(
name|gEnrl
argument_list|)
expr_stmt|;
name|t
operator|.
name|setReservation
argument_list|(
name|gRes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setWaitlist
argument_list|(
name|gWait
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalEnrollment
argument_list|(
name|gtEnrl
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalReservation
argument_list|(
name|gtRes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalWaitlist
argument_list|(
name|gtWait
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConsentNeeded
argument_list|(
name|gConNeed
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalConsentNeeded
argument_list|(
name|gtConNeed
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseInfo
name|info
init|=
name|server
operator|.
name|getCourseInfo
argument_list|(
name|courseId
argument_list|()
argument_list|)
decl_stmt|;
name|Course
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|courseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
operator|||
name|course
operator|==
literal|null
condition|)
return|return
name|ret
return|;
name|boolean
name|isConsentToDoCourse
init|=
name|isConsentToDoCourse
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
name|server
operator|.
name|getSections
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sections
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Section
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Config
name|c1
parameter_list|,
name|Config
name|c2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|c1
operator|.
name|getName
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|c2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|c1
operator|.
name|getId
argument_list|()
argument_list|,
name|c2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isParent
parameter_list|(
name|Subpart
name|s1
parameter_list|,
name|Subpart
name|s2
parameter_list|)
block|{
name|Subpart
name|p1
init|=
name|s1
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|isParent
argument_list|(
name|p1
argument_list|,
name|s2
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Subpart
name|s1
parameter_list|,
name|Subpart
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|s1
operator|.
name|getConfig
argument_list|()
argument_list|,
name|s2
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|isParent
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|isParent
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|cmp
operator|=
name|s1
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|s1
operator|.
name|getId
argument_list|()
argument_list|,
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Section
name|s1
parameter_list|,
name|Section
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|.
name|getSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|s2
operator|.
name|getSubpart
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|s1
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|s1
operator|.
name|getParent
argument_list|()
argument_list|,
name|s2
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
try|try
block|{
name|int
name|cmp
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|int
name|cmp
init|=
operator|(
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|s1
operator|.
name|getId
argument_list|()
argument_list|,
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
name|Section
name|x
init|=
name|s1
decl_stmt|;
while|while
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isParent
argument_list|(
name|s2
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|x
operator|.
name|getSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|Section
name|s
init|=
name|s2
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|int
name|cmp
init|=
name|compare
argument_list|(
name|x
argument_list|,
name|s
argument_list|)
decl_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|x
operator|.
name|equals
argument_list|(
name|s1
argument_list|)
condition|?
operator|-
literal|1
else|:
name|compare
argument_list|(
name|x
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|s
operator|.
name|getSubpart
argument_list|()
argument_list|)
else|:
name|cmp
operator|)
return|;
block|}
name|x
operator|=
name|x
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|x
operator|=
name|s2
expr_stmt|;
while|while
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isParent
argument_list|(
name|s1
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|x
operator|.
name|getSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|Section
name|s
init|=
name|s1
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|int
name|cmp
init|=
name|compare
argument_list|(
name|s
argument_list|,
name|x
argument_list|)
decl_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|x
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|?
literal|1
else|:
name|compare
argument_list|(
name|s
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|x
operator|.
name|getSubpart
argument_list|()
argument_list|)
else|:
name|cmp
operator|)
return|;
block|}
name|x
operator|=
name|x
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|int
name|cmp
init|=
name|compare
argument_list|(
name|s1
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|s2
operator|.
name|getSubpart
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
try|try
block|{
name|cmp
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|cmp
operator|=
operator|(
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|s1
operator|.
name|getId
argument_list|()
argument_list|,
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|sections
control|)
block|{
name|EnrollmentInfo
name|e
init|=
operator|new
name|EnrollmentInfo
argument_list|()
decl_stmt|;
name|e
operator|.
name|setCourseId
argument_list|(
name|info
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setOfferingId
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSubject
argument_list|(
name|info
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCourseNbr
argument_list|(
name|info
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTitle
argument_list|(
name|info
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConsent
argument_list|(
name|info
operator|.
name|getConsentAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConfig
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConfigId
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSubpart
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSubpartId
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setClazz
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|courseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setClazzId
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Section
name|parent
init|=
name|section
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|setSubpart
argument_list|(
literal|"&nbsp;&nbsp;"
operator|+
name|e
operator|.
name|getSubpart
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setClazz
argument_list|(
literal|"&nbsp;&nbsp;"
operator|+
name|e
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|int
name|match
init|=
literal|0
decl_stmt|,
name|nomatch
init|=
literal|0
decl_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|,
name|wait
init|=
literal|0
decl_stmt|,
name|res
init|=
literal|0
decl_stmt|;
name|int
name|tEnrl
init|=
literal|0
decl_stmt|,
name|tWait
init|=
literal|0
decl_stmt|,
name|tRes
init|=
literal|0
decl_stmt|;
name|int
name|conNeed
init|=
literal|0
decl_stmt|,
name|tConNeed
init|=
literal|0
decl_stmt|;
name|int
name|other
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|section
operator|.
name|getEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
name|course
operator|.
name|getId
argument_list|()
condition|)
block|{
name|other
operator|++
expr_stmt|;
continue|continue;
block|}
name|CourseRequestMatcher
name|m
init|=
operator|new
name|CourseRequestMatcher
argument_list|(
name|helper
argument_list|,
name|server
argument_list|,
name|info
argument_list|,
operator|(
name|CourseRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
argument_list|,
name|isConsentToDoCourse
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
argument_list|()
operator|.
name|match
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|match
operator|++
expr_stmt|;
name|enrl
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|res
operator|++
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getConsent
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|==
literal|null
condition|)
name|conNeed
operator|++
expr_stmt|;
block|}
else|else
block|{
name|nomatch
operator|++
expr_stmt|;
block|}
name|tEnrl
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|tRes
operator|++
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getConsent
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|==
literal|null
condition|)
name|tConNeed
operator|++
expr_stmt|;
block|}
for|for
control|(
name|CourseRequest
name|request
range|:
name|course
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
operator|||
operator|!
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|canAssign
argument_list|(
name|request
argument_list|)
condition|)
continue|continue;
name|CourseRequestMatcher
name|m
init|=
operator|new
name|CourseRequestMatcher
argument_list|(
name|helper
argument_list|,
name|server
argument_list|,
name|info
argument_list|,
name|request
argument_list|,
name|isConsentToDoCourse
argument_list|)
decl_stmt|;
name|boolean
name|hasEnrollment
init|=
literal|true
decl_stmt|;
name|values
label|:
for|for
control|(
name|Enrollment
name|en
range|:
name|request
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|en
operator|.
name|getSections
argument_list|()
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Request
name|x
range|:
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|x
operator|.
name|equals
argument_list|(
name|request
argument_list|)
operator|&&
name|x
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getAssignment
argument_list|()
operator|.
name|isOverlapping
argument_list|(
name|en
argument_list|)
condition|)
block|{
continue|continue
name|values
continue|;
block|}
block|}
name|hasEnrollment
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|hasEnrollment
condition|)
continue|continue;
if|if
condition|(
name|query
argument_list|()
operator|.
name|match
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|match
operator|++
expr_stmt|;
name|wait
operator|++
expr_stmt|;
block|}
else|else
block|{
name|nomatch
operator|++
expr_stmt|;
block|}
name|tWait
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|match
operator|==
literal|0
condition|)
continue|continue;
name|e
operator|.
name|setLimit
argument_list|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|?
name|section
operator|.
name|getLimit
argument_list|()
else|:
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setOther
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|e
operator|.
name|setAvailable
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0.0
argument_list|,
name|section
operator|.
name|getUnreservedSpace
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getAvailable
argument_list|()
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
name|e
operator|.
name|setAvailable
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|e
operator|.
name|setProjection
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|tEnrl
operator|+
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|e
operator|.
name|setReservation
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|e
operator|.
name|setWaitlist
argument_list|(
name|wait
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalEnrollment
argument_list|(
name|tEnrl
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalReservation
argument_list|(
name|tRes
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalWaitlist
argument_list|(
name|tWait
argument_list|)
expr_stmt|;
name|e
operator|.
name|setConsentNeeded
argument_list|(
name|conNeed
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTotalConsentNeeded
argument_list|(
name|tConNeed
argument_list|)
expr_stmt|;
name|ClassAssignment
name|a
init|=
operator|new
name|ClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
block|,
name|section
operator|.
name|getLimit
argument_list|()
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|RoomLocation
argument_list|>
name|i
init|=
name|section
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomLocation
name|rm
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|a
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|instructors
init|=
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|instructor
range|:
name|instructors
control|)
block|{
name|String
index|[]
name|nameEmail
init|=
name|instructor
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|a
operator|.
name|addInstructor
argument_list|(
name|nameEmail
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmailr
argument_list|(
name|nameEmail
operator|.
name|length
operator|<
literal|2
condition|?
literal|""
else|:
name|nameEmail
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|section
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|consent
init|=
name|server
operator|.
name|getCourseInfo
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getConsent
argument_list|()
decl_stmt|;
if|if
condition|(
name|consent
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|consent
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setExpected
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setAssignment
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"find-enrollment-infos"
return|;
block|}
block|}
end_class

end_unit

