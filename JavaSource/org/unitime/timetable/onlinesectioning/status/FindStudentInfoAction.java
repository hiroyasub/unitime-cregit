begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
operator|.
name|SectioningStatusFilterBox
operator|.
name|SectioningStatusFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|StudentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentSectioningStatusDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|AbstractStudentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XAreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
operator|.
name|XPreference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XFreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|DatabaseServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|FindEnrollmentInfoAction
operator|.
name|FindEnrollmentInfoCourseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|StatusPageSuggestionsAction
operator|.
name|CourseRequestMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|StatusPageSuggestionsAction
operator|.
name|StudentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolver
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|FindStudentInfoAction
implements|implements
name|OnlineSectioningAction
argument_list|<
name|List
argument_list|<
name|StudentInfo
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
name|Query
name|iQuery
decl_stmt|;
specifier|protected
name|Integer
name|iLimit
init|=
literal|null
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|Long
argument_list|>
name|iCoursesIcoordinate
decl_stmt|,
name|iCoursesIcanApprove
decl_stmt|,
name|iMyStudents
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|iSubjectAreas
decl_stmt|;
specifier|protected
name|boolean
name|iCanShowExtIds
init|=
literal|false
decl_stmt|,
name|iCanRegister
init|=
literal|false
decl_stmt|,
name|iCanUseAssistant
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iIsAdmin
init|=
literal|false
decl_stmt|,
name|iIsAdvisor
init|=
literal|false
decl_stmt|,
name|iCanEditMyStudents
init|=
literal|false
decl_stmt|,
name|iCanEditOtherStudents
init|=
literal|false
decl_stmt|;
specifier|public
name|FindStudentInfoAction
name|withParams
parameter_list|(
name|String
name|query
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|coursesIcoordinage
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|coursesIcanApprove
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|myStudents
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|subjects
parameter_list|,
name|boolean
name|canShowExtIds
parameter_list|,
name|boolean
name|canRegister
parameter_list|,
name|boolean
name|canUseAssistant
parameter_list|)
block|{
name|iQuery
operator|=
operator|new
name|Query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|iCoursesIcanApprove
operator|=
name|coursesIcanApprove
expr_stmt|;
name|iCoursesIcoordinate
operator|=
name|coursesIcoordinage
expr_stmt|;
name|iMyStudents
operator|=
name|myStudents
expr_stmt|;
name|iCanShowExtIds
operator|=
name|canShowExtIds
expr_stmt|;
name|iCanRegister
operator|=
name|canRegister
expr_stmt|;
name|iCanUseAssistant
operator|=
name|canUseAssistant
expr_stmt|;
name|iSubjectAreas
operator|=
name|subjects
expr_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"limit:[ ]?([0-9]*)"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|iLimit
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|FindStudentInfoAction
name|withPermissions
parameter_list|(
name|boolean
name|isAdmin
parameter_list|,
name|boolean
name|isAdvisor
parameter_list|,
name|boolean
name|canEditMyStudents
parameter_list|,
name|boolean
name|canEditOtherStudents
parameter_list|)
block|{
name|iIsAdmin
operator|=
name|isAdmin
expr_stmt|;
name|iIsAdvisor
operator|=
name|isAdvisor
expr_stmt|;
name|iCanEditMyStudents
operator|=
name|canEditMyStudents
expr_stmt|;
name|iCanEditOtherStudents
operator|=
name|canEditOtherStudents
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|protected
name|SectioningStatusFilterRpcRequest
name|iFilter
init|=
literal|null
decl_stmt|;
specifier|public
name|FindStudentInfoAction
name|withFilter
parameter_list|(
name|SectioningStatusFilterRpcRequest
name|filter
parameter_list|)
block|{
name|iFilter
operator|=
name|filter
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Query
name|query
parameter_list|()
block|{
return|return
name|iQuery
return|;
block|}
specifier|public
name|Integer
name|limit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|boolean
name|isConsentToDoCourse
parameter_list|(
name|XCourse
name|course
parameter_list|)
block|{
return|return
name|iCoursesIcanApprove
operator|!=
literal|null
operator|&&
name|course
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
name|iCoursesIcanApprove
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isCourseVisible
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
return|return
name|iCoursesIcoordinate
operator|==
literal|null
operator|||
name|iCoursesIcoordinate
operator|.
name|contains
argument_list|(
name|courseId
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasMatchingSubjectArea
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
return|return
name|iSubjectAreas
operator|==
literal|null
operator|||
name|iSubjectAreas
operator|.
name|contains
argument_list|(
name|subject
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isMyStudent
parameter_list|(
name|XStudentId
name|student
parameter_list|)
block|{
return|return
name|iMyStudents
operator|!=
literal|null
operator|&&
name|iMyStudents
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isCanSelect
parameter_list|(
name|XStudentId
name|student
parameter_list|)
block|{
if|if
condition|(
name|iIsAdmin
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iIsAdvisor
condition|)
block|{
if|if
condition|(
name|iCanEditOtherStudents
operator|||
operator|(
name|iCanEditMyStudents
operator|&&
name|isMyStudent
argument_list|(
name|student
argument_list|)
operator|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|StudentInfo
argument_list|>
name|execute
parameter_list|(
specifier|final
name|OnlineSectioningServer
name|server
parameter_list|,
specifier|final
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|StudentInfo
argument_list|>
name|students
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|StudentInfo
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|gEnrl
init|=
literal|0
decl_stmt|,
name|gWait
init|=
literal|0
decl_stmt|,
name|gRes
init|=
literal|0
decl_stmt|,
name|gUnasg
init|=
literal|0
decl_stmt|;
name|int
name|gtEnrl
init|=
literal|0
decl_stmt|,
name|gtWait
init|=
literal|0
decl_stmt|,
name|gtRes
init|=
literal|0
decl_stmt|,
name|gtUnasg
init|=
literal|0
decl_stmt|;
name|int
name|gConNeed
init|=
literal|0
decl_stmt|,
name|gtConNeed
init|=
literal|0
decl_stmt|,
name|gOvrNeed
init|=
literal|0
decl_stmt|,
name|gtOvrNeed
init|=
literal|0
decl_stmt|;
name|int
name|gDist
init|=
literal|0
decl_stmt|,
name|gtDist
init|=
literal|0
decl_stmt|,
name|gNrDC
init|=
literal|0
decl_stmt|,
name|gtNrDC
init|=
literal|0
decl_stmt|,
name|gShr
init|=
literal|0
decl_stmt|,
name|gtShr
init|=
literal|0
decl_stmt|;
name|int
name|gFre
init|=
literal|0
decl_stmt|,
name|gtFre
init|=
literal|0
decl_stmt|,
name|gPIM
init|=
literal|0
decl_stmt|,
name|gtPIM
init|=
literal|0
decl_stmt|,
name|gPSec
init|=
literal|0
decl_stmt|,
name|gtPSec
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|unassigned
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|assigned
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|AcademicSessionInfo
name|session
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|regStates
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|assStates
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Session
name|dbSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StudentSectioningStatus
name|status
range|:
name|StudentSectioningStatusDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|StudentSectioningStatus
operator|.
name|hasEffectiveOption
argument_list|(
name|status
argument_list|,
name|dbSession
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|enabled
argument_list|)
condition|)
name|assStates
operator|.
name|add
argument_list|(
name|status
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|StudentSectioningStatus
operator|.
name|hasEffectiveOption
argument_list|(
name|status
argument_list|,
name|dbSession
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regenabled
argument_list|)
condition|)
name|regStates
operator|.
name|add
argument_list|(
name|status
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DistanceMetric
name|dm
init|=
name|server
operator|.
name|getDistanceMetric
argument_list|()
decl_stmt|;
name|boolean
name|solver
init|=
operator|(
name|server
operator|instanceof
name|StudentSolver
operator|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|solver
condition|)
name|studentIds
operator|=
operator|(
name|iFilter
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|createAction
argument_list|(
name|SectioningStatusFilterAction
operator|.
name|class
argument_list|)
operator|.
name|forRequest
argument_list|(
name|iFilter
argument_list|)
operator|.
name|getStudentIds
argument_list|(
name|server
argument_list|,
name|helper
argument_list|)
operator|)
expr_stmt|;
for|for
control|(
name|XCourseId
name|info
range|:
name|findCourses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|)
control|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|info
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|course
init|=
name|offering
operator|.
name|getCourse
argument_list|(
name|info
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|XEnrollments
name|enrollments
init|=
name|server
operator|.
name|getEnrollments
argument_list|(
name|info
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollments
operator|==
literal|null
condition|)
continue|continue;
name|boolean
name|isConsentToDoCourse
init|=
name|isConsentToDoCourse
argument_list|(
name|course
argument_list|)
decl_stmt|;
for|for
control|(
name|XCourseRequest
name|request
range|:
name|enrollments
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasCourse
argument_list|(
name|info
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|request
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|studentIds
operator|!=
literal|null
operator|&&
operator|!
name|studentIds
operator|.
name|contains
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
name|CourseRequestMatcher
name|m
init|=
operator|new
name|CourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|course
argument_list|,
name|student
argument_list|,
name|offering
argument_list|,
name|request
argument_list|,
name|isConsentToDoCourse
argument_list|,
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|,
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
argument_list|()
operator|.
name|match
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|StudentInfo
name|s
init|=
name|students
operator|.
name|get
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
operator|new
name|StudentInfo
argument_list|()
expr_stmt|;
name|students
operator|.
name|put
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|s
operator|.
name|setStudent
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setSessionId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanShowExternalId
argument_list|(
name|iCanShowExtIds
argument_list|)
expr_stmt|;
name|String
name|status
init|=
operator|(
name|student
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
else|:
name|student
operator|.
name|getStatus
argument_list|()
operator|)
decl_stmt|;
name|st
operator|.
name|setCanRegister
argument_list|(
name|iCanRegister
operator|&&
operator|(
name|status
operator|==
literal|null
operator|||
name|regStates
operator|.
name|contains
argument_list|(
name|status
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanUseAssistant
argument_list|(
name|iCanUseAssistant
operator|&&
operator|(
name|status
operator|==
literal|null
operator|||
name|assStates
operator|.
name|contains
argument_list|(
name|status
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanSelect
argument_list|(
name|isCanSelect
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XAreaClassificationMajor
name|acm
range|:
name|student
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|acm
operator|.
name|getClassification
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addMajor
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|acc
range|:
name|student
operator|.
name|getAccomodations
argument_list|()
control|)
block|{
name|st
operator|.
name|addAccommodation
argument_list|(
name|acc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|XStudent
operator|.
name|XGroup
name|gr
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|st
operator|.
name|addGroup
argument_list|(
name|gr
operator|.
name|getType
argument_list|()
argument_list|,
name|gr
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|gr
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|tEnrl
init|=
literal|0
decl_stmt|,
name|tWait
init|=
literal|0
decl_stmt|,
name|tRes
init|=
literal|0
decl_stmt|,
name|tConNeed
init|=
literal|0
decl_stmt|,
name|tReq
init|=
literal|0
decl_stmt|,
name|tUnasg
init|=
literal|0
decl_stmt|,
name|tOvrNeed
init|=
literal|0
decl_stmt|,
name|ovrNeed
init|=
literal|0
decl_stmt|;
name|float
name|tCred
init|=
literal|0f
decl_stmt|;
name|int
name|nrDisCnf
init|=
literal|0
decl_stmt|,
name|maxDist
init|=
literal|0
decl_stmt|,
name|share
init|=
literal|0
decl_stmt|;
name|int
name|ftShare
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Float
argument_list|>
name|minsTot
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Float
argument_list|>
name|maxsTot
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Float
argument_list|>
name|mins
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Float
argument_list|>
name|maxs
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|nrCoursesTot
init|=
literal|0
decl_stmt|,
name|nrCourses
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
name|Float
name|min
init|=
literal|null
decl_stmt|,
name|max
init|=
literal|null
decl_stmt|;
name|Float
name|minTot
init|=
literal|null
decl_stmt|,
name|maxTot
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XCourseId
name|courseId
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|XCourse
name|c
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|courseId
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
if|if
condition|(
name|minTot
operator|==
literal|null
operator|||
name|minTot
operator|>
name|c
operator|.
name|getMinCredit
argument_list|()
condition|)
name|minTot
operator|=
name|c
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
if|if
condition|(
name|maxTot
operator|==
literal|null
operator|||
name|maxTot
operator|<
name|c
operator|.
name|getMaxCredit
argument_list|()
condition|)
name|maxTot
operator|=
name|c
operator|.
name|getMaxCredit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cr
operator|.
name|isOverridePending
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|gtOvrNeed
operator|++
expr_stmt|;
name|tOvrNeed
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|query
argument_list|()
operator|.
name|match
argument_list|(
operator|new
name|CourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|c
argument_list|,
name|student
argument_list|,
name|server
operator|.
name|getOffering
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
argument_list|,
name|cr
argument_list|,
name|isConsentToDoCourse
argument_list|(
name|c
argument_list|)
argument_list|,
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|,
name|server
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
if|if
condition|(
name|min
operator|==
literal|null
operator|||
name|min
operator|>
name|c
operator|.
name|getMinCredit
argument_list|()
condition|)
name|min
operator|=
name|c
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
if|if
condition|(
name|max
operator|==
literal|null
operator|||
name|max
operator|<
name|c
operator|.
name|getMaxCredit
argument_list|()
condition|)
name|max
operator|=
name|c
operator|.
name|getMaxCredit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cr
operator|.
name|isOverridePending
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|gOvrNeed
operator|++
expr_stmt|;
name|ovrNeed
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|minTot
operator|!=
literal|null
condition|)
block|{
name|minsTot
operator|.
name|add
argument_list|(
name|minTot
argument_list|)
expr_stmt|;
name|maxsTot
operator|.
name|add
argument_list|(
name|maxTot
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
condition|)
name|nrCoursesTot
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
name|mins
operator|.
name|add
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|maxs
operator|.
name|add
argument_list|(
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
condition|)
name|nrCourses
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
condition|)
name|tReq
operator|++
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|student
operator|.
name|canAssign
argument_list|(
name|cr
argument_list|)
condition|)
block|{
name|tUnasg
operator|++
expr_stmt|;
name|gtUnasg
operator|++
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|isWaitlist
argument_list|()
condition|)
block|{
name|tWait
operator|++
expr_stmt|;
name|gtWait
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|tEnrl
operator|++
expr_stmt|;
name|gtEnrl
operator|++
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tRes
operator|++
expr_stmt|;
name|gtRes
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|==
literal|null
condition|)
block|{
name|XCourse
name|i
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
operator|&&
name|i
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tConNeed
operator|++
expr_stmt|;
name|gtConNeed
operator|++
expr_stmt|;
block|}
block|}
name|XOffering
name|o
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|XConfig
name|g
init|=
operator|(
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|o
operator|.
name|getConfig
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getConfigId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|g
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XSubpart
name|xs
range|:
name|g
operator|.
name|getSubparts
argument_list|()
control|)
block|{
name|tCred
operator|+=
name|xs
operator|.
name|getCreditValue
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|getInstructionalMethod
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|g
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getDefaultInstructionalMethod
argument_list|()
argument_list|)
condition|)
name|s
operator|.
name|addIMTotalCredit
argument_list|(
name|g
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|xs
operator|.
name|getCreditValue
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|o
operator|.
name|getSections
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|XRequest
name|q
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|q
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|otherEnrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|q
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherEnrollment
operator|==
literal|null
condition|)
continue|continue;
name|XOffering
name|otherOffering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|otherEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|otherSection
range|:
name|otherOffering
operator|.
name|getSections
argument_list|(
name|otherEnrollment
argument_list|)
control|)
block|{
if|if
condition|(
name|otherSection
operator|.
name|equals
argument_list|(
name|section
argument_list|)
operator|||
name|otherSection
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|otherSection
operator|.
name|isDistanceConflict
argument_list|(
name|student
argument_list|,
name|section
argument_list|,
name|dm
argument_list|)
condition|)
block|{
name|nrDisCnf
operator|++
expr_stmt|;
name|gtNrDC
operator|++
expr_stmt|;
name|int
name|d
init|=
name|otherSection
operator|.
name|getDistanceInMinutes
argument_list|(
name|section
argument_list|,
name|dm
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>
name|maxDist
condition|)
name|maxDist
operator|=
name|d
expr_stmt|;
if|if
condition|(
name|d
operator|>
name|gtDist
condition|)
name|gtDist
operator|=
name|d
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|otherSection
operator|.
name|getTime
argument_list|()
argument_list|)
operator|&&
operator|!
name|section
operator|.
name|isToIgnoreStudentConflictsWith
argument_list|(
name|o
operator|.
name|getDistributions
argument_list|()
argument_list|,
name|otherSection
operator|.
name|getSectionId
argument_list|()
argument_list|)
operator|&&
name|section
operator|.
name|getSectionId
argument_list|()
operator|<
name|otherSection
operator|.
name|getSectionId
argument_list|()
condition|)
block|{
name|share
operator|+=
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|share
argument_list|(
name|otherSection
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|gtShr
operator|+=
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|share
argument_list|(
name|otherSection
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|q
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|ft
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|q
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|ftShare
operator|+=
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|share
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|gtFre
operator|+=
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|share
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|student
operator|.
name|isMaxCreditOverridePending
argument_list|()
condition|)
block|{
if|if
condition|(
name|nrCourses
operator|==
name|nrCoursesTot
condition|)
block|{
name|gOvrNeed
operator|++
expr_stmt|;
name|ovrNeed
operator|++
expr_stmt|;
block|}
name|gtOvrNeed
operator|++
expr_stmt|;
name|tOvrNeed
operator|++
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|mins
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|maxs
argument_list|)
expr_stmt|;
name|float
name|min
init|=
literal|0f
decl_stmt|,
name|max
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrCourses
condition|;
name|i
operator|++
control|)
block|{
name|min
operator|+=
name|mins
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|max
operator|+=
name|maxs
operator|.
name|get
argument_list|(
name|maxs
operator|.
name|size
argument_list|()
operator|-
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|minsTot
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|maxsTot
argument_list|)
expr_stmt|;
name|float
name|minTot
init|=
literal|0f
decl_stmt|,
name|maxTot
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrCoursesTot
condition|;
name|i
operator|++
control|)
block|{
name|minTot
operator|+=
name|minsTot
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|maxTot
operator|+=
name|maxsTot
operator|.
name|get
argument_list|(
name|maxsTot
operator|.
name|size
argument_list|()
operator|-
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|setRequestCredit
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalRequestCredit
argument_list|(
name|minTot
argument_list|,
name|maxTot
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalEnrollment
argument_list|(
name|tEnrl
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalReservation
argument_list|(
name|tRes
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalWaitlist
argument_list|(
name|tWait
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalUnassigned
argument_list|(
name|tUnasg
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalConsentNeeded
argument_list|(
name|tConNeed
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalOverrideNeeded
argument_list|(
name|tOvrNeed
argument_list|)
expr_stmt|;
name|s
operator|.
name|setEnrollment
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setReservation
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setWaitlist
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setUnassigned
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setConsentNeeded
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setOverrideNeeded
argument_list|(
name|ovrNeed
argument_list|)
expr_stmt|;
name|s
operator|.
name|setRequested
argument_list|(
name|tReq
argument_list|)
expr_stmt|;
name|s
operator|.
name|setStatus
argument_list|(
name|student
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
else|:
name|student
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setEmailDate
argument_list|(
name|student
operator|.
name|getEmailTimeStamp
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|student
operator|.
name|getEmailTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setCredit
argument_list|(
literal|0f
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalCredit
argument_list|(
name|tCred
argument_list|)
expr_stmt|;
name|s
operator|.
name|setNote
argument_list|(
name|student
operator|.
name|hasLastNote
argument_list|()
condition|?
name|student
operator|.
name|getLastNote
argument_list|()
operator|.
name|getNote
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|s
operator|.
name|setNrDistanceConflicts
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLongestDistanceMinutes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setOverlappingMinutes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalNrDistanceConflicts
argument_list|(
name|nrDisCnf
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalLongestDistanceMinutes
argument_list|(
name|maxDist
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalOverlappingMinutes
argument_list|(
name|share
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFreeTimeOverlappingMins
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalFreeTimeOverlappingMins
argument_list|(
name|ftShare
argument_list|)
expr_stmt|;
name|s
operator|.
name|setPrefInstrMethConflict
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalPrefInstrMethConflict
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setPrefSectionConflict
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTotalPrefSectionConflict
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|assigned
operator|.
name|add
argument_list|(
name|m
operator|.
name|request
argument_list|()
operator|.
name|getRequestId
argument_list|()
argument_list|)
condition|)
block|{
name|s
operator|.
name|setEnrollment
argument_list|(
name|s
operator|.
name|getEnrollment
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gEnrl
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|setReservation
argument_list|(
name|s
operator|.
name|getReservation
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gRes
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getConsentLabel
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|==
literal|null
condition|)
block|{
name|s
operator|.
name|setConsentNeeded
argument_list|(
name|s
operator|.
name|getConsentNeeded
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gConNeed
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|getEnrolledDate
argument_list|()
operator|==
literal|null
condition|)
name|s
operator|.
name|setEnrolledDate
argument_list|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|after
argument_list|(
name|s
operator|.
name|getEnrolledDate
argument_list|()
argument_list|)
condition|)
name|s
operator|.
name|setEnrolledDate
argument_list|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|getApprovedDate
argument_list|()
operator|==
literal|null
condition|)
name|s
operator|.
name|setApprovedDate
argument_list|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|after
argument_list|(
name|s
operator|.
name|getApprovedDate
argument_list|()
argument_list|)
condition|)
name|s
operator|.
name|setApprovedDate
argument_list|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|XOffering
name|o
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|XConfig
name|g
init|=
operator|(
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|o
operator|.
name|getConfig
argument_list|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getConfigId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|g
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XSubpart
name|xs
range|:
name|g
operator|.
name|getSubparts
argument_list|()
control|)
block|{
name|s
operator|.
name|setCredit
argument_list|(
name|s
operator|.
name|getCredit
argument_list|()
operator|+
name|xs
operator|.
name|getCreditValue
argument_list|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|getInstructionalMethod
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|g
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getDefaultInstructionalMethod
argument_list|()
argument_list|)
condition|)
name|s
operator|.
name|addIMCredit
argument_list|(
name|g
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|xs
operator|.
name|getCreditValue
argument_list|(
name|m
operator|.
name|enrollment
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|XPreference
argument_list|>
name|pref
init|=
name|m
operator|.
name|request
argument_list|()
operator|.
name|getPreferences
argument_list|(
name|m
operator|.
name|enrollment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasIm
init|=
literal|false
decl_stmt|;
name|boolean
name|im
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allSubparts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|selectedSubparts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XPreference
name|p
range|:
name|pref
control|)
block|{
switch|switch
condition|(
name|p
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|INSTR_METHOD
case|:
name|hasIm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|getInstructionalMethod
argument_list|()
operator|!=
literal|null
operator|&&
name|g
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|im
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SECTION
case|:
name|XSection
name|ps
init|=
name|o
operator|.
name|getSection
argument_list|(
name|p
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
block|{
name|allSubparts
operator|.
name|add
argument_list|(
name|ps
operator|.
name|getSubpartName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|o
operator|.
name|getSections
argument_list|(
name|m
operator|.
name|enrollment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getSectionId
argument_list|()
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|selectedSubparts
operator|.
name|add
argument_list|(
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
if|if
condition|(
name|hasIm
condition|)
block|{
name|s
operator|.
name|setTotalPrefInstrMethConflict
argument_list|(
name|s
operator|.
name|getTotalPrefInstrMethConflict
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gtPIM
operator|++
expr_stmt|;
if|if
condition|(
name|im
condition|)
block|{
name|s
operator|.
name|setPrefInstrMethConflict
argument_list|(
name|s
operator|.
name|getPrefInstrMethConflict
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gPIM
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|allSubparts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|s
operator|.
name|setTotalPrefSectionConflict
argument_list|(
name|s
operator|.
name|getTotalPrefSectionConflict
argument_list|()
operator|+
name|allSubparts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|gtPSec
operator|+=
name|allSubparts
operator|.
name|size
argument_list|()
expr_stmt|;
name|s
operator|.
name|setPrefSectionConflict
argument_list|(
name|s
operator|.
name|getPrefSectionConflict
argument_list|()
operator|+
name|selectedSubparts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|gPSec
operator|+=
name|selectedSubparts
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|o
operator|.
name|getSections
argument_list|(
name|m
operator|.
name|enrollment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|XRequest
name|q
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|q
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|otherEnrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|q
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherEnrollment
operator|==
literal|null
condition|)
continue|continue;
name|XOffering
name|otherOffering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|otherEnrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|XCourse
name|otherCourse
init|=
name|otherOffering
operator|.
name|getCourse
argument_list|(
name|otherEnrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|otherSection
range|:
name|otherOffering
operator|.
name|getSections
argument_list|(
name|otherEnrollment
argument_list|)
control|)
block|{
if|if
condition|(
name|otherSection
operator|.
name|equals
argument_list|(
name|section
argument_list|)
operator|||
name|otherSection
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|otherSection
operator|.
name|isDistanceConflict
argument_list|(
name|student
argument_list|,
name|section
argument_list|,
name|dm
argument_list|)
condition|)
block|{
name|s
operator|.
name|setNrDistanceConflicts
argument_list|(
name|s
operator|.
name|getNrDistanceConflicts
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gNrDC
operator|++
expr_stmt|;
name|int
name|d
init|=
name|otherSection
operator|.
name|getDistanceInMinutes
argument_list|(
name|section
argument_list|,
name|dm
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>
name|s
operator|.
name|getLongestDistanceMinutes
argument_list|()
condition|)
name|s
operator|.
name|setLongestDistanceMinutes
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|>
name|gDist
condition|)
name|gDist
operator|=
name|d
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|otherSection
operator|.
name|getTime
argument_list|()
argument_list|)
operator|&&
operator|!
name|section
operator|.
name|isToIgnoreStudentConflictsWith
argument_list|(
name|o
operator|.
name|getDistributions
argument_list|()
argument_list|,
name|otherSection
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getSectionId
argument_list|()
operator|<
name|otherSection
operator|.
name|getSectionId
argument_list|()
operator|||
operator|!
name|query
argument_list|()
operator|.
name|match
argument_list|(
operator|new
name|CourseRequestMatcher
argument_list|(
name|session
argument_list|,
name|otherCourse
argument_list|,
name|student
argument_list|,
name|otherOffering
argument_list|,
operator|(
name|XCourseRequest
operator|)
name|q
argument_list|,
name|isConsentToDoCourse
argument_list|(
name|otherCourse
argument_list|)
argument_list|,
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|,
name|server
argument_list|)
argument_list|)
condition|)
block|{
name|s
operator|.
name|setOverlappingMinutes
argument_list|(
name|s
operator|.
name|getOverlappingMinutes
argument_list|()
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|share
argument_list|(
name|otherSection
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|gShr
operator|+=
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|share
argument_list|(
name|otherSection
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|q
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|ft
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|q
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|s
operator|.
name|setFreeTimeOverlappingMins
argument_list|(
name|s
operator|.
name|getFreeTimeOverlappingMins
argument_list|()
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|share
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|gFre
operator|+=
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|share
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|else if
condition|(
name|unassigned
operator|.
name|add
argument_list|(
name|m
operator|.
name|request
argument_list|()
operator|.
name|getRequestId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|student
argument_list|()
operator|.
name|canAssign
argument_list|(
name|m
operator|.
name|request
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|request
argument_list|()
operator|.
name|isWaitlist
argument_list|()
condition|)
block|{
name|s
operator|.
name|setWaitlist
argument_list|(
name|s
operator|.
name|getWaitlist
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gWait
operator|++
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getTopWaitingPriority
argument_list|()
operator|==
literal|null
condition|)
name|s
operator|.
name|setTopWaitingPriority
argument_list|(
literal|1
operator|+
name|m
operator|.
name|request
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|s
operator|.
name|setTopWaitingPriority
argument_list|(
name|Math
operator|.
name|min
argument_list|(
literal|1
operator|+
name|m
operator|.
name|request
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|,
name|s
operator|.
name|getTopWaitingPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|setUnassigned
argument_list|(
name|s
operator|.
name|getUnassigned
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gUnasg
operator|++
expr_stmt|;
block|}
for|for
control|(
name|XCourseId
name|c
range|:
name|m
operator|.
name|request
argument_list|()
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|List
argument_list|<
name|XPreference
argument_list|>
name|pref
init|=
name|m
operator|.
name|request
argument_list|()
operator|.
name|getPreferences
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
condition|)
block|{
name|XOffering
name|o
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|reqIm
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allSubparts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XPreference
name|p
range|:
name|pref
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|isRequired
argument_list|()
condition|)
continue|continue;
switch|switch
condition|(
name|p
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|INSTR_METHOD
case|:
name|reqIm
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SECTION
case|:
name|XSection
name|ps
init|=
operator|(
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|o
operator|.
name|getSection
argument_list|(
name|p
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
name|allSubparts
operator|.
name|add
argument_list|(
name|ps
operator|.
name|getSubpartName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|reqIm
condition|)
block|{
name|s
operator|.
name|setTotalPrefInstrMethConflict
argument_list|(
name|s
operator|.
name|getTotalPrefInstrMethConflict
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gtPIM
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|allSubparts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|s
operator|.
name|setTotalPrefSectionConflict
argument_list|(
name|s
operator|.
name|getTotalPrefSectionConflict
argument_list|()
operator|+
name|allSubparts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|gtPSec
operator|+=
name|allSubparts
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|m
operator|.
name|request
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|getRequestedDate
argument_list|()
operator|==
literal|null
condition|)
name|s
operator|.
name|setRequestedDate
argument_list|(
name|m
operator|.
name|request
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|m
operator|.
name|request
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|after
argument_list|(
name|s
operator|.
name|getRequestedDate
argument_list|()
argument_list|)
condition|)
name|s
operator|.
name|setRequestedDate
argument_list|(
name|m
operator|.
name|request
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|StudentInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|StudentInfo
argument_list|>
argument_list|(
name|students
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|iSubjectAreas
operator|==
literal|null
operator|&&
name|iCoursesIcoordinate
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|studentIds
operator|!=
literal|null
operator|&&
operator|(
name|studentIds
operator|.
name|size
argument_list|()
operator|<
literal|1000
operator|||
name|server
operator|instanceof
name|DatabaseServer
operator|)
condition|)
block|{
name|FindStudentInfoMatcher
name|m
init|=
operator|new
name|FindStudentInfoMatcher
argument_list|(
name|session
argument_list|,
name|query
argument_list|()
argument_list|,
name|iMyStudents
argument_list|)
decl_stmt|;
name|m
operator|.
name|setServer
argument_list|(
name|server
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|studentIds
control|)
block|{
if|if
condition|(
name|students
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
continue|continue;
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|m
operator|.
name|match
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
name|StudentInfo
name|s
init|=
operator|new
name|StudentInfo
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|s
operator|.
name|setStudent
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setSessionId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanShowExternalId
argument_list|(
name|iCanShowExtIds
argument_list|)
expr_stmt|;
name|String
name|status
init|=
operator|(
name|student
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
else|:
name|student
operator|.
name|getStatus
argument_list|()
operator|)
decl_stmt|;
name|st
operator|.
name|setCanRegister
argument_list|(
name|iCanRegister
operator|&&
operator|(
name|status
operator|==
literal|null
operator|||
name|regStates
operator|.
name|contains
argument_list|(
name|status
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanUseAssistant
argument_list|(
name|iCanUseAssistant
operator|&&
operator|(
name|status
operator|==
literal|null
operator|||
name|assStates
operator|.
name|contains
argument_list|(
name|status
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanSelect
argument_list|(
name|isCanSelect
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XAreaClassificationMajor
name|acm
range|:
name|student
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|acm
operator|.
name|getClassification
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addMajor
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|acc
range|:
name|student
operator|.
name|getAccomodations
argument_list|()
control|)
block|{
name|st
operator|.
name|addAccommodation
argument_list|(
name|acc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|XStudent
operator|.
name|XGroup
name|gr
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|st
operator|.
name|addGroup
argument_list|(
name|gr
operator|.
name|getType
argument_list|()
argument_list|,
name|gr
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|gr
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|setStatus
argument_list|(
name|student
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
else|:
name|student
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setEmailDate
argument_list|(
name|student
operator|.
name|getEmailTimeStamp
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|student
operator|.
name|getEmailTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setNote
argument_list|(
name|student
operator|.
name|hasLastNote
argument_list|()
condition|?
name|student
operator|.
name|getLastNote
argument_list|()
operator|.
name|getNote
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|XStudentId
name|id
range|:
name|server
operator|.
name|findStudents
argument_list|(
operator|new
name|FindStudentInfoMatcher
argument_list|(
name|session
argument_list|,
name|query
argument_list|()
argument_list|,
name|iMyStudents
argument_list|)
argument_list|)
control|)
block|{
name|XStudent
name|student
init|=
operator|(
name|id
operator|instanceof
name|XStudent
condition|?
operator|(
name|XStudent
operator|)
name|id
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|id
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|StudentInfo
name|s
init|=
operator|new
name|StudentInfo
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|s
operator|.
name|setStudent
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setSessionId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanShowExternalId
argument_list|(
name|iCanShowExtIds
argument_list|)
expr_stmt|;
name|String
name|status
init|=
operator|(
name|student
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
else|:
name|student
operator|.
name|getStatus
argument_list|()
operator|)
decl_stmt|;
name|st
operator|.
name|setCanRegister
argument_list|(
name|iCanRegister
operator|&&
operator|(
name|status
operator|==
literal|null
operator|||
name|regStates
operator|.
name|contains
argument_list|(
name|status
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanUseAssistant
argument_list|(
name|iCanUseAssistant
operator|&&
operator|(
name|status
operator|==
literal|null
operator|||
name|assStates
operator|.
name|contains
argument_list|(
name|status
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanSelect
argument_list|(
name|isCanSelect
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XAreaClassificationMajor
name|acm
range|:
name|student
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|acm
operator|.
name|getClassification
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addMajor
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|acc
range|:
name|student
operator|.
name|getAccomodations
argument_list|()
control|)
block|{
name|st
operator|.
name|addAccommodation
argument_list|(
name|acc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|XStudent
operator|.
name|XGroup
name|gr
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|st
operator|.
name|addGroup
argument_list|(
name|gr
operator|.
name|getType
argument_list|()
argument_list|,
name|gr
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|gr
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|setStatus
argument_list|(
name|student
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
else|:
name|student
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setEmailDate
argument_list|(
name|student
operator|.
name|getEmailTimeStamp
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|student
operator|.
name|getEmailTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setNote
argument_list|(
name|student
operator|.
name|hasLastNote
argument_list|()
condition|?
name|student
operator|.
name|getLastNote
argument_list|()
operator|.
name|getNote
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|,
operator|new
name|Comparator
argument_list|<
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|StudentInfo
name|s1
parameter_list|,
name|StudentInfo
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|new
name|Long
argument_list|(
name|s1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
argument_list|()
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|>=
name|limit
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|StudentInfo
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|StudentInfo
argument_list|>
argument_list|(
name|limit
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StudentInfo
name|i
range|:
name|ret
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|size
argument_list|()
operator|==
name|limit
argument_list|()
condition|)
break|break;
block|}
name|ret
operator|=
name|r
expr_stmt|;
block|}
comment|// if (students.size()> 0) {
name|StudentInfo
name|t
init|=
operator|new
name|StudentInfo
argument_list|()
decl_stmt|;
name|t
operator|.
name|setEnrollment
argument_list|(
name|gEnrl
argument_list|)
expr_stmt|;
name|t
operator|.
name|setReservation
argument_list|(
name|gRes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setWaitlist
argument_list|(
name|gWait
argument_list|)
expr_stmt|;
name|t
operator|.
name|setUnassigned
argument_list|(
name|gUnasg
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalEnrollment
argument_list|(
name|gtEnrl
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalReservation
argument_list|(
name|gtRes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalWaitlist
argument_list|(
name|gtWait
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalUnassigned
argument_list|(
name|gtUnasg
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConsentNeeded
argument_list|(
name|gConNeed
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalConsentNeeded
argument_list|(
name|gtConNeed
argument_list|)
expr_stmt|;
name|t
operator|.
name|setOverrideNeeded
argument_list|(
name|gOvrNeed
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalOverrideNeeded
argument_list|(
name|gtOvrNeed
argument_list|)
expr_stmt|;
name|t
operator|.
name|setNrDistanceConflicts
argument_list|(
name|gNrDC
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalNrDistanceConflicts
argument_list|(
name|gtNrDC
argument_list|)
expr_stmt|;
name|t
operator|.
name|setLongestDistanceMinutes
argument_list|(
name|gDist
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalLongestDistanceMinutes
argument_list|(
name|gtDist
argument_list|)
expr_stmt|;
name|t
operator|.
name|setOverlappingMinutes
argument_list|(
name|gShr
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalOverlappingMinutes
argument_list|(
name|gtShr
argument_list|)
expr_stmt|;
name|t
operator|.
name|setFreeTimeOverlappingMins
argument_list|(
name|gFre
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalFreeTimeOverlappingMins
argument_list|(
name|gtFre
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPrefInstrMethConflict
argument_list|(
name|gPIM
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalPrefInstrMethConflict
argument_list|(
name|gtPIM
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPrefSectionConflict
argument_list|(
name|gPSec
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTotalPrefSectionConflict
argument_list|(
name|gtPSec
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|protected
name|Collection
argument_list|<
name|?
extends|extends
name|XCourseId
argument_list|>
name|findCourses
parameter_list|(
specifier|final
name|OnlineSectioningServer
name|server
parameter_list|,
specifier|final
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
name|iFilter
operator|!=
literal|null
operator|&&
name|server
operator|instanceof
name|DatabaseServer
condition|)
block|{
name|List
argument_list|<
name|XCourseId
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|XCourseId
argument_list|>
argument_list|()
decl_stmt|;
name|FindEnrollmentInfoCourseMatcher
name|m
init|=
operator|new
name|FindEnrollmentInfoCourseMatcher
argument_list|(
name|iCoursesIcoordinate
argument_list|,
name|iCoursesIcanApprove
argument_list|,
name|iSubjectAreas
argument_list|,
name|iQuery
argument_list|)
decl_stmt|;
for|for
control|(
name|XCourse
name|course
range|:
name|server
operator|.
name|createAction
argument_list|(
name|SectioningStatusFilterAction
operator|.
name|class
argument_list|)
operator|.
name|forRequest
argument_list|(
name|iFilter
argument_list|)
operator|.
name|getCourses
argument_list|(
name|server
argument_list|,
name|helper
argument_list|)
control|)
if|if
condition|(
name|m
operator|.
name|match
argument_list|(
name|course
argument_list|)
condition|)
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
return|return
name|courses
return|;
block|}
else|else
block|{
return|return
name|server
operator|.
name|findCourses
argument_list|(
operator|new
name|FindEnrollmentInfoCourseMatcher
argument_list|(
name|iCoursesIcoordinate
argument_list|,
name|iCoursesIcanApprove
argument_list|,
name|iSubjectAreas
argument_list|,
name|iQuery
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"find-student-infos"
return|;
block|}
specifier|public
specifier|static
class|class
name|FindStudentInfoMatcher
extends|extends
name|AbstractStudentMatcher
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
name|Query
name|iQuery
decl_stmt|;
specifier|protected
name|String
name|iDefaultSectioningStatus
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|Long
argument_list|>
name|iMyStudents
decl_stmt|;
specifier|public
name|FindStudentInfoMatcher
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|,
name|Query
name|query
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|myStudents
parameter_list|)
block|{
name|iQuery
operator|=
name|query
expr_stmt|;
name|iDefaultSectioningStatus
operator|=
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
expr_stmt|;
name|iMyStudents
operator|=
name|myStudents
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMyStudent
parameter_list|(
name|XStudentId
name|student
parameter_list|)
block|{
return|return
name|iMyStudents
operator|!=
literal|null
operator|&&
name|iMyStudents
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|XStudentId
name|id
parameter_list|)
block|{
name|XStudent
name|student
init|=
operator|(
name|id
operator|instanceof
name|XStudent
condition|?
operator|(
name|XStudent
operator|)
name|id
else|:
name|getServer
argument_list|()
operator|.
name|getStudent
argument_list|(
name|id
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
return|return
name|student
operator|!=
literal|null
operator|&&
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|iQuery
operator|.
name|match
argument_list|(
operator|new
name|StudentMatcher
argument_list|(
name|student
argument_list|,
name|iDefaultSectioningStatus
argument_list|,
name|getServer
argument_list|()
argument_list|,
name|isMyStudent
argument_list|(
name|student
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

