begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|advisors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|AdvisingStudentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|AdvisorCourseRequestSubmission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfFont
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|PageSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPCell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|AdvisorCourseRequestsSubmit
implements|implements
name|OnlineSectioningAction
argument_list|<
name|AdvisorCourseRequestSubmission
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|StudentSectioningConstants
name|CONST
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AdvisingStudentDetails
name|iDetails
decl_stmt|;
specifier|public
name|AdvisorCourseRequestsSubmit
name|withDetails
parameter_list|(
name|AdvisingStudentDetails
name|details
parameter_list|)
block|{
name|iDetails
operator|=
name|details
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AdvisingStudentDetails
name|getDetails
parameter_list|()
block|{
return|return
name|iDetails
return|;
block|}
annotation|@
name|Override
specifier|public
name|AdvisorCourseRequestSubmission
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
try|try
block|{
name|AdvisorCourseRequestSubmission
name|ret
init|=
operator|new
name|AdvisorCourseRequestSubmission
argument_list|()
decl_stmt|;
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|helper
operator|.
name|addAction
argument_list|(
name|this
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
decl_stmt|;
name|action
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getStudentExternalId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getStudentName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDetails
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|getDetails
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|action
operator|.
name|addOther
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDetails
argument_list|()
operator|.
name|getRequest
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Request
name|r
range|:
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getRequest
argument_list|()
argument_list|)
control|)
name|action
operator|.
name|addRequest
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDetails
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
name|String
name|current
init|=
operator|(
name|student
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|student
operator|.
name|getStatus
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|getDetails
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|current
argument_list|)
condition|)
block|{
comment|//status change
name|Date
name|ts
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Lock
name|lock
init|=
name|server
operator|.
name|lockStudent
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|name
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|helper
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|StudentSectioningStatus
name|status
init|=
operator|(
name|getDetails
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|StudentSectioningStatus
operator|.
name|getStatus
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|Student
name|dbStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbStudent
operator|!=
literal|null
condition|)
block|{
name|String
name|oldStatus
init|=
operator|(
name|dbStudent
operator|.
name|getSectioningStatus
argument_list|()
operator|!=
literal|null
condition|?
name|dbStudent
operator|.
name|getSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
else|:
name|dbStudent
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|!=
literal|null
condition|?
name|MSG
operator|.
name|studentStatusSessionDefault
argument_list|(
name|dbStudent
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
else|:
name|MSG
operator|.
name|studentStatusSystemDefault
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|dbStudent
operator|.
name|getSectioningStatus
argument_list|()
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"old-status"
argument_list|)
operator|.
name|setValue
argument_list|(
name|dbStudent
operator|.
name|getSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setStatus
argument_list|(
name|status
operator|==
literal|null
condition|?
literal|null
else|:
name|status
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|dbStudent
operator|.
name|setSectioningStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|String
name|newStatus
init|=
operator|(
name|dbStudent
operator|.
name|getSectioningStatus
argument_list|()
operator|!=
literal|null
condition|?
name|dbStudent
operator|.
name|getSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
else|:
name|dbStudent
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|!=
literal|null
condition|?
name|MSG
operator|.
name|studentStatusSessionDefault
argument_list|(
name|dbStudent
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
else|:
name|MSG
operator|.
name|studentStatusSystemDefault
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|dbStudent
operator|.
name|getSectioningStatus
argument_list|()
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"new-status"
argument_list|)
operator|.
name|setValue
argument_list|(
name|dbStudent
operator|.
name|getSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldStatus
operator|.
name|equals
argument_list|(
name|newStatus
argument_list|)
condition|)
name|action
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setText
argument_list|(
name|oldStatus
argument_list|)
operator|.
name|setTimeStamp
argument_list|(
name|ts
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|INFO
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|action
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setText
argument_list|(
name|oldStatus
operator|+
literal|"&rarr; "
operator|+
name|newStatus
argument_list|)
operator|.
name|setTimeStamp
argument_list|(
name|ts
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|INFO
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|dbStudent
argument_list|)
expr_stmt|;
name|server
operator|.
name|update
argument_list|(
name|student
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|action
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|action
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|generatePdfConfirmation
argument_list|(
name|ret
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|error
argument_list|(
literal|"Failed to produce confirmation PDF: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Failed to produce confirmation PDF: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|generatePdfConfirmation
parameter_list|(
name|AdvisorCourseRequestSubmission
name|ret
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|(
name|PageSize
operator|.
name|LETTER
argument_list|)
decl_stmt|;
name|PdfWriter
name|writer
init|=
name|PdfWriter
operator|.
name|getInstance
argument_list|(
name|document
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setPageEvent
argument_list|(
operator|new
name|PdfEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|open
argument_list|()
expr_stmt|;
name|Font
name|font
init|=
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Paragraph
name|ch
init|=
operator|new
name|Paragraph
argument_list|(
name|MSG
operator|.
name|pdfHeaderAdvisorCourseRequests
argument_list|()
argument_list|,
name|font
argument_list|)
decl_stmt|;
name|ch
operator|.
name|setAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setSpacingAfter
argument_list|(
literal|5f
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|PdfPTable
name|header
init|=
operator|new
name|PdfPTable
argument_list|(
operator|new
name|float
index|[]
block|{
literal|80f
block|,
literal|200f
block|,
literal|50f
block|,
literal|150f
block|}
argument_list|)
decl_stmt|;
name|header
operator|.
name|setSpacingBefore
argument_list|(
literal|5f
argument_list|)
expr_stmt|;
name|header
operator|.
name|setHeaderRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|header
operator|.
name|setWidthPercentage
argument_list|(
literal|100f
argument_list|)
expr_stmt|;
name|header
operator|.
name|addCell
argument_list|(
name|header
argument_list|(
name|MSG
operator|.
name|propStudentName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|addCell
argument_list|(
name|cell
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getStudentName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|addCell
argument_list|(
name|header
argument_list|(
name|MSG
operator|.
name|propStudentExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|addCell
argument_list|(
name|cell
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getStudentExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|addCell
argument_list|(
name|header
argument_list|(
name|MSG
operator|.
name|propAdvisorEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|addCell
argument_list|(
name|cell
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getAdvisorEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|addCell
argument_list|(
name|header
argument_list|(
name|MSG
operator|.
name|propAcademicSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|addCell
argument_list|(
name|cell
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getSessionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDetails
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|header
operator|.
name|addCell
argument_list|(
name|header
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|addCell
argument_list|(
name|cell
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|addCell
argument_list|(
name|header
argument_list|(
name|MSG
operator|.
name|propStudentStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|addCell
argument_list|(
name|cell
argument_list|(
name|getDetails
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|document
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDetails
argument_list|()
operator|.
name|getRequest
argument_list|()
operator|.
name|getCourses
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getDetails
argument_list|()
operator|.
name|getRequest
argument_list|()
operator|.
name|getCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|document
operator|.
name|add
argument_list|(
name|courseTable
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDetails
argument_list|()
operator|.
name|getRequest
argument_list|()
operator|.
name|getAlternatives
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getDetails
argument_list|()
operator|.
name|getRequest
argument_list|()
operator|.
name|getAlternatives
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|document
operator|.
name|add
argument_list|(
name|courseTable
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|PdfPTable
name|sign
init|=
operator|new
name|PdfPTable
argument_list|(
operator|new
name|float
index|[]
block|{
name|PdfFont
operator|.
name|getSmallFont
argument_list|(
literal|true
argument_list|)
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidth
argument_list|(
name|MSG
operator|.
name|pdfAdvisorSignature
argument_list|()
argument_list|)
block|,
name|PdfFont
operator|.
name|getSmallFont
argument_list|(
literal|true
argument_list|)
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidth
argument_list|(
name|MSG
operator|.
name|pdfSignatureDate
argument_list|()
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|sign
operator|.
name|setSpacingBefore
argument_list|(
literal|20f
argument_list|)
expr_stmt|;
name|sign
operator|.
name|setHeaderRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sign
operator|.
name|setKeepTogether
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sign
operator|.
name|setWidthPercentage
argument_list|(
literal|100f
argument_list|)
expr_stmt|;
name|sign
operator|.
name|addCell
argument_list|(
name|header
argument_list|(
name|MSG
operator|.
name|pdfAdvisorSignature
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sign
operator|.
name|addCell
argument_list|(
name|header
argument_list|(
name|MSG
operator|.
name|pdfSignatureDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PdfPCell
name|h1
init|=
name|header
argument_list|(
name|MSG
operator|.
name|pdfStudentSignature
argument_list|()
argument_list|)
decl_stmt|;
name|h1
operator|.
name|setPaddingTop
argument_list|(
literal|10f
argument_list|)
expr_stmt|;
name|sign
operator|.
name|addCell
argument_list|(
name|h1
argument_list|)
expr_stmt|;
name|PdfPCell
name|h2
init|=
name|header
argument_list|(
name|MSG
operator|.
name|pdfSignatureDate
argument_list|()
argument_list|)
decl_stmt|;
name|h2
operator|.
name|setPaddingTop
argument_list|(
literal|10f
argument_list|)
expr_stmt|;
name|sign
operator|.
name|addCell
argument_list|(
name|h2
argument_list|)
expr_stmt|;
name|PdfPCell
name|disc
init|=
name|cell
argument_list|(
name|MSG
operator|.
name|pdfStudentDisclaimer
argument_list|()
argument_list|)
decl_stmt|;
name|disc
operator|.
name|setPaddingTop
argument_list|(
literal|30f
argument_list|)
expr_stmt|;
name|disc
operator|.
name|setColspan
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sign
operator|.
name|addCell
argument_list|(
name|disc
argument_list|)
expr_stmt|;
name|sign
operator|.
name|setTotalWidth
argument_list|(
name|document
operator|.
name|right
argument_list|()
operator|-
name|document
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|sign
operator|.
name|writeSelectedRows
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
name|document
operator|.
name|left
argument_list|()
argument_list|,
name|sign
operator|.
name|getTotalHeight
argument_list|()
operator|+
name|document
operator|.
name|bottom
argument_list|()
argument_list|,
name|writer
operator|.
name|getDirectContent
argument_list|()
argument_list|)
expr_stmt|;
comment|// document.add(sign);
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|ret
operator|.
name|setPdf
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PdfPTable
name|courseTable
parameter_list|(
name|boolean
name|primary
parameter_list|)
block|{
name|Font
name|font
init|=
name|PdfFont
operator|.
name|getSmallFont
argument_list|()
decl_stmt|;
name|float
name|wP
init|=
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidth
argument_list|(
name|primary
condition|?
name|MSG
operator|.
name|courseRequestsPriority
argument_list|(
literal|100
argument_list|)
else|:
name|MSG
operator|.
name|courseRequestsAlternate
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|*
literal|0.001f
operator|*
name|font
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|float
name|wA
init|=
literal|20f
operator|+
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidth
argument_list|(
name|MSG
operator|.
name|courseRequestsAlternative
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|*
literal|0.001f
operator|*
name|font
operator|.
name|getSize
argument_list|()
operator|-
name|wP
decl_stmt|;
name|float
name|wC
init|=
literal|5f
operator|+
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidth
argument_list|(
literal|"999 - 999"
argument_list|)
operator|*
literal|0.001f
operator|*
name|font
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|float
name|pw
init|=
name|PageSize
operator|.
name|LETTER
operator|.
name|getWidth
argument_list|()
operator|-
literal|72f
decl_stmt|;
name|float
name|wX
init|=
operator|(
name|pw
operator|-
name|wP
operator|-
name|wA
operator|-
name|wC
operator|)
decl_stmt|;
name|PdfPTable
name|cr
init|=
operator|new
name|PdfPTable
argument_list|(
operator|new
name|float
index|[]
block|{
name|wP
block|,
name|wA
block|,
name|wX
operator|*
literal|0.4f
block|,
name|wC
block|,
name|wX
operator|*
literal|0.6f
block|}
argument_list|)
decl_stmt|;
name|cr
operator|.
name|setHeaderRows
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setWidthPercentage
argument_list|(
literal|100f
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setKeepTogether
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|primary
condition|)
block|{
name|PdfPCell
name|c
init|=
operator|new
name|PdfPCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorder
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|font
operator|=
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|font
operator|.
name|setSize
argument_list|(
name|font
operator|.
name|getSize
argument_list|()
operator|*
literal|0.8f
argument_list|)
expr_stmt|;
name|Paragraph
name|ch
init|=
operator|new
name|Paragraph
argument_list|(
name|MSG
operator|.
name|courseRequestsCourses
argument_list|()
argument_list|,
name|font
argument_list|)
decl_stmt|;
name|ch
operator|.
name|setAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setSpacingBefore
argument_list|(
literal|10f
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setSpacingAfter
argument_list|(
literal|2f
argument_list|)
expr_stmt|;
name|c
operator|.
name|addElement
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidth
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|cr
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|italicNumber
argument_list|(
name|MSG
operator|.
name|colCredit
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_BOTTOM
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidth
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|cr
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|italic
argument_list|(
name|MSG
operator|.
name|colNotes
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_BOTTOM
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidth
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|cr
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PdfPCell
name|c
init|=
operator|new
name|PdfPCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorder
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|font
operator|=
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|font
operator|.
name|setSize
argument_list|(
name|font
operator|.
name|getSize
argument_list|()
operator|*
literal|0.8f
argument_list|)
expr_stmt|;
name|Paragraph
name|ch
init|=
operator|new
name|Paragraph
argument_list|(
name|MSG
operator|.
name|courseRequestsAlternatives
argument_list|()
argument_list|,
name|font
argument_list|)
decl_stmt|;
name|Chunk
name|x
init|=
operator|new
name|Chunk
argument_list|(
literal|"          "
operator|+
name|MSG
operator|.
name|courseRequestsAlternativesNote
argument_list|()
argument_list|)
decl_stmt|;
name|x
operator|.
name|setFont
argument_list|(
name|PdfFont
operator|.
name|getSmallFont
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setSpacingBefore
argument_list|(
literal|10f
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setSpacingAfter
argument_list|(
literal|2f
argument_list|)
expr_stmt|;
name|c
operator|.
name|addElement
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidth
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|cr
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|int
name|priority
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
operator|(
name|primary
condition|?
name|getDetails
argument_list|()
operator|.
name|getRequest
argument_list|()
operator|.
name|getCourses
argument_list|()
else|:
name|getDetails
argument_list|()
operator|.
name|getRequest
argument_list|()
operator|.
name|getAlternatives
argument_list|()
operator|)
control|)
block|{
name|int
name|alt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|==
literal|null
condition|)
block|{
name|PdfPCell
name|h
init|=
name|cell
argument_list|(
name|MSG
operator|.
name|courseRequestsPriority
argument_list|(
name|priority
argument_list|)
argument_list|)
decl_stmt|;
name|h
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|h
operator|.
name|setBorderWidth
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|cr
operator|.
name|addCell
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|PdfPCell
name|course
init|=
name|cell
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|course
operator|.
name|setColspan
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|course
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|course
operator|.
name|setBorderWidth
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|cr
operator|.
name|addCell
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|PdfPCell
name|credit
init|=
name|number
argument_list|(
name|r
operator|.
name|getAdvisorCredit
argument_list|()
argument_list|)
decl_stmt|;
name|credit
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|LEFT
operator||
name|PdfPCell
operator|.
name|RIGHT
operator||
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setBorderWidth
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|cr
operator|.
name|addCell
argument_list|(
name|credit
argument_list|)
expr_stmt|;
name|PdfPCell
name|note
init|=
name|cell
argument_list|(
name|r
operator|.
name|getAdvisorNote
argument_list|()
argument_list|)
decl_stmt|;
name|note
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|note
operator|.
name|setBorderWidth
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|cr
operator|.
name|addCell
argument_list|(
name|note
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
name|boolean
name|last
init|=
operator|(
name|alt
operator|+
literal|1
operator|==
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|alt
operator|==
literal|0
condition|)
block|{
name|PdfPCell
name|h
init|=
name|cell
argument_list|(
name|MSG
operator|.
name|courseRequestsPriority
argument_list|(
name|priority
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
condition|)
block|{
name|h
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|h
operator|.
name|setBorderWidth
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
block|}
name|cr
operator|.
name|addCell
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|PdfPCell
name|course
init|=
name|course
argument_list|(
name|rc
argument_list|)
decl_stmt|;
name|course
operator|.
name|setColspan
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
condition|)
block|{
name|course
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|course
operator|.
name|setBorderWidth
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
block|}
name|cr
operator|.
name|addCell
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|PdfPCell
name|credit
init|=
name|number
argument_list|(
name|r
operator|.
name|getAdvisorCredit
argument_list|()
argument_list|)
decl_stmt|;
name|credit
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|BOTTOM
operator||
name|PdfPCell
operator|.
name|RIGHT
operator||
name|PdfPCell
operator|.
name|LEFT
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setBorderWidth
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setRowspan
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|addCell
argument_list|(
name|credit
argument_list|)
expr_stmt|;
name|PdfPCell
name|note
init|=
name|cell
argument_list|(
name|r
operator|.
name|getAdvisorNote
argument_list|()
argument_list|)
decl_stmt|;
name|note
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|note
operator|.
name|setBorderWidth
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|note
operator|.
name|setRowspan
argument_list|(
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|addCell
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PdfPCell
name|h
init|=
name|cell
argument_list|(
name|MSG
operator|.
name|courseRequestsAlternative
argument_list|(
name|alt
argument_list|)
argument_list|)
decl_stmt|;
name|h
operator|.
name|setColspan
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|h
operator|.
name|setPaddingLeft
argument_list|(
literal|20f
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
condition|)
block|{
name|h
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|h
operator|.
name|setBorderWidth
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
block|}
name|cr
operator|.
name|addCell
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|PdfPCell
name|course
init|=
name|course
argument_list|(
name|rc
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
condition|)
block|{
name|course
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|course
operator|.
name|setBorderWidth
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
block|}
name|cr
operator|.
name|addCell
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
name|alt
operator|++
expr_stmt|;
block|}
block|}
name|priority
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|primary
condition|)
block|{
name|float
name|min
init|=
literal|0
decl_stmt|,
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|getDetails
argument_list|()
operator|.
name|getRequest
argument_list|()
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|hasAdvisorCredit
argument_list|()
condition|)
continue|continue;
name|String
name|cred
init|=
name|r
operator|.
name|getAdvisorCredit
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
try|try
block|{
name|min
operator|+=
name|Float
operator|.
name|parseFloat
argument_list|(
name|cred
argument_list|)
expr_stmt|;
name|max
operator|+=
name|Float
operator|.
name|parseFloat
argument_list|(
name|cred
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|int
name|idx
init|=
name|cred
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
try|try
block|{
name|min
operator|+=
name|Float
operator|.
name|parseFloat
argument_list|(
name|cred
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|max
operator|+=
name|Float
operator|.
name|parseFloat
argument_list|(
name|cred
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
name|String
name|credTx
init|=
literal|""
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Number
argument_list|>
name|nf
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.#"
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|<
name|max
condition|)
block|{
name|credTx
operator|=
name|nf
operator|.
name|format
argument_list|(
name|min
argument_list|)
operator|+
literal|" - "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|credTx
operator|=
name|nf
operator|.
name|format
argument_list|(
name|min
argument_list|)
expr_stmt|;
block|}
name|PdfPCell
name|credit
init|=
name|number
argument_list|(
name|MSG
operator|.
name|labelTotalPriorityCreditHours
argument_list|()
argument_list|)
decl_stmt|;
name|credit
operator|.
name|setColspan
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cr
operator|.
name|addCell
argument_list|(
name|credit
argument_list|)
expr_stmt|;
name|credit
operator|=
name|number
argument_list|(
name|credTx
argument_list|)
expr_stmt|;
name|cr
operator|.
name|addCell
argument_list|(
name|credit
argument_list|)
expr_stmt|;
name|credit
operator|=
name|cell
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|cr
operator|.
name|addCell
argument_list|(
name|credit
argument_list|)
expr_stmt|;
block|}
return|return
name|cr
return|;
block|}
specifier|private
name|PdfPCell
name|cell
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|boolean
name|right
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
operator|new
name|PdfPCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|Font
name|font
init|=
name|PdfFont
operator|.
name|getSmallFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|)
decl_stmt|;
name|Paragraph
name|ch
init|=
operator|new
name|Paragraph
argument_list|(
name|text
argument_list|,
name|font
argument_list|)
decl_stmt|;
name|ch
operator|.
name|setAlignment
argument_list|(
name|right
condition|?
name|Element
operator|.
name|ALIGN_RIGHT
else|:
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
if|if
condition|(
name|right
condition|)
name|cell
operator|.
name|setPaddingRight
argument_list|(
literal|5f
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setLeading
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setSpacingAfter
argument_list|(
literal|2f
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addElement
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorder
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|cell
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|cell
argument_list|(
name|text
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|PdfPCell
name|header
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|cell
argument_list|(
name|text
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|PdfPCell
name|number
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|cell
argument_list|(
name|text
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|PdfPCell
name|italic
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|cell
argument_list|(
name|text
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|PdfPCell
name|italicNumber
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|cell
argument_list|(
name|text
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|PdfPCell
name|course
parameter_list|(
name|RequestedCourse
name|rc
parameter_list|)
block|{
name|PdfPCell
name|course
init|=
operator|new
name|PdfPCell
argument_list|()
decl_stmt|;
name|Paragraph
name|coursePg
init|=
operator|new
name|Paragraph
argument_list|(
name|rc
operator|.
name|toString
argument_list|(
name|CONST
argument_list|)
argument_list|,
name|PdfFont
operator|.
name|getSmallFont
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|coursePg
operator|.
name|setLeading
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|coursePg
operator|.
name|setSpacingAfter
argument_list|(
literal|2f
argument_list|)
expr_stmt|;
name|coursePg
operator|.
name|setAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|course
operator|.
name|addElement
argument_list|(
name|coursePg
argument_list|)
expr_stmt|;
name|course
operator|.
name|setBorder
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasSelectedClasses
argument_list|()
condition|)
for|for
control|(
name|Preference
name|p
range|:
name|rc
operator|.
name|getSelectedClasses
argument_list|()
control|)
block|{
name|Chunk
name|x
init|=
operator|new
name|Chunk
argument_list|(
operator|(
name|first
condition|?
literal|"  "
else|:
literal|", "
operator|)
operator|+
name|p
operator|.
name|getText
argument_list|()
operator|+
operator|(
name|p
operator|.
name|isRequired
argument_list|()
condition|?
literal|"!"
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|x
operator|.
name|setFont
argument_list|(
name|PdfFont
operator|.
name|getSmallFont
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|getFont
argument_list|()
operator|.
name|setSize
argument_list|(
name|x
operator|.
name|getFont
argument_list|()
operator|.
name|getSize
argument_list|()
operator|*
literal|0.8f
argument_list|)
expr_stmt|;
name|x
operator|.
name|getFont
argument_list|()
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|DARK_GRAY
argument_list|)
expr_stmt|;
name|coursePg
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|.
name|hasSelectedIntructionalMethods
argument_list|()
condition|)
for|for
control|(
name|Preference
name|p
range|:
name|rc
operator|.
name|getSelectedIntructionalMethods
argument_list|()
control|)
block|{
name|Chunk
name|x
init|=
operator|new
name|Chunk
argument_list|(
operator|(
name|first
condition|?
literal|"  "
else|:
literal|", "
operator|)
operator|+
name|p
operator|.
name|getText
argument_list|()
operator|+
operator|(
name|p
operator|.
name|isRequired
argument_list|()
condition|?
literal|"!"
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|x
operator|.
name|setFont
argument_list|(
name|PdfFont
operator|.
name|getSmallFont
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|getFont
argument_list|()
operator|.
name|setSize
argument_list|(
name|x
operator|.
name|getFont
argument_list|()
operator|.
name|getSize
argument_list|()
operator|*
literal|0.8f
argument_list|)
expr_stmt|;
name|x
operator|.
name|getFont
argument_list|()
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|DARK_GRAY
argument_list|)
expr_stmt|;
name|coursePg
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|.
name|hasCourseTitle
argument_list|()
condition|)
block|{
name|Chunk
name|x
init|=
operator|new
name|Chunk
argument_list|(
operator|(
name|first
condition|?
literal|"  "
else|:
literal|" - "
operator|)
operator|+
name|rc
operator|.
name|getCourseTitle
argument_list|()
argument_list|)
decl_stmt|;
name|x
operator|.
name|setFont
argument_list|(
name|PdfFont
operator|.
name|getSmallFont
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|getFont
argument_list|()
operator|.
name|setSize
argument_list|(
name|x
operator|.
name|getFont
argument_list|()
operator|.
name|getSize
argument_list|()
operator|*
literal|0.8f
argument_list|)
expr_stmt|;
name|x
operator|.
name|getFont
argument_list|()
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|DARK_GRAY
argument_list|)
expr_stmt|;
name|coursePg
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
return|return
name|course
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"advisor-requests"
return|;
block|}
block|}
end_class

end_unit

