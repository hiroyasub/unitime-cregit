begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|AcademicSessionInfo
implements|implements
name|Comparable
argument_list|<
name|AcademicSessionInfo
argument_list|>
block|{
specifier|private
name|Long
name|iUniqueId
decl_stmt|;
specifier|private
name|String
name|iYear
decl_stmt|,
name|iTerm
decl_stmt|,
name|iCampus
decl_stmt|;
specifier|private
name|Long
name|iDatePatternId
init|=
literal|null
decl_stmt|;
specifier|private
name|BitSet
name|iWeekPattern
init|=
literal|null
decl_stmt|;
specifier|private
name|BitSet
name|iFreeTimePattern
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iSessionBegin
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iDatePatternFirstDate
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iSectioningEnabled
init|=
literal|false
decl_stmt|;
empty_stmt|;
specifier|public
name|AcademicSessionInfo
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|iUniqueId
operator|=
name|session
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iYear
operator|=
name|session
operator|.
name|getAcademicYear
argument_list|()
expr_stmt|;
name|iTerm
operator|=
name|session
operator|.
name|getAcademicTerm
argument_list|()
expr_stmt|;
name|iCampus
operator|=
name|session
operator|.
name|getAcademicInitiative
argument_list|()
expr_stmt|;
if|if
condition|(
name|session
operator|.
name|getDefaultDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iDatePatternId
operator|=
name|session
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iWeekPattern
operator|=
name|session
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
expr_stmt|;
block|}
name|iFreeTimePattern
operator|=
name|getFreeTimeBitSet
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|iSessionBegin
operator|=
name|session
operator|.
name|getEventBeginDate
argument_list|()
expr_stmt|;
name|iDatePatternFirstDate
operator|=
name|getDatePatternFirstDay
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|iSectioningEnabled
operator|=
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canOnlineSectionStudents
argument_list|()
expr_stmt|;
block|}
specifier|public
name|AcademicSessionInfo
parameter_list|(
name|Long
name|uniqueId
parameter_list|,
name|String
name|year
parameter_list|,
name|String
name|term
parameter_list|,
name|String
name|campus
parameter_list|)
block|{
name|iUniqueId
operator|=
name|uniqueId
expr_stmt|;
name|iYear
operator|=
name|year
expr_stmt|;
name|iTerm
operator|=
name|term
expr_stmt|;
name|iCampus
operator|=
name|campus
expr_stmt|;
block|}
specifier|public
specifier|static
name|Date
name|getDatePatternFirstDay
parameter_list|(
name|Session
name|s
parameter_list|)
block|{
return|return
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|,
name|s
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BitSet
name|getFreeTimeBitSet
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|int
name|startMonth
init|=
name|session
operator|.
name|getPatternStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|session
operator|.
name|getPatternEndMonth
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
literal|0
argument_list|,
name|endMonth
operator|+
literal|1
argument_list|,
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
operator|-
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|startMonth
argument_list|,
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
decl_stmt|;
name|BitSet
name|ret
init|=
operator|new
name|BitSet
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
name|ret
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|Long
name|getUniqueId
parameter_list|()
block|{
return|return
name|iUniqueId
return|;
block|}
specifier|public
name|String
name|getTerm
parameter_list|()
block|{
return|return
name|iTerm
return|;
block|}
specifier|public
name|String
name|getCampus
parameter_list|()
block|{
return|return
name|iCampus
return|;
block|}
specifier|public
name|String
name|getYear
parameter_list|()
block|{
return|return
name|iYear
return|;
block|}
specifier|public
name|Long
name|getDefaultDatePatternId
parameter_list|()
block|{
return|return
name|iDatePatternId
return|;
block|}
specifier|public
name|BitSet
name|getDefaultWeekPattern
parameter_list|()
block|{
return|return
name|iWeekPattern
return|;
block|}
specifier|public
name|BitSet
name|getFreeTimePattern
parameter_list|()
block|{
return|return
name|iFreeTimePattern
return|;
block|}
specifier|public
name|Date
name|getDatePatternFirstDate
parameter_list|()
block|{
return|return
name|iDatePatternFirstDate
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|AcademicSessionInfo
name|a
parameter_list|)
block|{
name|int
name|cmp
init|=
name|iSessionBegin
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|iSessionBegin
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|getYear
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|a
operator|.
name|getYear
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|getTerm
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|a
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|getCampus
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|a
operator|.
name|getCampus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getYear
argument_list|()
operator|+
literal|" "
operator|+
name|getTerm
argument_list|()
operator|+
literal|" ("
operator|+
name|getCampus
argument_list|()
operator|+
literal|")"
return|;
block|}
specifier|public
name|String
name|toCompactString
parameter_list|()
block|{
return|return
name|getTerm
argument_list|()
operator|+
name|getYear
argument_list|()
operator|+
name|getCampus
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isSectioningEnabled
parameter_list|()
block|{
return|return
name|iSectioningEnabled
return|;
block|}
specifier|public
name|void
name|setSectioningEnabled
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
name|iSectioningEnabled
operator|=
name|enable
expr_stmt|;
block|}
block|}
end_class

end_unit

