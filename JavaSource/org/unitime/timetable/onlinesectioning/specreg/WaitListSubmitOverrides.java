begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|specreg
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|CourseMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideIntent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|Customization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|WaitListValidationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|ReloadAllData
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|WaitListSubmitOverrides
implements|implements
name|OnlineSectioningAction
argument_list|<
name|CourseRequestInterface
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CourseRequestInterface
name|iRequest
init|=
literal|null
decl_stmt|;
specifier|private
name|Float
name|iCurrentCredit
init|=
literal|null
decl_stmt|;
specifier|public
name|WaitListSubmitOverrides
name|withRequest
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|WaitListSubmitOverrides
name|withCredit
parameter_list|(
name|Float
name|currentCredit
parameter_list|)
block|{
name|iCurrentCredit
operator|=
name|currentCredit
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Long
name|getStudentId
parameter_list|()
block|{
return|return
name|iRequest
operator|.
name|getStudentId
argument_list|()
return|;
block|}
specifier|public
name|CourseRequestInterface
name|getRequest
parameter_list|()
block|{
return|return
name|iRequest
return|;
block|}
annotation|@
name|Override
specifier|public
name|CourseRequestInterface
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
operator|||
operator|!
name|Customization
operator|.
name|WaitListValidationProvider
operator|.
name|hasProvider
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNotSupportedFeature
argument_list|()
argument_list|)
throw|;
name|Lock
name|lock
init|=
name|server
operator|.
name|lockStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|name
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|helper
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getStudentId
argument_list|()
argument_list|,
name|helper
operator|.
name|getHibSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|helper
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|action
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|helper
operator|.
name|getStudentNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|student
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|WaitListValidationProvider
name|provider
init|=
name|Customization
operator|.
name|WaitListValidationProvider
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|provider
operator|.
name|submit
argument_list|(
name|server
argument_list|,
name|helper
argument_list|,
name|iRequest
argument_list|,
name|iCurrentCredit
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|getWaitlist
argument_list|()
argument_list|)
operator|||
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|isAlternative
argument_list|()
argument_list|)
operator|||
name|cd
operator|.
name|isEnrolled
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getCourseRequestOverrideIntent
argument_list|()
operator|==
name|CourseRequestOverrideIntent
operator|.
name|WAITLIST
condition|)
block|{
name|cr
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideIntent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOverrideStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Request
name|r
range|:
name|getRequest
argument_list|()
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|isWaitList
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
name|XCourseId
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|CourseRequest
name|courseRequest
init|=
literal|null
decl_stmt|;
name|cd
label|:
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|courseRequest
operator|=
name|cr
expr_stmt|;
break|break
name|cd
break|;
block|}
block|}
if|if
condition|(
name|courseRequest
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
operator|==
name|rc
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|courseRequest
operator|.
name|setOverrideExternalId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|courseRequest
operator|.
name|setOverrideTimeStamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|courseRequest
operator|.
name|setCourseRequestOverrideIntent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|courseRequest
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|courseRequest
operator|.
name|setOverrideExternalId
argument_list|(
name|rc
operator|.
name|getOverrideExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|courseRequest
operator|.
name|setOverrideTimeStamp
argument_list|(
name|rc
operator|.
name|getOverrideTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|courseRequest
operator|.
name|setCourseRequestOverrideIntent
argument_list|(
name|CourseRequestOverrideIntent
operator|.
name|WAITLIST
argument_list|)
expr_stmt|;
name|courseRequest
operator|.
name|setCourseRequestOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
operator|==
name|rc
operator|.
name|getStatus
argument_list|()
condition|?
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
else|:
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
operator|==
name|rc
operator|.
name|getStatus
argument_list|()
condition|?
name|CourseRequestOverrideStatus
operator|.
name|PENDING
else|:
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
operator|==
name|rc
operator|.
name|getStatus
argument_list|()
condition|?
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
else|:
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
operator|==
name|rc
operator|.
name|getStatus
argument_list|()
condition|?
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|courseRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|student
operator|.
name|setOverrideExternalId
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getMaxCreditOverrideExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideTimeStamp
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getMaxCreditOverrideTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
operator|==
name|getRequest
argument_list|()
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
condition|?
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
else|:
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
operator|==
name|getRequest
argument_list|()
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
condition|?
name|CourseRequestOverrideStatus
operator|.
name|PENDING
else|:
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
operator|==
name|getRequest
argument_list|()
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
condition|?
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
else|:
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
operator|==
name|getRequest
argument_list|()
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
condition|?
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
else|:
literal|null
argument_list|)
expr_stmt|;
name|student
operator|.
name|setOverrideMaxCredit
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getMaxCreditOverride
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|student
argument_list|)
expr_stmt|;
comment|// Reload student
name|XStudent
name|newStudent
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newStudent
operator|=
name|ReloadAllData
operator|.
name|loadStudentNoCheck
argument_list|(
name|student
argument_list|,
name|server
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|server
operator|.
name|update
argument_list|(
name|newStudent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|newStudent
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
operator|&&
name|cr
operator|.
name|isWaitlist
argument_list|()
operator|&&
operator|!
name|cr
operator|.
name|isAlternative
argument_list|()
condition|)
name|action
operator|.
name|addRequest
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|getRequest
argument_list|()
operator|.
name|hasConfirmations
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|getRequest
argument_list|()
operator|.
name|getConfirmations
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|hasCourse
argument_list|()
condition|)
name|action
operator|.
name|addMessageBuilder
argument_list|()
operator|.
name|setText
argument_list|(
name|m
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|m
operator|.
name|isError
argument_list|()
condition|?
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|ERROR
else|:
name|m
operator|.
name|isConfirm
argument_list|()
condition|?
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|WARN
else|:
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
if|if
condition|(
name|getRequest
argument_list|()
operator|.
name|hasCreditNote
argument_list|()
condition|)
name|action
operator|.
name|addMessageBuilder
argument_list|()
operator|.
name|setText
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getCreditNote
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
if|if
condition|(
name|getRequest
argument_list|()
operator|.
name|hasCreditWarning
argument_list|()
condition|)
name|action
operator|.
name|addMessageBuilder
argument_list|()
operator|.
name|setText
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getCreditWarning
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
if|if
condition|(
name|getRequest
argument_list|()
operator|.
name|hasErrorMessage
argument_list|()
condition|)
name|action
operator|.
name|addMessageBuilder
argument_list|()
operator|.
name|setText
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getErrorMessaeg
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
return|return
name|iRequest
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|error
argument_list|(
literal|"Failed to save wait-lists: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|helper
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"wait-submit"
return|;
block|}
block|}
end_class

end_unit

