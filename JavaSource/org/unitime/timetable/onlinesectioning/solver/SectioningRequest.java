begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|AssignmentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|DefaultSingleAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|StudentQuality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Instructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
operator|.
name|RequestPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
operator|.
name|StudentPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|SctAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|selection
operator|.
name|ResectioningWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|selection
operator|.
name|ResectioningWeights
operator|.
name|LastSectionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|WaitListMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XFreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XIndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XTime
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SectioningRequest
implements|implements
name|LastSectionProvider
block|{
specifier|private
name|XCourseRequest
name|iOldRequest
decl_stmt|,
name|iRequest
decl_stmt|;
specifier|private
name|XStudent
name|iOldStudent
decl_stmt|,
name|iStudent
decl_stmt|;
specifier|private
name|XEnrollment
name|iLastEnrollment
decl_stmt|,
name|iNewEnrollment
decl_stmt|;
specifier|private
name|XOffering
name|iOldOffering
decl_stmt|,
name|iOffering
decl_stmt|;
specifier|private
name|boolean
name|iHasIndividualReservation
decl_stmt|;
specifier|private
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|iAction
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Section
argument_list|>
name|iLastSections
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|RequestPriority
name|iRequestPriority
init|=
name|RequestPriority
operator|.
name|Normal
decl_stmt|;
specifier|private
name|StudentPriority
name|iStudentPriority
init|=
name|StudentPriority
operator|.
name|Normal
decl_stmt|;
specifier|private
name|int
name|iAlternativity
init|=
literal|0
decl_stmt|;
specifier|private
name|XCourseId
name|iCourseId
init|=
literal|null
decl_stmt|;
specifier|private
name|XCourseId
name|iDropCourseId
init|=
literal|null
decl_stmt|;
specifier|public
name|SectioningRequest
parameter_list|(
name|XOffering
name|offering
parameter_list|,
name|XCourseRequest
name|request
parameter_list|,
name|XCourseId
name|courseId
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|StudentPriority
name|priority
parameter_list|,
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
name|iStudent
operator|=
name|student
expr_stmt|;
name|iOffering
operator|=
name|offering
expr_stmt|;
name|iCourseId
operator|=
name|courseId
expr_stmt|;
if|if
condition|(
name|courseId
operator|!=
literal|null
condition|)
block|{
name|iAlternativity
operator|=
name|request
operator|.
name|getCourseIds
argument_list|()
operator|.
name|indexOf
argument_list|(
name|courseId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|getCourseIds
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getCourseIds
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getOfferingId
argument_list|()
operator|.
name|equals
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
block|{
name|iAlternativity
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
block|}
name|iDropCourseId
operator|=
name|request
operator|.
name|getWaitListSwapWithCourseOffering
argument_list|()
expr_stmt|;
name|iStudentPriority
operator|=
name|priority
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"Student Priority"
argument_list|)
operator|.
name|setValue
argument_list|(
name|iStudentPriority
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|isCritical
argument_list|()
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getCritical
argument_list|()
operator|==
name|CourseDemand
operator|.
name|Critical
operator|.
name|CRITICAL
operator|.
name|ordinal
argument_list|()
condition|)
name|iRequestPriority
operator|=
name|RequestPriority
operator|.
name|Critical
expr_stmt|;
if|else if
condition|(
name|request
operator|.
name|getCritical
argument_list|()
operator|==
name|CourseDemand
operator|.
name|Critical
operator|.
name|IMPORTANT
operator|.
name|ordinal
argument_list|()
condition|)
name|iRequestPriority
operator|=
name|RequestPriority
operator|.
name|Important
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|action
operator|.
name|addOptionBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"Request Priority"
argument_list|)
operator|.
name|setValue
argument_list|(
name|iRequestPriority
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|iHasIndividualReservation
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|XReservation
name|reservation
range|:
name|iOffering
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|reservation
operator|.
name|mustBeUsed
argument_list|()
operator|||
name|reservation
operator|.
name|isExpired
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|reservation
operator|instanceof
name|XIndividualReservation
operator|&&
operator|(
operator|(
name|XIndividualReservation
operator|)
name|reservation
operator|)
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|iHasIndividualReservation
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|iAction
operator|=
name|action
expr_stmt|;
block|}
specifier|public
name|XCourseId
name|getCourseId
parameter_list|()
block|{
if|if
condition|(
name|iCourseId
operator|!=
literal|null
condition|)
return|return
name|iCourseId
return|;
return|return
name|getRequest
argument_list|()
operator|.
name|getCourseIdByOfferingId
argument_list|(
name|getOffering
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|XOffering
name|getOffering
parameter_list|()
block|{
return|return
operator|(
name|iOffering
operator|==
literal|null
condition|?
name|iOldOffering
else|:
name|iOffering
operator|)
return|;
block|}
specifier|public
name|SectioningRequest
name|setOldOffering
parameter_list|(
name|XOffering
name|offering
parameter_list|)
block|{
name|iOldOffering
operator|=
name|offering
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|XOffering
name|getOldOffering
parameter_list|()
block|{
return|return
operator|(
name|iOldOffering
operator|!=
literal|null
condition|?
name|iOldOffering
else|:
name|iOffering
operator|)
return|;
block|}
specifier|public
name|XStudent
name|getStudent
parameter_list|()
block|{
return|return
operator|(
name|iStudent
operator|==
literal|null
condition|?
name|iOldStudent
else|:
name|iStudent
operator|)
return|;
block|}
specifier|public
name|SectioningRequest
name|setOldStudent
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
name|iOldStudent
operator|=
name|student
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|XStudent
name|getOldStudent
parameter_list|()
block|{
return|return
operator|(
name|iOldStudent
operator|==
literal|null
condition|?
name|iStudent
else|:
name|iOldStudent
operator|)
return|;
block|}
specifier|public
name|SectioningRequest
name|setLastEnrollment
parameter_list|(
name|XEnrollment
name|enrollment
parameter_list|)
block|{
name|iLastEnrollment
operator|=
name|enrollment
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|XEnrollment
name|getLastEnrollment
parameter_list|()
block|{
return|return
name|iLastEnrollment
operator|==
literal|null
condition|?
name|iNewEnrollment
else|:
name|iLastEnrollment
return|;
block|}
specifier|public
name|SectioningRequest
name|setNewEnrollment
parameter_list|(
name|XEnrollment
name|enrollment
parameter_list|)
block|{
name|iNewEnrollment
operator|=
name|enrollment
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|XEnrollment
name|getNewEnrollment
parameter_list|()
block|{
return|return
name|iNewEnrollment
operator|==
literal|null
condition|?
name|iLastEnrollment
else|:
name|iNewEnrollment
return|;
block|}
specifier|public
name|XCourseRequest
name|getRequest
parameter_list|()
block|{
return|return
operator|(
name|iRequest
operator|==
literal|null
condition|?
name|iOldRequest
else|:
name|iRequest
operator|)
return|;
block|}
specifier|public
name|SectioningRequest
name|setOldRequest
parameter_list|(
name|XCourseRequest
name|request
parameter_list|)
block|{
name|iOldRequest
operator|=
name|request
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|XCourseRequest
name|getOldRequest
parameter_list|()
block|{
return|return
operator|(
name|iOldRequest
operator|==
literal|null
condition|?
name|iRequest
else|:
name|iOldRequest
operator|)
return|;
block|}
specifier|public
name|void
name|setRequest
parameter_list|(
name|XCourseRequest
name|request
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasIndividualReservation
parameter_list|()
block|{
return|return
name|iHasIndividualReservation
return|;
block|}
specifier|public
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|getAction
parameter_list|()
block|{
return|return
name|iAction
return|;
block|}
specifier|public
name|XCourseId
name|getDropCourseId
parameter_list|()
block|{
if|if
condition|(
name|iLastEnrollment
operator|!=
literal|null
condition|)
return|return
literal|null
return|;
comment|// re-sectioning ->> no drop
return|return
name|iDropCourseId
return|;
block|}
specifier|public
name|XEnrollment
name|getDropEnrollment
parameter_list|()
block|{
if|if
condition|(
name|iLastEnrollment
operator|!=
literal|null
condition|)
return|return
literal|null
return|;
comment|// re-sectioning ->> no drop
if|if
condition|(
name|iDropCourseId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|XCourseRequest
name|request
init|=
name|getOldStudent
argument_list|()
operator|.
name|getRequestForCourse
argument_list|(
name|iDropCourseId
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|request
operator|==
literal|null
condition|?
literal|null
else|:
name|request
operator|.
name|getEnrollment
argument_list|()
operator|)
return|;
block|}
specifier|public
name|XCourseRequest
name|getDropRequest
parameter_list|()
block|{
if|if
condition|(
name|iLastEnrollment
operator|!=
literal|null
condition|)
return|return
literal|null
return|;
comment|// re-sectioning ->> no drop
if|if
condition|(
name|iDropCourseId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|XCourseRequest
name|request
init|=
name|getStudent
argument_list|()
operator|.
name|getRequestForCourse
argument_list|(
name|iDropCourseId
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
name|request
operator|=
name|getOldStudent
argument_list|()
operator|.
name|getRequestForCourse
argument_list|(
name|iDropCourseId
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
specifier|public
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
name|getOriginalEnrollment
parameter_list|()
block|{
return|return
name|getOldRequest
argument_list|()
operator|.
name|getOptions
argument_list|(
name|getOldOffering
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|SectioningRequest
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|SectioningRequest
operator|)
name|o
operator|)
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|RequestPriority
name|getRequestPriority
parameter_list|()
block|{
return|return
name|iRequestPriority
return|;
block|}
specifier|public
name|StudentPriority
name|getStudentPriority
parameter_list|()
block|{
return|return
name|iStudentPriority
return|;
block|}
specifier|public
name|int
name|getAlternativity
parameter_list|()
block|{
return|return
name|iAlternativity
return|;
block|}
specifier|public
name|boolean
name|isOverlappingFreeTime
parameter_list|(
name|FreeTimeRequest
name|request
parameter_list|,
name|Enrollment
name|e
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|getTime
argument_list|()
operator|==
literal|null
operator|||
name|e
operator|.
name|isAllowOverlap
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|SctAssignment
name|assignment
range|:
name|e
operator|.
name|getAssignments
argument_list|()
control|)
if|if
condition|(
operator|!
name|assignment
operator|.
name|isAllowOverlap
argument_list|()
operator|&&
name|assignment
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getTime
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|assignment
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|XEnrollment
name|resection
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|ResectioningWeights
name|w
parameter_list|,
name|StudentQuality
name|sq
parameter_list|)
block|{
name|w
operator|.
name|setLastSectionProvider
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Enrollment
argument_list|>
name|enrollments
init|=
operator|new
name|ArrayList
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|double
name|bestValue
init|=
literal|0.0
decl_stmt|;
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
init|=
operator|new
name|AssignmentMap
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|CourseRequest
name|request
init|=
name|convert
argument_list|(
name|assignment
argument_list|,
name|getRequest
argument_list|()
argument_list|,
name|getDropCourseId
argument_list|()
argument_list|,
name|server
argument_list|,
name|WaitListMode
operator|.
name|WaitList
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Long
name|sectionId
range|:
name|getLastEnrollment
argument_list|()
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
for|for
control|(
name|Course
name|course
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
name|iLastSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
name|enrollments
label|:
for|for
control|(
name|Enrollment
name|e
range|:
name|request
operator|.
name|getAvaiableEnrollments
argument_list|(
name|assignment
argument_list|)
control|)
block|{
comment|// only consider enrollments of the offering that is being checked
if|if
condition|(
name|e
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
name|getOffering
argument_list|()
operator|.
name|getOfferingId
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Request
name|other
range|:
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
continue|continue;
name|Enrollment
name|x
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|isOverlapping
argument_list|(
name|x
argument_list|)
condition|)
continue|continue
name|enrollments
continue|;
if|if
condition|(
operator|!
name|w
operator|.
name|isFreeTimeAllowOverlaps
argument_list|()
operator|&&
name|other
operator|instanceof
name|FreeTimeRequest
operator|&&
name|other
operator|.
name|getPriority
argument_list|()
operator|<
name|request
operator|.
name|getPriority
argument_list|()
operator|&&
name|isOverlappingFreeTime
argument_list|(
operator|(
name|FreeTimeRequest
operator|)
name|other
argument_list|,
name|e
argument_list|)
condition|)
continue|continue
name|enrollments
continue|;
block|}
for|for
control|(
name|Section
name|s
range|:
name|e
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|checkDeadline
argument_list|(
name|e
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|XTime
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
name|OnlineSectioningServer
operator|.
name|Deadline
operator|.
name|NEW
argument_list|)
condition|)
continue|continue
name|enrollments
continue|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|getLastEnrollment
argument_list|()
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
operator|&&
operator|!
name|server
operator|.
name|checkDeadline
argument_list|(
name|e
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|XTime
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
name|OnlineSectioningServer
operator|.
name|Deadline
operator|.
name|CHANGE
argument_list|)
condition|)
continue|continue
name|enrollments
continue|;
block|}
block|}
name|double
name|value
init|=
name|w
operator|.
name|getWeight
argument_list|(
name|assignment
argument_list|,
name|e
argument_list|,
name|sq
operator|.
name|allConflicts
argument_list|(
name|assignment
argument_list|,
name|e
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollments
operator|.
name|isEmpty
argument_list|()
operator|||
name|value
operator|>
name|bestValue
condition|)
block|{
name|enrollments
operator|.
name|clear
argument_list|()
expr_stmt|;
name|enrollments
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|bestValue
operator|=
name|value
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|==
name|bestValue
condition|)
block|{
name|enrollments
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|enrollments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|XEnrollment
argument_list|(
name|ToolBox
operator|.
name|random
argument_list|(
name|enrollments
argument_list|)
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|sameLastChoice
parameter_list|(
name|Section
name|current
parameter_list|)
block|{
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Section
name|section
range|:
name|iLastSections
control|)
if|if
condition|(
name|current
operator|.
name|sameChoice
argument_list|(
name|section
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getOriginalEnrollment
argument_list|()
operator|!=
literal|null
condition|)
name|sections
label|:
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Section
name|section
range|:
name|getOriginalEnrollment
argument_list|()
operator|.
name|getSectionList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|hasSubpart
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasExternalId
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasUniqueId
argument_list|()
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|!=
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
continue|continue;
block|}
if|if
condition|(
name|section
operator|.
name|hasTime
argument_list|()
condition|)
block|{
if|if
condition|(
name|current
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|!=
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStart
argument_list|()
operator|!=
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|!=
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|hasPattern
argument_list|()
operator|&&
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getPattern
argument_list|()
argument_list|,
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
else|else
block|{
if|if
condition|(
name|current
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
block|}
if|if
condition|(
name|current
operator|.
name|nrInstructors
argument_list|()
operator|!=
name|section
operator|.
name|getInstructorCount
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|instructor
range|:
name|section
operator|.
name|getInstructorList
argument_list|()
control|)
if|if
condition|(
operator|!
name|instructor
operator|.
name|hasUniqueId
argument_list|()
operator|||
operator|!
name|current
operator|.
name|getInstructors
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|Instructor
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
condition|)
continue|continue
name|sections
continue|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|sameLastTime
parameter_list|(
name|Section
name|current
parameter_list|)
block|{
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Section
name|section
range|:
name|iLastSections
control|)
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
if|if
condition|(
name|ResectioningWeights
operator|.
name|sameTime
argument_list|(
name|current
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getOriginalEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Section
name|section
range|:
name|getOriginalEnrollment
argument_list|()
operator|.
name|getSectionList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|hasSubpart
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasExternalId
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasUniqueId
argument_list|()
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|!=
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
continue|continue;
block|}
if|if
condition|(
name|section
operator|.
name|hasTime
argument_list|()
condition|)
block|{
if|if
condition|(
name|current
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|!=
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStart
argument_list|()
operator|!=
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|!=
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|hasPattern
argument_list|()
operator|&&
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getPattern
argument_list|()
argument_list|,
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
else|else
block|{
if|if
condition|(
name|current
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|sameLastRoom
parameter_list|(
name|Section
name|current
parameter_list|)
block|{
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Section
name|section
range|:
name|iLastSections
control|)
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
if|if
condition|(
name|ResectioningWeights
operator|.
name|sameRooms
argument_list|(
name|current
argument_list|,
name|section
operator|.
name|getRooms
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getOriginalEnrollment
argument_list|()
operator|!=
literal|null
condition|)
name|sections
label|:
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Section
name|section
range|:
name|getOriginalEnrollment
argument_list|()
operator|.
name|getSectionList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|hasSubpart
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasExternalId
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasUniqueId
argument_list|()
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|!=
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
continue|continue;
block|}
if|if
condition|(
name|section
operator|.
name|getLocationCount
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|current
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
operator|||
name|current
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|rooms
label|:
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|room
range|:
name|section
operator|.
name|getLocationList
argument_list|()
control|)
block|{
for|for
control|(
name|RoomLocation
name|loc
range|:
name|current
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|room
operator|.
name|hasUniqueId
argument_list|()
operator|&&
name|room
operator|.
name|getUniqueId
argument_list|()
operator|==
name|loc
operator|.
name|getId
argument_list|()
condition|)
continue|continue
name|rooms
continue|;
if|if
condition|(
name|room
operator|.
name|hasName
argument_list|()
operator|&&
name|room
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|loc
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue
name|rooms
continue|;
block|}
continue|continue
name|sections
continue|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|current
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|current
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|sameLastName
parameter_list|(
name|Section
name|current
parameter_list|,
name|Course
name|course
parameter_list|)
block|{
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Section
name|section
range|:
name|iLastSections
control|)
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
return|return
name|ResectioningWeights
operator|.
name|sameName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|current
argument_list|,
name|section
argument_list|)
return|;
if|if
condition|(
name|getOriginalEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Section
name|section
range|:
name|getOriginalEnrollment
argument_list|()
operator|.
name|getSectionList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|hasSubpart
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasExternalId
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasUniqueId
argument_list|()
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|!=
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
continue|continue;
block|}
if|if
condition|(
operator|!
name|section
operator|.
name|hasClazz
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|hasName
argument_list|()
operator|&&
operator|!
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|hasExternalId
argument_list|()
operator|&&
operator|!
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
condition|)
continue|continue;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|CourseRequest
name|convert
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|XCourseRequest
name|request
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|WaitListMode
name|wlMode
parameter_list|)
block|{
name|XCourseId
name|dropCourse
init|=
operator|(
name|request
operator|.
name|isWaitlist
argument_list|(
name|wlMode
argument_list|)
condition|?
name|request
operator|.
name|getWaitListSwapWithCourseOffering
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
return|return
name|convert
argument_list|(
name|assignment
argument_list|,
name|request
argument_list|,
name|dropCourse
argument_list|,
name|server
argument_list|,
name|wlMode
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CourseRequest
name|convert
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|XCourseRequest
name|request
parameter_list|,
name|XCourseId
name|dropCourse
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|WaitListMode
name|wlMode
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|assignment
argument_list|,
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
argument_list|,
name|request
argument_list|,
name|server
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dropCourse
argument_list|,
name|wlMode
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Enrollment
name|convert
parameter_list|(
name|XCourseRequest
name|request
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|WaitListMode
name|wlMode
parameter_list|)
block|{
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
init|=
operator|new
name|DefaultSingleAssignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|CourseRequest
name|cr
init|=
name|convert
argument_list|(
name|assignment
argument_list|,
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
argument_list|,
name|request
argument_list|,
name|server
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|wlMode
argument_list|)
decl_stmt|;
return|return
name|assignment
operator|.
name|getValue
argument_list|(
name|cr
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CourseRequest
name|convert
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|XStudent
name|student
parameter_list|,
name|XCourseRequest
name|request
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|XOffering
name|oldOffering
parameter_list|,
name|XEnrollment
name|oldEnrollment
parameter_list|,
name|XCourseId
name|dropCourse
parameter_list|,
name|WaitListMode
name|wlMode
parameter_list|)
block|{
name|Student
name|clonnedStudent
init|=
operator|new
name|Student
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
name|clonnedStudent
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|clonnedStudent
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|clonnedStudent
operator|.
name|setNeedShortDistances
argument_list|(
name|student
operator|.
name|hasAccomodation
argument_list|(
name|server
operator|.
name|getDistanceMetric
argument_list|()
operator|.
name|getShortDistanceAccommodationReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clonnedStudent
operator|.
name|setAllowDisabled
argument_list|(
name|student
operator|.
name|isAllowDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|CourseRequest
name|ret
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|ft
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|r
decl_stmt|;
operator|new
name|FreeTimeRequest
argument_list|(
name|r
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|r
operator|.
name|getPriority
argument_list|()
argument_list|,
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|,
name|clonnedStudent
argument_list|,
operator|new
name|TimeLocation
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|,
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|,
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|1l
argument_list|,
literal|"Free Time"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
name|List
argument_list|<
name|Course
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XCourseId
name|c
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldOffering
operator|!=
literal|null
operator|&&
name|oldOffering
operator|.
name|getOfferingId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
name|offering
operator|=
name|oldOffering
expr_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|offering
operator|.
name|toCourse
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|student
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CourseRequest
name|clonnedRequest
init|=
operator|new
name|CourseRequest
argument_list|(
name|r
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|r
operator|.
name|getPriority
argument_list|()
argument_list|,
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|,
name|clonnedStudent
argument_list|,
name|courses
argument_list|,
name|cr
operator|.
name|isWaitListOrNoSub
argument_list|(
name|wlMode
argument_list|)
argument_list|,
name|cr
operator|.
name|getTimeStamp
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|cr
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|cr
operator|.
name|fillChoicesIn
argument_list|(
name|clonnedRequest
argument_list|)
expr_stmt|;
name|XEnrollment
name|enrollment
init|=
name|cr
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldEnrollment
operator|!=
literal|null
operator|&&
name|cr
operator|.
name|getCourseIdByOfferingId
argument_list|(
name|oldOffering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|enrollment
operator|=
name|oldEnrollment
expr_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
operator|(
name|dropCourse
operator|==
literal|null
operator|||
operator|!
name|dropCourse
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|Config
name|config
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Section
argument_list|>
name|assignments
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Course
name|c
range|:
name|clonnedRequest
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
for|for
control|(
name|Config
name|g
range|:
name|c
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getConfigId
argument_list|()
operator|.
name|equals
argument_list|(
name|g
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|config
operator|=
name|g
expr_stmt|;
for|for
control|(
name|Subpart
name|s
range|:
name|g
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|Section
name|x
range|:
name|s
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|enrollment
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|x
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|assignments
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
name|assignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
operator|new
name|Enrollment
argument_list|(
name|clonnedRequest
argument_list|,
literal|0
argument_list|,
name|config
argument_list|,
name|assignments
argument_list|,
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|equals
argument_list|(
name|r
argument_list|)
condition|)
name|ret
operator|=
name|clonnedRequest
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|Course
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XCourseId
name|c
range|:
name|request
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldOffering
operator|!=
literal|null
operator|&&
name|oldOffering
operator|.
name|getOfferingId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
name|offering
operator|=
name|oldOffering
expr_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|offering
operator|.
name|toCourse
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|student
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
operator|new
name|CourseRequest
argument_list|(
name|request
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|request
operator|.
name|getPriority
argument_list|()
argument_list|,
name|request
operator|.
name|isAlternative
argument_list|()
argument_list|,
name|clonnedStudent
argument_list|,
name|courses
argument_list|,
name|request
operator|.
name|isWaitListOrNoSub
argument_list|(
name|wlMode
argument_list|)
argument_list|,
name|request
operator|.
name|getTimeStamp
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|request
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|fillChoicesIn
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clonnedStudent
operator|.
name|getExternalId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|clonnedStudent
operator|.
name|getExternalId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|Long
argument_list|>
name|offerings
init|=
name|server
operator|.
name|getInstructedOfferings
argument_list|(
name|clonnedStudent
operator|.
name|getExternalId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offerings
operator|!=
literal|null
condition|)
for|for
control|(
name|Long
name|offeringId
range|:
name|offerings
control|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
name|offering
operator|.
name|fillInUnavailabilities
argument_list|(
name|clonnedStudent
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|Enrollment
name|convert
parameter_list|(
name|XStudent
name|student
parameter_list|,
name|XCourseRequest
name|request
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|XOffering
name|oldOffering
parameter_list|,
name|XEnrollment
name|oldEnrollment
parameter_list|,
name|WaitListMode
name|wlMode
parameter_list|)
block|{
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
init|=
operator|new
name|DefaultSingleAssignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|CourseRequest
name|cr
init|=
name|convert
argument_list|(
name|assignment
argument_list|,
name|student
argument_list|,
name|request
argument_list|,
name|server
argument_list|,
name|oldOffering
argument_list|,
name|oldEnrollment
argument_list|,
literal|null
argument_list|,
name|wlMode
argument_list|)
decl_stmt|;
return|return
name|assignment
operator|.
name|getValue
argument_list|(
name|cr
argument_list|)
return|;
block|}
block|}
end_class

end_unit

