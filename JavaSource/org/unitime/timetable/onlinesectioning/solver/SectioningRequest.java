begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.3 - 3.5 (University Timetabling Application)  * Copyright (C) 2011 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XFreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XIndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|ResectioningWeights
operator|.
name|LastSectionProvider
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|DistanceConflict
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|TimeOverlapsCounter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SectioningRequest
implements|implements
name|Comparable
argument_list|<
name|SectioningRequest
argument_list|>
implements|,
name|LastSectionProvider
block|{
specifier|private
name|XCourseRequest
name|iRequest
decl_stmt|;
specifier|private
name|XStudent
name|iOldStudent
decl_stmt|;
specifier|private
name|XEnrollment
name|iLastEnrollment
decl_stmt|;
specifier|private
name|XOffering
name|iOffering
decl_stmt|;
specifier|private
name|boolean
name|iHasIndividualReservation
decl_stmt|;
specifier|private
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|iAction
decl_stmt|;
specifier|private
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
name|iOriginal
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Section
argument_list|>
name|iLastSections
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|SectioningRequest
parameter_list|(
name|XOffering
name|offering
parameter_list|,
name|XCourseRequest
name|request
parameter_list|,
name|XStudent
name|oldStudent
parameter_list|,
name|XEnrollment
name|lastEnrollment
parameter_list|,
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
parameter_list|,
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
name|original
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
name|iOldStudent
operator|=
name|oldStudent
expr_stmt|;
name|iLastEnrollment
operator|=
name|lastEnrollment
expr_stmt|;
name|iOffering
operator|=
name|offering
expr_stmt|;
name|iHasIndividualReservation
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|XReservation
name|reservation
range|:
name|iOffering
operator|.
name|getReservations
argument_list|()
control|)
if|if
condition|(
name|reservation
operator|instanceof
name|XIndividualReservation
operator|&&
operator|(
operator|(
name|XIndividualReservation
operator|)
name|reservation
operator|)
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|iHasIndividualReservation
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|iAction
operator|=
name|action
expr_stmt|;
name|iOriginal
operator|=
name|original
expr_stmt|;
block|}
specifier|public
name|XCourseRequest
name|getRequest
parameter_list|()
block|{
return|return
name|iRequest
return|;
block|}
specifier|public
name|void
name|setRequest
parameter_list|(
name|XCourseRequest
name|request
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
block|}
specifier|public
name|XStudent
name|getOldStudent
parameter_list|()
block|{
return|return
name|iOldStudent
return|;
block|}
specifier|public
name|XEnrollment
name|getLastEnrollment
parameter_list|()
block|{
return|return
name|iLastEnrollment
return|;
block|}
specifier|public
name|XOffering
name|getOffering
parameter_list|()
block|{
return|return
name|iOffering
return|;
block|}
specifier|public
name|boolean
name|hasIndividualReservation
parameter_list|()
block|{
return|return
name|iHasIndividualReservation
return|;
block|}
specifier|public
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|getAction
parameter_list|()
block|{
return|return
name|iAction
return|;
block|}
specifier|public
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
name|getOriginalEnrollment
parameter_list|()
block|{
return|return
name|iOriginal
return|;
block|}
specifier|public
name|void
name|setOriginalEnrollment
parameter_list|(
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
name|original
parameter_list|)
block|{
name|iOriginal
operator|=
name|original
expr_stmt|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|Long
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|SectioningRequest
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|SectioningRequest
operator|)
name|o
operator|)
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|SectioningRequest
name|r
parameter_list|)
block|{
comment|// Requests with last enrollment (recently unassigned requests) have priority
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|==
literal|null
operator|&&
name|r
operator|.
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getLastEnrollment
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
comment|// Check individual reservations
if|if
condition|(
name|hasIndividualReservation
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|hasIndividualReservation
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
operator|!
name|hasIndividualReservation
argument_list|()
operator|&&
name|r
operator|.
name|hasIndividualReservation
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Use time stamp
if|if
condition|(
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
if|else if
condition|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|// Alternative requests last
if|if
condition|(
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
comment|// Use priority
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Use time stamp
if|if
condition|(
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cmp
operator|=
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
if|else if
condition|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
operator|new
name|Long
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|XEnrollment
name|resection
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|ResectioningWeights
name|w
parameter_list|,
name|DistanceConflict
name|dc
parameter_list|,
name|TimeOverlapsCounter
name|toc
parameter_list|)
block|{
name|w
operator|.
name|setLastSectionProvider
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Enrollment
argument_list|>
name|enrollments
init|=
operator|new
name|ArrayList
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|double
name|bestValue
init|=
literal|0.0
decl_stmt|;
name|CourseRequest
name|request
init|=
name|convert
argument_list|(
name|getRequest
argument_list|()
argument_list|,
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Long
name|sectionId
range|:
name|getLastEnrollment
argument_list|()
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
for|for
control|(
name|Course
name|course
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
name|iLastSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
name|enrollments
label|:
for|for
control|(
name|Enrollment
name|e
range|:
name|request
operator|.
name|getAvaiableEnrollments
argument_list|()
control|)
block|{
for|for
control|(
name|Request
name|other
range|:
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|other
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|other
operator|.
name|equals
argument_list|(
name|getRequest
argument_list|()
argument_list|)
operator|&&
name|other
operator|.
name|getAssignment
argument_list|()
operator|.
name|isOverlapping
argument_list|(
name|e
argument_list|)
condition|)
continue|continue
name|enrollments
continue|;
for|for
control|(
name|Section
name|s
range|:
name|e
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|checkDeadline
argument_list|(
name|e
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|XTime
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
name|OnlineSectioningServer
operator|.
name|Deadline
operator|.
name|NEW
argument_list|)
condition|)
continue|continue
name|enrollments
continue|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|getLastEnrollment
argument_list|()
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
operator|&&
operator|!
name|server
operator|.
name|checkDeadline
argument_list|(
name|e
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|XTime
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
name|OnlineSectioningServer
operator|.
name|Deadline
operator|.
name|CHANGE
argument_list|)
condition|)
continue|continue
name|enrollments
continue|;
block|}
block|}
name|double
name|value
init|=
name|w
operator|.
name|getWeight
argument_list|(
name|e
argument_list|,
name|dc
operator|.
name|allConflicts
argument_list|(
name|e
argument_list|)
argument_list|,
name|toc
operator|.
name|allConflicts
argument_list|(
name|e
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollments
operator|.
name|isEmpty
argument_list|()
operator|||
name|value
operator|>
name|bestValue
condition|)
block|{
name|enrollments
operator|.
name|clear
argument_list|()
expr_stmt|;
name|enrollments
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|bestValue
operator|=
name|value
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|==
name|bestValue
condition|)
block|{
name|enrollments
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|enrollments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|XEnrollment
argument_list|(
name|ToolBox
operator|.
name|random
argument_list|(
name|enrollments
argument_list|)
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|sameLastChoice
parameter_list|(
name|Section
name|current
parameter_list|)
block|{
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Section
name|section
range|:
name|iLastSections
control|)
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
if|if
condition|(
name|ResectioningWeights
operator|.
name|sameChoice
argument_list|(
name|current
argument_list|,
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getOriginalEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Section
name|section
range|:
name|getOriginalEnrollment
argument_list|()
operator|.
name|getSectionList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|hasSubpart
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasExternalId
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasUniqueId
argument_list|()
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|!=
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
continue|continue;
block|}
if|if
condition|(
name|section
operator|.
name|hasTime
argument_list|()
condition|)
block|{
if|if
condition|(
name|current
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|!=
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStart
argument_list|()
operator|!=
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|!=
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|hasPattern
argument_list|()
operator|&&
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getPattern
argument_list|()
argument_list|,
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
else|else
block|{
if|if
condition|(
name|current
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
block|}
name|String
name|instructorNames
init|=
literal|""
decl_stmt|;
name|String
name|instructorIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|instructor
range|:
name|section
operator|.
name|getInstructorList
argument_list|()
control|)
block|{
if|if
condition|(
name|instructor
operator|.
name|hasUniqueId
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|instructorIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|instructorIds
operator|+=
literal|":"
expr_stmt|;
name|instructorIds
operator|+=
name|instructor
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|instructor
operator|.
name|hasName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|instructorNames
operator|.
name|isEmpty
argument_list|()
condition|)
name|instructorNames
operator|+=
literal|":"
expr_stmt|;
name|instructorNames
operator|+=
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"|"
operator|+
operator|(
name|instructor
operator|.
name|hasExternalId
argument_list|()
condition|?
name|instructor
operator|.
name|getExternalId
argument_list|()
else|:
literal|""
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|instructorIds
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorIds
argument_list|()
argument_list|)
operator|&&
operator|!
name|instructorNames
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
argument_list|)
condition|)
continue|continue;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|sameLastTime
parameter_list|(
name|Section
name|current
parameter_list|)
block|{
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Section
name|section
range|:
name|iLastSections
control|)
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
if|if
condition|(
name|ResectioningWeights
operator|.
name|sameTime
argument_list|(
name|current
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getOriginalEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Section
name|section
range|:
name|getOriginalEnrollment
argument_list|()
operator|.
name|getSectionList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|hasSubpart
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasExternalId
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasUniqueId
argument_list|()
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|!=
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
continue|continue;
block|}
if|if
condition|(
name|section
operator|.
name|hasTime
argument_list|()
condition|)
block|{
if|if
condition|(
name|current
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|!=
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStart
argument_list|()
operator|!=
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|!=
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|hasPattern
argument_list|()
operator|&&
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getPattern
argument_list|()
argument_list|,
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
else|else
block|{
if|if
condition|(
name|current
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|sameLastRoom
parameter_list|(
name|Section
name|current
parameter_list|)
block|{
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Section
name|section
range|:
name|iLastSections
control|)
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
if|if
condition|(
name|ResectioningWeights
operator|.
name|sameRooms
argument_list|(
name|current
argument_list|,
name|section
operator|.
name|getRooms
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getOriginalEnrollment
argument_list|()
operator|!=
literal|null
condition|)
name|sections
label|:
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Section
name|section
range|:
name|getOriginalEnrollment
argument_list|()
operator|.
name|getSectionList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|hasSubpart
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasExternalId
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasUniqueId
argument_list|()
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|!=
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
continue|continue;
block|}
if|if
condition|(
name|section
operator|.
name|getLocationCount
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|current
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
operator|||
name|current
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|rooms
label|:
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Entity
name|room
range|:
name|section
operator|.
name|getLocationList
argument_list|()
control|)
block|{
for|for
control|(
name|RoomLocation
name|loc
range|:
name|current
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|room
operator|.
name|hasUniqueId
argument_list|()
operator|&&
name|room
operator|.
name|getUniqueId
argument_list|()
operator|==
name|loc
operator|.
name|getId
argument_list|()
condition|)
continue|continue
name|rooms
continue|;
if|if
condition|(
name|room
operator|.
name|hasName
argument_list|()
operator|&&
name|room
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|loc
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue
name|rooms
continue|;
block|}
continue|continue
name|sections
continue|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|current
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|current
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|sameLastName
parameter_list|(
name|Section
name|current
parameter_list|,
name|Course
name|course
parameter_list|)
block|{
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Section
name|section
range|:
name|iLastSections
control|)
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
return|return
name|ResectioningWeights
operator|.
name|sameName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|current
argument_list|,
name|section
argument_list|)
return|;
if|if
condition|(
name|getOriginalEnrollment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Section
name|section
range|:
name|getOriginalEnrollment
argument_list|()
operator|.
name|getSectionList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|hasSubpart
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasExternalId
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|hasUniqueId
argument_list|()
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|!=
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
continue|continue;
block|}
if|if
condition|(
operator|!
name|section
operator|.
name|hasClazz
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|hasName
argument_list|()
operator|&&
operator|!
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|hasExternalId
argument_list|()
operator|&&
operator|!
name|section
operator|.
name|getClazz
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
condition|)
continue|continue;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|CourseRequest
name|convert
parameter_list|(
name|XCourseRequest
name|request
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|server
operator|.
name|getStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
argument_list|,
name|request
argument_list|,
name|server
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CourseRequest
name|convert
parameter_list|(
name|XStudent
name|student
parameter_list|,
name|XCourseRequest
name|request
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|XOffering
name|oldOffering
parameter_list|,
name|XEnrollment
name|oldEnrollment
parameter_list|)
block|{
name|Student
name|clonnedStudent
init|=
operator|new
name|Student
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
name|CourseRequest
name|ret
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XFreeTimeRequest
condition|)
block|{
name|XFreeTimeRequest
name|ft
init|=
operator|(
name|XFreeTimeRequest
operator|)
name|r
decl_stmt|;
name|FreeTimeRequest
name|ftr
init|=
operator|new
name|FreeTimeRequest
argument_list|(
name|r
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|r
operator|.
name|getPriority
argument_list|()
argument_list|,
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|,
name|clonnedStudent
argument_list|,
operator|new
name|TimeLocation
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|,
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|,
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|1l
argument_list|,
literal|"Free Time"
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|ftr
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|ftr
operator|.
name|createEnrollment
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|r
decl_stmt|;
name|List
argument_list|<
name|Course
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XCourseId
name|c
range|:
name|cr
operator|.
name|getCourseIds
argument_list|()
control|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldOffering
operator|!=
literal|null
operator|&&
name|oldOffering
operator|.
name|getOfferingId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
name|offering
operator|=
name|oldOffering
expr_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|offering
operator|.
name|toCourse
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|student
argument_list|,
name|server
operator|.
name|getExpectations
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
argument_list|,
name|server
operator|.
name|getDistributions
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
argument_list|,
name|server
operator|.
name|getEnrollments
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CourseRequest
name|clonnedRequest
init|=
operator|new
name|CourseRequest
argument_list|(
name|r
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|r
operator|.
name|getPriority
argument_list|()
argument_list|,
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|,
name|clonnedStudent
argument_list|,
name|courses
argument_list|,
name|cr
operator|.
name|isWaitlist
argument_list|()
argument_list|,
name|cr
operator|.
name|getTimeStamp
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|cr
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|cr
operator|.
name|fillChoicesIn
argument_list|(
name|clonnedRequest
argument_list|)
expr_stmt|;
name|XEnrollment
name|enrollment
init|=
name|cr
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldEnrollment
operator|!=
literal|null
operator|&&
name|cr
operator|.
name|getCourseIdByOfferingId
argument_list|(
name|oldOffering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|enrollment
operator|=
name|oldEnrollment
expr_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
condition|)
block|{
name|Config
name|config
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Section
argument_list|>
name|assignments
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Course
name|c
range|:
name|clonnedRequest
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
for|for
control|(
name|Config
name|g
range|:
name|c
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getConfigId
argument_list|()
operator|.
name|equals
argument_list|(
name|g
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|config
operator|=
name|g
expr_stmt|;
for|for
control|(
name|Subpart
name|s
range|:
name|g
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|Section
name|x
range|:
name|s
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|enrollment
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|x
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|assignments
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
name|clonnedRequest
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
operator|new
name|Enrollment
argument_list|(
name|clonnedRequest
argument_list|,
literal|0
argument_list|,
name|config
argument_list|,
name|assignments
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|equals
argument_list|(
name|r
argument_list|)
condition|)
name|ret
operator|=
name|clonnedRequest
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

