begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|ResectioningWeights
operator|.
name|LastSectionProvider
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|DistanceConflict
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|TimeOverlapsCounter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|Reservation
import|;
end_import

begin_class
specifier|public
class|class
name|SectioningRequest
implements|implements
name|Comparable
argument_list|<
name|SectioningRequest
argument_list|>
implements|,
name|LastSectionProvider
block|{
specifier|private
name|CourseRequest
name|iRequest
decl_stmt|;
specifier|private
name|Student
name|iOldStudent
decl_stmt|;
specifier|private
name|Enrollment
name|iLastEnrollment
decl_stmt|;
specifier|private
name|Offering
name|iOffering
decl_stmt|;
specifier|private
name|boolean
name|iHasIndividualReservation
decl_stmt|;
specifier|private
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|iAction
decl_stmt|;
specifier|public
name|SectioningRequest
parameter_list|(
name|Offering
name|offering
parameter_list|,
name|CourseRequest
name|request
parameter_list|,
name|Student
name|oldStudent
parameter_list|,
name|Enrollment
name|lastEnrollment
parameter_list|,
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
name|iOldStudent
operator|=
name|oldStudent
expr_stmt|;
name|iLastEnrollment
operator|=
name|lastEnrollment
expr_stmt|;
name|iOffering
operator|=
operator|(
name|offering
operator|!=
literal|null
condition|?
name|offering
else|:
name|iRequest
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOffering
argument_list|()
operator|)
expr_stmt|;
name|iHasIndividualReservation
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Reservation
name|reservation
range|:
name|iOffering
operator|.
name|getReservations
argument_list|()
control|)
if|if
condition|(
name|reservation
operator|instanceof
name|IndividualReservation
operator|&&
name|reservation
operator|.
name|isApplicable
argument_list|(
name|iRequest
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
block|{
name|iHasIndividualReservation
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|iAction
operator|=
name|action
expr_stmt|;
block|}
specifier|public
name|CourseRequest
name|getRequest
parameter_list|()
block|{
return|return
name|iRequest
return|;
block|}
specifier|public
name|Student
name|getOldStudent
parameter_list|()
block|{
return|return
name|iOldStudent
return|;
block|}
specifier|public
name|Enrollment
name|getLastEnrollment
parameter_list|()
block|{
return|return
name|iLastEnrollment
return|;
block|}
specifier|public
name|Offering
name|getOffering
parameter_list|()
block|{
return|return
name|iOffering
return|;
block|}
specifier|public
name|boolean
name|hasIndividualReservation
parameter_list|()
block|{
return|return
name|iHasIndividualReservation
return|;
block|}
specifier|public
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|getAction
parameter_list|()
block|{
return|return
name|iAction
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|Long
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|SectioningRequest
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
operator|(
operator|(
name|SectioningRequest
operator|)
name|o
operator|)
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|SectioningRequest
name|r
parameter_list|)
block|{
comment|// Requests with last enrollment (recently unassigned requests) have priority
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|==
literal|null
operator|&&
name|r
operator|.
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getLastEnrollment
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
comment|// Check individual reservations
if|if
condition|(
name|hasIndividualReservation
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|hasIndividualReservation
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
operator|!
name|hasIndividualReservation
argument_list|()
operator|&&
name|r
operator|.
name|hasIndividualReservation
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Use time stamp
name|int
name|cmp
init|=
operator|(
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|?
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
else|:
operator|new
name|Long
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|?
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
else|:
name|Long
operator|.
name|MAX_VALUE
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
comment|// Alternative requests last
if|if
condition|(
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
comment|// Use priority
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Use time stamp
name|cmp
operator|=
operator|(
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|?
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
else|:
operator|new
name|Long
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|?
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
else|:
name|Long
operator|.
name|MAX_VALUE
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
operator|new
name|Long
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Section
name|getLastSection
parameter_list|(
name|Section
name|current
parameter_list|)
block|{
if|if
condition|(
name|getLastEnrollment
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|Section
name|section
range|:
name|getLastEnrollment
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|current
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
return|return
name|section
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|Enrollment
name|resection
parameter_list|(
name|ResectioningWeights
name|w
parameter_list|,
name|DistanceConflict
name|dc
parameter_list|,
name|TimeOverlapsCounter
name|toc
parameter_list|)
block|{
name|w
operator|.
name|setLastSectionProvider
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Enrollment
argument_list|>
name|enrollments
init|=
operator|new
name|ArrayList
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|double
name|bestValue
init|=
literal|0.0
decl_stmt|;
name|enrollments
label|:
for|for
control|(
name|Enrollment
name|e
range|:
name|getRequest
argument_list|()
operator|.
name|getAvaiableEnrollments
argument_list|()
control|)
block|{
for|for
control|(
name|Request
name|other
range|:
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|other
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|other
operator|.
name|equals
argument_list|(
name|getRequest
argument_list|()
argument_list|)
operator|&&
name|other
operator|.
name|getAssignment
argument_list|()
operator|.
name|isOverlapping
argument_list|(
name|e
argument_list|)
condition|)
continue|continue
name|enrollments
continue|;
name|double
name|value
init|=
name|w
operator|.
name|getWeight
argument_list|(
name|e
argument_list|,
name|dc
operator|.
name|allConflicts
argument_list|(
name|e
argument_list|)
argument_list|,
name|toc
operator|.
name|allConflicts
argument_list|(
name|e
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollments
operator|.
name|isEmpty
argument_list|()
operator|||
name|value
operator|>
name|bestValue
condition|)
block|{
name|enrollments
operator|.
name|clear
argument_list|()
expr_stmt|;
name|enrollments
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|bestValue
operator|=
name|value
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|==
name|bestValue
condition|)
block|{
name|enrollments
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|enrollments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|ToolBox
operator|.
name|random
argument_list|(
name|enrollments
argument_list|)
operator|)
return|;
block|}
block|}
end_class

end_unit

