begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|constraint
operator|.
name|LinkedSections
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|DistanceConflict
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|TimeOverlapsCounter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|heuristics
operator|.
name|selection
operator|.
name|BranchBoundSelection
operator|.
name|BranchBoundNeighbour
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CourseReservation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|CourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServerImpl
operator|.
name|DummyReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServerImpl
operator|.
name|EnrollmentSectionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|multicriteria
operator|.
name|MultiCriteriaBranchAndBoundSelection
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|FindAssignmentAction
implements|implements
name|OnlineSectioningAction
argument_list|<
name|List
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CourseRequestInterface
name|iRequest
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|iAssignment
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|int
index|[]
argument_list|>
name|iLastSectionLimit
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|double
name|iValue
decl_stmt|;
specifier|public
name|FindAssignmentAction
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|,
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|assignment
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
name|iAssignment
operator|=
name|assignment
expr_stmt|;
block|}
specifier|public
name|CourseRequestInterface
name|getRequest
parameter_list|()
block|{
return|return
name|iRequest
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|getAssignment
parameter_list|()
block|{
return|return
name|iAssignment
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|StudentSectioningModel
name|model
init|=
operator|new
name|StudentSectioningModel
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|helper
operator|.
name|getAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
operator|!=
literal|null
condition|)
name|action
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Student
name|student
init|=
operator|new
name|Student
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1l
else|:
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|enrolled
init|=
literal|null
decl_stmt|;
name|Lock
name|readLock
init|=
name|server
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|Student
name|original
init|=
operator|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
condition|)
block|{
name|action
operator|.
name|getStudentBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|original
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|original
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|enrolled
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|isCourseRequest
argument_list|()
condition|)
for|for
control|(
name|Section
name|s
range|:
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
name|enrolled
operator|.
name|add
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|enrollment
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|enrollment
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|STORED
argument_list|)
expr_stmt|;
for|for
control|(
name|Request
name|oldRequest
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|oldRequest
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|oldRequest
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|isCourseRequest
argument_list|()
condition|)
for|for
control|(
name|Section
name|section
range|:
name|oldRequest
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
name|enrollment
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
name|oldRequest
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|LinkedSections
argument_list|>
name|linkedSections
init|=
operator|new
name|HashSet
argument_list|<
name|LinkedSections
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|getRequest
argument_list|()
operator|.
name|getCourses
argument_list|()
control|)
name|addRequest
argument_list|(
name|server
argument_list|,
name|model
argument_list|,
name|student
argument_list|,
name|original
argument_list|,
name|c
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|classTable
argument_list|,
name|linkedSections
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoCourse
argument_list|()
argument_list|)
throw|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|getRequest
argument_list|()
operator|.
name|getAlternatives
argument_list|()
control|)
name|addRequest
argument_list|(
name|server
argument_list|,
name|model
argument_list|,
name|student
argument_list|,
name|original
argument_list|,
name|c
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|classTable
argument_list|,
name|linkedSections
argument_list|)
expr_stmt|;
name|model
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|model
operator|.
name|setDistanceConflict
argument_list|(
operator|new
name|DistanceConflict
argument_list|(
name|server
operator|.
name|getDistanceMetric
argument_list|()
argument_list|,
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setTimeOverlaps
argument_list|(
operator|new
name|TimeOverlapsCounter
argument_list|(
literal|null
argument_list|,
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|LinkedSections
name|link
range|:
name|linkedSections
control|)
block|{
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Offering
name|offering
range|:
name|link
operator|.
name|getOfferings
argument_list|()
control|)
for|for
control|(
name|Subpart
name|subpart
range|:
name|link
operator|.
name|getSubparts
argument_list|(
name|offering
argument_list|)
control|)
for|for
control|(
name|Section
name|section
range|:
name|link
operator|.
name|getSections
argument_list|(
name|subpart
argument_list|)
control|)
block|{
name|Section
name|x
init|=
name|classTable
operator|.
name|get
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
name|sections
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sections
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
name|model
operator|.
name|addLinkedSections
argument_list|(
name|sections
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|preferredSectionsForCourse
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|requiredSectionsForCourse
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
name|requiredFreeTimes
init|=
operator|new
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|getAssignment
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getAssignment
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|requested
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|requested
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|PREVIOUS
argument_list|)
expr_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|assignment
range|:
name|getAssignment
argument_list|()
control|)
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
name|requested
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addEnrollment
argument_list|(
name|requested
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|r
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|rq
init|=
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
name|HashSet
argument_list|<
name|Section
argument_list|>
name|preferredSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Section
argument_list|>
name|requiredSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|a
label|:
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
range|:
name|getAssignment
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|isFreeTime
argument_list|()
operator|&&
name|cr
operator|.
name|getCourse
argument_list|(
name|a
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
name|a
operator|.
name|getClassId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Section
name|section
init|=
name|cr
operator|.
name|getSection
argument_list|(
name|a
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
operator|||
name|section
operator|.
name|getLimit
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue
name|a
continue|;
block|}
if|if
condition|(
name|a
operator|.
name|isPinned
argument_list|()
condition|)
name|requiredSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|preferredSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
name|rq
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
name|cr
operator|.
name|getCourse
argument_list|(
name|a
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setPreference
argument_list|(
name|a
operator|.
name|isPinned
argument_list|()
condition|?
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Preference
operator|.
name|REQUIRED
else|:
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Preference
operator|.
name|PREFERRED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|preferredSectionsForCourse
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|preferredSections
argument_list|)
expr_stmt|;
name|requiredSectionsForCourse
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|requiredSections
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FreeTimeRequest
name|ft
init|=
operator|(
name|FreeTimeRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
range|:
name|getAssignment
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|a
operator|.
name|isFreeTime
argument_list|()
operator|&&
name|a
operator|.
name|isPinned
argument_list|()
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|==
name|a
operator|.
name|getStart
argument_list|()
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|==
name|a
operator|.
name|getLength
argument_list|()
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
operator|==
name|DayCode
operator|.
name|toInt
argument_list|(
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|a
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|requiredFreeTimes
operator|.
name|add
argument_list|(
name|ft
argument_list|)
expr_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|Builder
name|ftb
range|:
name|rq
operator|.
name|getFreeTimeBuilderList
argument_list|()
control|)
name|ftb
operator|.
name|setPreference
argument_list|(
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Preference
operator|.
name|REQUIRED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|action
operator|.
name|addRequest
argument_list|(
name|rq
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|action
operator|.
name|addRequest
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|e
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|OnlineSectioningSelection
name|selection
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|selection
operator|=
operator|new
name|MultiCriteriaBranchAndBoundSelection
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|selection
operator|=
operator|new
name|SuggestionSelection
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|selection
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setPreferredSections
argument_list|(
name|preferredSectionsForCourse
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setRequiredSections
argument_list|(
name|requiredSectionsForCourse
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setRequiredFreeTimes
argument_list|(
name|requiredFreeTimes
argument_list|)
expr_stmt|;
name|BranchBoundNeighbour
name|neighbour
init|=
name|selection
operator|.
name|select
argument_list|(
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
name|neighbour
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolution
argument_list|()
argument_list|)
throw|;
name|helper
operator|.
name|info
argument_list|(
literal|"Using "
operator|+
operator|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|true
argument_list|)
condition|?
literal|"multi-criteria "
else|:
literal|""
operator|)
operator|+
operator|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|true
argument_list|)
condition|?
literal|"priority"
else|:
literal|"equal"
operator|)
operator|+
literal|" weighting model"
operator|+
literal|" with "
operator|+
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyInt
argument_list|(
literal|"Neighbour.BranchAndBoundTimeout"
argument_list|,
literal|1000
argument_list|)
operator|+
literal|" ms time limit."
argument_list|)
expr_stmt|;
name|neighbour
operator|.
name|assign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|helper
operator|.
name|info
argument_list|(
literal|"Solution: "
operator|+
name|neighbour
argument_list|)
expr_stmt|;
name|iValue
operator|=
operator|-
name|neighbour
operator|.
name|value
argument_list|()
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|solution
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|solution
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|COMPUTED
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setValue
argument_list|(
operator|-
name|neighbour
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Enrollment
name|e
range|:
name|neighbour
operator|.
name|getAssignment
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Assignment
name|section
range|:
name|e
operator|.
name|getAssignments
argument_list|()
control|)
name|solution
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|long
name|t2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
name|ret
init|=
name|convert
argument_list|(
name|server
argument_list|,
name|model
argument_list|,
name|student
argument_list|,
name|neighbour
argument_list|,
name|requiredSectionsForCourse
argument_list|,
name|requiredFreeTimes
argument_list|,
name|enrolled
argument_list|)
decl_stmt|;
name|long
name|t3
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|helper
operator|.
name|info
argument_list|(
literal|"Sectioning took "
operator|+
operator|(
name|t3
operator|-
name|t0
operator|)
operator|+
literal|"ms (model "
operator|+
operator|(
name|t1
operator|-
name|t0
operator|)
operator|+
literal|"ms, sectioning "
operator|+
operator|(
name|t2
operator|-
name|t1
operator|)
operator|+
literal|"ms, conversion "
operator|+
operator|(
name|t3
operator|-
name|t2
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|rets
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|rets
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|rets
return|;
block|}
specifier|public
name|double
name|value
parameter_list|()
block|{
return|return
name|iValue
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|Course
name|clone
parameter_list|(
name|Course
name|course
parameter_list|,
name|long
name|studentId
parameter_list|,
name|Student
name|originalStudent
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
parameter_list|)
block|{
name|Offering
name|clonedOffering
init|=
operator|new
name|Offering
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|courseLimit
init|=
name|course
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|courseLimit
operator|>=
literal|0
condition|)
block|{
name|courseLimit
operator|-=
name|course
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|courseLimit
operator|<
literal|0
condition|)
name|courseLimit
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|i
init|=
name|course
operator|.
name|getEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|courseLimit
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Course
name|clonedCourse
init|=
operator|new
name|Course
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|clonedOffering
argument_list|,
name|courseLimit
argument_list|,
name|course
operator|.
name|getProjected
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Config
argument_list|,
name|Config
argument_list|>
name|configs
init|=
operator|new
name|Hashtable
argument_list|<
name|Config
argument_list|,
name|Config
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Subpart
argument_list|,
name|Subpart
argument_list|>
name|subparts
init|=
operator|new
name|Hashtable
argument_list|<
name|Subpart
argument_list|,
name|Subpart
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Section
argument_list|,
name|Section
argument_list|>
name|sections
init|=
operator|new
name|Hashtable
argument_list|<
name|Section
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Config
argument_list|>
name|e
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Config
name|config
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|configLimit
init|=
name|config
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|configLimit
operator|>=
literal|0
condition|)
block|{
name|configLimit
operator|-=
name|config
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|configLimit
operator|<
literal|0
condition|)
name|configLimit
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|i
init|=
name|config
operator|.
name|getEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|configLimit
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Config
name|clonedConfig
init|=
operator|new
name|Config
argument_list|(
name|config
operator|.
name|getId
argument_list|()
argument_list|,
name|configLimit
argument_list|,
name|config
operator|.
name|getName
argument_list|()
argument_list|,
name|clonedOffering
argument_list|)
decl_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|config
argument_list|,
name|clonedConfig
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Subpart
argument_list|>
name|f
init|=
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|subpart
init|=
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
name|Subpart
name|clonedSubpart
init|=
operator|new
name|Subpart
argument_list|(
name|subpart
operator|.
name|getId
argument_list|()
argument_list|,
name|subpart
operator|.
name|getInstructionalType
argument_list|()
argument_list|,
name|subpart
operator|.
name|getName
argument_list|()
argument_list|,
name|clonedConfig
argument_list|,
operator|(
name|subpart
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|subparts
operator|.
name|get
argument_list|(
name|subpart
operator|.
name|getParent
argument_list|()
argument_list|)
operator|)
argument_list|)
decl_stmt|;
name|clonedSubpart
operator|.
name|setAllowOverlap
argument_list|(
name|subpart
operator|.
name|isAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|subparts
operator|.
name|put
argument_list|(
name|subpart
argument_list|,
name|clonedSubpart
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|g
init|=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|g
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|g
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|section
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|limit
operator|>=
literal|0
condition|)
block|{
comment|// limited section, deduct enrollments
name|limit
operator|-=
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|limit
operator|<
literal|0
condition|)
name|limit
operator|=
literal|0
expr_stmt|;
comment|// over-enrolled, but not unlimited
if|if
condition|(
name|studentId
operator|>=
literal|0
condition|)
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|section
operator|.
name|getEnrollments
argument_list|()
control|)
if|if
condition|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|limit
operator|++
expr_stmt|;
break|break;
block|}
block|}
name|Section
name|clonedSection
init|=
operator|new
name|Section
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|limit
argument_list|,
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|clonedSubpart
argument_list|,
name|section
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorIds
argument_list|()
argument_list|,
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
argument_list|,
operator|(
name|section
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|sections
operator|.
name|get
argument_list|(
name|section
operator|.
name|getParent
argument_list|()
argument_list|)
operator|)
argument_list|)
decl_stmt|;
name|clonedSection
operator|.
name|setName
argument_list|(
operator|-
literal|1l
argument_list|,
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setSpaceExpected
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setSpaceHeld
argument_list|(
name|section
operator|.
name|getSpaceHeld
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
block|{
name|double
name|available
init|=
name|Math
operator|.
name|round
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
operator|-
name|limit
argument_list|)
decl_stmt|;
name|clonedSection
operator|.
name|setPenalty
argument_list|(
name|available
operator|/
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|put
argument_list|(
name|section
argument_list|,
name|clonedSection
argument_list|)
expr_stmt|;
name|classTable
operator|.
name|put
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|clonedSection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|hasReservations
argument_list|()
condition|)
block|{
for|for
control|(
name|Reservation
name|reservation
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getReservations
argument_list|()
control|)
block|{
name|int
name|reservationLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|reservation
operator|.
name|getLimit
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservationLimit
operator|>=
literal|0
condition|)
block|{
name|reservationLimit
operator|-=
name|reservation
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|reservationLimit
operator|<
literal|0
condition|)
name|reservationLimit
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|i
init|=
name|reservation
operator|.
name|getEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|reservationLimit
operator|++
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|reservationLimit
operator|<=
literal|0
condition|)
continue|continue;
block|}
name|boolean
name|applicable
init|=
name|originalStudent
operator|!=
literal|null
operator|&&
name|reservation
operator|.
name|isApplicable
argument_list|(
name|originalStudent
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|CourseReservation
condition|)
name|applicable
operator|=
operator|(
name|course
operator|.
name|getId
argument_list|()
operator|==
operator|(
operator|(
name|CourseReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|DummyReservation
condition|)
block|{
comment|// Ignore by reservation only flag (dummy reservation) when the student is already enrolled in the course
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|course
operator|.
name|getEnrollments
argument_list|()
control|)
if|if
condition|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|applicable
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|Reservation
name|clonedReservation
init|=
operator|new
name|DummyReservation
argument_list|(
name|reservation
operator|.
name|getId
argument_list|()
argument_list|,
name|clonedOffering
argument_list|,
name|reservation
operator|.
name|getPriority
argument_list|()
argument_list|,
name|reservation
operator|.
name|canAssignOverLimit
argument_list|()
argument_list|,
name|reservationLimit
argument_list|,
name|applicable
argument_list|,
name|reservation
operator|.
name|mustBeUsed
argument_list|()
argument_list|,
name|reservation
operator|.
name|isAllowOverlap
argument_list|()
argument_list|,
name|reservation
operator|.
name|isExpired
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|reservation
operator|.
name|getConfigs
argument_list|()
control|)
name|clonedReservation
operator|.
name|addConfig
argument_list|(
name|configs
operator|.
name|get
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Subpart
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|entry
range|:
name|reservation
operator|.
name|getSections
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|clonedSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
name|clonedSections
operator|.
name|add
argument_list|(
name|sections
operator|.
name|get
argument_list|(
name|section
argument_list|)
argument_list|)
expr_stmt|;
name|clonedReservation
operator|.
name|getSections
argument_list|()
operator|.
name|put
argument_list|(
name|subparts
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|clonedSections
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|clonedCourse
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|updateLimits
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|Course
name|course
parameter_list|,
name|boolean
name|updateFromCache
parameter_list|)
block|{
if|if
condition|(
operator|!
name|OnlineSectioningService
operator|.
name|sUpdateLimitsUsingSectionLimitProvider
operator|||
name|OnlineSectioningService
operator|.
name|sSectionLimitProvider
operator|==
literal|null
condition|)
return|return;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classes
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Config
argument_list|>
name|e
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Config
name|config
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Subpart
argument_list|>
name|f
init|=
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|subpart
init|=
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|g
init|=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|g
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|g
operator|.
name|next
argument_list|()
decl_stmt|;
name|classes
operator|.
name|put
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|int
index|[]
argument_list|>
name|limits
init|=
operator|(
name|updateFromCache
condition|?
name|OnlineSectioningService
operator|.
name|sSectionLimitProvider
operator|.
name|getSectionLimitsFromCache
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|classes
operator|.
name|values
argument_list|()
argument_list|)
else|:
name|OnlineSectioningService
operator|.
name|sSectionLimitProvider
operator|.
name|getSectionLimits
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|classes
operator|.
name|values
argument_list|()
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|int
index|[]
argument_list|>
name|entry
range|:
name|limits
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|classes
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setLimit
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
index|[
literal|1
index|]
operator|-
name|entry
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|iLastSectionLimit
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addRequest
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Student
name|student
parameter_list|,
name|Student
name|originalStudent
parameter_list|,
name|CourseRequestInterface
operator|.
name|Request
name|request
parameter_list|,
name|boolean
name|alternative
parameter_list|,
name|boolean
name|updateFromCache
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
parameter_list|,
name|Set
argument_list|<
name|LinkedSections
argument_list|>
name|linkedSections
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|hasRequestedFreeTime
argument_list|()
operator|&&
name|request
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|server
operator|.
name|getCourseInfo
argument_list|(
name|request
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|request
operator|.
name|getRequestedFreeTime
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasRequestedFreeTime
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|freeTime
range|:
name|request
operator|.
name|getRequestedFreeTime
argument_list|()
control|)
block|{
name|int
name|dayCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|freeTime
operator|.
name|getDays
argument_list|()
operator|.
name|contains
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
condition|)
name|dayCode
operator||=
name|d
operator|.
name|getCode
argument_list|()
expr_stmt|;
block|}
name|TimeLocation
name|freeTimeLoc
init|=
operator|new
name|TimeLocation
argument_list|(
name|dayCode
argument_list|,
name|freeTime
operator|.
name|getStart
argument_list|()
argument_list|,
name|freeTime
operator|.
name|getLength
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1l
argument_list|,
literal|""
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
operator|new
name|FreeTimeRequest
argument_list|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|alternative
argument_list|,
name|student
argument_list|,
name|freeTimeLoc
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|request
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|CourseInfo
name|courseInfo
init|=
name|server
operator|.
name|getCourseInfo
argument_list|(
name|request
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
decl_stmt|;
name|Course
name|course
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|courseInfo
operator|!=
literal|null
condition|)
name|course
operator|=
name|server
operator|.
name|getCourse
argument_list|(
name|courseInfo
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
block|{
name|Vector
argument_list|<
name|Course
argument_list|>
name|cr
init|=
operator|new
name|Vector
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
name|cr
operator|.
name|add
argument_list|(
name|clone
argument_list|(
name|course
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|originalStudent
argument_list|,
name|classTable
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasFirstAlternative
argument_list|()
condition|)
block|{
name|CourseInfo
name|ci
init|=
name|server
operator|.
name|getCourseInfo
argument_list|(
name|request
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|!=
literal|null
condition|)
block|{
name|Course
name|x
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|ci
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
name|cr
operator|.
name|add
argument_list|(
name|clone
argument_list|(
name|x
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|originalStudent
argument_list|,
name|classTable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasSecondAlternative
argument_list|()
condition|)
block|{
name|CourseInfo
name|ci
init|=
name|server
operator|.
name|getCourseInfo
argument_list|(
name|request
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|!=
literal|null
condition|)
block|{
name|Course
name|x
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|ci
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
name|cr
operator|.
name|add
argument_list|(
name|clone
argument_list|(
name|x
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|originalStudent
argument_list|,
name|classTable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Course
name|clonedCourse
range|:
name|cr
control|)
block|{
name|updateLimits
argument_list|(
name|server
argument_list|,
name|clonedCourse
argument_list|,
name|updateFromCache
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|LinkedSections
argument_list|>
name|links
init|=
name|server
operator|.
name|getLinkedSections
argument_list|(
name|clonedCourse
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|links
operator|!=
literal|null
condition|)
name|linkedSections
operator|.
name|addAll
argument_list|(
name|links
argument_list|)
expr_stmt|;
block|}
name|CourseRequest
name|clonnedRequest
init|=
operator|new
name|CourseRequest
argument_list|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|alternative
argument_list|,
name|student
argument_list|,
name|cr
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|originalStudent
operator|!=
literal|null
condition|)
for|for
control|(
name|Request
name|originalRequest
range|:
name|originalStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|originalEnrollment
init|=
name|originalRequest
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
for|for
control|(
name|Course
name|clonnedCourse
range|:
name|clonnedRequest
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|clonnedCourse
operator|.
name|getOffering
argument_list|()
operator|.
name|hasReservations
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|originalEnrollment
operator|!=
literal|null
operator|&&
name|clonnedCourse
operator|.
name|equals
argument_list|(
name|originalEnrollment
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|needReservation
init|=
name|clonnedCourse
operator|.
name|getOffering
argument_list|()
operator|.
name|getUnreservedSpace
argument_list|(
name|clonnedRequest
argument_list|)
operator|<
literal|1.0
decl_stmt|;
if|if
condition|(
operator|!
name|needReservation
condition|)
block|{
name|boolean
name|configChecked
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Section
name|originalSection
range|:
name|originalEnrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Section
name|clonnedSection
init|=
name|classTable
operator|.
name|get
argument_list|(
name|originalSection
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clonnedSection
operator|.
name|getUnreservedSpace
argument_list|(
name|clonnedRequest
argument_list|)
operator|<
literal|1.0
condition|)
block|{
name|needReservation
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|configChecked
operator|&&
name|clonnedSection
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getUnreservedSpace
argument_list|(
name|clonnedRequest
argument_list|)
operator|<
literal|1.0
condition|)
block|{
name|needReservation
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|configChecked
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needReservation
condition|)
block|{
name|Reservation
name|reservation
init|=
operator|new
name|DummyReservation
argument_list|(
operator|-
name|originalStudent
operator|.
name|getId
argument_list|()
argument_list|,
name|clonnedCourse
operator|.
name|getOffering
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Section
name|originalSection
range|:
name|originalEnrollment
operator|.
name|getSections
argument_list|()
control|)
name|reservation
operator|.
name|addSection
argument_list|(
name|classTable
operator|.
name|get
argument_list|(
name|originalSection
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|int
index|[]
name|getLimit
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|Section
name|section
parameter_list|,
name|Long
name|studentId
parameter_list|)
block|{
if|if
condition|(
name|OnlineSectioningService
operator|.
name|sUpdateLimitsUsingSectionLimitProvider
condition|)
block|{
name|int
index|[]
name|limit
init|=
name|iLastSectionLimit
operator|.
name|get
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
return|return
name|limit
return|;
block|}
name|Section
name|original
init|=
name|server
operator|.
name|getSection
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|original
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|/* 		if (studentId != null) { 			for (Iterator<Enrollment> i = original.getEnrollments().iterator(); i.hasNext();) { 				Enrollment enrollment = i.next(); 				if (enrollment.getStudent().getId() == studentId) { actual--; break; } 			} 		} 		*/
return|return
operator|new
name|int
index|[]
block|{
name|actual
block|,
name|original
operator|.
name|getLimit
argument_list|()
block|}
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|ClassAssignmentInterface
name|convert
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|Enrollment
index|[]
name|enrollments
parameter_list|,
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|requiredSectionsForCourse
parameter_list|,
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
name|requiredFreeTimes
parameter_list|,
name|boolean
name|computeOverlaps
parameter_list|,
name|DistanceConflict
name|dc
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|savedClasses
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ClassAssignmentInterface
name|ret
init|=
operator|new
name|ClassAssignmentInterface
argument_list|()
decl_stmt|;
name|int
name|nrUnassignedCourses
init|=
literal|0
decl_stmt|;
name|int
name|nrAssignedAlt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|enrollment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|nrAssignedAlt
operator|>=
name|nrUnassignedCourses
operator|&&
operator|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
continue|continue;
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|ca
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|r
init|=
operator|(
name|CourseRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Course
name|course
init|=
name|enrollment
operator|.
name|getCourse
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|.
name|isOfferingLocked
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|ca
operator|.
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|computeOverlaps
condition|)
block|{
name|TreeSet
argument_list|<
name|Enrollment
argument_list|>
name|overlap
init|=
operator|new
name|TreeSet
argument_list|<
name|Enrollment
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Enrollment
name|e1
parameter_list|,
name|Enrollment
name|e2
parameter_list|)
block|{
return|return
name|e1
operator|.
name|getRequest
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getRequest
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|>
name|overlapingSections
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Enrollment
argument_list|>
name|avEnrls
init|=
name|r
operator|.
name|getAvaiableEnrollmentsSkipSameTime
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|e
init|=
name|avEnrls
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrl
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Enrollment
name|x
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|x
operator|==
name|enrollment
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|Assignment
argument_list|>
name|i
init|=
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|isOverlapping
argument_list|(
name|enrl
operator|.
name|getAssignments
argument_list|()
argument_list|)
condition|)
block|{
name|overlap
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|x
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Section
argument_list|>
name|ss
init|=
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
name|ss
operator|=
operator|new
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|()
expr_stmt|;
name|overlapingSections
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
name|ss
operator|.
name|add
argument_list|(
operator|(
name|Section
operator|)
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|Enrollment
name|q
range|:
name|overlap
control|)
block|{
if|if
condition|(
name|q
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|ca
operator|.
name|addOverlap
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toString
argument_list|(
operator|(
name|FreeTimeRequest
operator|)
name|q
operator|.
name|getRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|q
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Course
name|o
init|=
name|q
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|String
name|ov
init|=
name|o
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|o
operator|.
name|getCourseNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|s
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ov
operator|+=
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|ov
operator|+=
literal|","
expr_stmt|;
block|}
name|ca
operator|.
name|addOverlap
argument_list|(
name|ov
argument_list|)
expr_stmt|;
block|}
block|}
name|nrUnassignedCourses
operator|++
expr_stmt|;
name|int
name|alt
init|=
name|nrUnassignedCourses
decl_stmt|;
for|for
control|(
name|Enrollment
name|x
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|x
operator|==
name|enrollment
condition|)
continue|continue;
if|if
condition|(
name|x
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|x
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
if|if
condition|(
operator|--
name|alt
operator|==
literal|0
condition|)
block|{
name|Course
name|o
init|=
name|x
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setInstead
argument_list|(
name|o
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|o
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|avEnrls
operator|.
name|isEmpty
argument_list|()
condition|)
name|ca
operator|.
name|setNotAvailable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FreeTimeRequest
name|r
init|=
operator|(
name|FreeTimeRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|computeOverlaps
condition|)
block|{
for|for
control|(
name|Enrollment
name|x
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|x
operator|==
name|enrollment
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|Assignment
argument_list|>
name|i
init|=
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isOverlapping
argument_list|(
name|a
argument_list|)
operator|&&
name|x
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
name|Course
name|o
init|=
name|x
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|Section
name|s
init|=
operator|(
name|Section
operator|)
name|a
decl_stmt|;
name|ca
operator|.
name|addOverlap
argument_list|(
name|o
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|o
operator|.
name|getCourseNumber
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|ca
operator|.
name|getOverlaps
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|r
init|=
operator|(
name|CourseRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Section
argument_list|>
name|requiredSections
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|requiredSectionsForCourse
operator|!=
literal|null
condition|)
name|requiredSections
operator|=
name|requiredSectionsForCourse
operator|.
name|get
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isAlternative
argument_list|()
operator|&&
name|r
operator|.
name|isAssigned
argument_list|()
condition|)
name|nrAssignedAlt
operator|++
expr_stmt|;
name|TreeSet
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|(
operator|new
name|EnrollmentSectionComparator
argument_list|()
argument_list|)
decl_stmt|;
name|sections
operator|.
name|addAll
argument_list|(
name|enrollment
operator|.
name|getSections
argument_list|()
argument_list|)
expr_stmt|;
name|Course
name|course
init|=
name|enrollment
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|ca
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|.
name|isOfferingLocked
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|ca
operator|.
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|hasAlt
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Subpart
argument_list|>
name|i
init|=
operator|(
operator|(
name|Config
operator|)
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|s
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|sections
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
name|getLimit
argument_list|(
name|server
argument_list|,
name|section
argument_list|,
name|r
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|RoomLocation
argument_list|>
name|e
init|=
name|section
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomLocation
name|rm
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|a
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|instructors
init|=
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|instructor
range|:
name|instructors
control|)
block|{
name|String
index|[]
name|nameEmail
init|=
name|instructor
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|a
operator|.
name|addInstructor
argument_list|(
name|nameEmail
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmailr
argument_list|(
name|nameEmail
operator|.
name|length
operator|<
literal|2
condition|?
literal|""
else|:
name|nameEmail
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|section
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|requiredSections
operator|!=
literal|null
operator|&&
name|requiredSections
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
name|a
operator|.
name|setPinned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setHasAlternatives
argument_list|(
name|hasAlt
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|dist
init|=
literal|0
decl_stmt|;
name|String
name|from
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|overlap
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enrollment
name|x
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
operator|||
operator|!
name|x
operator|.
name|isCourseRequest
argument_list|()
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|x
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|s
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|section
operator|||
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|int
name|d
init|=
name|server
operator|.
name|distance
argument_list|(
name|s
argument_list|,
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>
name|dist
condition|)
block|{
name|dist
operator|=
name|d
expr_stmt|;
name|from
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RoomLocation
argument_list|>
name|k
init|=
name|s
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|from
operator|+=
name|k
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|k
operator|.
name|hasNext
argument_list|()
condition|?
literal|", "
else|:
literal|""
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|>
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
condition|)
block|{
name|a
operator|.
name|setDistanceConflict
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|overlap
operator|.
name|add
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|s
operator|.
name|getName
argument_list|(
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|overlap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|note
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|j
init|=
name|overlap
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|n
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|note
operator|==
literal|null
condition|)
name|note
operator|=
name|MSG
operator|.
name|noteAllowedOverlapFirst
argument_list|(
name|n
argument_list|)
expr_stmt|;
if|else if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
name|note
operator|+=
name|MSG
operator|.
name|noteAllowedOverlapMiddle
argument_list|(
name|n
argument_list|)
expr_stmt|;
else|else
name|note
operator|+=
name|MSG
operator|.
name|noteAllowedOverlapLast
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|addNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setBackToBackDistance
argument_list|(
name|dist
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBackToBackRooms
argument_list|(
name|from
argument_list|)
expr_stmt|;
comment|// if (dist> 0.0) a.setDistanceConflict(true);
if|if
condition|(
name|savedClasses
operator|!=
literal|null
operator|&&
name|savedClasses
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|a
operator|.
name|setSaved
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|server
operator|.
name|getCourseInfo
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getConsent
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExpected
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FreeTimeRequest
name|r
init|=
operator|(
name|FreeTimeRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|ca
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|requiredFreeTimes
operator|!=
literal|null
operator|&&
name|requiredFreeTimes
operator|.
name|contains
argument_list|(
name|r
argument_list|)
condition|)
name|a
operator|.
name|setPinned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|ClassAssignmentInterface
name|convert
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Student
name|student
parameter_list|,
name|BranchBoundNeighbour
name|neighbour
parameter_list|,
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|requiredSectionsForCourse
parameter_list|,
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
name|requiredFreeTimes
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|savedClasses
parameter_list|)
throws|throws
name|SectioningException
block|{
name|Enrollment
index|[]
name|enrollments
init|=
name|neighbour
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollments
operator|==
literal|null
operator|||
name|enrollments
operator|.
name|length
operator|==
literal|0
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolution
argument_list|()
argument_list|)
throw|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|Request
name|r
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollments
index|[
name|idx
index|]
operator|==
literal|null
condition|)
block|{
name|Config
name|c
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
name|c
operator|=
operator|(
name|Config
operator|)
operator|(
operator|(
name|Course
operator|)
operator|(
operator|(
name|CourseRequest
operator|)
name|r
operator|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|enrollments
index|[
name|idx
index|]
operator|=
operator|new
name|Enrollment
argument_list|(
name|r
argument_list|,
literal|0
argument_list|,
name|c
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|convert
argument_list|(
name|server
argument_list|,
name|enrollments
argument_list|,
name|requiredSectionsForCourse
argument_list|,
name|requiredFreeTimes
argument_list|,
literal|true
argument_list|,
name|model
operator|.
name|getDistanceConflict
argument_list|()
argument_list|,
name|savedClasses
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"section"
return|;
block|}
block|}
end_class

end_unit

