begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|AssignmentComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|AssignmentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|DistanceConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|TimeOverlapsCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|heuristics
operator|.
name|selection
operator|.
name|BranchBoundSelection
operator|.
name|BranchBoundNeighbour
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|SctAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|OnlineConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|OnlineReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|OnlineSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|OnlineSectioningModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|expectations
operator|.
name|OverExpectedCriterion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|selection
operator|.
name|MultiCriteriaBranchAndBoundSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|selection
operator|.
name|OnlineSectioningSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|selection
operator|.
name|SuggestionSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XDistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XDummyReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XExpectations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XReservationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRoom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSubpart
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|FindAssignmentAction
implements|implements
name|OnlineSectioningAction
argument_list|<
name|List
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CourseRequestInterface
name|iRequest
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|iAssignment
decl_stmt|;
specifier|public
name|FindAssignmentAction
name|forRequest
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|FindAssignmentAction
name|withAssignment
parameter_list|(
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|assignment
parameter_list|)
block|{
name|iAssignment
operator|=
name|assignment
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CourseRequestInterface
name|getRequest
parameter_list|()
block|{
return|return
name|iRequest
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|getAssignment
parameter_list|()
block|{
return|return
name|iAssignment
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|OnlineSectioningModel
name|model
init|=
operator|new
name|OnlineSectioningModel
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|,
name|server
operator|.
name|getOverExpectedCriterion
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|linkedClassesMustBeUsed
init|=
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"LinkedClasses.mustBeUsed"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
init|=
operator|new
name|AssignmentMap
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|helper
operator|.
name|getAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
operator|!=
literal|null
condition|)
name|action
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Student
name|student
init|=
operator|new
name|Student
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1l
else|:
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|IdPair
argument_list|>
name|enrolled
init|=
literal|null
decl_stmt|;
name|Lock
name|readLock
init|=
name|server
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|XStudent
name|original
init|=
operator|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getStudent
argument_list|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
condition|)
block|{
name|action
operator|.
name|getStudentBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|original
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|original
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|original
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|enrolled
operator|=
operator|new
name|HashSet
argument_list|<
name|IdPair
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XEnrollment
name|e
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|s
range|:
name|e
operator|.
name|getSectionIds
argument_list|()
control|)
name|enrolled
operator|.
name|add
argument_list|(
operator|new
name|IdPair
argument_list|(
name|e
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|enrollment
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|enrollment
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|STORED
argument_list|)
expr_stmt|;
for|for
control|(
name|XRequest
name|oldRequest
range|:
name|original
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|oldRequest
operator|instanceof
name|XCourseRequest
operator|&&
operator|(
operator|(
name|XCourseRequest
operator|)
name|oldRequest
operator|)
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XCourseRequest
name|cr
init|=
operator|(
name|XCourseRequest
operator|)
name|oldRequest
decl_stmt|;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
name|cr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
control|)
name|enrollment
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
name|cr
operator|.
name|getEnrollment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|XDistribution
argument_list|>
name|distributions
init|=
operator|new
name|HashSet
argument_list|<
name|XDistribution
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|getRequest
argument_list|()
operator|.
name|getCourses
argument_list|()
control|)
name|addRequest
argument_list|(
name|server
argument_list|,
name|model
argument_list|,
name|assignment
argument_list|,
name|student
argument_list|,
name|original
argument_list|,
name|c
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|classTable
argument_list|,
name|distributions
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|CONSTANTS
operator|.
name|allowEmptySchedule
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoCourse
argument_list|()
argument_list|)
throw|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|getRequest
argument_list|()
operator|.
name|getAlternatives
argument_list|()
control|)
name|addRequest
argument_list|(
name|server
argument_list|,
name|model
argument_list|,
name|assignment
argument_list|,
name|student
argument_list|,
name|original
argument_list|,
name|c
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|classTable
argument_list|,
name|distributions
argument_list|)
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|isAlternativeCourseEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|isAlternative
argument_list|()
operator|||
operator|!
operator|(
name|r
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|cr
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|altCourseId
init|=
operator|(
name|course
operator|==
literal|null
condition|?
literal|null
else|:
name|course
operator|.
name|getAlternativeCourseId
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|altCourseId
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasCourse
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Request
name|x
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|x
operator|instanceof
name|CourseRequest
condition|)
for|for
control|(
name|Course
name|c
range|:
operator|(
operator|(
name|CourseRequest
operator|)
name|x
operator|)
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|getId
argument_list|()
operator|==
name|altCourseId
condition|)
block|{
name|hasCourse
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|hasCourse
condition|)
block|{
name|XCourseId
name|ci
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|altCourseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|!=
literal|null
condition|)
block|{
name|XOffering
name|x
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|ci
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
name|cr
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|clone
argument_list|(
name|x
argument_list|,
name|server
operator|.
name|getEnrollments
argument_list|(
name|x
operator|.
name|getOfferingId
argument_list|()
argument_list|)
argument_list|,
name|ci
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|original
argument_list|,
name|classTable
argument_list|,
name|server
argument_list|,
name|model
argument_list|)
argument_list|)
expr_stmt|;
name|distributions
operator|.
name|addAll
argument_list|(
name|x
operator|.
name|getDistributions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|model
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|model
operator|.
name|setDistanceConflict
argument_list|(
operator|new
name|DistanceConflict
argument_list|(
name|server
operator|.
name|getDistanceMetric
argument_list|()
argument_list|,
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setTimeOverlaps
argument_list|(
operator|new
name|TimeOverlapsCounter
argument_list|(
literal|null
argument_list|,
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|XDistribution
name|link
range|:
name|distributions
control|)
block|{
if|if
condition|(
name|link
operator|.
name|getDistributionType
argument_list|()
operator|==
name|XDistributionType
operator|.
name|LinkedSections
condition|)
block|{
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|sectionId
range|:
name|link
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
name|Section
name|x
init|=
name|classTable
operator|.
name|get
argument_list|(
name|sectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
name|sections
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sections
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
name|model
operator|.
name|addLinkedSections
argument_list|(
name|linkedClassesMustBeUsed
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|preferredSectionsForCourse
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|requiredOrSavedSectionsForCourse
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|requiredSectionsForCourse
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
name|pinnedFreeTimes
init|=
operator|new
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
name|requiredFreeTimes
init|=
operator|new
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|getAssignment
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getAssignment
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|requested
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|requested
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|PREVIOUS
argument_list|)
expr_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
range|:
name|getAssignment
argument_list|()
control|)
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|a
operator|.
name|isAssigned
argument_list|()
condition|)
name|requested
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|addEnrollment
argument_list|(
name|requested
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|r
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|OnlineSectioningLog
operator|.
name|Request
operator|.
name|Builder
name|rq
init|=
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
name|HashSet
argument_list|<
name|Section
argument_list|>
name|preferredSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Section
argument_list|>
name|requiredSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Section
argument_list|>
name|requiredOrSavedSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|CourseRequest
argument_list|>
name|allowOverlaps
init|=
operator|new
name|HashSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|conflict
init|=
literal|false
decl_stmt|;
name|a
label|:
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
range|:
name|getAssignment
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|isFreeTime
argument_list|()
operator|&&
name|cr
operator|.
name|getCourse
argument_list|(
name|a
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
name|a
operator|.
name|getClassId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Section
name|section
init|=
name|cr
operator|.
name|getSection
argument_list|(
name|a
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
operator|||
name|section
operator|.
name|getLimit
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue
name|a
continue|;
block|}
if|if
condition|(
name|a
operator|.
name|isPinned
argument_list|()
condition|)
name|requiredSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|isPinned
argument_list|()
operator|||
name|a
operator|.
name|isSaved
argument_list|()
operator|||
name|getRequest
argument_list|()
operator|.
name|isNoChange
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|conflict
condition|)
block|{
for|for
control|(
name|Section
name|s
range|:
name|requiredOrSavedSections
control|)
if|if
condition|(
name|s
operator|.
name|isOverlapping
argument_list|(
name|section
argument_list|)
condition|)
block|{
name|conflict
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|boolean
name|allowOverlap
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Reservation
name|rx
range|:
name|cr
operator|.
name|getReservations
argument_list|(
name|cr
operator|.
name|getCourse
argument_list|(
name|a
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|rx
operator|.
name|isAllowOverlap
argument_list|()
condition|)
block|{
name|allowOverlap
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|allowOverlap
condition|)
block|{
name|allowOverlaps
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|x
range|:
name|requiredOrSavedSectionsForCourse
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|allowOverlaps
operator|.
name|contains
argument_list|(
name|x
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
for|for
control|(
name|Section
name|s
range|:
name|x
operator|.
name|getValue
argument_list|()
control|)
if|if
condition|(
name|s
operator|.
name|isOverlapping
argument_list|(
name|section
argument_list|)
condition|)
block|{
name|conflict
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|conflict
condition|)
break|break;
block|}
block|}
block|}
name|requiredOrSavedSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
name|preferredSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
name|rq
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
name|cr
operator|.
name|getCourse
argument_list|(
name|a
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setPreference
argument_list|(
name|a
operator|.
name|isPinned
argument_list|()
operator|||
name|a
operator|.
name|isSaved
argument_list|()
operator|||
name|getRequest
argument_list|()
operator|.
name|isNoChange
argument_list|()
condition|?
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Preference
operator|.
name|REQUIRED
else|:
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Preference
operator|.
name|PREFERRED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|preferredSectionsForCourse
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|preferredSections
argument_list|)
expr_stmt|;
name|requiredSectionsForCourse
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|requiredSections
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|conflict
condition|)
name|requiredOrSavedSectionsForCourse
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|requiredOrSavedSections
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FreeTimeRequest
name|ft
init|=
operator|(
name|FreeTimeRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
range|:
name|getAssignment
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|a
operator|.
name|isFreeTime
argument_list|()
operator|&&
operator|(
name|a
operator|.
name|isPinned
argument_list|()
operator|||
name|getRequest
argument_list|()
operator|.
name|isNoChange
argument_list|()
operator|)
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|==
name|a
operator|.
name|getStart
argument_list|()
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|==
name|a
operator|.
name|getLength
argument_list|()
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
operator|==
name|DayCode
operator|.
name|toInt
argument_list|(
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|a
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|isPinned
argument_list|()
condition|)
name|pinnedFreeTimes
operator|.
name|add
argument_list|(
name|ft
argument_list|)
expr_stmt|;
name|requiredFreeTimes
operator|.
name|add
argument_list|(
name|ft
argument_list|)
expr_stmt|;
for|for
control|(
name|OnlineSectioningLog
operator|.
name|Time
operator|.
name|Builder
name|ftb
range|:
name|rq
operator|.
name|getFreeTimeBuilderList
argument_list|()
control|)
name|ftb
operator|.
name|setPreference
argument_list|(
name|OnlineSectioningLog
operator|.
name|Section
operator|.
name|Preference
operator|.
name|REQUIRED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|action
operator|.
name|addRequest
argument_list|(
name|rq
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|action
operator|.
name|addRequest
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|e
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|OnlineSectioningSelection
name|selection
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|selection
operator|=
operator|new
name|MultiCriteriaBranchAndBoundSelection
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|selection
operator|=
operator|new
name|SuggestionSelection
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|selection
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setPreferredSections
argument_list|(
name|preferredSectionsForCourse
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setRequiredSections
argument_list|(
name|requiredOrSavedSectionsForCourse
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setRequiredFreeTimes
argument_list|(
name|requiredFreeTimes
argument_list|)
expr_stmt|;
name|BranchBoundNeighbour
name|neighbour
init|=
name|selection
operator|.
name|select
argument_list|(
name|assignment
argument_list|,
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
name|neighbour
operator|==
literal|null
operator|&&
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|neighbour
operator|=
operator|new
name|BranchBoundNeighbour
argument_list|(
name|student
argument_list|,
literal|0
argument_list|,
operator|new
name|Enrollment
index|[]
block|{}
argument_list|)
expr_stmt|;
if|if
condition|(
name|neighbour
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolution
argument_list|()
argument_list|)
throw|;
name|helper
operator|.
name|debug
argument_list|(
literal|"Using "
operator|+
operator|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.MultiCriteria"
argument_list|,
literal|true
argument_list|)
condition|?
literal|"multi-criteria "
else|:
literal|""
operator|)
operator|+
operator|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
literal|true
argument_list|)
condition|?
literal|"priority"
else|:
literal|"equal"
operator|)
operator|+
literal|" weighting model"
operator|+
literal|" with "
operator|+
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyInt
argument_list|(
literal|"Neighbour.BranchAndBoundTimeout"
argument_list|,
literal|1000
argument_list|)
operator|+
literal|" ms time limit."
argument_list|)
expr_stmt|;
name|neighbour
operator|.
name|assign
argument_list|(
name|assignment
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|helper
operator|.
name|debug
argument_list|(
literal|"Solution: "
operator|+
name|neighbour
argument_list|)
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|Builder
name|solution
init|=
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|solution
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Enrollment
operator|.
name|EnrollmentType
operator|.
name|COMPUTED
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setValue
argument_list|(
operator|-
name|neighbour
operator|.
name|value
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Enrollment
name|e
range|:
name|neighbour
operator|.
name|getAssignment
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|SctAssignment
name|section
range|:
name|e
operator|.
name|getAssignments
argument_list|()
control|)
name|solution
operator|.
name|addSection
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toProto
argument_list|(
name|section
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|addEnrollment
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|long
name|t2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
name|ret
init|=
name|convert
argument_list|(
name|server
argument_list|,
name|model
argument_list|,
name|assignment
argument_list|,
name|student
argument_list|,
name|neighbour
argument_list|,
name|requiredSectionsForCourse
argument_list|,
name|pinnedFreeTimes
argument_list|,
name|enrolled
argument_list|)
decl_stmt|;
name|long
name|t3
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|helper
operator|.
name|debug
argument_list|(
literal|"Sectioning took "
operator|+
operator|(
name|t3
operator|-
name|t0
operator|)
operator|+
literal|"ms (model "
operator|+
operator|(
name|t1
operator|-
name|t0
operator|)
operator|+
literal|"ms, sectioning "
operator|+
operator|(
name|t2
operator|-
name|t1
operator|)
operator|+
literal|"ms, conversion "
operator|+
operator|(
name|t3
operator|-
name|t2
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|rets
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|rets
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|rets
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|Course
name|clone
parameter_list|(
name|XOffering
name|offering
parameter_list|,
name|XEnrollments
name|enrollments
parameter_list|,
name|Long
name|courseId
parameter_list|,
name|long
name|studentId
parameter_list|,
name|XStudent
name|originalStudent
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|sections
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|)
block|{
name|Offering
name|clonedOffering
init|=
operator|new
name|Offering
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|offering
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|clonedOffering
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|XExpectations
name|expectations
init|=
name|server
operator|.
name|getExpectations
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|XCourse
name|course
init|=
name|offering
operator|.
name|getCourse
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
name|int
name|courseLimit
init|=
name|course
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|courseLimit
operator|>=
literal|0
condition|)
block|{
name|courseLimit
operator|-=
name|enrollments
operator|.
name|countEnrollmentsForCourse
argument_list|(
name|courseId
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseLimit
operator|<
literal|0
condition|)
name|courseLimit
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|XEnrollment
name|enrollment
range|:
name|enrollments
operator|.
name|getEnrollmentsForCourse
argument_list|(
name|courseId
argument_list|)
control|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|studentId
argument_list|)
condition|)
block|{
name|courseLimit
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Course
name|clonedCourse
init|=
operator|new
name|Course
argument_list|(
name|courseId
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|clonedOffering
argument_list|,
name|courseLimit
argument_list|,
name|course
operator|.
name|getProjected
argument_list|()
argument_list|)
decl_stmt|;
name|clonedCourse
operator|.
name|setNote
argument_list|(
name|course
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Config
argument_list|>
name|configs
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Config
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Subpart
argument_list|>
name|subparts
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Subpart
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XConfig
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
name|int
name|configLimit
init|=
name|config
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|int
name|configEnrl
init|=
name|enrollments
operator|.
name|countEnrollmentsForConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|configStudent
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|studentId
operator|>=
literal|0
condition|)
for|for
control|(
name|XEnrollment
name|enrollment
range|:
name|enrollments
operator|.
name|getEnrollmentsForConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|enrollment
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|studentId
argument_list|)
condition|)
block|{
name|configEnrl
operator|--
expr_stmt|;
name|configStudent
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|configLimit
operator|>=
literal|0
condition|)
block|{
comment|// limited configuration, deduct enrollments
name|configLimit
operator|-=
name|configEnrl
expr_stmt|;
if|if
condition|(
name|configLimit
operator|<
literal|0
condition|)
name|configLimit
operator|=
literal|0
expr_stmt|;
comment|// over-enrolled, but not unlimited
if|if
condition|(
name|configStudent
operator|&&
name|configLimit
operator|==
literal|0
condition|)
name|configLimit
operator|=
literal|1
expr_stmt|;
comment|// allow enrolled student in
block|}
name|OnlineConfig
name|clonedConfig
init|=
operator|new
name|OnlineConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|configLimit
argument_list|,
name|config
operator|.
name|getName
argument_list|()
argument_list|,
name|clonedOffering
argument_list|)
decl_stmt|;
name|clonedConfig
operator|.
name|setEnrollment
argument_list|(
name|configEnrl
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|clonedConfig
argument_list|)
expr_stmt|;
for|for
control|(
name|XSubpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
name|Subpart
name|clonedSubpart
init|=
operator|new
name|Subpart
argument_list|(
name|subpart
operator|.
name|getSubpartId
argument_list|()
argument_list|,
name|subpart
operator|.
name|getInstructionalType
argument_list|()
argument_list|,
name|subpart
operator|.
name|getName
argument_list|()
argument_list|,
name|clonedConfig
argument_list|,
operator|(
name|subpart
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|subparts
operator|.
name|get
argument_list|(
name|subpart
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|)
argument_list|)
decl_stmt|;
name|clonedSubpart
operator|.
name|setAllowOverlap
argument_list|(
name|subpart
operator|.
name|isAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|clonedSubpart
operator|.
name|setCredit
argument_list|(
name|subpart
operator|.
name|getCredit
argument_list|(
name|courseId
argument_list|)
argument_list|)
expr_stmt|;
name|subparts
operator|.
name|put
argument_list|(
name|subpart
operator|.
name|getSubpartId
argument_list|()
argument_list|,
name|clonedSubpart
argument_list|)
expr_stmt|;
for|for
control|(
name|XSection
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
name|int
name|limit
init|=
name|section
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|int
name|enrl
init|=
name|enrollments
operator|.
name|countEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|student
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|studentId
operator|>=
literal|0
condition|)
for|for
control|(
name|XEnrollment
name|enrollment
range|:
name|enrollments
operator|.
name|getEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|enrollment
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|studentId
argument_list|)
condition|)
block|{
name|enrl
operator|--
expr_stmt|;
name|student
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|limit
operator|>=
literal|0
condition|)
block|{
comment|// limited section, deduct enrollments
name|limit
operator|-=
name|enrl
expr_stmt|;
if|if
condition|(
name|limit
operator|<
literal|0
condition|)
name|limit
operator|=
literal|0
expr_stmt|;
comment|// over-enrolled, but not unlimited
if|if
condition|(
name|student
operator|&&
name|limit
operator|==
literal|0
condition|)
name|limit
operator|=
literal|1
expr_stmt|;
comment|// allow enrolled student in
block|}
name|String
name|instructorIds
init|=
literal|""
decl_stmt|;
name|String
name|instructorNames
init|=
literal|""
decl_stmt|;
for|for
control|(
name|XInstructor
name|instructor
range|:
name|section
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|instructorIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|instructorIds
operator|+=
literal|":"
expr_stmt|;
name|instructorNames
operator|+=
literal|":"
expr_stmt|;
block|}
name|instructorIds
operator|+=
name|instructor
operator|.
name|getIntructorId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|instructorNames
operator|+=
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"|"
operator|+
operator|(
name|instructor
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|instructor
operator|.
name|getEmail
argument_list|()
operator|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RoomLocation
argument_list|>
name|rooms
init|=
operator|new
name|ArrayList
argument_list|<
name|RoomLocation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XRoom
name|r
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
name|rooms
operator|.
name|add
argument_list|(
operator|new
name|RoomLocation
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|r
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|r
operator|.
name|getX
argument_list|()
argument_list|,
name|r
operator|.
name|getY
argument_list|()
argument_list|,
name|r
operator|.
name|getIgnoreTooFar
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Placement
name|placement
init|=
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
operator|||
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
operator|new
name|Placement
argument_list|(
operator|new
name|Lecture
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TimeLocation
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|RoomLocation
argument_list|>
argument_list|()
argument_list|,
name|section
operator|.
name|getNrRooms
argument_list|()
argument_list|,
literal|null
argument_list|,
name|section
operator|.
name|getLimit
argument_list|()
argument_list|,
name|section
operator|.
name|getLimit
argument_list|()
argument_list|,
literal|1.0
argument_list|)
argument_list|,
operator|new
name|TimeLocation
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0.0
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getWeeks
argument_list|()
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
argument_list|,
name|rooms
argument_list|)
decl_stmt|;
name|OnlineSection
name|clonedSection
init|=
operator|new
name|OnlineSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|,
name|limit
argument_list|,
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|,
name|clonedSubpart
argument_list|,
name|placement
argument_list|,
name|instructorIds
argument_list|,
name|instructorNames
argument_list|,
operator|(
name|section
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|sections
operator|.
name|get
argument_list|(
name|section
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|)
argument_list|)
decl_stmt|;
name|clonedSection
operator|.
name|setName
argument_list|(
operator|-
literal|1l
argument_list|,
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setSpaceExpected
argument_list|(
name|expectations
operator|.
name|getExpectedSpace
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setCancelled
argument_list|(
name|section
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XDistribution
name|distribution
range|:
name|offering
operator|.
name|getDistributions
argument_list|()
control|)
if|if
condition|(
name|distribution
operator|.
name|getDistributionType
argument_list|()
operator|==
name|XDistributionType
operator|.
name|IngoreConflicts
operator|&&
name|distribution
operator|.
name|hasSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
for|for
control|(
name|Long
name|id
range|:
name|distribution
operator|.
name|getSectionIds
argument_list|()
control|)
if|if
condition|(
operator|!
name|id
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
name|clonedSection
operator|.
name|addIgnoreConflictWith
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
block|{
name|double
name|available
init|=
name|Math
operator|.
name|round
argument_list|(
name|clonedSection
operator|.
name|getSpaceExpected
argument_list|()
operator|-
name|limit
argument_list|)
decl_stmt|;
name|clonedSection
operator|.
name|setPenalty
argument_list|(
name|available
operator|/
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|put
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|,
name|clonedSection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|hasMustUse
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XReservation
name|reservation
range|:
name|offering
operator|.
name|getReservations
argument_list|()
control|)
block|{
name|int
name|reservationLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|reservation
operator|.
name|getLimit
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservationLimit
operator|>=
literal|0
condition|)
block|{
name|reservationLimit
operator|-=
name|enrollments
operator|.
name|countEnrollmentsForReservation
argument_list|(
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservationLimit
operator|<
literal|0
condition|)
name|reservationLimit
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|XEnrollment
name|enrollment
range|:
name|enrollments
operator|.
name|getEnrollmentsForReservation
argument_list|(
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|studentId
argument_list|)
condition|)
block|{
name|reservationLimit
operator|++
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|reservationLimit
operator|<=
literal|0
operator|&&
operator|!
name|reservation
operator|.
name|mustBeUsed
argument_list|()
condition|)
continue|continue;
block|}
name|boolean
name|applicable
init|=
name|originalStudent
operator|!=
literal|null
operator|&&
name|reservation
operator|.
name|isApplicable
argument_list|(
name|originalStudent
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|XCourseReservation
condition|)
name|applicable
operator|=
operator|(
operator|(
name|XCourseReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|courseId
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|XDummyReservation
condition|)
block|{
comment|// Ignore by reservation only flag (dummy reservation) when the student is already enrolled in the course
for|for
control|(
name|XEnrollment
name|enrollment
range|:
name|enrollments
operator|.
name|getEnrollmentsForCourse
argument_list|(
name|courseId
argument_list|)
control|)
if|if
condition|(
name|enrollment
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|studentId
argument_list|)
condition|)
block|{
name|applicable
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|applicable
operator|&&
name|reservation
operator|.
name|mustBeUsed
argument_list|()
condition|)
name|hasMustUse
operator|=
literal|true
expr_stmt|;
name|Reservation
name|clonedReservation
init|=
operator|new
name|OnlineReservation
argument_list|(
name|reservation
operator|.
name|getType
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|,
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|,
name|clonedOffering
argument_list|,
name|reservation
operator|.
name|getPriority
argument_list|()
argument_list|,
name|reservation
operator|.
name|canAssignOverLimit
argument_list|()
argument_list|,
name|reservationLimit
argument_list|,
name|applicable
argument_list|,
name|reservation
operator|.
name|mustBeUsed
argument_list|()
argument_list|,
name|reservation
operator|.
name|isAllowOverlap
argument_list|()
argument_list|,
name|reservation
operator|.
name|isExpired
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|configId
range|:
name|reservation
operator|.
name|getConfigsIds
argument_list|()
control|)
name|clonedReservation
operator|.
name|addConfig
argument_list|(
name|configs
operator|.
name|get
argument_list|(
name|configId
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|reservation
operator|.
name|getSections
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|clonedSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|sectionId
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
name|clonedSections
operator|.
name|add
argument_list|(
name|sections
operator|.
name|get
argument_list|(
name|sectionId
argument_list|)
argument_list|)
expr_stmt|;
name|clonedReservation
operator|.
name|getSections
argument_list|()
operator|.
name|put
argument_list|(
name|subparts
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|clonedSections
argument_list|)
expr_stmt|;
block|}
block|}
comment|// There are reservations>> allow user to keep the current enrollment by providing a dummy reservation for it
if|if
condition|(
operator|!
name|offering
operator|.
name|getReservations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|XEnrollment
name|enrollment
range|:
name|enrollments
operator|.
name|getEnrollmentsForCourse
argument_list|(
name|courseId
argument_list|)
control|)
if|if
condition|(
name|enrollment
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|studentId
argument_list|)
condition|)
block|{
name|Reservation
name|clonedReservation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasMustUse
condition|)
block|{
name|clonedReservation
operator|=
operator|new
name|OnlineReservation
argument_list|(
name|XReservationType
operator|.
name|Dummy
operator|.
name|ordinal
argument_list|()
argument_list|,
operator|-
literal|2l
argument_list|,
name|clonedOffering
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|mustBeUsed
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|clonedReservation
operator|=
operator|new
name|OnlineReservation
argument_list|(
name|XReservationType
operator|.
name|Dummy
operator|.
name|ordinal
argument_list|()
argument_list|,
operator|-
literal|2l
argument_list|,
name|clonedOffering
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|clonedReservation
operator|.
name|addConfig
argument_list|(
name|configs
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getConfigId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|sectionId
range|:
name|enrollment
operator|.
name|getSectionIds
argument_list|()
control|)
name|clonedReservation
operator|.
name|addSection
argument_list|(
name|sections
operator|.
name|get
argument_list|(
name|sectionId
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|clonedCourse
return|;
block|}
specifier|protected
name|void
name|addRequest
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Student
name|student
parameter_list|,
name|XStudent
name|originalStudent
parameter_list|,
name|CourseRequestInterface
operator|.
name|Request
name|request
parameter_list|,
name|boolean
name|alternative
parameter_list|,
name|boolean
name|updateFromCache
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
parameter_list|,
name|Set
argument_list|<
name|XDistribution
argument_list|>
name|distributions
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|Vector
argument_list|<
name|Course
argument_list|>
name|cr
init|=
operator|new
name|Vector
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|request
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|freeTime
range|:
name|rc
operator|.
name|getFreeTime
argument_list|()
control|)
block|{
name|int
name|dayCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|freeTime
operator|.
name|getDays
argument_list|()
operator|.
name|contains
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
condition|)
name|dayCode
operator||=
name|d
operator|.
name|getCode
argument_list|()
expr_stmt|;
block|}
name|TimeLocation
name|freeTimeLoc
init|=
operator|new
name|TimeLocation
argument_list|(
name|dayCode
argument_list|,
name|freeTime
operator|.
name|getStart
argument_list|()
argument_list|,
name|freeTime
operator|.
name|getLength
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1l
argument_list|,
literal|""
argument_list|,
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
operator|new
name|FreeTimeRequest
argument_list|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|alternative
argument_list|,
name|student
argument_list|,
name|freeTimeLoc
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|rc
operator|.
name|isCourse
argument_list|()
condition|)
block|{
name|XCourseId
name|courseInfo
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
name|XOffering
name|offering
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|courseInfo
operator|!=
literal|null
condition|)
name|offering
operator|=
name|server
operator|.
name|getOffering
argument_list|(
name|courseInfo
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
block|{
name|cr
operator|.
name|add
argument_list|(
name|clone
argument_list|(
name|offering
argument_list|,
name|server
operator|.
name|getEnrollments
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
argument_list|,
name|courseInfo
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|originalStudent
argument_list|,
name|classTable
argument_list|,
name|server
argument_list|,
name|model
argument_list|)
argument_list|)
expr_stmt|;
name|distributions
operator|.
name|addAll
argument_list|(
name|offering
operator|.
name|getDistributions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|cr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CourseRequest
name|clonnedRequest
init|=
operator|new
name|CourseRequest
argument_list|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|alternative
argument_list|,
name|student
argument_list|,
name|cr
argument_list|,
name|request
operator|.
name|isWaitList
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|originalStudent
operator|!=
literal|null
condition|)
for|for
control|(
name|XRequest
name|originalRequest
range|:
name|originalStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|XEnrollment
name|originalEnrollment
init|=
operator|(
name|originalRequest
operator|instanceof
name|XCourseRequest
condition|?
operator|(
operator|(
name|XCourseRequest
operator|)
name|originalRequest
operator|)
operator|.
name|getEnrollment
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
for|for
control|(
name|Course
name|clonnedCourse
range|:
name|clonnedRequest
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|clonnedCourse
operator|.
name|getOffering
argument_list|()
operator|.
name|hasReservations
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|originalEnrollment
operator|!=
literal|null
operator|&&
name|originalEnrollment
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|clonnedCourse
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|needReservation
init|=
name|clonnedCourse
operator|.
name|getOffering
argument_list|()
operator|.
name|getUnreservedSpace
argument_list|(
name|assignment
argument_list|,
name|clonnedRequest
argument_list|)
operator|<
literal|1.0
decl_stmt|;
if|if
condition|(
operator|!
name|needReservation
condition|)
block|{
name|boolean
name|configChecked
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Long
name|originalSectionId
range|:
name|originalEnrollment
operator|.
name|getSectionIds
argument_list|()
control|)
block|{
name|Section
name|clonnedSection
init|=
name|classTable
operator|.
name|get
argument_list|(
name|originalSectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|clonnedSection
operator|.
name|getUnreservedSpace
argument_list|(
name|assignment
argument_list|,
name|clonnedRequest
argument_list|)
operator|<
literal|1.0
condition|)
block|{
name|needReservation
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|configChecked
operator|&&
name|clonnedSection
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getUnreservedSpace
argument_list|(
name|assignment
argument_list|,
name|clonnedRequest
argument_list|)
operator|<
literal|1.0
condition|)
block|{
name|needReservation
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|configChecked
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needReservation
condition|)
block|{
name|Reservation
name|reservation
init|=
operator|new
name|OnlineReservation
argument_list|(
name|XReservationType
operator|.
name|Dummy
operator|.
name|ordinal
argument_list|()
argument_list|,
operator|-
name|originalStudent
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|clonnedCourse
operator|.
name|getOffering
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|originalSectionId
range|:
name|originalEnrollment
operator|.
name|getSectionIds
argument_list|()
control|)
name|reservation
operator|.
name|addSection
argument_list|(
name|classTable
operator|.
name|get
argument_list|(
name|originalSectionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|ClassAssignmentInterface
name|convert
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Enrollment
index|[]
name|enrollments
parameter_list|,
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|requiredSectionsForCourse
parameter_list|,
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
name|requiredFreeTimes
parameter_list|,
name|boolean
name|computeOverlaps
parameter_list|,
name|DistanceConflict
name|dc
parameter_list|,
name|Set
argument_list|<
name|IdPair
argument_list|>
name|savedClasses
parameter_list|)
throws|throws
name|SectioningException
block|{
name|DistanceMetric
name|m
init|=
name|server
operator|.
name|getDistanceMetric
argument_list|()
decl_stmt|;
name|OverExpectedCriterion
name|overExp
init|=
name|server
operator|.
name|getOverExpectedCriterion
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
name|ret
init|=
operator|new
name|ClassAssignmentInterface
argument_list|()
decl_stmt|;
name|int
name|nrUnassignedCourses
init|=
literal|0
decl_stmt|;
name|int
name|nrAssignedAlt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|enrollment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|nrAssignedAlt
operator|>=
name|nrUnassignedCourses
operator|&&
operator|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
continue|continue;
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|ca
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|r
init|=
operator|(
name|CourseRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Course
name|course
init|=
name|enrollment
operator|.
name|getCourse
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|.
name|isOfferingLocked
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|ca
operator|.
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|XCourse
name|xc
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|xc
operator|!=
literal|null
condition|)
name|ca
operator|.
name|setTitle
argument_list|(
name|xc
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setWaitListed
argument_list|(
name|r
operator|.
name|isWaitlist
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isWaitlist
argument_list|()
condition|)
name|nrUnassignedCourses
operator|++
expr_stmt|;
if|if
condition|(
name|computeOverlaps
condition|)
block|{
name|TreeSet
argument_list|<
name|Enrollment
argument_list|>
name|overlap
init|=
operator|new
name|TreeSet
argument_list|<
name|Enrollment
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Enrollment
name|e1
parameter_list|,
name|Enrollment
name|e2
parameter_list|)
block|{
return|return
name|e1
operator|.
name|getRequest
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getRequest
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|>
name|overlapingSections
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Enrollment
argument_list|>
name|avEnrls
init|=
name|r
operator|.
name|getAvaiableEnrollmentsSkipSameTime
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|e
init|=
name|avEnrls
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrl
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Enrollment
name|x
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|x
operator|==
name|enrollment
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|SctAssignment
argument_list|>
name|i
init|=
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SctAssignment
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|isOverlapping
argument_list|(
name|enrl
operator|.
name|getAssignments
argument_list|()
argument_list|)
condition|)
block|{
name|overlap
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|x
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Section
argument_list|>
name|ss
init|=
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
name|ss
operator|=
operator|new
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|(
operator|new
name|AssignmentComparator
argument_list|<
name|Section
argument_list|,
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|overlapingSections
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
name|ss
operator|.
name|add
argument_list|(
operator|(
name|Section
operator|)
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|Enrollment
name|q
range|:
name|overlap
control|)
block|{
if|if
condition|(
name|q
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|ca
operator|.
name|addOverlap
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toString
argument_list|(
operator|(
name|FreeTimeRequest
operator|)
name|q
operator|.
name|getRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|q
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Course
name|o
init|=
name|q
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|String
name|ov
init|=
name|o
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|o
operator|.
name|getCourseNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|s
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ov
operator|+=
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|ov
operator|+=
literal|","
expr_stmt|;
block|}
name|ca
operator|.
name|addOverlap
argument_list|(
name|ov
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|alt
init|=
name|nrUnassignedCourses
decl_stmt|;
for|for
control|(
name|Enrollment
name|x
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|x
operator|==
name|enrollment
condition|)
continue|continue;
if|if
condition|(
name|x
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|x
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
if|if
condition|(
operator|--
name|alt
operator|==
literal|0
condition|)
block|{
name|Course
name|o
init|=
name|x
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setInstead
argument_list|(
name|o
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|o
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|avEnrls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ca
operator|.
name|setNotAvailable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setFull
argument_list|(
name|course
operator|.
name|getLimit
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FreeTimeRequest
name|r
init|=
operator|(
name|FreeTimeRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|computeOverlaps
condition|)
block|{
for|for
control|(
name|Enrollment
name|x
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|x
operator|==
name|enrollment
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|SctAssignment
argument_list|>
name|i
init|=
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SctAssignment
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isOverlapping
argument_list|(
name|a
argument_list|)
operator|&&
name|x
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
name|Course
name|o
init|=
name|x
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|Section
name|s
init|=
operator|(
name|Section
operator|)
name|a
decl_stmt|;
name|ca
operator|.
name|addOverlap
argument_list|(
name|o
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|o
operator|.
name|getCourseNumber
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|ca
operator|.
name|getOverlaps
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|r
init|=
operator|(
name|CourseRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Section
argument_list|>
name|requiredSections
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|requiredSectionsForCourse
operator|!=
literal|null
condition|)
name|requiredSections
operator|=
name|requiredSectionsForCourse
operator|.
name|get
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isAlternative
argument_list|()
operator|&&
name|assignment
operator|.
name|getValue
argument_list|(
name|r
argument_list|)
operator|!=
literal|null
condition|)
name|nrAssignedAlt
operator|++
expr_stmt|;
name|TreeSet
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|(
operator|new
name|EnrollmentSectionComparator
argument_list|()
argument_list|)
decl_stmt|;
name|sections
operator|.
name|addAll
argument_list|(
name|enrollment
operator|.
name|getSections
argument_list|()
argument_list|)
expr_stmt|;
name|Course
name|course
init|=
name|enrollment
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|ca
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|.
name|isOfferingLocked
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|ca
operator|.
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setWaitListed
argument_list|(
name|r
operator|.
name|isWaitlist
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|hasAlt
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Subpart
argument_list|>
name|i
init|=
operator|(
operator|(
name|Config
operator|)
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|s
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ca
operator|.
name|setTitle
argument_list|(
name|offering
operator|.
name|getCourse
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|XEnrollments
name|enrl
init|=
name|server
operator|.
name|getEnrollments
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|sections
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCancelled
argument_list|(
name|section
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|enrl
operator|.
name|countEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
block|,
name|offering
operator|.
name|getSection
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getLimit
argument_list|()
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XSection
name|x
init|=
name|offering
operator|.
name|getSection
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|setDatePattern
argument_list|(
name|x
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|RoomLocation
argument_list|>
name|e
init|=
name|section
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomLocation
name|rm
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|a
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|XSection
name|x
init|=
name|offering
operator|.
name|getSection
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XRoom
name|rm
range|:
name|x
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|a
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|instructors
init|=
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|instructor
range|:
name|instructors
control|)
block|{
name|String
index|[]
name|nameEmail
init|=
name|instructor
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|a
operator|.
name|addInstructor
argument_list|(
name|nameEmail
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmail
argument_list|(
name|nameEmail
operator|.
name|length
operator|<
literal|2
condition|?
literal|""
else|:
name|nameEmail
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|section
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|requiredSections
operator|!=
literal|null
operator|&&
name|requiredSections
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
name|a
operator|.
name|setPinned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setHasAlternatives
argument_list|(
name|hasAlt
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|course
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCredit
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|dist
init|=
literal|0
decl_stmt|;
name|String
name|from
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|overlap
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enrollment
name|x
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
operator|||
operator|!
name|x
operator|.
name|isCourseRequest
argument_list|()
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|x
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|s
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|section
operator|||
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|int
name|d
init|=
name|distance
argument_list|(
name|m
argument_list|,
name|s
argument_list|,
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>
name|dist
condition|)
block|{
name|dist
operator|=
name|d
expr_stmt|;
name|from
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RoomLocation
argument_list|>
name|k
init|=
name|s
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|from
operator|+=
name|k
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|k
operator|.
name|hasNext
argument_list|()
condition|?
literal|", "
else|:
literal|""
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|>
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
condition|)
block|{
name|a
operator|.
name|setDistanceConflict
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
argument_list|)
operator|&&
operator|!
name|section
operator|.
name|isToIgnoreStudentConflictsWith
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|overlap
operator|.
name|add
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|s
operator|.
name|getName
argument_list|(
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|overlap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|note
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|j
init|=
name|overlap
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|n
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|note
operator|==
literal|null
condition|)
name|note
operator|=
name|MSG
operator|.
name|noteAllowedOverlapFirst
argument_list|(
name|n
argument_list|)
expr_stmt|;
if|else if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
name|note
operator|+=
name|MSG
operator|.
name|noteAllowedOverlapMiddle
argument_list|(
name|n
argument_list|)
expr_stmt|;
else|else
name|note
operator|+=
name|MSG
operator|.
name|noteAllowedOverlapLast
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setOverlapNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setBackToBackDistance
argument_list|(
name|dist
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBackToBackRooms
argument_list|(
name|from
argument_list|)
expr_stmt|;
comment|// if (dist> 0.0) a.setDistanceConflict(true);
if|if
condition|(
name|savedClasses
operator|!=
literal|null
operator|&&
name|savedClasses
operator|.
name|contains
argument_list|(
operator|new
name|IdPair
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|section
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
condition|)
name|a
operator|.
name|setSaved
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|server
operator|.
name|getCourse
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getConsentLabel
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExpected
argument_list|(
name|overExp
operator|.
name|getExpected
argument_list|(
name|section
operator|.
name|getLimit
argument_list|()
argument_list|,
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FreeTimeRequest
name|r
init|=
operator|(
name|FreeTimeRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|ca
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|requiredFreeTimes
operator|!=
literal|null
operator|&&
name|requiredFreeTimes
operator|.
name|contains
argument_list|(
name|r
argument_list|)
condition|)
name|a
operator|.
name|setPinned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|ClassAssignmentInterface
name|convert
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Student
name|student
parameter_list|,
name|BranchBoundNeighbour
name|neighbour
parameter_list|,
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|requiredSectionsForCourse
parameter_list|,
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
name|requiredFreeTimes
parameter_list|,
name|Set
argument_list|<
name|IdPair
argument_list|>
name|savedClasses
parameter_list|)
throws|throws
name|SectioningException
block|{
name|Enrollment
index|[]
name|enrollments
init|=
name|neighbour
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollments
operator|==
literal|null
operator|||
name|enrollments
operator|.
name|length
operator|<
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolution
argument_list|()
argument_list|)
throw|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|Request
name|r
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollments
index|[
name|idx
index|]
operator|==
literal|null
condition|)
block|{
name|Config
name|c
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
name|c
operator|=
operator|(
name|Config
operator|)
operator|(
operator|(
name|Course
operator|)
operator|(
operator|(
name|CourseRequest
operator|)
name|r
operator|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|enrollments
index|[
name|idx
index|]
operator|=
operator|new
name|Enrollment
argument_list|(
name|r
argument_list|,
literal|0
argument_list|,
name|c
argument_list|,
literal|null
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
block|}
block|}
name|ClassAssignmentInterface
name|ret
init|=
name|convert
argument_list|(
name|server
argument_list|,
name|assignment
argument_list|,
name|enrollments
argument_list|,
name|requiredSectionsForCourse
argument_list|,
name|requiredFreeTimes
argument_list|,
literal|true
argument_list|,
name|model
operator|.
name|getDistanceConflict
argument_list|()
argument_list|,
name|savedClasses
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setValue
argument_list|(
operator|-
name|neighbour
operator|.
name|value
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"section"
return|;
block|}
specifier|public
name|int
name|distance
parameter_list|(
name|DistanceMetric
name|m
parameter_list|,
name|Section
name|s1
parameter_list|,
name|Section
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|.
name|getPlacement
argument_list|()
operator|==
literal|null
operator|||
name|s2
operator|.
name|getPlacement
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|TimeLocation
name|t1
init|=
name|s1
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|TimeLocation
name|t2
init|=
name|s2
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|t1
operator|.
name|shareDays
argument_list|(
name|t2
argument_list|)
operator|||
operator|!
name|t1
operator|.
name|shareWeeks
argument_list|(
name|t2
argument_list|)
condition|)
return|return
literal|0
return|;
name|int
name|a1
init|=
name|t1
operator|.
name|getStartSlot
argument_list|()
decl_stmt|,
name|a2
init|=
name|t2
operator|.
name|getStartSlot
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|doComputeDistanceConflictsBetweenNonBTBClasses
argument_list|()
condition|)
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|<=
name|a2
condition|)
block|{
name|int
name|dist
init|=
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|m
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dist
operator|>
name|t1
operator|.
name|getBreakTime
argument_list|()
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|a2
operator|-
name|a1
operator|-
name|t1
operator|.
name|getLength
argument_list|()
operator|)
condition|)
return|return
name|dist
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|==
name|a2
condition|)
return|return
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|m
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
specifier|static
class|class
name|EnrollmentSectionComparator
implements|implements
name|Comparator
argument_list|<
name|Section
argument_list|>
block|{
specifier|public
name|boolean
name|isParent
parameter_list|(
name|Section
name|s1
parameter_list|,
name|Section
name|s2
parameter_list|)
block|{
name|Section
name|p1
init|=
name|s1
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|isParent
argument_list|(
name|p1
argument_list|,
name|s2
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Section
name|a
parameter_list|,
name|Section
name|b
parameter_list|)
block|{
if|if
condition|(
name|isParent
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|isParent
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|a
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|b
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|,
name|b
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|IdPair
block|{
specifier|private
name|Long
name|iId1
decl_stmt|,
name|iId2
decl_stmt|;
specifier|public
name|IdPair
parameter_list|(
name|Long
name|id1
parameter_list|,
name|Long
name|id2
parameter_list|)
block|{
name|iId1
operator|=
name|id1
expr_stmt|;
name|iId2
operator|=
name|id2
expr_stmt|;
block|}
specifier|public
name|Long
name|getId1
parameter_list|()
block|{
return|return
name|iId1
return|;
block|}
specifier|public
name|Long
name|getId2
parameter_list|()
block|{
return|return
name|iId2
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|iId1
operator|.
name|hashCode
argument_list|()
operator|^
name|iId2
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|IdPair
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|iId1
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|IdPair
operator|)
name|o
operator|)
operator|.
name|iId1
argument_list|)
operator|&&
name|iId2
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|IdPair
operator|)
name|o
operator|)
operator|.
name|iId2
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

