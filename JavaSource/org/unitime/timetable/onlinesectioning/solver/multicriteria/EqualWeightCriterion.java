begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.3 (University Timetabling Application)  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|multicriteria
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_class
specifier|public
class|class
name|EqualWeightCriterion
extends|extends
name|OnlineSectioningCriterion
block|{
specifier|public
name|EqualWeightCriterion
parameter_list|(
name|Student
name|student
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|preferredSections
parameter_list|)
block|{
name|super
argument_list|(
name|student
argument_list|,
name|model
argument_list|,
name|preferredSections
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Enrollment
index|[]
name|current
parameter_list|,
name|Enrollment
index|[]
name|best
parameter_list|)
block|{
if|if
condition|(
name|best
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
comment|// 0. best number of assigned course requests (including alternativity& priority)
name|int
name|currentAssignedCourseReq
init|=
literal|0
decl_stmt|,
name|bestAssignedCourseReq
init|=
literal|0
decl_stmt|;
name|int
name|currentAssignedRequests
init|=
literal|0
decl_stmt|,
name|bestAssignedRequests
init|=
literal|0
decl_stmt|;
name|int
name|currentAssignedPriority
init|=
literal|0
decl_stmt|,
name|bestAssignedPriority
init|=
literal|0
decl_stmt|;
name|int
name|currentAssignedAlternativity
init|=
literal|0
decl_stmt|,
name|bestAssignedAlternativity
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|current
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|currentAssignedRequests
operator|++
expr_stmt|;
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
name|currentAssignedCourseReq
operator|++
expr_stmt|;
name|currentAssignedPriority
operator|+=
name|current
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
operator|*
name|current
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|currentAssignedAlternativity
operator|+=
operator|(
name|current
index|[
name|idx
index|]
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|bestAssignedRequests
operator|++
expr_stmt|;
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
name|bestAssignedCourseReq
operator|++
expr_stmt|;
name|bestAssignedPriority
operator|+=
name|best
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
operator|*
name|best
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|bestAssignedAlternativity
operator|+=
operator|(
name|best
index|[
name|idx
index|]
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentAssignedCourseReq
operator|>
name|bestAssignedCourseReq
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestAssignedCourseReq
operator|>
name|currentAssignedCourseReq
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|currentAssignedPriority
operator|<
name|bestAssignedPriority
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestAssignedPriority
operator|<
name|currentAssignedPriority
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|currentAssignedAlternativity
operator|<
name|bestAssignedAlternativity
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestAssignedAlternativity
operator|<
name|currentAssignedAlternativity
condition|)
return|return
literal|1
return|;
comment|// 1. minimize number of penalties
name|int
name|bestPenalties
init|=
literal|0
decl_stmt|,
name|currentPenalties
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getPenalty
argument_list|()
operator|>=
literal|0.0
condition|)
name|bestPenalties
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|current
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
operator|&&
name|current
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getPenalty
argument_list|()
operator|>=
literal|0.0
condition|)
name|currentPenalties
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentPenalties
operator|<
name|bestPenalties
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestPenalties
operator|<
name|currentPenalties
condition|)
return|return
literal|1
return|;
comment|// 2. best number of assigned requests (including free time requests)
if|if
condition|(
name|currentAssignedRequests
operator|>
name|bestAssignedRequests
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestAssignedRequests
operator|>
name|currentAssignedRequests
condition|)
return|return
literal|1
return|;
comment|// 3. maximize selection
name|int
name|bestSelected
init|=
literal|0
decl_stmt|,
name|currentSelected
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|preferred
init|=
name|getPreferredSections
argument_list|(
name|getRequest
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|preferred
operator|!=
literal|null
operator|&&
operator|!
name|preferred
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|preferred
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
name|bestSelected
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|current
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
operator|&&
name|current
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|preferred
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
name|currentSelected
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentSelected
operator|>
name|bestSelected
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestSelected
operator|>
name|currentSelected
condition|)
return|return
literal|1
return|;
comment|// 4. avoid time overlaps
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|bestTimeOverlaps
init|=
literal|0
decl_stmt|,
name|currentTimeOverlaps
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|x
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|x
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
name|bestTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|best
index|[
name|x
index|]
argument_list|,
name|best
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|instanceof
name|FreeTimeRequest
condition|)
name|bestTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
operator|(
operator|(
name|FreeTimeRequest
operator|)
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|createEnrollment
argument_list|()
argument_list|,
name|best
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|current
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|current
index|[
name|x
index|]
operator|!=
literal|null
operator|&&
name|current
index|[
name|x
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
name|currentTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|current
index|[
name|x
index|]
argument_list|,
name|current
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|instanceof
name|FreeTimeRequest
condition|)
name|currentTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
operator|(
operator|(
name|FreeTimeRequest
operator|)
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|createEnrollment
argument_list|()
argument_list|,
name|current
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentTimeOverlaps
operator|<
name|bestTimeOverlaps
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestTimeOverlaps
operator|<
name|currentTimeOverlaps
condition|)
return|return
literal|1
return|;
block|}
comment|// 5. avoid distance conflicts
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|bestDistanceConf
init|=
literal|0
decl_stmt|,
name|currentDistanceConf
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|x
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|x
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
name|bestDistanceConf
operator|+=
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|best
index|[
name|x
index|]
argument_list|,
name|best
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|current
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|current
index|[
name|x
index|]
operator|!=
literal|null
operator|&&
name|current
index|[
name|x
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
name|currentDistanceConf
operator|+=
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|current
index|[
name|x
index|]
argument_list|,
name|current
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentDistanceConf
operator|<
name|bestDistanceConf
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestDistanceConf
operator|<
name|currentDistanceConf
condition|)
return|return
literal|1
return|;
block|}
comment|// 6. avoid no-time sections
name|int
name|bestNoTime
init|=
literal|0
decl_stmt|,
name|currentNoTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
name|bestNoTime
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|current
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
name|currentNoTime
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentNoTime
operator|<
name|bestNoTime
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestNoTime
operator|<
name|currentNoTime
condition|)
return|return
literal|1
return|;
comment|// 7. balance sections
name|double
name|bestUnavailableSize
init|=
literal|0.0
decl_stmt|,
name|currentUnavailableSize
init|=
literal|0.0
decl_stmt|;
name|int
name|bestAltSectionsWithLimit
init|=
literal|0
decl_stmt|,
name|currentAltSectionsWithLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Subpart
name|subpart
init|=
name|section
operator|.
name|getSubpart
argument_list|()
decl_stmt|;
comment|// skip unlimited and single section subparts
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|||
name|subpart
operator|.
name|getLimit
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
comment|// average size
name|double
name|averageSize
init|=
operator|(
operator|(
name|double
operator|)
name|subpart
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// section is below average
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
name|averageSize
condition|)
name|bestUnavailableSize
operator|+=
operator|(
name|averageSize
operator|-
name|section
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|averageSize
expr_stmt|;
name|bestAltSectionsWithLimit
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|current
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Subpart
name|subpart
init|=
name|section
operator|.
name|getSubpart
argument_list|()
decl_stmt|;
comment|// skip unlimited and single section subparts
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|||
name|subpart
operator|.
name|getLimit
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
comment|// average size
name|double
name|averageSize
init|=
operator|(
operator|(
name|double
operator|)
name|subpart
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// section is below average
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
name|averageSize
condition|)
name|currentUnavailableSize
operator|+=
operator|(
name|averageSize
operator|-
name|section
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|averageSize
expr_stmt|;
name|currentAltSectionsWithLimit
operator|++
expr_stmt|;
block|}
block|}
block|}
name|double
name|bestUnavailableSizeFraction
init|=
operator|(
name|bestUnavailableSize
operator|>
literal|0
condition|?
name|bestUnavailableSize
operator|/
name|bestAltSectionsWithLimit
else|:
literal|0.0
operator|)
decl_stmt|;
name|double
name|currentUnavailableSizeFraction
init|=
operator|(
name|currentUnavailableSize
operator|>
literal|0
condition|?
name|currentUnavailableSize
operator|/
name|currentAltSectionsWithLimit
else|:
literal|0.0
operator|)
decl_stmt|;
if|if
condition|(
name|currentUnavailableSizeFraction
operator|<
name|bestUnavailableSizeFraction
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestUnavailableSizeFraction
operator|<
name|currentUnavailableSizeFraction
condition|)
return|return
literal|1
return|;
comment|// 8. average penalty sections
name|double
name|bestPenalty
init|=
literal|0.0
decl_stmt|,
name|currentPenalty
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
name|bestPenalty
operator|+=
name|section
operator|.
name|getPenalty
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|current
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
name|currentPenalty
operator|+=
name|section
operator|.
name|getPenalty
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentPenalty
operator|<
name|bestPenalty
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestPenalty
operator|<
name|currentPenalty
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canImprove
parameter_list|(
name|int
name|maxIdx
parameter_list|,
name|Enrollment
index|[]
name|current
parameter_list|,
name|Enrollment
index|[]
name|best
parameter_list|)
block|{
comment|// 0. best number of assigned course requests (including alternativity& priority)
name|int
name|currentAssignedCourseReq
init|=
literal|0
decl_stmt|,
name|bestAssignedCourseReq
init|=
literal|0
decl_stmt|;
name|int
name|currentAssignedRequests
init|=
literal|0
decl_stmt|,
name|bestAssignedRequests
init|=
literal|0
decl_stmt|;
name|int
name|currentAssignedPriority
init|=
literal|0
decl_stmt|,
name|bestAssignedPriority
init|=
literal|0
decl_stmt|;
name|int
name|currentAssignedAlternativity
init|=
literal|0
decl_stmt|,
name|bestAssignedAlternativity
init|=
literal|0
decl_stmt|;
name|int
name|alt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|<
name|maxIdx
condition|)
block|{
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|current
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|currentAssignedRequests
operator|++
expr_stmt|;
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
name|currentAssignedCourseReq
operator|++
expr_stmt|;
name|currentAssignedPriority
operator|+=
name|current
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
operator|*
name|current
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|currentAssignedAlternativity
operator|+=
operator|(
name|current
index|[
name|idx
index|]
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|isFreeTime
argument_list|(
name|idx
argument_list|)
operator|&&
operator|!
name|getRequest
argument_list|(
name|idx
argument_list|)
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
name|alt
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|getRequest
argument_list|(
name|idx
argument_list|)
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
name|currentAssignedRequests
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|isFreeTime
argument_list|(
name|idx
argument_list|)
condition|)
name|currentAssignedCourseReq
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|alt
operator|>
literal|0
condition|)
block|{
name|currentAssignedRequests
operator|++
expr_stmt|;
name|currentAssignedCourseReq
operator|++
expr_stmt|;
name|alt
operator|--
expr_stmt|;
name|currentAssignedAlternativity
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|bestAssignedRequests
operator|++
expr_stmt|;
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
name|bestAssignedCourseReq
operator|++
expr_stmt|;
name|bestAssignedPriority
operator|+=
name|best
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
operator|*
name|best
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|bestAssignedAlternativity
operator|+=
operator|(
name|best
index|[
name|idx
index|]
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentAssignedCourseReq
operator|>
name|bestAssignedCourseReq
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestAssignedCourseReq
operator|>
name|currentAssignedCourseReq
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|currentAssignedPriority
operator|<
name|bestAssignedPriority
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestAssignedPriority
operator|<
name|currentAssignedPriority
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|currentAssignedAlternativity
operator|<
name|bestAssignedAlternativity
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestAssignedAlternativity
operator|<
name|currentAssignedAlternativity
condition|)
return|return
literal|false
return|;
comment|// 1. maximize number of penalties
name|int
name|bestPenalties
init|=
literal|0
decl_stmt|,
name|currentPenalties
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getPenalty
argument_list|()
operator|>=
literal|0.0
condition|)
name|bestPenalties
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|maxIdx
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getPenalty
argument_list|()
operator|>=
literal|0.0
condition|)
name|currentPenalties
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentPenalties
operator|<
name|bestPenalties
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestPenalties
operator|<
name|currentPenalties
condition|)
return|return
literal|false
return|;
comment|// 2. best number of assigned requests (including free time requests)
if|if
condition|(
name|currentAssignedRequests
operator|>
name|bestAssignedRequests
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestAssignedRequests
operator|>
name|currentAssignedRequests
condition|)
return|return
literal|false
return|;
comment|// 3. maximize selection
name|int
name|bestSelected
init|=
literal|0
decl_stmt|,
name|currentSelected
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|preferred
init|=
name|getPreferredSections
argument_list|(
name|best
index|[
name|idx
index|]
operator|.
name|getRequest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|preferred
operator|!=
literal|null
operator|&&
operator|!
name|preferred
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|preferred
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
block|{
if|if
condition|(
name|idx
operator|<
name|maxIdx
condition|)
name|bestSelected
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|idx
operator|>=
name|maxIdx
condition|)
name|bestSelected
operator|--
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|maxIdx
operator|&&
name|current
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|preferred
init|=
name|getPreferredSections
argument_list|(
name|current
index|[
name|idx
index|]
operator|.
name|getRequest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|preferred
operator|!=
literal|null
operator|&&
operator|!
name|preferred
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|preferred
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
name|currentSelected
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentSelected
operator|>
name|bestSelected
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestSelected
operator|>
name|currentSelected
condition|)
return|return
literal|false
return|;
comment|// 4. avoid time overlaps
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|bestTimeOverlaps
init|=
literal|0
decl_stmt|,
name|currentTimeOverlaps
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|x
index|]
operator|!=
literal|null
condition|)
name|bestTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|best
index|[
name|x
index|]
argument_list|,
name|best
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|instanceof
name|FreeTimeRequest
condition|)
name|bestTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
operator|(
operator|(
name|FreeTimeRequest
operator|)
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|createEnrollment
argument_list|()
argument_list|,
name|best
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|maxIdx
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|current
index|[
name|x
index|]
operator|!=
literal|null
condition|)
name|currentTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|current
index|[
name|x
index|]
argument_list|,
name|current
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|instanceof
name|FreeTimeRequest
condition|)
name|currentTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
operator|(
operator|(
name|FreeTimeRequest
operator|)
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|createEnrollment
argument_list|()
argument_list|,
name|current
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentTimeOverlaps
operator|<
name|bestTimeOverlaps
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestTimeOverlaps
operator|<
name|currentTimeOverlaps
condition|)
return|return
literal|false
return|;
block|}
comment|// 5. avoid distance conflicts
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|bestDistanceConf
init|=
literal|0
decl_stmt|,
name|currentDistanceConf
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|x
index|]
operator|!=
literal|null
condition|)
name|bestDistanceConf
operator|+=
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|best
index|[
name|x
index|]
argument_list|,
name|best
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|maxIdx
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|current
index|[
name|x
index|]
operator|!=
literal|null
condition|)
name|currentDistanceConf
operator|+=
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|current
index|[
name|x
index|]
argument_list|,
name|current
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentDistanceConf
operator|<
name|bestDistanceConf
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestDistanceConf
operator|<
name|currentDistanceConf
condition|)
return|return
literal|false
return|;
block|}
comment|// 6. avoid no-time sections
name|int
name|bestNoTime
init|=
literal|0
decl_stmt|,
name|currentNoTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
name|bestNoTime
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|maxIdx
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
name|currentNoTime
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentNoTime
operator|<
name|bestNoTime
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestNoTime
operator|<
name|currentNoTime
condition|)
return|return
literal|false
return|;
comment|// 7. balance sections
name|double
name|bestUnavailableSize
init|=
literal|0.0
decl_stmt|,
name|currentUnavailableSize
init|=
literal|0.0
decl_stmt|;
name|int
name|bestAltSectionsWithLimit
init|=
literal|0
decl_stmt|,
name|currentAltSectionsWithLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Subpart
name|subpart
init|=
name|section
operator|.
name|getSubpart
argument_list|()
decl_stmt|;
comment|// skip unlimited and single section subparts
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|||
name|subpart
operator|.
name|getLimit
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
comment|// average size
name|double
name|averageSize
init|=
operator|(
operator|(
name|double
operator|)
name|subpart
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// section is below average
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
name|averageSize
condition|)
name|bestUnavailableSize
operator|+=
operator|(
name|averageSize
operator|-
name|section
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|averageSize
expr_stmt|;
name|bestAltSectionsWithLimit
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|maxIdx
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Subpart
name|subpart
init|=
name|section
operator|.
name|getSubpart
argument_list|()
decl_stmt|;
comment|// skip unlimited and single section subparts
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|||
name|subpart
operator|.
name|getLimit
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
comment|// average size
name|double
name|averageSize
init|=
operator|(
operator|(
name|double
operator|)
name|subpart
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// section is below average
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
name|averageSize
condition|)
name|currentUnavailableSize
operator|+=
operator|(
name|averageSize
operator|-
name|section
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|averageSize
expr_stmt|;
name|currentAltSectionsWithLimit
operator|++
expr_stmt|;
block|}
block|}
block|}
name|double
name|bestUnavailableSizeFraction
init|=
operator|(
name|bestUnavailableSize
operator|>
literal|0
condition|?
name|bestUnavailableSize
operator|/
name|bestAltSectionsWithLimit
else|:
literal|0.0
operator|)
decl_stmt|;
name|double
name|currentUnavailableSizeFraction
init|=
operator|(
name|currentUnavailableSize
operator|>
literal|0
condition|?
name|currentUnavailableSize
operator|/
name|currentAltSectionsWithLimit
else|:
literal|0.0
operator|)
decl_stmt|;
if|if
condition|(
name|currentUnavailableSizeFraction
operator|<
name|bestUnavailableSizeFraction
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestUnavailableSizeFraction
operator|<
name|currentUnavailableSizeFraction
condition|)
return|return
literal|false
return|;
comment|// 8. average penalty sections
name|double
name|bestPenalty
init|=
literal|0.0
decl_stmt|,
name|currentPenalty
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
name|bestPenalty
operator|+=
name|section
operator|.
name|getPenalty
argument_list|()
expr_stmt|;
if|if
condition|(
name|idx
operator|>=
name|maxIdx
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
name|bestPenalty
operator|-=
operator|(
operator|(
name|CourseRequest
operator|)
name|best
index|[
name|idx
index|]
operator|.
name|getRequest
argument_list|()
operator|)
operator|.
name|getMinPenalty
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|maxIdx
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
name|currentPenalty
operator|+=
name|section
operator|.
name|getPenalty
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentPenalty
operator|<
name|bestPenalty
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestPenalty
operator|<
name|currentPenalty
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

