begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.3 - 3.5 (University Timetabling Application)  * Copyright (C) 2011 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|multicriteria
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|DistanceConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|TimeOverlapsCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|weights
operator|.
name|StudentWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|OnlineSectioningModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|multicriteria
operator|.
name|MultiCriteriaBranchAndBoundSelection
operator|.
name|SelectionCriterion
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|OnlineSectioningCriterion
implements|implements
name|SelectionCriterion
block|{
specifier|private
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|iPreferredSections
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TimeToAvoid
argument_list|>
name|iTimesToAvoid
init|=
literal|null
decl_stmt|;
specifier|private
name|OnlineSectioningModel
name|iModel
decl_stmt|;
specifier|private
name|Student
name|iStudent
decl_stmt|;
specifier|public
name|OnlineSectioningCriterion
parameter_list|(
name|Student
name|student
parameter_list|,
name|OnlineSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|preferredSections
parameter_list|)
block|{
name|iStudent
operator|=
name|student
expr_stmt|;
name|iModel
operator|=
name|model
expr_stmt|;
name|iPreferredSections
operator|=
name|preferredSections
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"OnlineStudentSectioning.TimesToAvoidHeuristics"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|iTimesToAvoid
operator|=
operator|new
name|ArrayList
argument_list|<
name|TimeToAvoid
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|iStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|List
argument_list|<
name|Enrollment
argument_list|>
name|enrollments
init|=
operator|(
operator|(
name|CourseRequest
operator|)
name|r
operator|)
operator|.
name|getAvaiableEnrollmentsSkipSameTime
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollments
operator|.
name|size
argument_list|()
operator|<=
literal|5
condition|)
block|{
name|int
name|penalty
init|=
operator|(
literal|7
operator|-
name|enrollments
operator|.
name|size
argument_list|()
operator|)
operator|*
operator|(
name|r
operator|.
name|isAlternative
argument_list|()
condition|?
literal|1
else|:
literal|7
operator|-
name|enrollments
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|enrollments
control|)
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
name|iTimesToAvoid
operator|.
name|add
argument_list|(
operator|new
name|TimeToAvoid
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
argument_list|,
name|penalty
argument_list|,
name|r
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|r
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|iTimesToAvoid
operator|.
name|add
argument_list|(
operator|new
name|TimeToAvoid
argument_list|(
operator|(
operator|(
name|FreeTimeRequest
operator|)
name|r
operator|)
operator|.
name|getTime
argument_list|()
argument_list|,
literal|1
argument_list|,
name|r
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|OnlineSectioningModel
name|getModel
parameter_list|()
block|{
return|return
name|iModel
return|;
block|}
specifier|protected
name|Student
name|getStudent
parameter_list|()
block|{
return|return
name|iStudent
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|Section
argument_list|>
name|getPreferredSections
parameter_list|(
name|Request
name|request
parameter_list|)
block|{
return|return
name|iPreferredSections
operator|.
name|get
argument_list|(
name|request
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|TimeToAvoid
argument_list|>
name|getTimesToAvoid
parameter_list|()
block|{
return|return
name|iTimesToAvoid
return|;
block|}
comment|/**      * Distance conflicts of idx-th assignment of the current      * schedule      */
specifier|public
name|Set
argument_list|<
name|DistanceConflict
operator|.
name|Conflict
argument_list|>
name|getDistanceConflicts
parameter_list|(
name|Enrollment
index|[]
name|assignment
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|==
literal|null
operator|||
name|assignment
index|[
name|idx
index|]
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|DistanceConflict
operator|.
name|Conflict
argument_list|>
name|dist
init|=
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|conflicts
argument_list|(
name|assignment
index|[
name|idx
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
if|if
condition|(
name|assignment
index|[
name|x
index|]
operator|!=
literal|null
condition|)
name|dist
operator|.
name|addAll
argument_list|(
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|conflicts
argument_list|(
name|assignment
index|[
name|x
index|]
argument_list|,
name|assignment
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dist
return|;
block|}
comment|/**      * Time overlapping conflicts of idx-th assignment of the current      * schedule      */
specifier|public
name|Set
argument_list|<
name|TimeOverlapsCounter
operator|.
name|Conflict
argument_list|>
name|getTimeOverlappingConflicts
parameter_list|(
name|Enrollment
index|[]
name|assignment
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|==
literal|null
operator|||
name|assignment
index|[
name|idx
index|]
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|TimeOverlapsCounter
operator|.
name|Conflict
argument_list|>
name|overlaps
init|=
operator|new
name|HashSet
argument_list|<
name|TimeOverlapsCounter
operator|.
name|Conflict
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
if|if
condition|(
name|assignment
index|[
name|x
index|]
operator|!=
literal|null
condition|)
name|overlaps
operator|.
name|addAll
argument_list|(
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|conflicts
argument_list|(
name|assignment
index|[
name|x
index|]
argument_list|,
name|assignment
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|instanceof
name|FreeTimeRequest
condition|)
name|overlaps
operator|.
name|addAll
argument_list|(
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|conflicts
argument_list|(
operator|(
operator|(
name|FreeTimeRequest
operator|)
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|createEnrollment
argument_list|()
argument_list|,
name|assignment
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|overlaps
return|;
block|}
comment|/**      * Weight of an assignment. Unlike {@link StudentWeights#getWeight(Enrollment, Set, Set)}, only count this side of distance conflicts and time overlaps.      **/
specifier|protected
name|double
name|getWeight
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Enrollment
name|enrollment
parameter_list|,
name|Set
argument_list|<
name|DistanceConflict
operator|.
name|Conflict
argument_list|>
name|distanceConflicts
parameter_list|,
name|Set
argument_list|<
name|TimeOverlapsCounter
operator|.
name|Conflict
argument_list|>
name|timeOverlappingConflicts
parameter_list|)
block|{
name|double
name|weight
init|=
operator|-
name|getModel
argument_list|()
operator|.
name|getStudentWeights
argument_list|()
operator|.
name|getWeight
argument_list|(
name|assignment
argument_list|,
name|enrollment
argument_list|)
decl_stmt|;
if|if
condition|(
name|distanceConflicts
operator|!=
literal|null
condition|)
for|for
control|(
name|DistanceConflict
operator|.
name|Conflict
name|c
range|:
name|distanceConflicts
control|)
block|{
name|Enrollment
name|other
init|=
operator|(
name|c
operator|.
name|getE1
argument_list|()
operator|.
name|equals
argument_list|(
name|enrollment
argument_list|)
condition|?
name|c
operator|.
name|getE2
argument_list|()
else|:
name|c
operator|.
name|getE1
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|getRequest
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|<=
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|getPriority
argument_list|()
condition|)
name|weight
operator|+=
name|getModel
argument_list|()
operator|.
name|getStudentWeights
argument_list|()
operator|.
name|getDistanceConflictWeight
argument_list|(
name|assignment
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeOverlappingConflicts
operator|!=
literal|null
condition|)
for|for
control|(
name|TimeOverlapsCounter
operator|.
name|Conflict
name|c
range|:
name|timeOverlappingConflicts
control|)
block|{
name|weight
operator|+=
name|getModel
argument_list|()
operator|.
name|getStudentWeights
argument_list|()
operator|.
name|getTimeOverlapConflictWeight
argument_list|(
name|assignment
argument_list|,
name|enrollment
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|getWeight
argument_list|()
operator|*
name|weight
return|;
block|}
specifier|public
name|Request
name|getRequest
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
condition|?
literal|null
else|:
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|)
return|;
block|}
specifier|public
name|boolean
name|isFreeTime
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Request
name|r
init|=
name|getRequest
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|r
operator|!=
literal|null
operator|&&
name|r
operator|instanceof
name|FreeTimeRequest
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Enrollment
index|[]
name|current
parameter_list|,
name|Enrollment
index|[]
name|best
parameter_list|)
block|{
if|if
condition|(
name|best
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
comment|// 0. best priority& alternativity ignoring free time requests
name|boolean
name|ft
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|isFreeTime
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|ft
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|==
literal|null
operator|||
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
comment|// higher priority request assigned
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
operator|<
name|current
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
condition|)
return|return
literal|1
return|;
comment|// less alternative request assigned
block|}
else|else
block|{
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|current
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
return|return
operator|-
literal|1
return|;
comment|// higher priority request assigned
block|}
block|}
comment|// 1. minimize number of penalties
name|double
name|bestPenalties
init|=
literal|0
decl_stmt|,
name|currentPenalties
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
name|bestPenalties
operator|+=
name|getModel
argument_list|()
operator|.
name|getOverExpected
argument_list|(
name|assignment
argument_list|,
name|section
argument_list|,
name|best
index|[
name|idx
index|]
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
name|currentPenalties
operator|+=
name|getModel
argument_list|()
operator|.
name|getOverExpected
argument_list|(
name|assignment
argument_list|,
name|section
argument_list|,
name|current
index|[
name|idx
index|]
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentPenalties
operator|<
name|bestPenalties
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestPenalties
operator|<
name|currentPenalties
condition|)
return|return
literal|1
return|;
comment|// 2. best priority& alternativity including free time requests
if|if
condition|(
name|ft
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|==
literal|null
operator|||
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
comment|// higher priority request assigned
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
operator|<
name|current
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
condition|)
return|return
literal|1
return|;
comment|// less alternative request assigned
block|}
else|else
block|{
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|current
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
return|return
operator|-
literal|1
return|;
comment|// higher priority request assigned
block|}
block|}
block|}
comment|// 3. maximize selection
name|int
name|bestSelected
init|=
literal|0
decl_stmt|,
name|currentSelected
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|preferred
init|=
name|getPreferredSections
argument_list|(
name|best
index|[
name|idx
index|]
operator|.
name|getRequest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|preferred
operator|!=
literal|null
operator|&&
operator|!
name|preferred
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|preferred
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
name|bestSelected
operator|++
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|preferred
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
name|currentSelected
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentSelected
operator|>
name|bestSelected
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestSelected
operator|>
name|currentSelected
condition|)
return|return
literal|1
return|;
comment|// 4. avoid time overlaps
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|bestTimeOverlaps
init|=
literal|0
decl_stmt|,
name|currentTimeOverlaps
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|x
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|x
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
name|bestTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|best
index|[
name|x
index|]
argument_list|,
name|best
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|instanceof
name|FreeTimeRequest
condition|)
name|bestTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
operator|(
operator|(
name|FreeTimeRequest
operator|)
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|createEnrollment
argument_list|()
argument_list|,
name|best
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|current
index|[
name|x
index|]
operator|!=
literal|null
operator|&&
name|current
index|[
name|x
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
name|currentTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|current
index|[
name|x
index|]
argument_list|,
name|current
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|instanceof
name|FreeTimeRequest
condition|)
name|currentTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
operator|(
operator|(
name|FreeTimeRequest
operator|)
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|createEnrollment
argument_list|()
argument_list|,
name|current
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentTimeOverlaps
operator|<
name|bestTimeOverlaps
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestTimeOverlaps
operator|<
name|currentTimeOverlaps
condition|)
return|return
literal|1
return|;
block|}
comment|// 5. avoid distance conflicts
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|bestDistanceConf
init|=
literal|0
decl_stmt|,
name|currentDistanceConf
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|x
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|x
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
name|bestDistanceConf
operator|+=
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|best
index|[
name|x
index|]
argument_list|,
name|best
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|current
index|[
name|x
index|]
operator|!=
literal|null
operator|&&
name|current
index|[
name|x
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
name|currentDistanceConf
operator|+=
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|current
index|[
name|x
index|]
argument_list|,
name|current
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentDistanceConf
operator|<
name|bestDistanceConf
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestDistanceConf
operator|<
name|currentDistanceConf
condition|)
return|return
literal|1
return|;
block|}
comment|// 6. avoid no-time sections
name|int
name|bestNoTime
init|=
literal|0
decl_stmt|,
name|currentNoTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
name|bestNoTime
operator|++
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
name|currentNoTime
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentNoTime
operator|<
name|bestNoTime
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestNoTime
operator|<
name|currentNoTime
condition|)
return|return
literal|1
return|;
comment|// 7. balance sections
name|double
name|bestUnavailableSize
init|=
literal|0.0
decl_stmt|,
name|currentUnavailableSize
init|=
literal|0.0
decl_stmt|;
name|int
name|bestAltSectionsWithLimit
init|=
literal|0
decl_stmt|,
name|currentAltSectionsWithLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Subpart
name|subpart
init|=
name|section
operator|.
name|getSubpart
argument_list|()
decl_stmt|;
comment|// skip unlimited and single section subparts
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|||
name|subpart
operator|.
name|getLimit
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
comment|// average size
name|double
name|averageSize
init|=
operator|(
operator|(
name|double
operator|)
name|subpart
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// section is below average
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
name|averageSize
condition|)
name|bestUnavailableSize
operator|+=
operator|(
name|averageSize
operator|-
name|section
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|averageSize
expr_stmt|;
name|bestAltSectionsWithLimit
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Subpart
name|subpart
init|=
name|section
operator|.
name|getSubpart
argument_list|()
decl_stmt|;
comment|// skip unlimited and single section subparts
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|||
name|subpart
operator|.
name|getLimit
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
comment|// average size
name|double
name|averageSize
init|=
operator|(
operator|(
name|double
operator|)
name|subpart
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// section is below average
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
name|averageSize
condition|)
name|currentUnavailableSize
operator|+=
operator|(
name|averageSize
operator|-
name|section
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|averageSize
expr_stmt|;
name|currentAltSectionsWithLimit
operator|++
expr_stmt|;
block|}
block|}
block|}
name|double
name|bestUnavailableSizeFraction
init|=
operator|(
name|bestUnavailableSize
operator|>
literal|0
condition|?
name|bestUnavailableSize
operator|/
name|bestAltSectionsWithLimit
else|:
literal|0.0
operator|)
decl_stmt|;
name|double
name|currentUnavailableSizeFraction
init|=
operator|(
name|currentUnavailableSize
operator|>
literal|0
condition|?
name|currentUnavailableSize
operator|/
name|currentAltSectionsWithLimit
else|:
literal|0.0
operator|)
decl_stmt|;
if|if
condition|(
name|currentUnavailableSizeFraction
operator|<
name|bestUnavailableSizeFraction
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestUnavailableSizeFraction
operator|<
name|currentUnavailableSizeFraction
condition|)
return|return
literal|1
return|;
comment|// 8. average penalty sections
name|double
name|bestPenalty
init|=
literal|0.0
decl_stmt|,
name|currentPenalty
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
name|bestPenalty
operator|+=
name|section
operator|.
name|getPenalty
argument_list|()
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
name|currentPenalty
operator|+=
name|section
operator|.
name|getPenalty
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentPenalty
operator|<
name|bestPenalty
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|bestPenalty
operator|<
name|currentPenalty
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canImprove
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|int
name|maxIdx
parameter_list|,
name|Enrollment
index|[]
name|current
parameter_list|,
name|Enrollment
index|[]
name|best
parameter_list|)
block|{
comment|// 0. best priority& alternativity ignoring free time requests
name|int
name|alt
init|=
literal|0
decl_stmt|;
name|boolean
name|ft
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|isFreeTime
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|ft
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|Request
name|request
init|=
name|getRequest
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
name|maxIdx
condition|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// higher priority request assigned
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
operator|<
name|current
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// less alternative request assigned
if|if
condition|(
name|request
operator|.
name|isAlternative
argument_list|()
condition|)
name|alt
operator|--
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
return|return
literal|true
return|;
comment|// higher priority request assigned
if|if
condition|(
operator|!
name|request
operator|.
name|isAlternative
argument_list|()
condition|)
name|alt
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|true
return|;
comment|// alternativity can be improved
block|}
else|else
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|isAlternative
argument_list|()
operator|||
name|alt
operator|>
literal|0
condition|)
return|return
literal|true
return|;
comment|// priority can be improved
block|}
block|}
block|}
comment|// 1. maximize number of penalties
name|double
name|bestPenalties
init|=
literal|0
decl_stmt|,
name|currentPenalties
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
name|bestPenalties
operator|+=
name|getModel
argument_list|()
operator|.
name|getOverExpected
argument_list|(
name|assignment
argument_list|,
name|section
argument_list|,
name|best
index|[
name|idx
index|]
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|maxIdx
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
name|currentPenalties
operator|+=
name|getModel
argument_list|()
operator|.
name|getOverExpected
argument_list|(
name|assignment
argument_list|,
name|section
argument_list|,
name|current
index|[
name|idx
index|]
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentPenalties
operator|<
name|bestPenalties
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestPenalties
operator|<
name|currentPenalties
condition|)
return|return
literal|false
return|;
comment|// 2. best priority& alternativity including free times
if|if
condition|(
name|ft
condition|)
block|{
name|alt
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|Request
name|request
init|=
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
name|maxIdx
condition|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// higher priority request assigned
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
operator|<
name|current
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// less alternative request assigned
if|if
condition|(
name|request
operator|.
name|isAlternative
argument_list|()
condition|)
name|alt
operator|--
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
return|return
literal|true
return|;
comment|// higher priority request assigned
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
operator|&&
operator|!
name|request
operator|.
name|isAlternative
argument_list|()
condition|)
name|alt
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|.
name|getPriority
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|true
return|;
comment|// alternativity can be improved
block|}
else|else
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|isAlternative
argument_list|()
operator|||
name|alt
operator|>
literal|0
condition|)
return|return
literal|true
return|;
comment|// priority can be improved
block|}
block|}
block|}
block|}
comment|// 3. maximize selection
name|int
name|bestSelected
init|=
literal|0
decl_stmt|,
name|currentSelected
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|preferred
init|=
name|getPreferredSections
argument_list|(
name|best
index|[
name|idx
index|]
operator|.
name|getRequest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|preferred
operator|!=
literal|null
operator|&&
operator|!
name|preferred
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|preferred
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
block|{
if|if
condition|(
name|idx
operator|<
name|maxIdx
condition|)
name|bestSelected
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|idx
operator|>=
name|maxIdx
condition|)
name|bestSelected
operator|--
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|maxIdx
operator|&&
name|current
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|preferred
init|=
name|getPreferredSections
argument_list|(
name|current
index|[
name|idx
index|]
operator|.
name|getRequest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|preferred
operator|!=
literal|null
operator|&&
operator|!
name|preferred
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|preferred
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
name|currentSelected
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentSelected
operator|>
name|bestSelected
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestSelected
operator|>
name|currentSelected
condition|)
return|return
literal|false
return|;
comment|// 4. avoid time overlaps
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|bestTimeOverlaps
init|=
literal|0
decl_stmt|,
name|currentTimeOverlaps
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|x
index|]
operator|!=
literal|null
condition|)
name|bestTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|best
index|[
name|x
index|]
argument_list|,
name|best
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|instanceof
name|FreeTimeRequest
condition|)
name|bestTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
operator|(
operator|(
name|FreeTimeRequest
operator|)
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|createEnrollment
argument_list|()
argument_list|,
name|best
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|maxIdx
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|current
index|[
name|x
index|]
operator|!=
literal|null
condition|)
name|currentTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|current
index|[
name|x
index|]
argument_list|,
name|current
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|instanceof
name|FreeTimeRequest
condition|)
name|currentTimeOverlaps
operator|+=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrConflicts
argument_list|(
operator|(
operator|(
name|FreeTimeRequest
operator|)
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|createEnrollment
argument_list|()
argument_list|,
name|current
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentTimeOverlaps
operator|<
name|bestTimeOverlaps
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestTimeOverlaps
operator|<
name|currentTimeOverlaps
condition|)
return|return
literal|false
return|;
block|}
comment|// 5. avoid distance conflicts
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|bestDistanceConf
init|=
literal|0
decl_stmt|,
name|currentDistanceConf
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|x
index|]
operator|!=
literal|null
condition|)
name|bestDistanceConf
operator|+=
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|best
index|[
name|x
index|]
argument_list|,
name|best
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|maxIdx
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|idx
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|current
index|[
name|x
index|]
operator|!=
literal|null
condition|)
name|currentDistanceConf
operator|+=
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|current
index|[
name|x
index|]
argument_list|,
name|current
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentDistanceConf
operator|<
name|bestDistanceConf
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestDistanceConf
operator|<
name|currentDistanceConf
condition|)
return|return
literal|false
return|;
block|}
comment|// 6. avoid no-time sections
name|int
name|bestNoTime
init|=
literal|0
decl_stmt|,
name|currentNoTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
name|bestNoTime
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|maxIdx
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
name|currentNoTime
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentNoTime
operator|<
name|bestNoTime
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestNoTime
operator|<
name|currentNoTime
condition|)
return|return
literal|false
return|;
comment|// 7. balance sections
name|double
name|bestUnavailableSize
init|=
literal|0.0
decl_stmt|,
name|currentUnavailableSize
init|=
literal|0.0
decl_stmt|;
name|int
name|bestAltSectionsWithLimit
init|=
literal|0
decl_stmt|,
name|currentAltSectionsWithLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Subpart
name|subpart
init|=
name|section
operator|.
name|getSubpart
argument_list|()
decl_stmt|;
comment|// skip unlimited and single section subparts
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|||
name|subpart
operator|.
name|getLimit
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
comment|// average size
name|double
name|averageSize
init|=
operator|(
operator|(
name|double
operator|)
name|subpart
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// section is below average
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
name|averageSize
condition|)
name|bestUnavailableSize
operator|+=
operator|(
name|averageSize
operator|-
name|section
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|averageSize
expr_stmt|;
name|bestAltSectionsWithLimit
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|maxIdx
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Subpart
name|subpart
init|=
name|section
operator|.
name|getSubpart
argument_list|()
decl_stmt|;
comment|// skip unlimited and single section subparts
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|||
name|subpart
operator|.
name|getLimit
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
comment|// average size
name|double
name|averageSize
init|=
operator|(
operator|(
name|double
operator|)
name|subpart
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// section is below average
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
name|averageSize
condition|)
name|currentUnavailableSize
operator|+=
operator|(
name|averageSize
operator|-
name|section
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|averageSize
expr_stmt|;
name|currentAltSectionsWithLimit
operator|++
expr_stmt|;
block|}
block|}
block|}
name|double
name|bestUnavailableSizeFraction
init|=
operator|(
name|bestUnavailableSize
operator|>
literal|0
condition|?
name|bestUnavailableSize
operator|/
name|bestAltSectionsWithLimit
else|:
literal|0.0
operator|)
decl_stmt|;
name|double
name|currentUnavailableSizeFraction
init|=
operator|(
name|currentUnavailableSize
operator|>
literal|0
condition|?
name|currentUnavailableSize
operator|/
name|currentAltSectionsWithLimit
else|:
literal|0.0
operator|)
decl_stmt|;
if|if
condition|(
name|currentUnavailableSizeFraction
operator|<
name|bestUnavailableSizeFraction
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestUnavailableSizeFraction
operator|<
name|currentUnavailableSizeFraction
condition|)
return|return
literal|false
return|;
comment|// 8. average penalty sections
name|double
name|bestPenalty
init|=
literal|0.0
decl_stmt|,
name|currentPenalty
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|current
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|best
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|best
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
name|bestPenalty
operator|+=
name|section
operator|.
name|getPenalty
argument_list|()
expr_stmt|;
if|if
condition|(
name|idx
operator|>=
name|maxIdx
operator|&&
name|best
index|[
name|idx
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
name|bestPenalty
operator|-=
operator|(
operator|(
name|CourseRequest
operator|)
name|best
index|[
name|idx
index|]
operator|.
name|getRequest
argument_list|()
operator|)
operator|.
name|getMinPenalty
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|current
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|maxIdx
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|current
index|[
name|idx
index|]
operator|.
name|getSections
argument_list|()
control|)
name|currentPenalty
operator|+=
name|section
operator|.
name|getPenalty
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentPenalty
operator|<
name|bestPenalty
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bestPenalty
operator|<
name|currentPenalty
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getTotalWeight
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Enrollment
index|[]
name|enrollemnts
parameter_list|)
block|{
if|if
condition|(
name|enrollemnts
operator|==
literal|null
condition|)
return|return
literal|0.0
return|;
name|double
name|value
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|enrollemnts
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|enrollemnts
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
name|value
operator|+=
name|getWeight
argument_list|(
name|assignment
argument_list|,
name|enrollemnts
index|[
name|idx
index|]
argument_list|,
name|getDistanceConflicts
argument_list|(
name|enrollemnts
argument_list|,
name|idx
argument_list|)
argument_list|,
name|getTimeOverlappingConflicts
argument_list|(
name|enrollemnts
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Enrollment
name|e1
parameter_list|,
name|Enrollment
name|e2
parameter_list|)
block|{
comment|// 1. alternativity
if|if
condition|(
name|e1
operator|.
name|getPriority
argument_list|()
operator|<
name|e2
operator|.
name|getPriority
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|e1
operator|.
name|getPriority
argument_list|()
operator|>
name|e2
operator|.
name|getPriority
argument_list|()
condition|)
return|return
literal|1
return|;
comment|// 2. maximize number of penalties
name|double
name|p1
init|=
literal|0
decl_stmt|,
name|p2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|e1
operator|.
name|getSections
argument_list|()
control|)
name|p1
operator|+=
name|getModel
argument_list|()
operator|.
name|getOverExpected
argument_list|(
name|assignment
argument_list|,
name|section
argument_list|,
name|e1
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|e2
operator|.
name|getSections
argument_list|()
control|)
name|p2
operator|+=
name|getModel
argument_list|()
operator|.
name|getOverExpected
argument_list|(
name|assignment
argument_list|,
name|section
argument_list|,
name|e2
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p1
operator|<
name|p2
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|p2
operator|<
name|p1
condition|)
return|return
literal|1
return|;
comment|// 3. maximize selection
if|if
condition|(
name|e1
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|preferred
init|=
name|getPreferredSections
argument_list|(
name|e1
operator|.
name|getRequest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|preferred
operator|!=
literal|null
operator|&&
operator|!
name|preferred
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|s1
init|=
literal|0
decl_stmt|,
name|s2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|e1
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|preferred
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
name|s1
operator|++
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|e2
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|preferred
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
name|s2
operator|++
expr_stmt|;
if|if
condition|(
name|s2
operator|>
name|s1
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|s1
operator|>
name|s2
condition|)
return|return
literal|1
return|;
block|}
block|}
comment|// 4. avoid time overlaps
if|if
condition|(
name|getTimesToAvoid
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|o1
init|=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrFreeTimeConflicts
argument_list|(
name|e1
argument_list|)
decl_stmt|;
name|int
name|o2
init|=
name|getModel
argument_list|()
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|nrFreeTimeConflicts
argument_list|(
name|e2
argument_list|)
decl_stmt|;
if|if
condition|(
name|o1
operator|<
name|o2
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|o2
operator|<
name|o1
condition|)
return|return
literal|1
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|e1
operator|.
name|getRequest
argument_list|()
operator|.
name|equals
argument_list|(
name|e2
operator|.
name|getRequest
argument_list|()
argument_list|)
operator|&&
name|e1
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|double
name|o1
init|=
literal|0.0
decl_stmt|,
name|o2
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|Section
name|s
range|:
name|e1
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|TimeToAvoid
name|avoid
range|:
name|getTimesToAvoid
argument_list|()
control|)
block|{
if|if
condition|(
name|avoid
operator|.
name|priority
argument_list|()
operator|>
name|e1
operator|.
name|getPriority
argument_list|()
condition|)
name|o1
operator|+=
name|avoid
operator|.
name|overlap
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Section
name|s
range|:
name|e2
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|TimeToAvoid
name|avoid
range|:
name|getTimesToAvoid
argument_list|()
control|)
block|{
if|if
condition|(
name|avoid
operator|.
name|priority
argument_list|()
operator|>
name|e2
operator|.
name|getPriority
argument_list|()
condition|)
name|o2
operator|+=
name|avoid
operator|.
name|overlap
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|o1
operator|<
name|o2
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|o2
operator|<
name|o1
condition|)
return|return
literal|1
return|;
block|}
block|}
comment|// 5. avoid distance conflicts
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|c1
init|=
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|e1
argument_list|)
decl_stmt|;
name|int
name|c2
init|=
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|nrConflicts
argument_list|(
name|e2
argument_list|)
decl_stmt|;
if|if
condition|(
name|c1
operator|<
name|c2
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|c2
operator|<
name|c1
condition|)
return|return
literal|1
return|;
block|}
comment|// 6. avoid no-time sections
name|int
name|n1
init|=
literal|0
decl_stmt|,
name|n2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|e1
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
name|n1
operator|++
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|e2
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
name|n2
operator|++
expr_stmt|;
if|if
condition|(
name|n1
operator|<
name|n2
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|n2
operator|<
name|n1
condition|)
return|return
literal|1
return|;
comment|// 7. balance sections
name|double
name|u1
init|=
literal|0.0
decl_stmt|,
name|u2
init|=
literal|0.0
decl_stmt|;
name|int
name|a1
init|=
literal|0
decl_stmt|,
name|a2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|e1
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Subpart
name|subpart
init|=
name|section
operator|.
name|getSubpart
argument_list|()
decl_stmt|;
comment|// skip unlimited and single section subparts
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|||
name|subpart
operator|.
name|getLimit
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
comment|// average size
name|double
name|averageSize
init|=
operator|(
operator|(
name|double
operator|)
name|subpart
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// section is below average
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
name|averageSize
condition|)
name|u1
operator|+=
operator|(
name|averageSize
operator|-
name|section
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|averageSize
expr_stmt|;
name|a1
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Section
name|section
range|:
name|e2
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Subpart
name|subpart
init|=
name|section
operator|.
name|getSubpart
argument_list|()
decl_stmt|;
comment|// skip unlimited and single section subparts
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|||
name|subpart
operator|.
name|getLimit
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
comment|// average size
name|double
name|averageSize
init|=
operator|(
operator|(
name|double
operator|)
name|subpart
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// section is below average
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
name|averageSize
condition|)
name|u2
operator|+=
operator|(
name|averageSize
operator|-
name|section
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|averageSize
expr_stmt|;
name|a2
operator|++
expr_stmt|;
block|}
name|double
name|f1
init|=
operator|(
name|u1
operator|>
literal|0
condition|?
name|u1
operator|/
name|a1
else|:
literal|0.0
operator|)
decl_stmt|;
name|double
name|f2
init|=
operator|(
name|u2
operator|>
literal|0
condition|?
name|u2
operator|/
name|a2
else|:
literal|0.0
operator|)
decl_stmt|;
if|if
condition|(
name|f1
operator|<
name|f2
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|f2
operator|<
name|f1
condition|)
return|return
literal|1
return|;
comment|// 8. average penalty sections
name|double
name|x1
init|=
literal|0.0
decl_stmt|,
name|x2
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|e1
operator|.
name|getSections
argument_list|()
control|)
name|x1
operator|+=
name|section
operator|.
name|getPenalty
argument_list|()
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|e2
operator|.
name|getSections
argument_list|()
control|)
name|x2
operator|+=
name|section
operator|.
name|getPenalty
argument_list|()
expr_stmt|;
if|if
condition|(
name|x1
operator|<
name|x2
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|x2
operator|<
name|x1
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
specifier|protected
specifier|static
class|class
name|TimeToAvoid
block|{
specifier|private
name|TimeLocation
name|iTime
decl_stmt|;
specifier|private
name|double
name|iPenalty
decl_stmt|;
specifier|private
name|int
name|iPriority
decl_stmt|;
specifier|public
name|TimeToAvoid
parameter_list|(
name|TimeLocation
name|time
parameter_list|,
name|int
name|penalty
parameter_list|,
name|int
name|priority
parameter_list|)
block|{
name|iTime
operator|=
name|time
expr_stmt|;
name|iPenalty
operator|=
name|penalty
expr_stmt|;
name|iPriority
operator|=
name|priority
expr_stmt|;
block|}
specifier|public
name|int
name|priority
parameter_list|()
block|{
return|return
name|iPriority
return|;
block|}
specifier|public
name|double
name|overlap
parameter_list|(
name|TimeLocation
name|time
parameter_list|)
block|{
if|if
condition|(
name|time
operator|.
name|hasIntersection
argument_list|(
name|iTime
argument_list|)
condition|)
block|{
return|return
name|iPenalty
operator|*
operator|(
name|time
operator|.
name|nrSharedDays
argument_list|(
name|iTime
argument_list|)
operator|*
name|time
operator|.
name|nrSharedDays
argument_list|(
name|iTime
argument_list|)
operator|)
operator|/
operator|(
name|iTime
operator|.
name|getNrMeetings
argument_list|()
operator|*
name|iTime
operator|.
name|getLength
argument_list|()
operator|)
return|;
block|}
else|else
block|{
return|return
literal|0.0
return|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iTime
operator|.
name|getLongName
argument_list|()
operator|+
literal|" ("
operator|+
name|iPriority
operator|+
literal|"/"
operator|+
name|iPenalty
operator|+
literal|")"
return|;
block|}
block|}
block|}
end_class

end_unit

