begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|expectations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|FractionallyOverExpected
extends|extends
name|PercentageOverExpected
block|{
specifier|private
name|Double
name|iMaximum
init|=
literal|null
decl_stmt|;
specifier|public
name|FractionallyOverExpected
parameter_list|(
name|DataProperties
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|iMaximum
operator|=
name|config
operator|.
name|getPropertyDouble
argument_list|(
literal|"OverExpected.Maximum"
argument_list|,
name|iMaximum
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FractionallyOverExpected
parameter_list|(
name|Double
name|percentage
parameter_list|,
name|Double
name|maximum
parameter_list|)
block|{
name|super
argument_list|(
name|percentage
argument_list|)
expr_stmt|;
name|iMaximum
operator|=
name|maximum
expr_stmt|;
block|}
specifier|public
name|FractionallyOverExpected
parameter_list|(
name|Double
name|percentage
parameter_list|)
block|{
name|this
argument_list|(
name|percentage
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FractionallyOverExpected
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Double
name|getMaximum
parameter_list|()
block|{
return|return
name|iMaximum
return|;
block|}
specifier|public
name|double
name|getMaximum
parameter_list|(
name|Section
name|section
parameter_list|)
block|{
return|return
name|iMaximum
operator|==
literal|null
operator|||
name|iMaximum
operator|<=
literal|0.0
condition|?
name|section
operator|.
name|getLimit
argument_list|()
else|:
name|iMaximum
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getOverExpected
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Section
name|section
parameter_list|,
name|Request
name|request
parameter_list|)
block|{
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<=
literal|0
condition|)
return|return
literal|0.0
return|;
comment|// ignore unlimited& not available
name|double
name|expected
init|=
name|round
argument_list|(
name|getPercentage
argument_list|()
operator|*
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|enrolled
init|=
name|section
operator|.
name|getEnrollmentWeight
argument_list|(
name|assignment
argument_list|,
name|request
argument_list|)
operator|+
name|request
operator|.
name|getWeight
argument_list|()
decl_stmt|;
name|double
name|limit
init|=
name|section
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|int
name|subparts
init|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|double
name|max
init|=
name|getMaximum
argument_list|(
name|section
argument_list|)
decl_stmt|;
return|return
name|expected
operator|+
name|enrolled
operator|>
name|limit
condition|?
operator|(
name|Math
operator|.
name|min
argument_list|(
name|max
argument_list|,
name|expected
operator|+
name|enrolled
operator|-
name|limit
argument_list|)
operator|/
name|max
operator|)
operator|/
name|subparts
else|:
literal|0.0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"frac("
operator|+
name|getPercentage
argument_list|()
operator|+
literal|","
operator|+
name|getMaximum
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

