begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XSubpart
import|;
end_import

begin_class
specifier|public
class|class
name|CheckAssignmentAction
implements|implements
name|OnlineSectioningAction
argument_list|<
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iStudentId
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|iAssignment
decl_stmt|;
specifier|public
name|CheckAssignmentAction
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|assignment
parameter_list|)
block|{
name|iStudentId
operator|=
name|studentId
expr_stmt|;
name|iAssignment
operator|=
name|assignment
expr_stmt|;
block|}
specifier|public
name|Long
name|getStudentId
parameter_list|()
block|{
return|return
name|iStudentId
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|getAssignment
parameter_list|()
block|{
return|return
name|iAssignment
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|Lock
name|readLock
init|=
name|server
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|offeringIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
range|:
name|getAssignment
argument_list|()
control|)
if|if
condition|(
name|ca
operator|!=
literal|null
operator|&&
operator|!
name|ca
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|XCourse
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
name|offeringIds
operator|.
name|add
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Lock
name|lock
init|=
name|server
operator|.
name|lockStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|,
name|offeringIds
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|check
argument_list|(
name|server
argument_list|,
name|helper
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|check
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|XCourse
argument_list|>
name|config2course
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|XCourse
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
name|config2offering
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|config2sections
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
range|:
name|getAssignment
argument_list|()
control|)
block|{
comment|// Skip free times
if|if
condition|(
name|ca
operator|==
literal|null
operator|||
name|ca
operator|.
name|isFreeTime
argument_list|()
operator|||
name|ca
operator|.
name|getClassId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|XCourse
name|ci
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getClassNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|ci
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getClassNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
comment|// Check section limits
name|XSection
name|section
init|=
name|offering
operator|.
name|getSection
argument_list|(
name|ca
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|ca
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
name|XSubpart
name|subpart
init|=
name|offering
operator|.
name|getSubpart
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|config2sections
operator|.
name|get
argument_list|(
name|subpart
operator|.
name|getConfigId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
block|{
name|sections
operator|=
operator|new
name|ArrayList
argument_list|<
name|XSection
argument_list|>
argument_list|()
expr_stmt|;
name|config2sections
operator|.
name|put
argument_list|(
name|subpart
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|sections
argument_list|)
expr_stmt|;
name|XCourse
name|course
init|=
name|offering
operator|.
name|getCourse
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|ca
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
name|config2course
operator|.
name|put
argument_list|(
name|subpart
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
name|config2offering
operator|.
name|put
argument_list|(
name|subpart
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|offering
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
comment|// Check for NEW and CHANGE deadlines
name|check
label|:
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|entry
range|:
name|config2sections
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|XCourse
name|course
init|=
name|config2course
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|enrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
comment|// course change
for|for
control|(
name|XSection
name|s
range|:
name|sections
control|)
if|if
condition|(
operator|!
name|enrollment
operator|.
name|getSectionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getSectionId
argument_list|()
argument_list|)
operator|&&
operator|!
name|server
operator|.
name|checkDeadline
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|s
operator|.
name|getTime
argument_list|()
argument_list|,
name|OnlineSectioningServer
operator|.
name|Deadline
operator|.
name|CHANGE
argument_list|)
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollDeadlineChange
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
continue|continue
name|check
continue|;
block|}
block|}
block|}
comment|// new course
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|checkDeadline
argument_list|(
name|course
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
argument_list|,
name|OnlineSectioningServer
operator|.
name|Deadline
operator|.
name|NEW
argument_list|)
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// Check for DROP deadlines
for|for
control|(
name|XRequest
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|XCourseRequest
condition|)
block|{
name|XEnrollment
name|enrollment
init|=
operator|(
operator|(
name|XCourseRequest
operator|)
name|r
operator|)
operator|.
name|getEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
operator|!
name|config2sections
operator|.
name|containsKey
argument_list|(
name|enrollment
operator|.
name|getConfigId
argument_list|()
argument_list|)
condition|)
block|{
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|enrollment
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
for|for
control|(
name|XSection
name|section
range|:
name|offering
operator|.
name|getSections
argument_list|(
name|enrollment
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|checkDeadline
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
argument_list|,
name|OnlineSectioningServer
operator|.
name|Deadline
operator|.
name|DROP
argument_list|)
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollDeadlineDrop
argument_list|(
name|enrollment
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|XSection
argument_list|>
argument_list|>
name|entry
range|:
name|config2sections
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|XOffering
name|offering
init|=
name|config2offering
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|XConfig
name|config
init|=
name|offering
operator|.
name|getConfig
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|XCourse
name|course
init|=
name|config2course
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|XEnrollments
name|enrollments
init|=
name|server
operator|.
name|getEnrollments
argument_list|(
name|offering
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XSection
argument_list|>
name|sections
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|XReservation
name|reservation
init|=
literal|null
decl_stmt|;
name|reservations
label|:
for|for
control|(
name|XReservation
name|r
range|:
name|offering
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|isApplicable
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|r
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|r
operator|.
name|getLimit
argument_list|()
operator|<=
name|enrollments
operator|.
name|countEnrollmentsForReservation
argument_list|(
name|r
operator|.
name|getReservationId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForReservation
argument_list|(
name|r
operator|.
name|getReservationId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
continue|continue;
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|getConfigsIds
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|getConfigsIds
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
if|if
condition|(
name|r
operator|.
name|getSectionIds
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|getSectionIds
argument_list|(
name|section
operator|.
name|getSubpartId
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
continue|continue
name|reservations
continue|;
if|if
condition|(
name|reservation
operator|==
literal|null
operator|||
name|r
operator|.
name|compareTo
argument_list|(
name|reservation
argument_list|)
operator|<
literal|0
condition|)
name|reservation
operator|=
name|r
expr_stmt|;
block|}
if|if
condition|(
name|reservation
operator|==
literal|null
operator|||
operator|!
name|reservation
operator|.
name|canAssignOverLimit
argument_list|()
condition|)
block|{
for|for
control|(
name|XSection
name|section
range|:
name|sections
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|section
operator|.
name|getLimit
argument_list|()
operator|<=
name|enrollments
operator|.
name|countEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|reservation
operator|==
literal|null
operator|||
operator|!
name|offering
operator|.
name|getSectionReservations
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|reservation
argument_list|)
operator|)
operator|&&
name|offering
operator|.
name|getUnreservedSectionSpace
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|,
name|enrollments
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForSection
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|section
operator|.
name|getSubpartName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|config
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|config
operator|.
name|getLimit
argument_list|()
operator|<=
name|enrollments
operator|.
name|countEnrollmentsForConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|" "
operator|+
name|config
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|reservation
operator|==
literal|null
operator|||
operator|!
name|offering
operator|.
name|getConfigReservations
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|reservation
argument_list|)
operator|)
operator|&&
name|offering
operator|.
name|getUnreservedConfigSpace
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|enrollments
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForConfig
argument_list|(
name|config
operator|.
name|getConfigId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|" "
operator|+
name|config
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|course
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|course
operator|.
name|getLimit
argument_list|()
operator|<=
name|enrollments
operator|.
name|countEnrollmentsForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XEnrollment
name|e
range|:
name|enrollments
operator|.
name|getEnrollmentsForCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|contain
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotAvailable
argument_list|(
name|MSG
operator|.
name|courseName
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|config2sections
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"check-assignment"
return|;
block|}
block|}
end_class

end_unit

