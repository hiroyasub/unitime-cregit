begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SuggestionsBranchAndBound
block|{
specifier|private
specifier|static
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|iRequiredSections
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|FreeTimeRequest
argument_list|>
name|iRequiredFreeTimes
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|iPreferredSections
init|=
literal|null
decl_stmt|;
specifier|private
name|Request
name|iSelectedRequest
init|=
literal|null
decl_stmt|;
specifier|private
name|Section
name|iSelectedSection
init|=
literal|null
decl_stmt|;
specifier|private
name|Student
name|iStudent
init|=
literal|null
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|Suggestion
argument_list|>
name|iSuggestions
init|=
operator|new
name|TreeSet
argument_list|<
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iMaxDepth
init|=
literal|4
decl_stmt|;
specifier|private
name|long
name|iTimeout
init|=
literal|5000
decl_stmt|;
specifier|private
name|int
name|iMaxSuggestions
init|=
literal|20
decl_stmt|;
specifier|private
name|long
name|iT0
decl_stmt|,
name|iT1
decl_stmt|;
specifier|private
name|boolean
name|iTimeoutReached
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|iNrSolutionsSeen
init|=
literal|0
decl_stmt|;
specifier|private
name|StudentSectioningModel
name|iModel
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Request
argument_list|,
name|List
argument_list|<
name|Enrollment
argument_list|>
argument_list|>
name|iValues
init|=
operator|new
name|Hashtable
argument_list|<
name|Request
argument_list|,
name|List
argument_list|<
name|Enrollment
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|iLastSuggestionId
init|=
literal|0
decl_stmt|;
specifier|private
name|Query
name|iFilter
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iFirstDate
init|=
literal|null
decl_stmt|;
specifier|protected
name|Comparator
argument_list|<
name|Enrollment
argument_list|>
name|iComparator
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|iMatched
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|iMaxSectionsWithPenalty
init|=
literal|0
decl_stmt|;
specifier|public
name|SuggestionsBranchAndBound
parameter_list|(
name|DataProperties
name|properties
parameter_list|,
name|Student
name|student
parameter_list|,
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|requiredSections
parameter_list|,
name|Set
argument_list|<
name|FreeTimeRequest
argument_list|>
name|requiredFreeTimes
parameter_list|,
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|preferredSections
parameter_list|,
name|Request
name|selectedRequest
parameter_list|,
name|Section
name|selectedSection
parameter_list|,
name|String
name|filter
parameter_list|,
name|Date
name|firstDate
parameter_list|,
name|int
name|maxSectionsWithPenalty
parameter_list|)
block|{
name|iRequiredSections
operator|=
name|requiredSections
expr_stmt|;
name|iRequiredFreeTimes
operator|=
name|requiredFreeTimes
expr_stmt|;
name|iPreferredSections
operator|=
name|preferredSections
expr_stmt|;
name|iSelectedRequest
operator|=
name|selectedRequest
expr_stmt|;
name|iSelectedSection
operator|=
name|selectedSection
expr_stmt|;
name|iStudent
operator|=
name|student
expr_stmt|;
name|iModel
operator|=
operator|(
name|StudentSectioningModel
operator|)
name|selectedRequest
operator|.
name|getModel
argument_list|()
expr_stmt|;
name|iMaxDepth
operator|=
name|properties
operator|.
name|getPropertyInt
argument_list|(
literal|"Suggestions.MaxDepth"
argument_list|,
name|iMaxDepth
argument_list|)
expr_stmt|;
name|iTimeout
operator|=
name|properties
operator|.
name|getPropertyLong
argument_list|(
literal|"Suggestions.Timeout"
argument_list|,
name|iTimeout
argument_list|)
expr_stmt|;
name|iMaxSuggestions
operator|=
name|properties
operator|.
name|getPropertyInt
argument_list|(
literal|"Suggestions.MaxSuggestions"
argument_list|,
name|iMaxSuggestions
argument_list|)
expr_stmt|;
name|iMaxSectionsWithPenalty
operator|=
name|maxSectionsWithPenalty
expr_stmt|;
name|iFilter
operator|=
operator|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|Query
argument_list|(
name|filter
argument_list|)
operator|)
expr_stmt|;
name|iFirstDate
operator|=
name|firstDate
expr_stmt|;
name|iComparator
operator|=
operator|new
name|Comparator
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
block|{
specifier|private
name|HashMap
argument_list|<
name|Enrollment
argument_list|,
name|Double
argument_list|>
name|iValues
init|=
operator|new
name|HashMap
argument_list|<
name|Enrollment
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Double
name|value
parameter_list|(
name|Enrollment
name|e
parameter_list|)
block|{
name|Double
name|value
init|=
name|iValues
operator|.
name|get
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|iModel
operator|.
name|getStudentWeights
argument_list|()
operator|.
name|getWeight
argument_list|(
name|e
argument_list|,
operator|(
name|iModel
operator|.
name|getDistanceConflict
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|iModel
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|conflicts
argument_list|(
name|e
argument_list|)
operator|)
argument_list|,
operator|(
name|iModel
operator|.
name|getTimeOverlaps
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|iModel
operator|.
name|getTimeOverlaps
argument_list|()
operator|.
name|freeTimeConflicts
argument_list|(
name|e
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|iValues
operator|.
name|put
argument_list|(
name|e
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Enrollment
name|e1
parameter_list|,
name|Enrollment
name|e2
parameter_list|)
block|{
return|return
name|value
argument_list|(
name|e2
argument_list|)
operator|.
name|compareTo
argument_list|(
name|value
argument_list|(
name|e1
argument_list|)
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|iT1
operator|-
name|iT0
return|;
block|}
specifier|public
name|boolean
name|isTimeoutReached
parameter_list|()
block|{
return|return
name|iTimeoutReached
return|;
block|}
specifier|public
name|int
name|getNrSolutionsSeen
parameter_list|()
block|{
return|return
name|iNrSolutionsSeen
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|TreeSet
argument_list|<
name|Suggestion
argument_list|>
name|computeSuggestions
parameter_list|()
block|{
name|iT0
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|iTimeoutReached
operator|=
literal|false
expr_stmt|;
name|iNrSolutionsSeen
operator|=
literal|0
expr_stmt|;
name|iSuggestions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|Request
argument_list|>
name|requests2resolve
init|=
operator|new
name|ArrayList
argument_list|<
name|Request
argument_list|>
argument_list|()
decl_stmt|;
name|requests2resolve
operator|.
name|add
argument_list|(
name|iSelectedRequest
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|Request
argument_list|>
name|altRequests2resolve
init|=
operator|new
name|TreeSet
argument_list|<
name|Request
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|entry
range|:
name|iPreferredSections
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|CourseRequest
name|request
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Section
argument_list|>
name|sections
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sections
operator|.
name|isEmpty
argument_list|()
operator|&&
name|sections
operator|.
name|size
argument_list|()
operator|==
name|sections
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
name|request
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|request
operator|.
name|createEnrollment
argument_list|(
name|sections
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|request
operator|.
name|equals
argument_list|(
name|iSelectedRequest
argument_list|)
condition|)
block|{
if|if
condition|(
name|sections
operator|.
name|isEmpty
argument_list|()
condition|)
name|altRequests2resolve
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
else|else
name|requests2resolve
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Request
name|request
range|:
name|iStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
operator|&&
name|request
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|FreeTimeRequest
name|ft
init|=
operator|(
name|FreeTimeRequest
operator|)
name|request
decl_stmt|;
name|Enrollment
name|enrollment
init|=
name|ft
operator|.
name|createEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|iModel
operator|.
name|conflictValues
argument_list|(
name|enrollment
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|ft
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|enrollment
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Request
name|request
range|:
name|iStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|request
operator|.
name|setInitialAssignment
argument_list|(
name|request
operator|.
name|getAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|backtrack
argument_list|(
name|requests2resolve
argument_list|,
name|altRequests2resolve
argument_list|,
literal|0
argument_list|,
name|iMaxDepth
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iT1
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
return|return
name|iSuggestions
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|backtrack
parameter_list|(
name|ArrayList
argument_list|<
name|Request
argument_list|>
name|requests2resolve
parameter_list|,
name|TreeSet
argument_list|<
name|Request
argument_list|>
name|altRequests2resolve
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
name|depth
parameter_list|,
name|boolean
name|alt
parameter_list|)
block|{
if|if
condition|(
operator|!
name|iTimeoutReached
operator|&&
name|iTimeout
operator|>
literal|0
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|iT0
operator|>
name|iTimeout
condition|)
name|iTimeoutReached
operator|=
literal|true
expr_stmt|;
name|int
name|nrUnassigned
init|=
name|requests2resolve
operator|.
name|size
argument_list|()
operator|-
name|idx
decl_stmt|;
if|if
condition|(
name|nrUnassigned
operator|==
literal|0
condition|)
block|{
name|List
argument_list|<
name|FreeTimeRequest
argument_list|>
name|okFreeTimes
init|=
operator|new
name|ArrayList
argument_list|<
name|FreeTimeRequest
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|sectionsWithPenalty
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|iStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|iMaxSectionsWithPenalty
operator|>=
literal|0
operator|&&
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
for|for
control|(
name|Section
name|s
range|:
name|r
operator|.
name|getAssignment
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|s
operator|.
name|getPenalty
argument_list|()
operator|>=
literal|0
condition|)
name|sectionsWithPenalty
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
operator|&&
name|r
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|FreeTimeRequest
name|ft
init|=
operator|(
name|FreeTimeRequest
operator|)
name|r
decl_stmt|;
name|Enrollment
name|enrollment
init|=
name|ft
operator|.
name|createEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|iModel
operator|.
name|conflictValues
argument_list|(
name|enrollment
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ft
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|enrollment
argument_list|)
expr_stmt|;
name|okFreeTimes
operator|.
name|add
argument_list|(
name|ft
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|iMaxSectionsWithPenalty
operator|>=
literal|0
operator|&&
name|sectionsWithPenalty
operator|>
name|iMaxSectionsWithPenalty
condition|)
return|return;
name|Suggestion
name|s
init|=
operator|new
name|Suggestion
argument_list|(
name|requests2resolve
argument_list|)
decl_stmt|;
if|if
condition|(
name|iSuggestions
operator|.
name|size
argument_list|()
operator|>=
name|iMaxSuggestions
operator|&&
name|iSuggestions
operator|.
name|last
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s
argument_list|)
operator|<=
literal|0
condition|)
return|return;
if|if
condition|(
name|iMatched
operator|!=
literal|1
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Suggestion
argument_list|>
name|i
init|=
name|iSuggestions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Suggestion
name|x
init|=
operator|(
name|Suggestion
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|sameSelectedSection
argument_list|()
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|compareTo
argument_list|(
name|s
argument_list|)
operator|<=
literal|0
condition|)
return|return;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|s
operator|.
name|init
argument_list|()
expr_stmt|;
name|iSuggestions
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSuggestions
operator|.
name|size
argument_list|()
operator|>
name|iMaxSuggestions
condition|)
name|iSuggestions
operator|.
name|remove
argument_list|(
name|iSuggestions
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FreeTimeRequest
name|ft
range|:
name|okFreeTimes
control|)
name|ft
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|canContinue
argument_list|(
name|requests2resolve
argument_list|,
name|idx
argument_list|,
name|depth
argument_list|)
condition|)
return|return;
name|Request
name|request
init|=
name|requests2resolve
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|values
argument_list|(
name|request
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|canContinueEvaluation
argument_list|()
condition|)
break|break;
if|if
condition|(
operator|!
name|isAllowed
argument_list|(
name|enrollment
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|enrollment
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getAssignment
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|alt
condition|)
continue|continue;
name|Set
argument_list|<
name|Enrollment
argument_list|>
name|conflicts
init|=
name|iModel
operator|.
name|conflictValues
argument_list|(
name|enrollment
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkBound
argument_list|(
name|requests2resolve
argument_list|,
name|idx
argument_list|,
name|depth
argument_list|,
name|enrollment
argument_list|,
name|conflicts
argument_list|)
condition|)
continue|continue;
name|Enrollment
name|current
init|=
operator|(
name|Enrollment
operator|)
name|request
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Request
argument_list|>
name|newVariables2resolve
init|=
operator|new
name|ArrayList
argument_list|<
name|Request
argument_list|>
argument_list|(
name|requests2resolve
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|i
init|=
name|conflicts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|conflict
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|conflict
operator|.
name|variable
argument_list|()
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|newVariables2resolve
operator|.
name|contains
argument_list|(
name|conflict
operator|.
name|variable
argument_list|()
argument_list|)
condition|)
name|newVariables2resolve
operator|.
name|add
argument_list|(
operator|(
name|Request
operator|)
name|conflict
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
name|current
operator|.
name|variable
argument_list|()
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|enrollment
operator|.
name|variable
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|enrollment
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|altRequests2resolve
operator|!=
literal|null
operator|&&
operator|!
name|altRequests2resolve
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Suggestion
name|lastBefore
init|=
operator|(
name|iSuggestions
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|iSuggestions
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|int
name|sizeBefore
init|=
name|iSuggestions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|altRequests2resolve
control|)
block|{
name|newVariables2resolve
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|backtrack
argument_list|(
name|newVariables2resolve
argument_list|,
literal|null
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|depth
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newVariables2resolve
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|Suggestion
name|lastAfter
init|=
operator|(
name|iSuggestions
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|iSuggestions
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|int
name|sizeAfter
init|=
name|iSuggestions
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// did not succeeded with an alternative -> try without it
if|if
condition|(
name|sizeBefore
operator|==
name|sizeAfter
operator|&&
operator|(
name|sizeAfter
operator|<
name|iMaxSuggestions
operator|||
name|sizeAfter
operator|==
literal|0
operator|||
name|lastAfter
operator|.
name|compareTo
argument_list|(
name|lastBefore
argument_list|)
operator|==
literal|0
operator|)
condition|)
name|backtrack
argument_list|(
name|newVariables2resolve
argument_list|,
name|altRequests2resolve
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|depth
operator|-
literal|1
argument_list|,
name|alt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|backtrack
argument_list|(
name|newVariables2resolve
argument_list|,
name|altRequests2resolve
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|depth
operator|-
literal|1
argument_list|,
name|alt
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|backtrack
argument_list|(
name|newVariables2resolve
argument_list|,
name|altRequests2resolve
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|depth
operator|-
literal|1
argument_list|,
name|alt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|==
literal|null
condition|)
name|request
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|current
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|i
init|=
name|conflicts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Value
name|conflict
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|conflict
operator|.
name|variable
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|conflict
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|List
argument_list|<
name|Enrollment
argument_list|>
name|values
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|)
block|{
name|List
argument_list|<
name|Enrollment
argument_list|>
name|values
init|=
name|iValues
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
return|return
name|values
return|;
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|request
decl_stmt|;
name|values
operator|=
operator|(
name|cr
operator|.
name|equals
argument_list|(
name|iSelectedRequest
argument_list|)
condition|?
name|cr
operator|.
name|getAvaiableEnrollments
argument_list|()
else|:
name|cr
operator|.
name|getAvaiableEnrollmentsSkipSameTime
argument_list|()
operator|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|values
argument_list|,
name|iComparator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|(
operator|(
name|FreeTimeRequest
operator|)
name|request
operator|)
operator|.
name|createEnrollment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|canLeaveUnassigned
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|Config
name|config
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
name|config
operator|=
operator|(
name|Config
operator|)
operator|(
operator|(
name|Course
operator|)
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|Enrollment
argument_list|(
name|request
argument_list|,
literal|0
argument_list|,
name|config
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iValues
operator|.
name|put
argument_list|(
name|request
argument_list|,
name|values
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|equals
argument_list|(
name|iSelectedRequest
argument_list|)
operator|&&
name|iFilter
operator|!=
literal|null
operator|&&
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|i
init|=
name|values
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|enrollment
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|iSelectedSection
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|iSelectedSection
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
if|if
condition|(
name|iFilter
operator|.
name|match
argument_list|(
operator|new
name|SectionMatcher
argument_list|(
name|enrollment
operator|.
name|getCourse
argument_list|()
argument_list|,
name|section
argument_list|)
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
name|iSelectedSection
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
operator|&&
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|equals
argument_list|(
name|iSelectedSection
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|iFilter
operator|.
name|match
argument_list|(
operator|new
name|SectionMatcher
argument_list|(
name|enrollment
operator|.
name|getCourse
argument_list|()
argument_list|,
name|section
argument_list|)
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|iFilter
operator|.
name|match
argument_list|(
operator|new
name|SectionMatcher
argument_list|(
name|enrollment
operator|.
name|getCourse
argument_list|()
argument_list|,
name|section
argument_list|)
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|request
operator|.
name|equals
argument_list|(
name|iSelectedRequest
argument_list|)
condition|)
name|iMatched
operator|=
name|values
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|values
return|;
block|}
specifier|private
class|class
name|SectionMatcher
implements|implements
name|Query
operator|.
name|TermMatcher
block|{
specifier|private
name|Course
name|iCourse
decl_stmt|;
specifier|private
name|Section
name|iSection
decl_stmt|;
specifier|public
name|SectionMatcher
parameter_list|(
name|Course
name|course
parameter_list|,
name|Section
name|section
parameter_list|)
block|{
name|iCourse
operator|=
name|course
expr_stmt|;
name|iSection
operator|=
name|section
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"crn"
argument_list|)
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"id"
argument_list|)
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"externalId"
argument_list|)
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"exid"
argument_list|)
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
if|if
condition|(
name|iSection
operator|.
name|getName
argument_list|(
name|iCourse
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
name|iSection
operator|.
name|getName
argument_list|(
name|iCourse
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|term
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"day"
argument_list|)
condition|)
block|{
if|if
condition|(
name|iSection
operator|.
name|getTime
argument_list|()
operator|==
literal|null
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"none"
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iSection
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|day
init|=
name|parseDay
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|day
operator|>
literal|0
operator|&&
operator|(
name|iSection
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
operator|&
name|day
operator|)
operator|==
name|day
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"time"
argument_list|)
condition|)
block|{
if|if
condition|(
name|iSection
operator|.
name|getTime
argument_list|()
operator|==
literal|null
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"none"
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iSection
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|start
init|=
name|parseStart
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|>=
literal|0
operator|&&
name|iSection
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|==
name|start
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|!=
literal|null
operator|&&
name|attr
operator|.
name|equals
argument_list|(
literal|"before"
argument_list|)
condition|)
block|{
if|if
condition|(
name|iSection
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|end
init|=
name|parseStart
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|>=
literal|0
operator|&&
name|iSection
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|+
name|iSection
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|-
name|iSection
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
operator|/
literal|5
operator|<=
name|end
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|!=
literal|null
operator|&&
name|attr
operator|.
name|equals
argument_list|(
literal|"after"
argument_list|)
condition|)
block|{
if|if
condition|(
name|iSection
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|start
init|=
name|parseStart
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|>=
literal|0
operator|&&
name|iSection
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|>=
name|start
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"date"
argument_list|)
condition|)
block|{
if|if
condition|(
name|iSection
operator|.
name|getTime
argument_list|()
operator|==
literal|null
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"none"
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iSection
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|iSection
operator|.
name|getTime
argument_list|()
operator|.
name|getWeekCode
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|CONSTANTS
operator|.
name|patternDateFormat
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|iFirstDate
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSection
operator|.
name|getTime
argument_list|()
operator|.
name|getWeekCode
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iSection
operator|.
name|getTime
argument_list|()
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|DayCode
name|day
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|day
operator|=
name|DayCode
operator|.
name|MON
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|day
operator|=
name|DayCode
operator|.
name|TUE
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|day
operator|=
name|DayCode
operator|.
name|WED
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|day
operator|=
name|DayCode
operator|.
name|THU
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|day
operator|=
name|DayCode
operator|.
name|FRI
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|day
operator|=
name|DayCode
operator|.
name|SAT
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|day
operator|=
name|DayCode
operator|.
name|SUN
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|(
name|iSection
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
operator|&
name|day
operator|.
name|getCode
argument_list|()
operator|)
operator|==
name|day
operator|.
name|getCode
argument_list|()
condition|)
block|{
name|int
name|d
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
decl_stmt|;
name|int
name|m
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|df
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|d
operator|+
literal|"."
operator|+
name|m
operator|+
literal|"."
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|m
operator|+
literal|"/"
operator|+
name|d
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"room"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|iSection
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
operator|||
name|iSection
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"none"
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iSection
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RoomLocation
name|r
range|:
name|iSection
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|has
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"instr"
argument_list|)
operator|||
name|attr
operator|.
name|equals
argument_list|(
literal|"instructor"
argument_list|)
condition|)
block|{
if|if
condition|(
name|attr
operator|!=
literal|null
operator|&&
operator|(
name|iSection
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|==
literal|null
operator|||
name|iSection
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"none"
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|String
name|instructor
range|:
name|iSection
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
control|)
block|{
name|String
index|[]
name|nameEmail
init|=
name|instructor
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
if|if
condition|(
name|has
argument_list|(
name|nameEmail
index|[
literal|0
index|]
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|nameEmail
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
name|email
init|=
name|nameEmail
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|email
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
operator|>=
literal|0
condition|)
name|email
operator|=
name|email
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|email
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|eq
argument_list|(
name|email
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
name|attr
operator|!=
literal|null
operator|&&
name|iSection
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|start
init|=
name|parseStart
argument_list|(
name|attr
operator|+
literal|":"
operator|+
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|>=
literal|0
operator|&&
name|iSection
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|==
name|start
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|eq
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|has
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|String
name|t
range|:
name|name
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
control|)
if|if
condition|(
name|t
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|int
name|parseDay
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|int
name|days
init|=
literal|0
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
do|do
block|{
name|found
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|longDays
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator||=
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|days
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator||=
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|days
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator||=
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator||=
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|freeTimeShortDays
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|freeTimeShortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator||=
name|DayCode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|freeTimeShortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|found
condition|)
do|;
return|return
operator|(
name|token
operator|.
name|isEmpty
argument_list|()
condition|?
name|days
else|:
literal|0
operator|)
return|;
block|}
specifier|private
name|int
name|parseStart
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|int
name|startHour
init|=
literal|0
decl_stmt|,
name|startMin
init|=
literal|0
decl_stmt|;
name|String
name|number
init|=
literal|""
decl_stmt|;
while|while
condition|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'0'
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|<=
literal|'9'
condition|)
block|{
name|number
operator|+=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|number
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|number
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
name|startHour
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
operator|/
literal|100
expr_stmt|;
name|startMin
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
operator|%
literal|100
expr_stmt|;
block|}
else|else
block|{
name|startHour
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|number
operator|=
literal|""
expr_stmt|;
while|while
condition|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'0'
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|<=
literal|'9'
condition|)
block|{
name|number
operator|+=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|number
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|startMin
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|hasAmOrPm
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"am"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"pm"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|startHour
operator|<
literal|12
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|startHour
operator|<
literal|12
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
block|}
if|if
condition|(
name|startHour
operator|<
literal|7
operator|&&
operator|!
name|hasAmOrPm
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
if|if
condition|(
name|startMin
operator|%
literal|5
operator|!=
literal|0
condition|)
name|startMin
operator|=
literal|5
operator|*
operator|(
operator|(
name|startMin
operator|+
literal|2
operator|)
operator|/
literal|5
operator|)
expr_stmt|;
if|if
condition|(
name|startHour
operator|==
literal|7
operator|&&
name|startMin
operator|==
literal|0
operator|&&
operator|!
name|hasAmOrPm
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
return|return
operator|(
literal|60
operator|*
name|startHour
operator|+
name|startMin
operator|)
operator|/
literal|5
return|;
block|}
block|}
specifier|protected
name|boolean
name|canContinue
parameter_list|(
name|ArrayList
argument_list|<
name|Request
argument_list|>
name|requests2resolve
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
if|if
condition|(
name|depth
operator|<=
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|iTimeoutReached
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|protected
name|boolean
name|canContinueEvaluation
parameter_list|()
block|{
return|return
operator|!
name|iTimeoutReached
return|;
block|}
specifier|protected
name|boolean
name|checkBound
parameter_list|(
name|ArrayList
argument_list|<
name|Request
argument_list|>
name|requests2resolve
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
name|depth
parameter_list|,
name|Enrollment
name|value
parameter_list|,
name|Set
argument_list|<
name|Enrollment
argument_list|>
name|conflicts
parameter_list|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
operator|&&
operator|!
name|conflicts
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|nrUnassigned
init|=
name|requests2resolve
operator|.
name|size
argument_list|()
operator|-
name|idx
decl_stmt|;
if|if
condition|(
operator|(
name|nrUnassigned
operator|+
name|conflicts
operator|.
name|size
argument_list|()
operator|>
name|depth
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Enrollment
name|conflict
range|:
name|conflicts
control|)
block|{
name|int
name|confIdx
init|=
name|requests2resolve
operator|.
name|indexOf
argument_list|(
name|conflict
operator|.
name|variable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|confIdx
operator|>=
literal|0
operator|&&
name|confIdx
operator|<=
name|idx
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
name|iMaxSectionsWithPenalty
operator|>=
literal|0
condition|)
block|{
name|int
name|sectionsWithPenalty
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|iStudent
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|e
init|=
name|r
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
name|value
operator|.
name|variable
argument_list|()
argument_list|)
condition|)
block|{
name|e
operator|=
name|value
expr_stmt|;
block|}
if|else if
condition|(
name|conflicts
operator|.
name|contains
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|e
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|s
range|:
name|e
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|s
operator|.
name|getPenalty
argument_list|()
operator|>=
literal|0
condition|)
name|sectionsWithPenalty
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sectionsWithPenalty
operator|>
name|iMaxSectionsWithPenalty
condition|)
return|return
literal|false
return|;
block|}
comment|//TODO: Also check the bound
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isAllowed
parameter_list|(
name|Enrollment
name|enrollment
parameter_list|)
block|{
if|if
condition|(
name|iRequiredSections
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
comment|// Obey required sections
name|Set
argument_list|<
name|Section
argument_list|>
name|required
init|=
name|iRequiredSections
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getRequest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|required
operator|!=
literal|null
operator|&&
operator|!
name|required
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Section
name|r
range|:
name|required
control|)
if|if
condition|(
operator|!
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|contains
argument_list|(
name|r
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|equals
argument_list|(
name|iSelectedRequest
argument_list|)
condition|)
block|{
comment|// Selected request must be assigned
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Selected section must be assigned differently
if|if
condition|(
name|iSelectedSection
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|contains
argument_list|(
name|iSelectedSection
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|canLeaveUnassigned
parameter_list|(
name|Request
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
if|if
condition|(
name|iRequiredSections
operator|!=
literal|null
condition|)
block|{
comment|// Request with required section must be assigned
name|Set
argument_list|<
name|Section
argument_list|>
name|required
init|=
name|iRequiredSections
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|required
operator|!=
literal|null
operator|&&
operator|!
name|required
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// Free time is required
if|if
condition|(
name|iRequiredFreeTimes
operator|.
name|contains
argument_list|(
name|request
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
comment|// Selected request must be assigned
if|if
condition|(
name|request
operator|.
name|equals
argument_list|(
name|iSelectedRequest
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|protected
name|int
name|compare
parameter_list|(
name|Suggestion
name|s1
parameter_list|,
name|Suggestion
name|s2
parameter_list|)
block|{
return|return
name|Double
operator|.
name|compare
argument_list|(
name|s1
operator|.
name|getValue
argument_list|()
argument_list|,
name|s2
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
class|class
name|Suggestion
implements|implements
name|Comparable
argument_list|<
name|Suggestion
argument_list|>
block|{
specifier|private
name|double
name|iValue
init|=
literal|0.0
decl_stmt|;
specifier|private
name|int
name|iNrUnassigned
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iUnassignedPriority
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iNrChanges
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|iId
init|=
name|iLastSuggestionId
operator|++
decl_stmt|;
specifier|private
name|Enrollment
index|[]
name|iEnrollments
decl_stmt|;
specifier|private
name|Section
name|iSelectedEnrollment
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iSelectedEnrollmentChangeTime
init|=
literal|false
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|Section
argument_list|>
name|iSelectedSections
init|=
operator|new
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|(
operator|new
name|EnrollmentSectionComparator
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Suggestion
parameter_list|(
name|ArrayList
argument_list|<
name|Request
argument_list|>
name|resolvedRequests
parameter_list|)
block|{
for|for
control|(
name|Request
name|request
range|:
name|resolvedRequests
control|)
block|{
name|Enrollment
name|enrollment
init|=
operator|(
name|Enrollment
operator|)
name|request
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iNrUnassigned
operator|++
expr_stmt|;
name|iUnassignedPriority
operator|+=
name|request
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
name|iValue
operator|+=
operator|(
name|enrollment
operator|==
literal|null
operator|||
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0.0
else|:
name|enrollment
operator|.
name|toDouble
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|Enrollment
name|original
init|=
operator|(
name|Enrollment
operator|)
name|request
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|enrollment
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|originalSection
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|original
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|x
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
name|originalSection
operator|=
name|x
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|originalSection
operator|==
literal|null
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
argument_list|,
name|originalSection
operator|.
name|getTime
argument_list|()
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getRooms
argument_list|()
argument_list|,
name|originalSection
operator|.
name|getRooms
argument_list|()
argument_list|)
condition|)
name|iNrChanges
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|iSelectedRequest
operator|!=
literal|null
operator|&&
name|iSelectedSection
operator|!=
literal|null
condition|)
block|{
name|Enrollment
name|enrollment
init|=
operator|(
name|Enrollment
operator|)
name|iSelectedRequest
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|enrollment
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|iSelectedSection
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
name|iSelectedEnrollment
operator|=
name|section
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
name|iSelectedSection
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
operator|&&
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|equals
argument_list|(
name|iSelectedSection
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
block|{
name|iSelectedEnrollment
operator|=
name|section
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|iSelectedEnrollment
operator|!=
literal|null
condition|)
name|iSelectedEnrollmentChangeTime
operator|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|iSelectedEnrollment
operator|.
name|getTime
argument_list|()
argument_list|,
name|iSelectedSection
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSelectedRequest
operator|!=
literal|null
condition|)
block|{
name|Enrollment
name|enrollment
init|=
operator|(
name|Enrollment
operator|)
name|iSelectedRequest
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|isCourseRequest
argument_list|()
operator|&&
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|iSelectedSections
operator|.
name|addAll
argument_list|(
name|enrollment
operator|.
name|getSections
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|iEnrollments
operator|=
operator|new
name|Enrollment
index|[
name|iStudent
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iStudent
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Request
name|r
init|=
operator|(
name|Request
operator|)
name|iStudent
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|iEnrollments
index|[
name|i
index|]
operator|=
operator|(
name|Enrollment
operator|)
name|r
operator|.
name|getAssignment
argument_list|()
expr_stmt|;
if|if
condition|(
name|iEnrollments
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|Config
name|c
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
name|c
operator|=
operator|(
name|Config
operator|)
operator|(
operator|(
name|Course
operator|)
operator|(
operator|(
name|CourseRequest
operator|)
name|r
operator|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iEnrollments
index|[
name|i
index|]
operator|=
operator|new
name|Enrollment
argument_list|(
name|r
argument_list|,
literal|0
argument_list|,
name|c
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Enrollment
index|[]
name|getEnrollments
parameter_list|()
block|{
return|return
name|iEnrollments
return|;
block|}
specifier|public
name|double
name|getValue
parameter_list|()
block|{
return|return
name|iValue
return|;
block|}
specifier|public
name|int
name|getNrUnassigned
parameter_list|()
block|{
return|return
name|iNrUnassigned
return|;
block|}
specifier|public
name|double
name|getAverageUnassignedPriority
parameter_list|()
block|{
return|return
operator|(
operator|(
name|double
operator|)
name|iUnassignedPriority
operator|)
operator|/
name|iNrUnassigned
return|;
block|}
specifier|public
name|int
name|getNrChanges
parameter_list|()
block|{
return|return
name|iNrChanges
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|boolean
name|sameSelectedSection
parameter_list|()
block|{
if|if
condition|(
name|iSelectedRequest
operator|!=
literal|null
operator|&&
name|iSelectedEnrollment
operator|!=
literal|null
condition|)
block|{
name|Enrollment
name|enrollment
init|=
operator|(
name|Enrollment
operator|)
name|iSelectedRequest
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|contains
argument_list|(
name|iSelectedEnrollment
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iSelectedEnrollmentChangeTime
condition|)
block|{
name|Section
name|selectedEnrollment
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|enrollment
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|iSelectedSection
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
name|selectedEnrollment
operator|=
name|section
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
name|iSelectedSection
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
operator|&&
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|equals
argument_list|(
name|iSelectedSection
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
block|{
name|selectedEnrollment
operator|=
name|section
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|selectedEnrollment
operator|!=
literal|null
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|selectedEnrollment
operator|.
name|getTime
argument_list|()
argument_list|,
name|iSelectedEnrollment
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Suggestion
name|suggestion
parameter_list|)
block|{
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|getNrUnassigned
argument_list|()
argument_list|,
name|suggestion
operator|.
name|getNrUnassigned
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|getNrUnassigned
argument_list|()
operator|>
literal|0
condition|)
block|{
name|cmp
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|suggestion
operator|.
name|getAverageUnassignedPriority
argument_list|()
argument_list|,
name|getAverageUnassignedPriority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|cmp
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|getNrChanges
argument_list|()
argument_list|,
name|suggestion
operator|.
name|getNrChanges
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i1
init|=
name|iSelectedSections
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i2
init|=
name|suggestion
operator|.
name|iSelectedSections
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|SectionAssignmentComparator
name|c
init|=
operator|new
name|SectionAssignmentComparator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
operator|&&
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|cmp
operator|=
name|c
operator|.
name|compare
argument_list|(
name|i1
operator|.
name|next
argument_list|()
argument_list|,
name|i2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|cmp
operator|=
name|compare
argument_list|(
name|this
argument_list|,
name|suggestion
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|iId
argument_list|,
name|suggestion
operator|.
name|iId
argument_list|)
return|;
block|}
block|}
specifier|public
class|class
name|EnrollmentSectionComparator
implements|implements
name|Comparator
argument_list|<
name|Section
argument_list|>
block|{
specifier|public
name|boolean
name|isParent
parameter_list|(
name|Section
name|s1
parameter_list|,
name|Section
name|s2
parameter_list|)
block|{
name|Section
name|p1
init|=
name|s1
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|isParent
argument_list|(
name|p1
argument_list|,
name|s2
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Section
name|a
parameter_list|,
name|Section
name|b
parameter_list|)
block|{
if|if
condition|(
name|iSelectedSection
operator|!=
literal|null
operator|&&
name|iSelectedSection
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|a
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|iSelectedSection
operator|!=
literal|null
operator|&&
name|iSelectedSection
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|b
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|isParent
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|isParent
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|a
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|b
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|,
name|b
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
class|class
name|SectionAssignmentComparator
implements|implements
name|Comparator
argument_list|<
name|Section
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Section
name|a
parameter_list|,
name|Section
name|b
parameter_list|)
block|{
name|TimeLocation
name|t1
init|=
operator|(
name|a
operator|==
literal|null
condition|?
literal|null
else|:
name|a
operator|.
name|getTime
argument_list|()
operator|)
decl_stmt|;
name|TimeLocation
name|t2
init|=
operator|(
name|b
operator|==
literal|null
condition|?
literal|null
else|:
name|b
operator|.
name|getTime
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|t1
operator|!=
literal|null
operator|&&
name|t2
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|DayCode
argument_list|>
name|d1
init|=
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|t1
operator|.
name|getDayCode
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|DayCode
argument_list|>
name|d2
init|=
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|t2
operator|.
name|getDayCode
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|d1
operator|.
name|size
argument_list|()
argument_list|,
name|d2
operator|.
name|size
argument_list|()
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|d1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|,
name|d2
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|t1
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|t2
operator|.
name|getStartSlot
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|String
name|r1
init|=
operator|(
name|a
operator|==
literal|null
operator|||
name|a
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|a
operator|.
name|getRooms
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
decl_stmt|;
name|String
name|r2
init|=
operator|(
name|b
operator|==
literal|null
operator|||
name|b
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|b
operator|.
name|getRooms
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|r1
operator|!=
literal|null
operator|&&
name|r2
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|r1
operator|.
name|compareToIgnoreCase
argument_list|(
name|r2
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
specifier|public
name|int
name|getNrMatched
parameter_list|()
block|{
return|return
name|iMatched
return|;
block|}
block|}
end_class

end_unit

