begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|DistanceConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|TimeOverlapsCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|weights
operator|.
name|EqualStudentWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|weights
operator|.
name|PriorityStudentWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|weights
operator|.
name|StudentWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|expectations
operator|.
name|MoreSpaceThanExpected
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentSchedulingAssistantWeights
implements|implements
name|StudentWeights
block|{
comment|/** deduction for section with no time assignment */
specifier|private
name|double
name|iNoTimeFactor
init|=
literal|0.050
decl_stmt|;
comment|/** deduction for sections that are not preferred (different time& instructor) */
specifier|private
name|double
name|iSelectionFactor
init|=
literal|0.125
decl_stmt|;
comment|/** deduction for over expected sections */
specifier|private
name|double
name|iOverExpectedFactor
init|=
literal|0.250
decl_stmt|;
comment|/** similar to balancing factor on {@link PriorityStudentWeights} */
specifier|private
name|double
name|iAvailabilityFactor
init|=
literal|0.050
decl_stmt|;
comment|/** negative penalty means there is space available */
specifier|private
name|double
name|iPenaltyFactor
init|=
literal|0.001
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|double
index|[]
argument_list|>
name|iCache
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|double
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iPriorityWeighting
init|=
literal|true
decl_stmt|;
specifier|private
name|StudentWeights
name|iParent
decl_stmt|;
specifier|public
name|StudentSchedulingAssistantWeights
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
name|iNoTimeFactor
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"StudentWeights.NoTimeFactor"
argument_list|,
name|iNoTimeFactor
argument_list|)
expr_stmt|;
name|iSelectionFactor
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"StudentWeights.SelectionFactor"
argument_list|,
name|iSelectionFactor
argument_list|)
expr_stmt|;
name|iOverExpectedFactor
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"StudentWeights.PenaltyFactor"
argument_list|,
name|iOverExpectedFactor
argument_list|)
expr_stmt|;
name|iPenaltyFactor
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"StudentWeights.AvgPenaltyFactor"
argument_list|,
name|iPenaltyFactor
argument_list|)
expr_stmt|;
name|iAvailabilityFactor
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"StudentWeights.AvailabilityFactor"
argument_list|,
name|iAvailabilityFactor
argument_list|)
expr_stmt|;
name|iPriorityWeighting
operator|=
name|properties
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentWeights.PriorityWeighting"
argument_list|,
name|iPriorityWeighting
argument_list|)
expr_stmt|;
if|if
condition|(
name|iPriorityWeighting
condition|)
name|iParent
operator|=
operator|new
name|PriorityStudentWeights
argument_list|(
name|properties
argument_list|)
expr_stmt|;
else|else
name|iParent
operator|=
operator|new
name|EqualStudentWeights
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearBestCache
parameter_list|()
block|{
name|iCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|double
name|getOverExpected
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Section
name|section
parameter_list|,
name|Request
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|getModel
argument_list|()
operator|==
literal|null
operator|||
operator|!
operator|(
name|request
operator|.
name|getModel
argument_list|()
operator|instanceof
name|OnlineSectioningModel
operator|)
condition|)
return|return
operator|new
name|MoreSpaceThanExpected
argument_list|()
operator|.
name|getOverExpected
argument_list|(
name|assignment
argument_list|,
name|section
argument_list|,
name|request
argument_list|)
return|;
return|return
operator|(
operator|(
name|OnlineSectioningModel
operator|)
name|request
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getOverExpected
argument_list|(
name|assignment
argument_list|,
name|section
argument_list|,
name|request
argument_list|)
return|;
block|}
specifier|private
name|double
index|[]
name|best
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|CourseRequest
name|cr
parameter_list|)
block|{
name|double
index|[]
name|cached
init|=
name|iCache
operator|.
name|get
argument_list|(
name|cr
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
return|return
name|cached
return|;
name|double
name|bestTime
init|=
literal|0
decl_stmt|;
name|Double
name|bestOverExpected
init|=
literal|null
decl_stmt|;
name|Double
name|bestAvgPenalty
init|=
literal|null
decl_stmt|;
name|double
name|bestSelected
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|cr
operator|.
name|getCourses
argument_list|()
control|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
name|int
name|size
init|=
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|double
name|sectionsWithTime
init|=
literal|0
decl_stmt|;
name|double
name|overExpected
init|=
literal|0
decl_stmt|;
name|double
name|penalty
init|=
literal|0
decl_stmt|;
name|double
name|selectedSections
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
name|boolean
name|hasTime
init|=
literal|false
decl_stmt|;
name|Double
name|sectionPenalty
init|=
literal|null
decl_stmt|;
name|Double
name|sectionOverExpected
init|=
literal|null
decl_stmt|;
name|boolean
name|hasSelection
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
name|hasTime
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|cr
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|cr
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
condition|)
name|hasSelection
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|sectionPenalty
operator|==
literal|null
operator|||
name|sectionPenalty
operator|>
name|section
operator|.
name|getPenalty
argument_list|()
condition|)
name|sectionPenalty
operator|=
name|section
operator|.
name|getPenalty
argument_list|()
expr_stmt|;
name|double
name|oexp
init|=
name|getOverExpected
argument_list|(
name|assignment
argument_list|,
name|section
argument_list|,
name|cr
argument_list|)
decl_stmt|;
if|if
condition|(
name|sectionOverExpected
operator|==
literal|null
operator|||
name|sectionOverExpected
operator|>
name|oexp
condition|)
name|sectionOverExpected
operator|=
name|oexp
expr_stmt|;
block|}
if|if
condition|(
name|hasTime
condition|)
name|sectionsWithTime
operator|++
expr_stmt|;
if|if
condition|(
name|sectionPenalty
operator|!=
literal|null
condition|)
name|penalty
operator|+=
name|sectionPenalty
expr_stmt|;
if|if
condition|(
name|hasSelection
condition|)
name|selectedSections
operator|++
expr_stmt|;
if|if
condition|(
name|sectionOverExpected
operator|!=
literal|null
condition|)
name|overExpected
operator|+=
name|sectionOverExpected
expr_stmt|;
block|}
if|if
condition|(
name|sectionsWithTime
operator|/
name|size
operator|>
name|bestTime
condition|)
name|bestTime
operator|=
name|sectionsWithTime
operator|/
name|size
expr_stmt|;
if|if
condition|(
name|bestOverExpected
operator|==
literal|null
operator|||
name|overExpected
operator|<
name|bestOverExpected
condition|)
name|bestOverExpected
operator|=
name|overExpected
expr_stmt|;
if|if
condition|(
name|bestAvgPenalty
operator|==
literal|null
operator|||
name|penalty
operator|/
name|size
operator|<
name|bestAvgPenalty
condition|)
name|bestAvgPenalty
operator|=
name|penalty
operator|/
name|size
expr_stmt|;
if|if
condition|(
name|selectedSections
operator|/
name|size
operator|>
name|bestSelected
condition|)
name|bestSelected
operator|=
name|selectedSections
operator|/
name|size
expr_stmt|;
block|}
block|}
name|cached
operator|=
operator|new
name|double
index|[]
block|{
name|bestTime
block|,
operator|(
name|bestOverExpected
operator|==
literal|null
condition|?
literal|0.0
else|:
name|bestOverExpected
operator|)
block|,
operator|(
name|bestAvgPenalty
operator|==
literal|null
condition|?
literal|0.0
else|:
name|bestAvgPenalty
operator|)
block|,
name|bestSelected
block|}
expr_stmt|;
name|iCache
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|cached
argument_list|)
expr_stmt|;
return|return
name|cached
return|;
block|}
specifier|public
name|double
name|getBaseWeight
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Enrollment
name|enrollment
parameter_list|)
block|{
return|return
name|iParent
operator|.
name|getWeight
argument_list|(
name|assignment
argument_list|,
name|enrollment
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getWeight
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Enrollment
name|enrollment
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enrollment
operator|.
name|isCourseRequest
argument_list|()
condition|)
return|return
name|getBaseWeight
argument_list|(
name|assignment
argument_list|,
name|enrollment
argument_list|)
return|;
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|double
name|base
init|=
name|getBaseWeight
argument_list|(
name|assignment
argument_list|,
name|enrollment
argument_list|)
decl_stmt|;
name|double
name|weight
init|=
name|base
decl_stmt|;
name|int
name|size
init|=
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|double
index|[]
name|best
init|=
name|best
argument_list|(
name|assignment
argument_list|,
name|cr
argument_list|)
decl_stmt|;
name|double
name|hasTime
init|=
literal|0
decl_stmt|;
name|double
name|oexp
init|=
literal|0
decl_stmt|;
name|double
name|penalty
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
name|hasTime
operator|++
expr_stmt|;
name|oexp
operator|+=
name|getOverExpected
argument_list|(
name|assignment
argument_list|,
name|section
argument_list|,
name|cr
argument_list|)
expr_stmt|;
name|penalty
operator|+=
name|section
operator|.
name|getPenalty
argument_list|()
expr_stmt|;
block|}
name|double
name|noTime
init|=
name|best
index|[
literal|0
index|]
operator|-
operator|(
name|hasTime
operator|/
name|size
operator|)
decl_stmt|;
name|double
name|overExpected
init|=
name|oexp
operator|-
name|best
index|[
literal|1
index|]
decl_stmt|;
name|double
name|avgPenalty
init|=
operator|(
name|penalty
operator|/
name|size
operator|)
operator|-
name|best
index|[
literal|2
index|]
decl_stmt|;
name|int
name|nrSelected
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|cr
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
condition|)
name|nrSelected
operator|++
expr_stmt|;
block|}
name|double
name|unselectedFraction
init|=
name|best
index|[
literal|3
index|]
operator|-
operator|(
name|nrSelected
operator|/
name|size
operator|)
decl_stmt|;
name|double
name|unavailableSize
init|=
literal|0
decl_stmt|;
name|double
name|altSectionsWithLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Subpart
name|subpart
init|=
name|section
operator|.
name|getSubpart
argument_list|()
decl_stmt|;
comment|// skip unlimited and single section subparts
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|||
name|subpart
operator|.
name|getLimit
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
comment|// average size
name|double
name|averageSize
init|=
operator|(
operator|(
name|double
operator|)
name|subpart
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// section is below average
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
name|averageSize
condition|)
name|unavailableSize
operator|+=
operator|(
name|averageSize
operator|-
name|section
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|averageSize
expr_stmt|;
name|altSectionsWithLimit
operator|++
expr_stmt|;
block|}
name|double
name|unavailableSizeFraction
init|=
operator|(
name|unavailableSize
operator|>
literal|0
condition|?
name|unavailableSize
operator|/
name|altSectionsWithLimit
else|:
literal|0.0
operator|)
decl_stmt|;
name|weight
operator|-=
name|overExpected
operator|*
name|base
operator|*
name|iOverExpectedFactor
expr_stmt|;
name|weight
operator|-=
name|unselectedFraction
operator|*
name|base
operator|*
name|iSelectionFactor
expr_stmt|;
name|weight
operator|-=
name|noTime
operator|*
name|base
operator|*
name|iNoTimeFactor
expr_stmt|;
name|weight
operator|-=
name|unavailableSizeFraction
operator|*
name|base
operator|*
name|iAvailabilityFactor
expr_stmt|;
name|weight
operator|-=
name|avgPenalty
operator|*
name|iPenaltyFactor
expr_stmt|;
return|return
name|round
argument_list|(
name|weight
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getWeight
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Enrollment
name|enrollment
parameter_list|,
name|Set
argument_list|<
name|DistanceConflict
operator|.
name|Conflict
argument_list|>
name|distanceConflicts
parameter_list|,
name|Set
argument_list|<
name|TimeOverlapsCounter
operator|.
name|Conflict
argument_list|>
name|timeOverlappingConflicts
parameter_list|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|double
name|weight
init|=
name|getWeight
argument_list|(
name|assignment
argument_list|,
name|enrollment
argument_list|)
decl_stmt|;
if|if
condition|(
name|distanceConflicts
operator|!=
literal|null
condition|)
for|for
control|(
name|DistanceConflict
operator|.
name|Conflict
name|c
range|:
name|distanceConflicts
control|)
block|{
name|Enrollment
name|other
init|=
operator|(
name|c
operator|.
name|getE1
argument_list|()
operator|.
name|equals
argument_list|(
name|enrollment
argument_list|)
condition|?
name|c
operator|.
name|getE2
argument_list|()
else|:
name|c
operator|.
name|getE1
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|getRequest
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|<=
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|getPriority
argument_list|()
condition|)
name|weight
operator|-=
name|getDistanceConflictWeight
argument_list|(
name|assignment
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeOverlappingConflicts
operator|!=
literal|null
condition|)
for|for
control|(
name|TimeOverlapsCounter
operator|.
name|Conflict
name|c
range|:
name|timeOverlappingConflicts
control|)
block|{
name|weight
operator|-=
name|getTimeOverlapConflictWeight
argument_list|(
name|assignment
argument_list|,
name|enrollment
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|weight
return|;
block|}
specifier|protected
name|double
name|round
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
name|Math
operator|.
name|ceil
argument_list|(
literal|10000.0
operator|*
name|value
argument_list|)
operator|/
literal|10000.0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isBetterThanBestSolution
parameter_list|(
name|Solution
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|currentSolution
parameter_list|)
block|{
return|return
name|iParent
operator|.
name|isBetterThanBestSolution
argument_list|(
name|currentSolution
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getBound
parameter_list|(
name|Request
name|request
parameter_list|)
block|{
return|return
name|iParent
operator|.
name|getBound
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getDistanceConflictWeight
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|DistanceConflict
operator|.
name|Conflict
name|distanceConflict
parameter_list|)
block|{
return|return
name|iParent
operator|.
name|getDistanceConflictWeight
argument_list|(
name|assignment
argument_list|,
name|distanceConflict
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getTimeOverlapConflictWeight
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|Enrollment
name|enrollment
parameter_list|,
name|TimeOverlapsCounter
operator|.
name|Conflict
name|timeOverlap
parameter_list|)
block|{
return|return
name|iParent
operator|.
name|getTimeOverlapConflictWeight
argument_list|(
name|assignment
argument_list|,
name|enrollment
argument_list|,
name|timeOverlap
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFreeTimeAllowOverlaps
parameter_list|()
block|{
return|return
name|iParent
operator|.
name|isFreeTimeAllowOverlaps
argument_list|()
return|;
block|}
block|}
end_class

end_unit

