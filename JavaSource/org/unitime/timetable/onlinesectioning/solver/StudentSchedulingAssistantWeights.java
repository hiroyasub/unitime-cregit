begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|DistanceConflict
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|TimeOverlapsCounter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|weights
operator|.
name|PriorityStudentWeights
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentSchedulingAssistantWeights
extends|extends
name|PriorityStudentWeights
block|{
comment|/** deduction for section with no time assignment */
specifier|private
name|double
name|iNoTimeFactor
init|=
literal|0.050
decl_stmt|;
comment|/** deduction for sections that are not preferred (different time& instructor) */
specifier|private
name|double
name|iPreferenceFactor
init|=
literal|0.125
decl_stmt|;
comment|/** deduction for over expected sections */
specifier|private
name|double
name|iPenaltyFactor
init|=
literal|0.250
decl_stmt|;
comment|/** similar to balancing factor on {@link PriorityStudentWeights} */
specifier|private
name|double
name|iAvailabilityFactor
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Double
argument_list|>
name|iBestTime
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|StudentSchedulingAssistantWeights
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|iNoTimeFactor
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"StudentWeights.NoTimeFactor"
argument_list|,
name|iNoTimeFactor
argument_list|)
expr_stmt|;
name|iPreferenceFactor
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"StudentWeights.PreferenceFactor"
argument_list|,
name|iPreferenceFactor
argument_list|)
expr_stmt|;
name|iPenaltyFactor
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"StudentWeights.PenaltyFactor"
argument_list|,
name|iPenaltyFactor
argument_list|)
expr_stmt|;
name|iAvailabilityFactor
operator|=
name|iBalancingFactor
expr_stmt|;
name|iBalancingFactor
operator|=
literal|0.0
expr_stmt|;
block|}
specifier|private
name|double
name|bestTime
parameter_list|(
name|Request
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|FreeTimeRequest
condition|)
return|return
literal|1.0
return|;
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
name|Double
name|cached
init|=
name|iBestTime
operator|.
name|get
argument_list|(
name|cr
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
return|return
name|cached
operator|.
name|doubleValue
argument_list|()
return|;
name|double
name|bestTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Course
argument_list|>
name|e
init|=
name|cr
operator|.
name|getCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Course
name|course
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Config
argument_list|>
name|f
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Config
name|config
init|=
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|nrSubpartsWithTime
init|=
literal|0
decl_stmt|;
name|subparts
label|:
for|for
control|(
name|Iterator
argument_list|<
name|Subpart
argument_list|>
name|g
init|=
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|g
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|subpart
init|=
name|g
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|h
init|=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|h
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|h
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nrSubpartsWithTime
operator|++
expr_stmt|;
continue|continue
name|subparts
continue|;
block|}
block|}
block|}
name|double
name|time
init|=
operator|(
operator|(
name|double
operator|)
name|nrSubpartsWithTime
operator|/
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|time
operator|>
name|bestTime
condition|)
name|bestTime
operator|=
name|time
expr_stmt|;
block|}
block|}
name|iBestTime
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|bestTime
argument_list|)
expr_stmt|;
return|return
name|bestTime
return|;
block|}
specifier|public
name|double
name|getBaseWeight
parameter_list|(
name|Enrollment
name|enrollment
parameter_list|)
block|{
return|return
name|super
operator|.
name|getWeight
argument_list|(
name|enrollment
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getWeight
parameter_list|(
name|Enrollment
name|enrollment
parameter_list|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|double
name|base
init|=
name|getBaseWeight
argument_list|(
name|enrollment
argument_list|)
decl_stmt|;
name|double
name|weight
init|=
name|base
decl_stmt|;
name|int
name|size
init|=
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|double
name|hasTime
init|=
literal|0
decl_stmt|;
name|double
name|penalty
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|isCourseRequest
argument_list|()
operator|&&
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
name|hasTime
operator|++
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getPenalty
argument_list|()
operator|>
literal|0.0
condition|)
name|penalty
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|hasTime
operator|=
literal|1.0
expr_stmt|;
block|}
name|double
name|noTime
init|=
name|bestTime
argument_list|(
name|enrollment
operator|.
name|getRequest
argument_list|()
argument_list|)
operator|-
operator|(
name|hasTime
operator|/
name|size
operator|)
decl_stmt|;
name|double
name|penaltyFraction
init|=
name|penalty
operator|/
name|size
decl_stmt|;
name|double
name|selectedFraction
init|=
literal|1.0
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|isCourseRequest
argument_list|()
operator|&&
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|int
name|nrSelected
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|cr
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
condition|)
name|nrSelected
operator|++
expr_stmt|;
block|}
block|}
name|selectedFraction
operator|=
operator|(
name|size
operator|-
name|nrSelected
operator|)
operator|/
name|size
expr_stmt|;
block|}
name|double
name|unavailableSizeFraction
init|=
literal|0.0
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|isCourseRequest
argument_list|()
operator|&&
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|double
name|unavailableSize
init|=
literal|0
decl_stmt|;
name|double
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Subpart
name|subpart
init|=
name|section
operator|.
name|getSubpart
argument_list|()
decl_stmt|;
comment|// skip unlimited and single section subparts
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|||
name|subpart
operator|.
name|getLimit
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
comment|// average size
name|double
name|averageSize
init|=
operator|(
operator|(
name|double
operator|)
name|subpart
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// section is below average
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
name|averageSize
condition|)
name|unavailableSize
operator|+=
operator|(
name|averageSize
operator|-
name|section
operator|.
name|getLimit
argument_list|()
operator|)
operator|/
name|averageSize
expr_stmt|;
name|total
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|unavailableSize
operator|>
literal|0
condition|)
name|unavailableSizeFraction
operator|=
name|unavailableSize
operator|/
name|total
expr_stmt|;
block|}
name|weight
operator|-=
name|penaltyFraction
operator|*
name|base
operator|*
name|iPenaltyFactor
expr_stmt|;
name|weight
operator|-=
name|selectedFraction
operator|*
name|base
operator|*
name|iPreferenceFactor
expr_stmt|;
name|weight
operator|-=
name|noTime
operator|*
name|base
operator|*
name|iNoTimeFactor
expr_stmt|;
name|weight
operator|-=
name|unavailableSizeFraction
operator|*
name|base
operator|*
name|iAvailabilityFactor
expr_stmt|;
return|return
name|weight
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getWeight
parameter_list|(
name|Enrollment
name|enrollment
parameter_list|,
name|Set
argument_list|<
name|DistanceConflict
operator|.
name|Conflict
argument_list|>
name|distanceConflicts
parameter_list|,
name|Set
argument_list|<
name|TimeOverlapsCounter
operator|.
name|Conflict
argument_list|>
name|timeOverlappingConflicts
parameter_list|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|double
name|weight
init|=
name|getWeight
argument_list|(
name|enrollment
argument_list|)
decl_stmt|;
if|if
condition|(
name|distanceConflicts
operator|!=
literal|null
condition|)
for|for
control|(
name|DistanceConflict
operator|.
name|Conflict
name|c
range|:
name|distanceConflicts
control|)
block|{
name|Enrollment
name|other
init|=
operator|(
name|c
operator|.
name|getE1
argument_list|()
operator|.
name|equals
argument_list|(
name|enrollment
argument_list|)
condition|?
name|c
operator|.
name|getE2
argument_list|()
else|:
name|c
operator|.
name|getE1
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|getRequest
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|<=
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|getPriority
argument_list|()
condition|)
name|weight
operator|-=
name|getDistanceConflictWeight
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeOverlappingConflicts
operator|!=
literal|null
condition|)
for|for
control|(
name|TimeOverlapsCounter
operator|.
name|Conflict
name|c
range|:
name|timeOverlappingConflicts
control|)
block|{
name|weight
operator|-=
name|getTimeOverlapConflictWeight
argument_list|(
name|enrollment
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|weight
return|;
block|}
block|}
end_class

end_unit

