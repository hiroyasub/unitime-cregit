begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Choice
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_class
specifier|public
class|class
name|ResectioningWeights
extends|extends
name|StudentSchedulingAssistantWeights
block|{
specifier|private
name|double
name|iSameChoiceFactor
init|=
literal|0.125
decl_stmt|;
specifier|private
name|double
name|iSameRoomsFactor
init|=
literal|0.007
decl_stmt|;
specifier|private
name|double
name|iSameTimeFactor
init|=
literal|0.070
decl_stmt|;
specifier|private
name|double
name|iSameNameFactor
init|=
literal|0.014
decl_stmt|;
specifier|private
name|LastSectionProvider
name|iLastSectionProvider
init|=
literal|null
decl_stmt|;
specifier|public
name|ResectioningWeights
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|iSameChoiceFactor
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"StudentWeights.SameChoiceFactor"
argument_list|,
name|iSameChoiceFactor
argument_list|)
expr_stmt|;
name|iSameRoomsFactor
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"StudentWeights.SameRoomsFactor"
argument_list|,
name|iSameRoomsFactor
argument_list|)
expr_stmt|;
name|iSameTimeFactor
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"StudentWeights.SameTimeFactor"
argument_list|,
name|iSameTimeFactor
argument_list|)
expr_stmt|;
name|iSameNameFactor
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"StudentWeights.SameNameFactor"
argument_list|,
name|iSameNameFactor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLastSectionProvider
parameter_list|(
name|LastSectionProvider
name|lastSectionProvider
parameter_list|)
block|{
name|iLastSectionProvider
operator|=
name|lastSectionProvider
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getWeight
parameter_list|(
name|Enrollment
name|enrollment
parameter_list|)
block|{
name|double
name|weight
init|=
name|super
operator|.
name|getWeight
argument_list|(
name|enrollment
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|isCourseRequest
argument_list|()
operator|&&
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
operator|&&
name|iLastSectionProvider
operator|!=
literal|null
condition|)
block|{
name|int
name|sameChoice
init|=
literal|0
decl_stmt|;
name|int
name|sameTime
init|=
literal|0
decl_stmt|;
name|int
name|sameRooms
init|=
literal|0
decl_stmt|;
name|int
name|sameName
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|iLastSectionProvider
operator|.
name|sameLastChoice
argument_list|(
name|section
argument_list|)
condition|)
name|sameChoice
operator|++
expr_stmt|;
if|if
condition|(
name|iLastSectionProvider
operator|.
name|sameLastTime
argument_list|(
name|section
argument_list|)
condition|)
name|sameTime
operator|++
expr_stmt|;
if|if
condition|(
name|iLastSectionProvider
operator|.
name|sameLastRoom
argument_list|(
name|section
argument_list|)
condition|)
name|sameRooms
operator|++
expr_stmt|;
if|if
condition|(
name|iLastSectionProvider
operator|.
name|sameLastName
argument_list|(
name|section
argument_list|,
name|enrollment
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
name|sameName
operator|++
expr_stmt|;
block|}
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|sameChoice
operator|==
literal|0
operator|&&
operator|!
name|cr
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
condition|)
block|{
name|sameChoice
operator|++
expr_stmt|;
continue|continue;
block|}
block|}
block|}
name|int
name|size
init|=
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|double
name|sameChoiceFraction
init|=
operator|(
name|size
operator|-
name|sameChoice
operator|)
operator|/
name|size
decl_stmt|;
name|double
name|sameTimeFraction
init|=
operator|(
name|size
operator|-
name|sameTime
operator|)
operator|/
name|size
decl_stmt|;
name|double
name|sameRoomsFraction
init|=
operator|(
name|size
operator|-
name|sameRooms
operator|)
operator|/
name|size
decl_stmt|;
name|double
name|sameNameFraction
init|=
operator|(
name|size
operator|-
name|sameName
operator|)
operator|/
name|size
decl_stmt|;
name|double
name|base
init|=
name|getBaseWeight
argument_list|(
name|enrollment
argument_list|)
decl_stmt|;
name|weight
operator|-=
name|sameChoiceFraction
operator|*
name|base
operator|*
name|iSameChoiceFactor
expr_stmt|;
name|weight
operator|-=
name|sameTimeFraction
operator|*
name|base
operator|*
name|iSameTimeFactor
expr_stmt|;
name|weight
operator|-=
name|sameRoomsFraction
operator|*
name|base
operator|*
name|iSameRoomsFactor
expr_stmt|;
name|weight
operator|-=
name|sameNameFraction
operator|*
name|base
operator|*
name|iSameNameFactor
expr_stmt|;
block|}
return|return
name|weight
return|;
block|}
specifier|public
specifier|static
name|boolean
name|sameRooms
parameter_list|(
name|Section
name|s
parameter_list|,
name|List
argument_list|<
name|RoomLocation
argument_list|>
name|rooms
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
operator|&&
name|rooms
operator|==
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|s
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
operator|||
name|rooms
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|s
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|rooms
operator|.
name|size
argument_list|()
operator|&&
name|s
operator|.
name|getRooms
argument_list|()
operator|.
name|containsAll
argument_list|(
name|rooms
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|sameTime
parameter_list|(
name|Section
name|s
parameter_list|,
name|TimeLocation
name|t
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
operator|&&
name|t
operator|==
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
operator|||
name|t
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|==
name|t
operator|.
name|getStartSlot
argument_list|()
operator|&&
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|==
name|t
operator|.
name|getLength
argument_list|()
operator|&&
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
operator|==
name|t
operator|.
name|getDayCode
argument_list|()
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|,
name|t
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|sameChoice
parameter_list|(
name|Section
name|s
parameter_list|,
name|Choice
name|ch
parameter_list|)
block|{
return|return
name|sameChoice
argument_list|(
name|s
argument_list|,
name|ch
operator|==
literal|null
condition|?
literal|null
else|:
name|ch
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|sameChoice
parameter_list|(
name|Section
name|s
parameter_list|,
name|String
name|ch
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|getChoice
argument_list|()
operator|==
literal|null
operator|&&
name|ch
operator|==
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|s
operator|.
name|getChoice
argument_list|()
operator|==
literal|null
operator|||
name|ch
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|s
operator|.
name|getChoice
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|ch
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|sameName
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|Section
name|s1
parameter_list|,
name|Section
name|s2
parameter_list|)
block|{
return|return
name|s1
operator|.
name|getName
argument_list|(
name|courseId
argument_list|)
operator|.
name|equals
argument_list|(
name|s2
operator|.
name|getName
argument_list|(
name|courseId
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isSame
parameter_list|(
name|Enrollment
name|e1
parameter_list|,
name|Enrollment
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|e2
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
name|s1
label|:
for|for
control|(
name|Section
name|s1
range|:
name|e1
operator|.
name|getSections
argument_list|()
control|)
block|{
for|for
control|(
name|Section
name|s2
range|:
name|e2
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|sameChoice
argument_list|(
name|s1
argument_list|,
name|s2
operator|.
name|getChoice
argument_list|()
argument_list|)
condition|)
continue|continue
name|s1
continue|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isVerySame
parameter_list|(
name|Enrollment
name|e1
parameter_list|,
name|Enrollment
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|e2
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
name|s1
label|:
for|for
control|(
name|Section
name|s1
range|:
name|e1
operator|.
name|getSections
argument_list|()
control|)
block|{
for|for
control|(
name|Section
name|s2
range|:
name|e2
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|sameName
argument_list|(
name|e1
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|s1
argument_list|,
name|s2
argument_list|)
operator|&&
name|sameTime
argument_list|(
name|s1
argument_list|,
name|s2
operator|.
name|getTime
argument_list|()
argument_list|)
operator|&&
name|sameRooms
argument_list|(
name|s1
argument_list|,
name|s2
operator|.
name|getRooms
argument_list|()
argument_list|)
condition|)
continue|continue
name|s1
continue|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
interface|interface
name|LastSectionProvider
block|{
specifier|public
name|boolean
name|sameLastChoice
parameter_list|(
name|Section
name|current
parameter_list|)
function_decl|;
specifier|public
name|boolean
name|sameLastTime
parameter_list|(
name|Section
name|current
parameter_list|)
function_decl|;
specifier|public
name|boolean
name|sameLastRoom
parameter_list|(
name|Section
name|current
parameter_list|)
function_decl|;
specifier|public
name|boolean
name|sameLastName
parameter_list|(
name|Section
name|current
parameter_list|,
name|Course
name|course
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

