begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
package|;
end_package

begin_comment
comment|/**  * Sends anonymous emails  * @author Heston Fernandes  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_class
specifier|public
class|class
name|Email
block|{
comment|// Constants
specifier|private
specifier|static
specifier|final
name|int
name|SMTP_PORT
init|=
literal|25
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
name|SMTP_ERROR_CODE1
init|=
literal|'4'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
name|SMTP_ERROR_CODE2
init|=
literal|'5'
decl_stmt|;
comment|/** 	 * Send Email 	 * @param host IP Address or Host name 	 * @param domain Host Domain 	 * @param sender Sender - must be an email address only (no names) 	 * @param replyTo Usually same as sender but can be of the form Name&lt;email&gt; 	 *                 Example: ABC&lt;abc@xyz.com&gt; 	 * @param recipients Recipients (multiple recipients separated by ;) 	 * @param subject Subject 	 * @param maildata Content 	 * @param sessionTrace Stores transcript of conversation with mail server 	 * @throws IOException 	 */
specifier|public
name|void
name|sendMail
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|domain
parameter_list|,
name|String
name|sender
parameter_list|,
name|String
name|replyTo
parameter_list|,
name|String
name|recipients
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|maildata
parameter_list|,
name|Vector
name|sessionTrace
parameter_list|)
throws|throws
name|IOException
block|{
name|Socket
name|mailSocket
decl_stmt|;
name|BufferedReader
name|socketIn
decl_stmt|;
name|DataOutputStream
name|socketOut
decl_stmt|;
name|String
name|address
decl_stmt|;
name|StringTokenizer
name|tokenizer
decl_stmt|;
name|mailSocket
operator|=
operator|new
name|Socket
argument_list|(
name|host
argument_list|,
name|SMTP_PORT
argument_list|)
expr_stmt|;
name|socketIn
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|mailSocket
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socketOut
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|mailSocket
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|readReply
argument_list|(
name|socketIn
argument_list|,
name|sessionTrace
argument_list|)
expr_stmt|;
name|sendCommand
argument_list|(
name|socketOut
argument_list|,
literal|"HELO "
operator|+
name|domain
argument_list|,
name|sessionTrace
argument_list|)
expr_stmt|;
name|readReply
argument_list|(
name|socketIn
argument_list|,
name|sessionTrace
argument_list|)
expr_stmt|;
name|sendCommand
argument_list|(
name|socketOut
argument_list|,
literal|"MAIL FROM: "
operator|+
name|sender
argument_list|,
name|sessionTrace
argument_list|)
expr_stmt|;
name|readReply
argument_list|(
name|socketIn
argument_list|,
name|sessionTrace
argument_list|)
expr_stmt|;
name|tokenizer
operator|=
operator|new
name|StringTokenizer
argument_list|(
name|recipients
argument_list|,
literal|";"
argument_list|)
expr_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|sendCommand
argument_list|(
name|socketOut
argument_list|,
literal|"RCPT TO: "
operator|+
name|tokenizer
operator|.
name|nextToken
argument_list|()
argument_list|,
name|sessionTrace
argument_list|)
expr_stmt|;
name|readReply
argument_list|(
name|socketIn
argument_list|,
name|sessionTrace
argument_list|)
expr_stmt|;
block|}
name|maildata
operator|=
literal|"Date: "
operator|+
operator|(
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
operator|)
operator|.
name|toString
argument_list|()
operator|+
literal|"\r\n"
operator|+
literal|"To: "
operator|+
name|recipients
operator|+
literal|"\r\n"
operator|+
literal|"From: "
operator|+
name|replyTo
operator|+
literal|"\r\n"
operator|+
literal|"Reply-To: "
operator|+
name|replyTo
operator|+
literal|"\r\n"
operator|+
literal|"Subject: "
operator|+
name|subject
operator|+
literal|"\r\n"
operator|+
literal|"\r\n"
operator|+
name|maildata
operator|+
literal|"\r\n"
expr_stmt|;
name|sendCommand
argument_list|(
name|socketOut
argument_list|,
literal|"DATA"
argument_list|,
name|sessionTrace
argument_list|)
expr_stmt|;
name|readReply
argument_list|(
name|socketIn
argument_list|,
name|sessionTrace
argument_list|)
expr_stmt|;
name|sendCommand
argument_list|(
name|socketOut
argument_list|,
name|maildata
operator|+
literal|"\n."
argument_list|,
name|sessionTrace
argument_list|)
expr_stmt|;
name|readReply
argument_list|(
name|socketIn
argument_list|,
name|sessionTrace
argument_list|)
expr_stmt|;
name|sendCommand
argument_list|(
name|socketOut
argument_list|,
literal|"QUIT"
argument_list|,
name|sessionTrace
argument_list|)
expr_stmt|;
name|readReply
argument_list|(
name|socketIn
argument_list|,
name|sessionTrace
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Sends command to server 	 * @param out Output Stream 	 * @param command Command 	 * @param sessionTrace Stores transcript of conversation with mail server 	 * @throws IOException 	 */
specifier|private
name|void
name|sendCommand
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|String
name|command
parameter_list|,
name|Vector
name|sessionTrace
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBytes
argument_list|(
name|command
operator|+
literal|"\r\n"
argument_list|)
expr_stmt|;
name|sessionTrace
operator|.
name|addElement
argument_list|(
name|command
operator|+
literal|"\r\n"
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Reads server responses to commands 	 * @param reader Object to read response from server 	 * @param sessionTrace Stores transcript of conversation with mail server 	 * @throws IOException 	 */
specifier|private
name|void
name|readReply
parameter_list|(
name|BufferedReader
name|reader
parameter_list|,
name|Vector
name|sessionTrace
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|reply
decl_stmt|;
name|char
name|statusCode
decl_stmt|;
name|reply
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|statusCode
operator|=
name|reply
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sessionTrace
operator|.
name|addElement
argument_list|(
name|reply
operator|+
literal|"\r\n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|statusCode
operator|==
name|SMTP_ERROR_CODE1
operator|)
operator|||
operator|(
name|statusCode
operator|==
name|SMTP_ERROR_CODE2
operator|)
condition|)
throw|throw
operator|(
operator|new
name|IOException
argument_list|(
literal|"SMTP: "
operator|+
name|reply
argument_list|)
operator|)
throw|;
block|}
block|}
end_class

end_unit

