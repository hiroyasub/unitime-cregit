begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_class
specifier|public
class|class
name|MultiComparable
implements|implements
name|Comparable
argument_list|<
name|MultiComparable
argument_list|>
block|{
specifier|private
name|Comparable
index|[]
name|iCmp
decl_stmt|;
specifier|private
name|Comparator
name|iStringCmp
init|=
operator|new
name|NaturalOrderComparator
argument_list|()
decl_stmt|;
specifier|public
name|MultiComparable
parameter_list|(
name|Comparable
index|[]
name|cmp
parameter_list|)
block|{
name|iCmp
operator|=
name|cmp
expr_stmt|;
block|}
specifier|public
name|MultiComparable
parameter_list|(
name|Collection
name|cmp
parameter_list|)
block|{
name|iCmp
operator|=
operator|new
name|Comparable
index|[
name|cmp
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|c
range|:
name|cmp
control|)
name|iCmp
index|[
name|idx
operator|++
index|]
operator|=
operator|(
name|Comparable
operator|)
name|c
expr_stmt|;
block|}
specifier|public
name|MultiComparable
parameter_list|(
name|Comparable
name|a
parameter_list|)
block|{
name|iCmp
operator|=
operator|new
name|Comparable
index|[]
block|{
name|a
block|}
expr_stmt|;
block|}
specifier|public
name|MultiComparable
parameter_list|(
name|Comparable
name|a
parameter_list|,
name|Comparable
name|b
parameter_list|)
block|{
name|iCmp
operator|=
operator|new
name|Comparable
index|[]
block|{
name|a
block|,
name|b
block|}
expr_stmt|;
block|}
specifier|public
name|MultiComparable
parameter_list|(
name|Comparable
name|a
parameter_list|,
name|Comparable
name|b
parameter_list|,
name|Comparable
name|c
parameter_list|)
block|{
name|iCmp
operator|=
operator|new
name|Comparable
index|[]
block|{
name|a
block|,
name|b
block|,
name|c
block|}
expr_stmt|;
block|}
specifier|public
name|MultiComparable
parameter_list|(
name|Comparable
name|a
parameter_list|,
name|Comparable
name|b
parameter_list|,
name|Comparable
name|c
parameter_list|,
name|Comparable
name|d
parameter_list|)
block|{
name|iCmp
operator|=
operator|new
name|Comparable
index|[]
block|{
name|a
block|,
name|b
block|,
name|c
block|,
name|d
block|}
expr_stmt|;
block|}
specifier|public
name|MultiComparable
parameter_list|(
name|Comparable
name|a
parameter_list|,
name|Comparable
name|b
parameter_list|,
name|Comparable
name|c
parameter_list|,
name|Comparable
name|d
parameter_list|,
name|Comparable
name|e
parameter_list|)
block|{
name|iCmp
operator|=
operator|new
name|Comparable
index|[]
block|{
name|a
block|,
name|b
block|,
name|c
block|,
name|d
block|,
name|e
block|}
expr_stmt|;
block|}
specifier|public
name|MultiComparable
parameter_list|(
name|Comparable
name|a
parameter_list|,
name|Comparable
name|b
parameter_list|,
name|Comparable
name|c
parameter_list|,
name|Comparable
name|d
parameter_list|,
name|Comparable
name|e
parameter_list|,
name|Comparable
name|f
parameter_list|)
block|{
name|iCmp
operator|=
operator|new
name|Comparable
index|[]
block|{
name|a
block|,
name|b
block|,
name|c
block|,
name|d
block|,
name|e
block|,
name|f
block|}
expr_stmt|;
block|}
specifier|public
name|MultiComparable
parameter_list|(
name|Comparable
name|a
parameter_list|,
name|Comparable
name|b
parameter_list|,
name|Comparable
name|c
parameter_list|,
name|Comparable
name|d
parameter_list|,
name|Comparable
name|e
parameter_list|,
name|Comparable
name|f
parameter_list|,
name|Comparable
name|g
parameter_list|)
block|{
name|iCmp
operator|=
operator|new
name|Comparable
index|[]
block|{
name|a
block|,
name|b
block|,
name|c
block|,
name|d
block|,
name|e
block|,
name|f
block|,
name|g
block|}
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|MultiComparable
name|mc
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|iCmp
operator|.
name|length
argument_list|,
name|mc
operator|.
name|iCmp
operator|.
name|length
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iCmp
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|mc
operator|.
name|iCmp
index|[
name|i
index|]
operator|==
literal|null
condition|)
continue|continue;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|mc
operator|.
name|iCmp
index|[
name|i
index|]
operator|==
literal|null
condition|)
return|return
literal|1
return|;
name|int
name|cmp
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|iCmp
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
name|iCmp
index|[
name|i
index|]
operator|instanceof
name|String
operator|&&
name|mc
operator|.
name|iCmp
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
name|mc
operator|.
name|iCmp
index|[
name|i
index|]
operator|instanceof
name|String
condition|)
name|cmp
operator|=
name|iStringCmp
operator|.
name|compare
argument_list|(
name|iCmp
index|[
name|i
index|]
argument_list|,
name|mc
operator|.
name|iCmp
index|[
name|i
index|]
argument_list|)
expr_stmt|;
else|else
name|cmp
operator|=
name|iCmp
index|[
name|i
index|]
operator|.
name|compareTo
argument_list|(
name|mc
operator|.
name|iCmp
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|iCmp
operator|.
name|length
operator|>
name|mc
operator|.
name|iCmp
operator|.
name|length
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|iCmp
operator|.
name|length
operator|<
name|mc
operator|.
name|iCmp
operator|.
name|length
condition|)
return|return
operator|-
literal|1
return|;
return|return
literal|0
return|;
block|}
specifier|public
name|Comparable
index|[]
name|getContent
parameter_list|()
block|{
return|return
name|iCmp
return|;
block|}
block|}
end_class

end_unit

