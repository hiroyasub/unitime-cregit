begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * The following class will go through all hbm.xml files and generate (Oracle) SQL commands  * that will double the size of all varchars2. This is needed for Oracle when non-english characters  * are used as these may take up to two spaces each.  *   * @author Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|DoubleVarcharSizes
extends|extends
name|Task
block|{
specifier|private
name|SAXReader
name|iSAXReader
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iSource
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iConfig
init|=
literal|"hibernate.cfg.xml"
decl_stmt|;
specifier|public
name|DoubleVarcharSizes
parameter_list|()
throws|throws
name|DocumentException
throws|,
name|SAXException
block|{
name|iSAXReader
operator|=
operator|new
name|SAXReader
argument_list|()
expr_stmt|;
name|iSAXReader
operator|.
name|setFeature
argument_list|(
literal|"http://apache.org/xml/features/nonvalidating/load-external-dtd"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|iSource
operator|=
name|source
expr_stmt|;
block|}
specifier|public
name|void
name|setConfig
parameter_list|(
name|String
name|config
parameter_list|)
block|{
name|iConfig
operator|=
name|config
expr_stmt|;
block|}
specifier|protected
name|Document
name|read
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
if|if
condition|(
name|iSource
operator|==
literal|null
condition|)
block|{
return|return
name|iSAXReader
operator|.
name|read
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|iSAXReader
operator|.
name|read
argument_list|(
operator|new
name|File
argument_list|(
name|iSource
operator|+
name|File
operator|.
name|separator
operator|+
name|resource
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|protected
name|void
name|pretty
parameter_list|(
name|File
name|f
parameter_list|)
block|{
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
try|try
block|{
name|generate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|message
parameter_list|)
block|{
try|try
block|{
name|log
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|message
parameter_list|)
block|{
try|try
block|{
name|log
argument_list|(
name|message
argument_list|,
name|Project
operator|.
name|MSG_WARN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|generate
parameter_list|()
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|Document
name|document
init|=
name|read
argument_list|(
name|iConfig
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
name|Element
name|sessionFactoryElement
init|=
name|root
operator|.
name|element
argument_list|(
literal|"session-factory"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|sessionFactoryElement
operator|.
name|elementIterator
argument_list|(
literal|"mapping"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|m
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|resource
init|=
name|m
operator|.
name|attributeValue
argument_list|(
literal|"resource"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
continue|continue;
name|generate
argument_list|(
name|read
argument_list|(
name|resource
argument_list|)
operator|.
name|getRootElement
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|generate
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|table
parameter_list|)
block|{
name|table
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"table"
argument_list|,
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
operator|&&
literal|"property"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|column
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|length
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"length"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
literal|"String"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|)
operator|&&
name|length
operator|!=
literal|null
operator|&&
operator|!
name|length
operator|.
name|isEmpty
argument_list|()
operator|&&
name|column
operator|!=
literal|null
operator|&&
operator|!
name|column
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|info
argument_list|(
literal|"alter table "
operator|+
name|table
operator|+
literal|" modify "
operator|+
name|column
operator|+
literal|" varchar2("
operator|+
name|Math
operator|.
name|min
argument_list|(
literal|4000
argument_list|,
literal|2
operator|*
name|size
argument_list|)
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|generate
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|DoubleVarcharSizes
name|dvs
init|=
operator|new
name|DoubleVarcharSizes
argument_list|()
decl_stmt|;
name|dvs
operator|.
name|generate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

