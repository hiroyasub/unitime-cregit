begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_comment
comment|/**  * Creates base model from UniTime3 .hbm.xml files.  * @author Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|CreateBaseModelFromXml
extends|extends
name|Task
block|{
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iParent
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|iIds
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|iClassProperties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|SAXReader
name|iSAXReader
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iSource
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iConfig
init|=
literal|"hibernate.cfg.xml"
decl_stmt|;
specifier|public
name|CreateBaseModelFromXml
parameter_list|()
throws|throws
name|DocumentException
block|{
name|iSAXReader
operator|=
operator|new
name|SAXReader
argument_list|()
expr_stmt|;
name|iSAXReader
operator|.
name|setEntityResolver
argument_list|(
name|iEntityResolver
argument_list|)
expr_stmt|;
block|}
specifier|private
name|EntityResolver
name|iEntityResolver
init|=
operator|new
name|EntityResolver
argument_list|()
block|{
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
block|{
if|if
condition|(
name|publicId
operator|.
name|equals
argument_list|(
literal|"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
argument_list|)
condition|)
block|{
return|return
operator|new
name|InputSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/hibernate/hibernate-mapping-3.0.dtd"
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|publicId
operator|.
name|equals
argument_list|(
literal|"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
argument_list|)
condition|)
block|{
return|return
operator|new
name|InputSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/hibernate/hibernate-configuration-3.0.dtd"
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|void
name|setSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|iSource
operator|=
name|source
expr_stmt|;
block|}
specifier|public
name|void
name|setConfig
parameter_list|(
name|String
name|config
parameter_list|)
block|{
name|iConfig
operator|=
name|config
expr_stmt|;
block|}
specifier|protected
name|Document
name|read
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
if|if
condition|(
name|iSource
operator|==
literal|null
condition|)
block|{
return|return
name|iSAXReader
operator|.
name|read
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|iSAXReader
operator|.
name|read
argument_list|(
operator|new
name|File
argument_list|(
name|iSource
operator|+
name|File
operator|.
name|separator
operator|+
name|resource
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|convert
parameter_list|()
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|info
argument_list|(
literal|"Config: "
operator|+
operator|(
name|iSource
operator|==
literal|null
condition|?
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|iConfig
argument_list|)
else|:
name|iSource
operator|+
name|File
operator|.
name|separator
operator|+
name|iConfig
operator|)
argument_list|)
expr_stmt|;
name|File
name|workDir
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iSource
operator|==
literal|null
condition|)
block|{
name|workDir
operator|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|iConfig
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|workDir
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"WebContent"
operator|.
name|equals
argument_list|(
name|workDir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|workDir
operator|=
name|workDir
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|workDir
operator|=
operator|new
name|File
argument_list|(
name|workDir
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|"JavaSource"
argument_list|)
expr_stmt|;
name|workDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|workDir
operator|=
operator|new
name|File
argument_list|(
name|iSource
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
literal|"Working directory: "
operator|+
name|workDir
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Reading hibernate.cfg.xml ..."
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
name|read
argument_list|(
name|iConfig
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
name|Element
name|sessionFactoryElement
init|=
name|root
operator|.
name|element
argument_list|(
literal|"session-factory"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|sessionFactoryElement
operator|.
name|elementIterator
argument_list|(
literal|"mapping"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|m
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|resource
init|=
name|m
operator|.
name|attributeValue
argument_list|(
literal|"resource"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
continue|continue;
name|info
argument_list|(
literal|"Pre-processing "
operator|+
name|resource
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|Document
name|resDoc
init|=
name|read
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|Element
name|resRoot
init|=
name|resDoc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
name|String
name|pkg
init|=
name|resRoot
operator|.
name|attributeValue
argument_list|(
literal|"package"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|j
init|=
name|resRoot
operator|.
name|elementIterator
argument_list|(
literal|"class"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|classEl
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|preprocess
argument_list|(
name|classEl
argument_list|,
literal|null
argument_list|,
name|pkg
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|sessionFactoryElement
operator|.
name|elementIterator
argument_list|(
literal|"mapping"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|m
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|resource
init|=
name|m
operator|.
name|attributeValue
argument_list|(
literal|"resource"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
continue|continue;
name|info
argument_list|(
literal|"Processing "
operator|+
name|resource
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|Document
name|resDoc
init|=
name|read
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|Element
name|resRoot
init|=
name|resDoc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
name|String
name|pkg
init|=
name|resRoot
operator|.
name|attributeValue
argument_list|(
literal|"package"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|j
init|=
name|resRoot
operator|.
name|elementIterator
argument_list|(
literal|"class"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|classEl
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|importClass
argument_list|(
name|classEl
argument_list|,
name|pkg
argument_list|,
name|workDir
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|info
argument_list|(
literal|"All done."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|preprocess
parameter_list|(
name|Element
name|classEl
parameter_list|,
name|String
name|ext
parameter_list|,
name|String
name|pkg
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|className
init|=
name|fixType
argument_list|(
name|classEl
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|pkg
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
name|className
operator|=
name|className
operator|.
name|substring
argument_list|(
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
condition|)
name|iParent
operator|.
name|put
argument_list|(
name|className
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|Element
name|idEl
init|=
name|classEl
operator|.
name|element
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|idEl
operator|!=
literal|null
condition|)
block|{
name|String
name|type
init|=
name|fixType
argument_list|(
name|idEl
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|pkg
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|fixName
argument_list|(
name|idEl
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
name|iIds
operator|.
name|put
argument_list|(
name|className
argument_list|,
operator|new
name|String
index|[]
block|{
name|type
block|,
name|name
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|classEl
operator|.
name|elementIterator
argument_list|(
literal|"union-subclass"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|preprocess
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|className
argument_list|,
name|pkg
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|classEl
operator|.
name|elementIterator
argument_list|(
literal|"subclass"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|preprocess
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|className
argument_list|,
name|pkg
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* 	@SuppressWarnings("unchecked") 	private String param(Element el, String name) { 		if (el==null) return null; 		for (Iterator<Element> i = el.elementIterator("param"); i.hasNext();) { 			Element p = i.next(); 			if (name.equals(p.attributeValue("name"))) return p.getText(); 		} 		return null; 	} 	*/
specifier|private
name|String
name|fixType
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|pkg
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"java.lang."
argument_list|)
condition|)
return|return
name|type
operator|.
name|substring
argument_list|(
literal|"java.lang."
operator|.
name|length
argument_list|()
argument_list|)
return|;
if|if
condition|(
literal|"byte[]"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
return|return
name|type
return|;
if|if
condition|(
name|type
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|type
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Boolean"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
return|return
name|type
return|;
if|if
condition|(
literal|"Long"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
return|return
name|type
return|;
if|if
condition|(
literal|"Integer"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
return|return
name|type
return|;
if|if
condition|(
literal|"String"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
return|return
name|type
return|;
if|if
condition|(
literal|"Float"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
return|return
name|type
return|;
if|if
condition|(
literal|"Double"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
return|return
name|type
return|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"java.sql.Date"
argument_list|)
condition|)
return|return
literal|"java.util.Date"
return|;
if|if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"java.sql.TimeStamp"
argument_list|)
condition|)
return|return
literal|"java.util.Date"
return|;
if|if
condition|(
name|type
operator|.
name|endsWith
argument_list|(
literal|".XmlBlobType"
argument_list|)
condition|)
return|return
literal|"org.dom4j.Document"
return|;
if|if
condition|(
name|type
operator|.
name|endsWith
argument_list|(
literal|".XmlClobType"
argument_list|)
condition|)
return|return
literal|"org.dom4j.Document"
return|;
if|if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"java."
argument_list|)
condition|)
return|return
name|type
return|;
if|if
condition|(
name|type
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
name|type
operator|=
name|pkg
operator|+
literal|"."
operator|+
name|type
expr_stmt|;
return|return
name|type
return|;
block|}
specifier|private
name|String
name|fixName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/* 	private boolean hasLength(String type) { 		if ("Boolean".equals(type)) return false; 		if ("Long".equals(type)) return false; 		if ("Integer".equals(type)) return false; 		if ("String".equals(type)) return true; 		if ("Float".equals(type)) return false; 		if ("Double".equals(type)) return false; 		if ("Date".equals(type)) return false; 		if ("XmlBlobType".equals(type)) return false; 		if ("XmlClobType".equals(type)) return false; 		warn("Unknown type "+type); 		return false; 	} 	*/
specifier|private
name|File
name|fileFromPackage
parameter_list|(
name|File
name|outputFolder
parameter_list|,
name|String
name|pkg
parameter_list|)
block|{
name|File
name|ret
init|=
operator|new
name|File
argument_list|(
name|outputFolder
argument_list|,
name|pkg
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
argument_list|)
decl_stmt|;
name|ret
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|license
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * Licensed to The Apereo Foundation under one or more contributor license"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * agreements. See the NOTICE file distributed with this work for"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * additional information regarding copyright ownership."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * The Apereo Foundation licenses this file to you under the Apache License,"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * Version 2.0 (the \"License\"); you may not use this file except in"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * compliance with the License. You may obtain a copy of the License at:"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * http://www.apache.org/licenses/LICENSE-2.0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * Unless required by applicable law or agreed to in writing, software"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * distributed under the License is distributed on an \"AS IS\" BASIS,"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * See the License for the specific language governing permissions and"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * limitations under the License."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"*/"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|importClass
parameter_list|(
name|Element
name|classEl
parameter_list|,
name|String
name|pkg
parameter_list|,
name|File
name|outputFolder
parameter_list|,
name|String
name|ext
parameter_list|,
name|String
name|idClass
parameter_list|,
name|String
name|idName
parameter_list|,
name|String
name|idType
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|className
init|=
name|fixType
argument_list|(
name|classEl
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|pkg
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|String
name|table
init|=
name|classEl
operator|.
name|attributeValue
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
name|StringWriter
name|attributes
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pwa
init|=
operator|new
name|PrintWriter
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|StringWriter
name|props
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pwp
init|=
operator|new
name|PrintWriter
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|StringWriter
name|body
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pwb
init|=
operator|new
name|PrintWriter
argument_list|(
name|body
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|imports
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|//imports.add(className);
name|className
operator|=
name|className
operator|.
name|substring
argument_list|(
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
literal|"  "
operator|+
name|className
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|String
index|[]
argument_list|>
name|manyToOnes
init|=
operator|new
name|Vector
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|properties
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|String
index|[]
argument_list|>
name|compositeId
init|=
operator|new
name|Vector
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
comment|/* 		Element discriminator = classEl.element("discriminator"); 		String discriminatorColumn = null; 		if (discriminator!=null) { 			discriminatorColumn = discriminator.attributeValue("column").toLowerCase(); 		} 		*/
name|boolean
name|hasProperty
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|classEl
operator|.
name|elementIterator
argument_list|(
literal|"id"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|fixType
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|pkg
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|imports
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|fixName
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|column
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"column"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|attribute
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|attribute
argument_list|)
condition|)
name|attribute
operator|=
literal|"defaultValue"
expr_stmt|;
name|idName
operator|=
name|name
expr_stmt|;
name|idType
operator|=
name|type
expr_stmt|;
name|pwa
operator|.
name|println
argument_list|(
literal|"	private "
operator|+
name|type
operator|+
literal|" i"
operator|+
name|name
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|pwp
operator|.
name|println
argument_list|(
literal|"	public static String PROP_"
operator|+
name|column
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|" = \""
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|"\";"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|()
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public "
operator|+
name|type
operator|+
literal|" get"
operator|+
name|name
operator|+
literal|"() { return i"
operator|+
name|name
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public void set"
operator|+
name|name
operator|+
literal|"("
operator|+
name|type
operator|+
literal|" "
operator|+
name|attribute
operator|+
literal|") { i"
operator|+
name|name
operator|+
literal|" = "
operator|+
name|attribute
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
name|hasProperty
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|classEl
operator|.
name|elementIterator
argument_list|(
literal|"composite-id"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|cidEl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|j
init|=
name|cidEl
operator|.
name|elementIterator
argument_list|(
literal|"key-many-to-one"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|fixType
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"class"
argument_list|)
argument_list|,
name|pkg
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|imports
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|fixName
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
comment|// String column = el.attributeValue("column").toLowerCase();
name|String
name|attribute
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|attribute
argument_list|)
condition|)
name|attribute
operator|=
literal|"defaultValue"
expr_stmt|;
name|pwa
operator|.
name|println
argument_list|(
literal|"	private "
operator|+
name|type
operator|+
literal|" i"
operator|+
name|name
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|compositeId
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|type
block|,
name|name
block|}
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|()
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public "
operator|+
name|type
operator|+
literal|" get"
operator|+
name|name
operator|+
literal|"() { return i"
operator|+
name|name
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public void set"
operator|+
name|name
operator|+
literal|"("
operator|+
name|type
operator|+
literal|" "
operator|+
name|attribute
operator|+
literal|") { i"
operator|+
name|name
operator|+
literal|" = "
operator|+
name|attribute
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
name|hasProperty
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|j
init|=
name|cidEl
operator|.
name|elementIterator
argument_list|(
literal|"key-property"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|fixType
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|pkg
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|imports
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|fixName
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
comment|// boolean notNul = "true".equals(el.attributeValue("not-null"));
comment|// int length = Integer.parseInt(el.attributeValue("length","0"));
comment|// String column = el.attributeValue("column");
name|String
name|attribute
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|attribute
argument_list|)
condition|)
name|attribute
operator|=
literal|"defaultValue"
expr_stmt|;
name|compositeId
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|type
block|,
name|name
block|}
argument_list|)
expr_stmt|;
name|pwa
operator|.
name|println
argument_list|(
literal|"	private "
operator|+
name|type
operator|+
literal|" i"
operator|+
name|name
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|()
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public "
operator|+
name|type
operator|+
literal|" get"
operator|+
name|name
operator|+
literal|"() { return i"
operator|+
name|name
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public void set"
operator|+
name|name
operator|+
literal|"("
operator|+
name|type
operator|+
literal|" "
operator|+
name|attribute
operator|+
literal|") { i"
operator|+
name|name
operator|+
literal|" = "
operator|+
name|attribute
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
name|hasProperty
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|classEl
operator|.
name|elementIterator
argument_list|(
literal|"property"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|fixType
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|pkg
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|imports
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|fixName
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
comment|// boolean notNul = "true".equals(el.attributeValue("not-null"));
comment|// int length = Integer.parseInt(el.attributeValue("length","0"));
name|String
name|column
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|String
name|formula
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"formula"
argument_list|)
decl_stmt|;
name|String
name|attribute
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|attribute
argument_list|)
condition|)
name|attribute
operator|=
literal|"defaultValue"
expr_stmt|;
if|if
condition|(
name|column
operator|!=
literal|null
condition|)
block|{
name|pwa
operator|.
name|println
argument_list|(
literal|"	private "
operator|+
name|type
operator|+
literal|" i"
operator|+
name|name
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|()
expr_stmt|;
name|pwp
operator|.
name|println
argument_list|(
literal|"	public static String PROP_"
operator|+
name|column
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|" = \""
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|"\";"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Boolean"
argument_list|)
condition|)
name|pwb
operator|.
name|println
argument_list|(
literal|"	public "
operator|+
name|type
operator|+
literal|" is"
operator|+
name|name
operator|+
literal|"() { return i"
operator|+
name|name
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public "
operator|+
name|type
operator|+
literal|" get"
operator|+
name|name
operator|+
literal|"() { return i"
operator|+
name|name
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public void set"
operator|+
name|name
operator|+
literal|"("
operator|+
name|type
operator|+
literal|" "
operator|+
name|attribute
operator|+
literal|") { i"
operator|+
name|name
operator|+
literal|" = "
operator|+
name|attribute
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|formula
operator|!=
literal|null
condition|)
block|{
name|pwa
operator|.
name|println
argument_list|(
literal|"	private "
operator|+
name|type
operator|+
literal|" i"
operator|+
name|name
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Boolean"
argument_list|)
condition|)
name|pwb
operator|.
name|println
argument_list|(
literal|"	public "
operator|+
name|type
operator|+
literal|" is"
operator|+
name|name
operator|+
literal|"() { return i"
operator|+
name|name
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public "
operator|+
name|type
operator|+
literal|" get"
operator|+
name|name
operator|+
literal|"() { return i"
operator|+
name|name
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public void set"
operator|+
name|name
operator|+
literal|"("
operator|+
name|type
operator|+
literal|" "
operator|+
name|attribute
operator|+
literal|") { i"
operator|+
name|name
operator|+
literal|" = "
operator|+
name|attribute
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unknown "
operator|+
name|el
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|el
operator|.
name|asXML
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hasProperty
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|hasProperty
condition|)
name|pwa
operator|.
name|println
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|classEl
operator|.
name|elementIterator
argument_list|(
literal|"many-to-one"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|fixType
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"class"
argument_list|)
argument_list|,
name|pkg
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|imports
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// boolean lazy = "true".equals(el.attributeValue("lazy","false"));
comment|// boolean eager = "false".equals(el.attributeValue("lazy","true"));
name|String
name|name
init|=
name|fixName
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
comment|// boolean notNul = "true".equals(el.attributeValue("not-null"));
name|String
name|column
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|String
name|formula
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"formula"
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|!=
literal|null
condition|)
block|{
name|pwa
operator|.
name|println
argument_list|(
literal|"	private "
operator|+
name|type
operator|+
literal|" i"
operator|+
name|name
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|()
expr_stmt|;
name|manyToOnes
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|type
block|,
name|name
block|}
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public "
operator|+
name|type
operator|+
literal|" get"
operator|+
name|name
operator|+
literal|"() { return i"
operator|+
name|name
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public void set"
operator|+
name|name
operator|+
literal|"("
operator|+
name|type
operator|+
literal|" "
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|") { i"
operator|+
name|name
operator|+
literal|" = "
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|formula
operator|!=
literal|null
condition|)
block|{
name|pwa
operator|.
name|println
argument_list|(
literal|"	private "
operator|+
name|type
operator|+
literal|" i"
operator|+
name|name
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|()
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public "
operator|+
name|type
operator|+
literal|" get"
operator|+
name|name
operator|+
literal|"() { return i"
operator|+
name|name
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public void set"
operator|+
name|name
operator|+
literal|"("
operator|+
name|type
operator|+
literal|" "
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|") { i"
operator|+
name|name
operator|+
literal|" = "
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unknown "
operator|+
name|el
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|el
operator|.
name|asXML
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|classEl
operator|.
name|elementIterator
argument_list|(
literal|"set"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|type
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
name|fixName
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
comment|// boolean lazy = "true".equals(el.attributeValue("lazy","false"));
comment|// boolean eager = "false".equals(el.attributeValue("lazy","true"));
comment|// String cascade = el.attributeValue("cascade");
name|pwb
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|el
operator|.
name|element
argument_list|(
literal|"many-to-many"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// String column = el.element("key").attributeValue("column").toLowerCase();
comment|// String icolumn = el.element("many-to-many").attributeValue("column").toLowerCase();
comment|// String m2mtable = el.attributeValue("table").toLowerCase();
name|type
operator|=
name|fixType
argument_list|(
name|el
operator|.
name|element
argument_list|(
literal|"many-to-many"
argument_list|)
operator|.
name|attributeValue
argument_list|(
literal|"class"
argument_list|)
argument_list|,
name|pkg
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|imports
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|el
operator|.
name|element
argument_list|(
literal|"one-to-many"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// String column = el.element("key").attributeValue("column").toLowerCase();
name|type
operator|=
name|fixType
argument_list|(
name|el
operator|.
name|element
argument_list|(
literal|"one-to-many"
argument_list|)
operator|.
name|attributeValue
argument_list|(
literal|"class"
argument_list|)
argument_list|,
name|pkg
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|imports
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|el
operator|.
name|element
argument_list|(
literal|"element"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|fixType
argument_list|(
name|el
operator|.
name|element
argument_list|(
literal|"element"
argument_list|)
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|pkg
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|imports
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unknown type of set"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
name|imports
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|imports
operator|.
name|add
argument_list|(
literal|"java.util.Set"
argument_list|)
expr_stmt|;
name|imports
operator|.
name|add
argument_list|(
literal|"java.util.HashSet"
argument_list|)
expr_stmt|;
name|pwa
operator|.
name|println
argument_list|(
literal|"	private Set<"
operator|+
name|type
operator|+
literal|"> i"
operator|+
name|name
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public Set<"
operator|+
name|type
operator|+
literal|"> get"
operator|+
name|name
operator|+
literal|"() { return i"
operator|+
name|name
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public void set"
operator|+
name|name
operator|+
literal|"(Set<"
operator|+
name|type
operator|+
literal|"> "
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|") { i"
operator|+
name|name
operator|+
literal|" = "
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	public void addTo"
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|"("
operator|+
name|type
operator|+
literal|" "
operator|+
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|type
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|") {"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"		if (i"
operator|+
name|name
operator|+
literal|" == null) i"
operator|+
name|name
operator|+
literal|" = new HashSet<"
operator|+
name|type
operator|+
literal|">();"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"		i"
operator|+
name|name
operator|+
literal|".add("
operator|+
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|type
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|");"
argument_list|)
expr_stmt|;
name|pwb
operator|.
name|println
argument_list|(
literal|"	}"
argument_list|)
expr_stmt|;
block|}
name|pwa
operator|.
name|flush
argument_list|()
expr_stmt|;
name|pwa
operator|.
name|close
argument_list|()
expr_stmt|;
name|pwb
operator|.
name|flush
argument_list|()
expr_stmt|;
name|pwb
operator|.
name|close
argument_list|()
expr_stmt|;
name|pwp
operator|.
name|flush
argument_list|()
expr_stmt|;
name|pwp
operator|.
name|close
argument_list|()
expr_stmt|;
name|imports
operator|.
name|add
argument_list|(
literal|"java.io.Serializable"
argument_list|)
expr_stmt|;
name|boolean
name|abs
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|classEl
operator|.
name|attributeValue
argument_list|(
literal|"abstract"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|ext
operator|=
name|fixType
argument_list|(
name|ext
argument_list|,
name|pkg
argument_list|)
expr_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
operator|&&
name|ext
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|imports
operator|.
name|add
argument_list|(
name|ext
argument_list|)
expr_stmt|;
name|ext
operator|=
name|ext
operator|.
name|substring
argument_list|(
name|ext
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idName
operator|!=
literal|null
operator|||
operator|!
name|compositeId
operator|.
name|isEmpty
argument_list|()
condition|)
name|imports
operator|.
name|add
argument_list|(
name|fixType
argument_list|(
name|classEl
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|pkg
argument_list|)
argument_list|)
expr_stmt|;
comment|// Base class
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|fileFromPackage
argument_list|(
name|outputFolder
argument_list|,
name|pkg
operator|+
literal|".base"
argument_list|)
argument_list|,
literal|"Base"
operator|+
name|className
operator|+
literal|".java"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|license
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"package "
operator|+
name|pkg
operator|+
literal|".base;"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|String
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|imp
range|:
name|imports
control|)
block|{
name|String
name|top
init|=
name|imp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|imp
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
operator|!
name|last
operator|.
name|equals
argument_list|(
name|top
argument_list|)
condition|)
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"import "
operator|+
name|imp
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|last
operator|=
name|top
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"/**"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * Do not change this class. It has been automatically generated using ant create-model."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * @see org.unitime.commons.ant.CreateBaseModelFromXml"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" */"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"public abstract class Base"
operator|+
name|className
operator|+
operator|(
name|ext
operator|==
literal|null
condition|?
literal|""
else|:
literal|" extends "
operator|+
name|ext
operator|)
operator|+
literal|" implements Serializable {"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	private static final long serialVersionUID = 1L;"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|attributes
operator|.
name|getBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|props
operator|.
name|getBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	public Base"
operator|+
name|className
operator|+
literal|"() {"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		initialize();"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	}"
argument_list|)
expr_stmt|;
if|if
condition|(
name|idName
operator|!=
literal|null
condition|)
block|{
name|String
name|x
init|=
name|idName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|idName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	public Base"
operator|+
name|className
operator|+
literal|"("
operator|+
name|idType
operator|+
literal|" "
operator|+
name|x
operator|+
literal|") {"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		set"
operator|+
name|idName
operator|+
literal|"("
operator|+
name|x
operator|+
literal|");"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		initialize();"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	}"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	protected void initialize() {}"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|body
operator|.
name|getBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|iClassProperties
operator|.
name|put
argument_list|(
name|className
argument_list|,
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
operator|&&
name|iClassProperties
operator|.
name|containsKey
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|properties
operator|.
name|addAll
argument_list|(
name|iClassProperties
operator|.
name|get
argument_list|(
name|ext
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|idClass
operator|==
literal|null
condition|)
name|idClass
operator|=
name|className
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	public boolean equals(Object o) {"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		if (o == null || !(o instanceof "
operator|+
name|className
operator|+
literal|")) return false;"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		if (get"
operator|+
name|idName
operator|+
literal|"() == null || (("
operator|+
name|className
operator|+
literal|")o).get"
operator|+
name|idName
operator|+
literal|"() == null) return false;"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		return get"
operator|+
name|idName
operator|+
literal|"().equals((("
operator|+
name|className
operator|+
literal|")o).get"
operator|+
name|idName
operator|+
literal|"());"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	}"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	public int hashCode() {"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		if (get"
operator|+
name|idName
operator|+
literal|"() == null) return super.hashCode();"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		return get"
operator|+
name|idName
operator|+
literal|"().hashCode();"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	}"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	public String toString() {"
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|contains
argument_list|(
literal|"Name"
argument_list|)
condition|)
name|pw
operator|.
name|println
argument_list|(
literal|"		return \""
operator|+
name|className
operator|+
literal|"[\"+get"
operator|+
name|idName
operator|+
literal|"()+\" \"+getName()+\"]\";"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|properties
operator|.
name|contains
argument_list|(
literal|"Label"
argument_list|)
condition|)
name|pw
operator|.
name|println
argument_list|(
literal|"		return \""
operator|+
name|className
operator|+
literal|"[\"+get"
operator|+
name|idName
operator|+
literal|"()+\" \"+getLabel()+\"]\";"
argument_list|)
expr_stmt|;
else|else
name|pw
operator|.
name|println
argument_list|(
literal|"		return \""
operator|+
name|className
operator|+
literal|"[\"+get"
operator|+
name|idName
operator|+
literal|"()+\"]\";"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	}"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|compositeId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|x
init|=
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|className
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	public boolean equals(Object o) {"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		if (o == null || !(o instanceof "
operator|+
name|className
operator|+
literal|")) return false;"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		"
operator|+
name|className
operator|+
literal|" "
operator|+
name|x
operator|+
literal|" = ("
operator|+
name|className
operator|+
literal|")o;"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
index|[]
name|typeName
range|:
name|compositeId
control|)
block|{
name|String
name|name
init|=
name|typeName
index|[
literal|1
index|]
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		if (get"
operator|+
name|name
operator|+
literal|"() == null || "
operator|+
name|x
operator|+
literal|".get"
operator|+
name|name
operator|+
literal|"() == null || !get"
operator|+
name|name
operator|+
literal|"().equals("
operator|+
name|x
operator|+
literal|".get"
operator|+
name|name
operator|+
literal|"())) return false;"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
literal|"		return true;"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	}"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	public int hashCode() {"
argument_list|)
expr_stmt|;
name|String
name|xor
init|=
literal|""
decl_stmt|,
name|isNull
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
index|[]
name|typeName
range|:
name|compositeId
control|)
block|{
name|String
name|name
init|=
name|typeName
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|xor
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xor
operator|+=
literal|" ^ "
expr_stmt|;
name|isNull
operator|+=
literal|" || "
expr_stmt|;
block|}
name|xor
operator|+=
literal|"get"
operator|+
name|name
operator|+
literal|"().hashCode()"
expr_stmt|;
name|isNull
operator|+=
literal|"get"
operator|+
name|name
operator|+
literal|"() == null"
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
literal|"		if ("
operator|+
name|isNull
operator|+
literal|") return super.hashCode();"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		return "
operator|+
name|xor
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	}"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	public String toString() {"
argument_list|)
expr_stmt|;
name|String
name|names
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
index|[]
name|typeName
range|:
name|compositeId
control|)
block|{
name|String
name|name
init|=
name|typeName
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
name|names
operator|+=
literal|" + \", \" + "
expr_stmt|;
name|names
operator|+=
literal|"get"
operator|+
name|name
operator|+
literal|"()"
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
literal|"		return \""
operator|+
name|className
operator|+
literal|"[\" + "
operator|+
name|names
operator|+
literal|" + \"]\";"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	}"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	public String toDebugString() {"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		return \""
operator|+
name|className
operator|+
literal|"[\" +"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|properties
control|)
name|pw
operator|.
name|println
argument_list|(
literal|"			\"\\n	"
operator|+
name|p
operator|+
literal|": \" + get"
operator|+
name|p
operator|+
literal|"() +"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"			\"]\";"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	}"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|classEl
operator|.
name|elementIterator
argument_list|(
literal|"union-subclass"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|importClass
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|pkg
argument_list|,
name|outputFolder
argument_list|,
name|className
argument_list|,
name|idClass
argument_list|,
name|idName
argument_list|,
name|idType
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|classEl
operator|.
name|elementIterator
argument_list|(
literal|"subclass"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|importClass
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|pkg
argument_list|,
name|outputFolder
argument_list|,
name|className
argument_list|,
name|idClass
argument_list|,
name|idName
argument_list|,
name|idType
argument_list|)
expr_stmt|;
block|}
comment|// Main class
name|File
name|mainFile
init|=
operator|new
name|File
argument_list|(
name|fileFromPackage
argument_list|(
name|outputFolder
argument_list|,
name|pkg
argument_list|)
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mainFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|mainFile
argument_list|)
argument_list|)
expr_stmt|;
name|license
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"package "
operator|+
name|pkg
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"import "
operator|+
name|pkg
operator|+
literal|".base.Base"
operator|+
name|className
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"public"
operator|+
operator|(
name|abs
condition|?
literal|" abstract"
else|:
literal|""
operator|)
operator|+
literal|" class "
operator|+
name|className
operator|+
literal|" extends Base"
operator|+
name|className
operator|+
literal|" {"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	public "
operator|+
name|className
operator|+
literal|"() {"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		super();"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	}"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// BASE DAO class
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|fileFromPackage
argument_list|(
name|outputFolder
argument_list|,
name|pkg
operator|+
literal|".base"
argument_list|)
argument_list|,
literal|"Base"
operator|+
name|className
operator|+
literal|"DAO.java"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|license
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"package "
operator|+
name|pkg
operator|+
literal|".base;"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|idType
operator|==
literal|null
condition|)
name|pw
operator|.
name|println
argument_list|(
literal|"import java.io.Serializable;"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|manyToOnes
operator|.
name|isEmpty
argument_list|()
condition|)
name|pw
operator|.
name|println
argument_list|(
literal|"import java.util.List;"
argument_list|)
expr_stmt|;
if|if
condition|(
name|idType
operator|==
literal|null
operator|||
operator|!
name|manyToOnes
operator|.
name|isEmpty
argument_list|()
condition|)
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
comment|// pw.println("import org.hibernate.Hibernate;");
comment|// pw.println("import org.hibernate.criterion.Order;");
comment|// pw.println();
name|pw
operator|.
name|println
argument_list|(
literal|"import "
operator|+
name|pkg
operator|+
literal|"."
operator|+
name|className
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"import "
operator|+
name|pkg
operator|+
literal|".dao._RootDAO;"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"import "
operator|+
name|pkg
operator|+
literal|".dao."
operator|+
name|className
operator|+
literal|"DAO;"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"/**"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * Do not change this class. It has been automatically generated using ant create-model."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" * @see org.unitime.commons.ant.CreateBaseModelFromXml"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" */"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"public abstract class Base"
operator|+
name|className
operator|+
literal|"DAO"
operator|+
literal|" extends _RootDAO<"
operator|+
name|className
operator|+
literal|","
operator|+
operator|(
name|idType
operator|==
literal|null
condition|?
literal|"Serializable"
else|:
name|idType
operator|)
operator|+
literal|"> {"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	private static "
operator|+
name|className
operator|+
literal|"DAO sInstance;"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	public static "
operator|+
name|className
operator|+
literal|"DAO getInstance() {"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		if (sInstance == null) sInstance = new "
operator|+
name|className
operator|+
literal|"DAO();"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		return sInstance;"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	}"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	public Class<"
operator|+
name|className
operator|+
literal|"> getReferenceClass() {"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		return "
operator|+
name|className
operator|+
literal|".class;"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	}"
argument_list|)
expr_stmt|;
comment|/* 		pw.println(); 		pw.println("	public Order getDefaultOrder () {"); 		pw.println("		return null;"); 		pw.println("	}"); 		String y = className.substring(0,1).toLowerCase()+className.substring(1); 		if (idName!=null) { 			String x = idName.substring(0,1).toLowerCase()+idName.substring(1); 			pw.println(); 			pw.println("	public "+className+" get("+idType+" "+x+") {"); 			pw.println("		return ("+className+") get(getReferenceClass(), "+x+");"); 			pw.println("	}"); 			pw.println(); 			pw.println("	public "+className+" get("+idType+" "+x+", org.hibernate.Session hibSession) {"); 			pw.println("		return ("+className+") get(getReferenceClass(), "+x+", hibSession);"); 			pw.println("	}"); 			pw.println(); 			pw.println("	public "+className+" load("+idType+" "+x+") {"); 			pw.println("		return ("+className+") load(getReferenceClass(), "+x+");"); 			pw.println("	}"); 			pw.println(); 			pw.println("	public "+className+" load("+idType+" "+x+", org.hibernate.Session hibSession) {"); 			pw.println("		return ("+className+") load(getReferenceClass(), "+x+", hibSession);"); 			pw.println("	}"); 			pw.println(); 			pw.println("	public "+className+" loadInitialize("+idType+" "+x+", org.hibernate.Session hibSession) {"); 			pw.println("		"+className+" "+y+" = load("+x+", hibSession);"); 			pw.println("		if (!Hibernate.isInitialized("+y+")) Hibernate.initialize("+y+");"); 			pw.println("		return "+y+";"); 			pw.println("	}"); 		} else { 			if (idClass==null) idClass = className; 			String x = "key"; 			pw.println(); 			pw.println("	public "+className+" get("+idClass+" "+x+") {"); 			pw.println("		return ("+className+") get(getReferenceClass(), "+x+");"); 			pw.println("	}"); 			pw.println(); 			pw.println("	public "+className+" get("+idClass+" "+x+", org.hibernate.Session hibSession) {"); 			pw.println("		return ("+className+") get(getReferenceClass(), "+x+", hibSession);"); 			pw.println("	}"); 			pw.println(); 			pw.println("	public "+className+" load("+idClass+" "+x+") {"); 			pw.println("		return ("+className+") load(getReferenceClass(), "+x+");"); 			pw.println("	}"); 			pw.println(); 			pw.println("	public "+className+" load("+idClass+" "+x+", org.hibernate.Session hibSession) {"); 			pw.println("		return ("+className+") load(getReferenceClass(), "+x+", hibSession);"); 			pw.println("	}"); 			pw.println(); 			pw.println("	public "+className+" loadInitialize("+idClass+" "+x+", org.hibernate.Session hibSession) {"); 			pw.println("		"+className+" "+y+" = load("+x+", hibSession);"); 			pw.println("		if (!Hibernate.isInitialized("+y+")) Hibernate.initialize("+y+");"); 			pw.println("		return "+y+";"); 			pw.println("	}"); 		} 		pw.println(); 		pw.println("	public void save("+className+" "+y+") {"); 		pw.println("		save((Object) "+y+");"); 		pw.println("	}"); 		pw.println(); 		pw.println("	public void save("+className+" "+y+", org.hibernate.Session hibSession) {"); 		pw.println("		save((Object) "+y+", hibSession);"); 		pw.println("	}"); 		pw.println(); 		pw.println("	public void saveOrUpdate("+className+" "+y+") {"); 		pw.println("		saveOrUpdate((Object) "+y+");"); 		pw.println("	}"); 		pw.println(); 		pw.println("	public void saveOrUpdate("+className+" "+y+", org.hibernate.Session hibSession) {"); 		pw.println("		saveOrUpdate((Object) "+y+", hibSession);"); 		pw.println("	}"); 		pw.println(); 		pw.println(); 		pw.println("	public void update("+className+" "+y+") {"); 		pw.println("		update((Object) "+y+");"); 		pw.println("	}"); 		pw.println(); 		pw.println("	public void update("+className+" "+y+", org.hibernate.Session hibSession) {"); 		pw.println("		update((Object) "+y+", hibSession);"); 		pw.println("	}"); 		pw.println(); 		if (idName!=null) { 			if (idClass==null) idClass = className; 			String x = idName.substring(0,1).toLowerCase()+idName.substring(1); 			if (idType.equals("String")) { 				pw.println("	public void delete(Object "+x+") {"); 				pw.println("		if ("+x+" instanceof String)"); 				pw.println("			delete((Object) load((String)"+x+"));"); 				pw.println("		else"); 				pw.println("		super.delete("+x+");"); 				pw.println("	}"); 				pw.println(); 				pw.println("	public void delete(Object "+x+", org.hibernate.Session hibSession) {"); 				pw.println("		if ("+x+" instanceof String)"); 				pw.println("			delete((Object) load((String)"+x+", hibSession), hibSession);"); 				pw.println("		else"); 				pw.println("			super.delete("+x+", hibSession);"); 				pw.println("	}"); 			} else { 				pw.println("	public void delete("+idType+" "+x+") {"); 				pw.println("		delete(load("+x+"));"); 				pw.println("	}"); 				pw.println(); 				pw.println("	public void delete("+idType+" "+x+", org.hibernate.Session hibSession) {"); 				pw.println("		delete(load("+x+", hibSession), hibSession);"); 				pw.println("	}"); 			} 		} 		pw.println(); 		pw.println("	public void delete("+className+" "+y+") {"); 		pw.println("		delete((Object) "+y+");"); 		pw.println("	}"); 		pw.println(); 		pw.println("	public void delete("+className+" "+y+", org.hibernate.Session hibSession) {"); 		pw.println("		delete((Object) "+y+", hibSession);"); 		pw.println("	}"); 		pw.println(); 		pw.println("	public void refresh("+className+" "+y+", org.hibernate.Session hibSession) {"); 		pw.println("		refresh((Object) "+y+", hibSession);"); 		pw.println("	}"); 		if (!abs) { 			pw.println(); 			pw.println("	@SuppressWarnings(\"unchecked\")"); 			pw.println("	public List<"+className+"> findAll(org.hibernate.Session hibSession) {"); 			pw.println("		return hibSession.createQuery(\"from "+className+"\").list();"); 			pw.println("	}"); 		} 		*/
comment|/* 		if (idType != null&& idName != null) { 			String x = idName.substring(0,1).toLowerCase()+idName.substring(1); 			pw.println(); 			pw.println("	public void delete("+idType+" "+x+") {"); 			pw.println("		delete(load("+x+"));"); 			pw.println("	}"); 			pw.println(); 			pw.println("	public void delete("+idType+" "+x+", org.hibernate.Session hibSession) {"); 			pw.println("		delete(load("+x+", hibSession), hibSession);"); 			pw.println("	}"); 		} 		*/
for|for
control|(
name|String
index|[]
name|attr
range|:
name|manyToOnes
control|)
block|{
name|String
name|type
init|=
name|attr
index|[
literal|0
index|]
decl_stmt|;
name|String
name|name
init|=
name|attr
index|[
literal|1
index|]
decl_stmt|;
name|String
name|x
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|id
init|=
name|iIds
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|String
name|iType
init|=
literal|"Long"
decl_stmt|;
name|String
name|iName
init|=
literal|"UniqueId"
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|iType
operator|=
name|id
index|[
literal|0
index|]
expr_stmt|;
name|iName
operator|=
name|id
index|[
literal|1
index|]
expr_stmt|;
block|}
comment|/* 			pw.println(); 			pw.println("	public List<"+className+"> findBy"+name+"(org.hibernate.Session hibSession, "+type+" "+x+") {"); 			pw.println("		return hibSession.createQuery(\"from "+className+" x where x."+x+"."+iName.substring(0,1).toLowerCase()+iName.substring(1)+" = :"+x+"Id\").set"+iType+"(\""+x+"Id\", "+x+".get"+iName+"()).list();"); 			pw.println("	}"); 			*/
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	@SuppressWarnings(\"unchecked\")"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	public List<"
operator|+
name|className
operator|+
literal|"> findBy"
operator|+
name|name
operator|+
literal|"(org.hibernate.Session hibSession, "
operator|+
name|iType
operator|+
literal|" "
operator|+
name|x
operator|+
literal|"Id) {"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"		return hibSession.createQuery(\"from "
operator|+
name|className
operator|+
literal|" x where x."
operator|+
name|x
operator|+
literal|"."
operator|+
name|iName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|iName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|" = :"
operator|+
name|x
operator|+
literal|"Id\").set"
operator|+
name|iType
operator|+
literal|"(\""
operator|+
name|x
operator|+
literal|"Id\", "
operator|+
name|x
operator|+
literal|"Id).list();"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	}"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// DAO class
name|File
name|daoFile
init|=
operator|new
name|File
argument_list|(
name|fileFromPackage
argument_list|(
name|outputFolder
argument_list|,
name|pkg
operator|+
literal|".dao"
argument_list|)
argument_list|,
name|className
operator|+
literal|"DAO.java"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|daoFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|daoFile
argument_list|)
argument_list|)
expr_stmt|;
name|license
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"package "
operator|+
name|pkg
operator|+
literal|".dao;"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"import "
operator|+
name|pkg
operator|+
literal|".base.Base"
operator|+
name|className
operator|+
literal|"DAO;"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"public"
operator|+
operator|(
name|abs
condition|?
literal|" abstract"
else|:
literal|""
operator|)
operator|+
literal|" class "
operator|+
name|className
operator|+
literal|"DAO extends Base"
operator|+
name|className
operator|+
literal|"DAO {"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"	public "
operator|+
name|className
operator|+
literal|"DAO() {}"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
try|try
block|{
name|convert
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|message
parameter_list|)
block|{
try|try
block|{
name|log
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|message
parameter_list|)
block|{
try|try
block|{
name|log
argument_list|(
name|message
argument_list|,
name|Project
operator|.
name|MSG_WARN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
operator|new
name|CreateBaseModelFromXml
argument_list|()
operator|.
name|convert
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

