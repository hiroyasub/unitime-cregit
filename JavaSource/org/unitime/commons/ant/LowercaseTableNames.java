begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Lower case table, column and sequence names, and foreign keys in .hbm.xml files.  * This should negate the need to set MySQL to case insensitive mode on Linux based systems.  *   * @author Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|LowercaseTableNames
extends|extends
name|Task
block|{
specifier|private
name|SAXReader
name|iSAXReader
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iSource
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iConfig
init|=
literal|"hibernate.cfg.xml"
decl_stmt|;
specifier|public
name|LowercaseTableNames
parameter_list|()
throws|throws
name|DocumentException
throws|,
name|SAXException
block|{
name|iSAXReader
operator|=
operator|new
name|SAXReader
argument_list|()
expr_stmt|;
name|iSAXReader
operator|.
name|setEntityResolver
argument_list|(
name|iEntityResolver
argument_list|)
expr_stmt|;
name|iSAXReader
operator|.
name|setFeature
argument_list|(
literal|"http://apache.org/xml/features/nonvalidating/load-external-dtd"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|EntityResolver
name|iEntityResolver
init|=
operator|new
name|EntityResolver
argument_list|()
block|{
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
block|{
if|if
condition|(
name|publicId
operator|.
name|equals
argument_list|(
literal|"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
argument_list|)
condition|)
block|{
return|return
operator|new
name|InputSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/hibernate/hibernate-mapping-3.0.dtd"
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|publicId
operator|.
name|equals
argument_list|(
literal|"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
argument_list|)
condition|)
block|{
return|return
operator|new
name|InputSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/hibernate/hibernate-configuration-3.0.dtd"
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|void
name|setSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|iSource
operator|=
name|source
expr_stmt|;
block|}
specifier|public
name|void
name|setConfig
parameter_list|(
name|String
name|config
parameter_list|)
block|{
name|iConfig
operator|=
name|config
expr_stmt|;
block|}
specifier|protected
name|Document
name|read
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
if|if
condition|(
name|iSource
operator|==
literal|null
condition|)
block|{
name|info
argument_list|(
literal|"  -- reading "
operator|+
name|resource
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
return|return
name|iSAXReader
operator|.
name|read
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|info
argument_list|(
literal|"  -- reading "
operator|+
name|iSource
operator|+
name|File
operator|.
name|separator
operator|+
name|resource
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
return|return
name|iSAXReader
operator|.
name|read
argument_list|(
operator|new
name|File
argument_list|(
name|iSource
operator|+
name|File
operator|.
name|separator
operator|+
name|resource
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|protected
name|void
name|write
parameter_list|(
name|String
name|resource
parameter_list|,
name|Document
name|document
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|File
name|file
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iSource
operator|==
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|resource
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|iSource
operator|+
name|File
operator|.
name|separator
operator|+
name|resource
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
literal|"  -- writing "
operator|+
name|file
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|OutputFormat
name|format
init|=
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
decl_stmt|;
name|format
operator|.
name|setIndentSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|format
operator|.
name|setPadText
argument_list|(
literal|false
argument_list|)
expr_stmt|;
operator|new
name|MyXMLWriter
argument_list|(
name|fos
argument_list|,
name|format
argument_list|)
operator|.
name|write
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|pretty
parameter_list|(
name|File
name|f
parameter_list|)
block|{
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
try|try
block|{
name|convert
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|message
parameter_list|)
block|{
try|try
block|{
name|log
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|message
parameter_list|)
block|{
try|try
block|{
name|log
argument_list|(
name|message
argument_list|,
name|Project
operator|.
name|MSG_WARN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|convert
parameter_list|()
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|info
argument_list|(
literal|"Config: "
operator|+
operator|(
name|iSource
operator|==
literal|null
condition|?
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|iConfig
argument_list|)
else|:
name|iSource
operator|+
name|File
operator|.
name|separator
operator|+
name|iConfig
operator|)
argument_list|)
expr_stmt|;
name|File
name|workDir
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iSource
operator|==
literal|null
condition|)
block|{
name|workDir
operator|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|iConfig
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|workDir
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"WebContent"
operator|.
name|equals
argument_list|(
name|workDir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|workDir
operator|=
name|workDir
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|workDir
operator|=
operator|new
name|File
argument_list|(
name|workDir
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|"JavaSource"
argument_list|)
expr_stmt|;
name|workDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|workDir
operator|=
operator|new
name|File
argument_list|(
name|iSource
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
literal|"Working directory: "
operator|+
name|workDir
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Reading hibernate.cfg.xml ..."
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
name|read
argument_list|(
name|iConfig
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
name|Element
name|sessionFactoryElement
init|=
name|root
operator|.
name|element
argument_list|(
literal|"session-factory"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|sessionFactoryElement
operator|.
name|elementIterator
argument_list|(
literal|"mapping"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|m
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|resource
init|=
name|m
operator|.
name|attributeValue
argument_list|(
literal|"resource"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
continue|continue;
name|info
argument_list|(
literal|"Processing "
operator|+
name|resource
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|Document
name|resDoc
init|=
name|read
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|convert
argument_list|(
name|resDoc
operator|.
name|getRootElement
argument_list|()
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|resource
argument_list|,
name|resDoc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
index|[]
name|sAttributes
init|=
operator|new
name|String
index|[]
block|{
literal|"table"
block|,
literal|"sequence"
block|,
literal|"column"
block|,
literal|"foreign-key"
block|,
literal|"order-by"
block|}
decl_stmt|;
specifier|private
name|String
index|[]
name|sFormulas
init|=
operator|new
name|String
index|[]
block|{
literal|"formula"
block|,
literal|"where"
block|}
decl_stmt|;
specifier|private
name|String
name|lowerFormula
parameter_list|(
name|String
name|formula
parameter_list|)
block|{
name|boolean
name|quot
init|=
literal|false
decl_stmt|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|formula
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|formula
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'\''
condition|)
name|quot
operator|=
operator|!
name|quot
expr_stmt|;
name|ret
operator|+=
operator|(
name|quot
condition|?
name|ch
else|:
name|Character
operator|.
name|toLowerCase
argument_list|(
name|ch
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|replace
argument_list|(
literal|"%schema%"
argument_list|,
literal|"%SCHEMA%"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"/*+ rule */"
argument_list|,
literal|"/*+ RULE */"
argument_list|)
return|;
block|}
specifier|private
name|void
name|convert
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Attribute
argument_list|>
name|i
init|=
name|element
operator|.
name|attributeIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Attribute
name|attribute
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|sAttributes
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|info
argument_list|(
literal|"  -- converting "
operator|+
name|name
operator|+
literal|" "
operator|+
name|attribute
operator|.
name|getValue
argument_list|()
operator|+
literal|" to "
operator|+
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|attribute
operator|.
name|setValue
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|name
range|:
name|sFormulas
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|lowerFormula
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|info
argument_list|(
literal|"  -- converting "
operator|+
name|name
operator|+
literal|": "
operator|+
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"  -- into : "
operator|+
name|lowerFormula
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|attribute
operator|.
name|setValue
argument_list|(
name|lowerFormula
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|element
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"param"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|sAttributes
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|,
literal|""
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|element
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|info
argument_list|(
literal|"  -- converting "
operator|+
name|name
operator|+
literal|" "
operator|+
name|element
operator|.
name|getText
argument_list|()
operator|+
literal|" to "
operator|+
name|element
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|element
operator|.
name|setText
argument_list|(
name|element
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|convert
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|LowercaseTableNames
name|ltn
init|=
operator|new
name|LowercaseTableNames
argument_list|()
decl_stmt|;
name|ltn
operator|.
name|setSource
argument_list|(
literal|"/Users/muller/Sources/UniTime/JavaSource"
argument_list|)
expr_stmt|;
name|ltn
operator|.
name|convert
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|MyXMLWriter
extends|extends
name|XMLWriter
block|{
specifier|private
name|OutputFormat
name|format
decl_stmt|;
specifier|private
name|int
name|indentLevel
init|=
literal|0
decl_stmt|;
specifier|public
name|MyXMLWriter
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|OutputFormat
name|format
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|super
argument_list|(
name|out
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
block|}
specifier|protected
name|void
name|indent
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|indent
init|=
name|format
operator|.
name|getIndent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|indent
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|indent
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indentLevel
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|indent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|writeAttributes
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|element
operator|.
name|attributeCount
argument_list|()
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Attribute
name|attribute
init|=
name|element
operator|.
name|attribute
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|char
name|quote
init|=
name|format
operator|.
name|getAttributeQuoteCharacter
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|attributeCount
argument_list|()
operator|>
literal|2
condition|)
block|{
name|writePrintln
argument_list|()
expr_stmt|;
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|format
operator|.
name|getIndent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|attribute
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|quote
argument_list|)
expr_stmt|;
name|writeEscapeAttributeEntities
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|quote
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|writeElement
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|element
operator|.
name|nodeCount
argument_list|()
decl_stmt|;
name|String
name|qualifiedName
init|=
name|element
operator|.
name|getQualifiedName
argument_list|()
decl_stmt|;
name|writePrintln
argument_list|()
expr_stmt|;
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|qualifiedName
argument_list|)
expr_stmt|;
name|boolean
name|textOnly
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|element
operator|.
name|node
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
block|{
name|textOnly
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|node
operator|instanceof
name|Comment
condition|)
block|{
name|textOnly
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|writeAttributes
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|lastOutputNodeType
operator|=
name|Node
operator|.
name|ELEMENT_NODE
expr_stmt|;
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
block|{
name|writeEmptyElementClose
argument_list|(
name|qualifiedName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|textOnly
condition|)
block|{
comment|// we have at least one text node so lets assume
comment|// that its non-empty
name|writeElementContent
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|element
operator|.
name|attributeCount
argument_list|()
operator|>
literal|3
condition|)
name|writePrintln
argument_list|()
expr_stmt|;
comment|// we know it's not null or empty from above
operator|++
name|indentLevel
expr_stmt|;
name|writeElementContent
argument_list|(
name|element
argument_list|)
expr_stmt|;
operator|--
name|indentLevel
expr_stmt|;
name|writePrintln
argument_list|()
expr_stmt|;
name|indent
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|qualifiedName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|element
operator|.
name|attributeCount
argument_list|()
operator|>
literal|2
operator|&&
name|indentLevel
operator|>
literal|0
condition|)
name|writePrintln
argument_list|()
expr_stmt|;
name|lastOutputNodeType
operator|=
name|Node
operator|.
name|ELEMENT_NODE
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

