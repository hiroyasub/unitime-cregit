begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|CompositeName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|CompoundName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InvalidNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NameAlreadyBoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NameClassPair
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NameNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NameParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NotContextException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|OperationNotSupportedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|spi
operator|.
name|InitialContextFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|spi
operator|.
name|InitialContextFactoryBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|spi
operator|.
name|NamingManager
import|;
end_import

begin_comment
comment|/**  * Inspired by the sample service provider that implements a hierarchical namespace in memory:  * http://docs.oracle.com/javase/jndi/tutorial/provider/basics/names.html  */
end_comment

begin_class
specifier|public
class|class
name|LocalContext
implements|implements
name|Context
implements|,
name|NameParser
implements|,
name|InitialContextFactory
implements|,
name|InitialContextFactoryBuilder
block|{
specifier|protected
name|Hashtable
name|iEnv
decl_stmt|;
specifier|protected
name|Hashtable
name|iBindings
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|protected
name|LocalContext
name|iParent
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|iName
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Properties
name|sSyntax
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|sSyntax
operator|.
name|put
argument_list|(
literal|"jndi.syntax.direction"
argument_list|,
literal|"right_to_left"
argument_list|)
expr_stmt|;
name|sSyntax
operator|.
name|put
argument_list|(
literal|"jndi.syntax.separator"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|sSyntax
operator|.
name|put
argument_list|(
literal|"jndi.syntax.ignorecase"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|sSyntax
operator|.
name|put
argument_list|(
literal|"jndi.syntax.escape"
argument_list|,
literal|"\\"
argument_list|)
expr_stmt|;
name|sSyntax
operator|.
name|put
argument_list|(
literal|"jndi.syntax.beginquote"
argument_list|,
literal|"'"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LocalContext
parameter_list|(
name|Hashtable
name|env
parameter_list|)
block|{
name|iEnv
operator|=
operator|(
name|env
operator|!=
literal|null
condition|?
operator|(
name|Hashtable
operator|)
name|env
operator|.
name|clone
argument_list|()
else|:
literal|null
operator|)
expr_stmt|;
block|}
specifier|protected
name|LocalContext
parameter_list|(
name|LocalContext
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|Hashtable
name|env
parameter_list|,
name|Hashtable
name|bindings
parameter_list|)
block|{
name|this
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|iParent
operator|=
name|parent
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iBindings
operator|=
operator|(
name|Hashtable
operator|)
name|bindings
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Context
name|createCtx
parameter_list|(
name|LocalContext
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|Hashtable
name|env
parameter_list|)
block|{
return|return
operator|new
name|LocalContext
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|env
argument_list|,
operator|new
name|Hashtable
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|Context
name|cloneCtx
parameter_list|()
block|{
return|return
operator|new
name|LocalContext
argument_list|(
name|iParent
argument_list|,
name|iName
argument_list|,
name|iEnv
argument_list|,
name|iBindings
argument_list|)
return|;
block|}
specifier|protected
name|Name
name|getMyComponents
parameter_list|(
name|Name
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
name|name
operator|instanceof
name|CompositeName
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
throw|throw
operator|new
name|InvalidNameException
argument_list|(
name|name
operator|.
name|toString
argument_list|()
operator|+
literal|" has more components than namespace can handle"
argument_list|)
throw|;
return|return
name|parse
argument_list|(
name|name
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|name
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|lookup
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
return|return
name|lookup
argument_list|(
operator|new
name|CompositeName
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|lookup
parameter_list|(
name|Name
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|cloneCtx
argument_list|()
return|;
name|Name
name|nm
init|=
name|getMyComponents
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|atom
init|=
name|nm
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|inter
init|=
name|iBindings
operator|.
name|get
argument_list|(
name|atom
argument_list|)
decl_stmt|;
if|if
condition|(
name|nm
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|inter
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NameNotFoundException
argument_list|(
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
try|try
block|{
return|return
name|NamingManager
operator|.
name|getObjectInstance
argument_list|(
name|inter
argument_list|,
operator|new
name|CompositeName
argument_list|()
operator|.
name|add
argument_list|(
name|atom
argument_list|)
argument_list|,
name|this
argument_list|,
name|iEnv
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|NamingException
name|ne
init|=
operator|new
name|NamingException
argument_list|(
literal|"getObjectInstance failed"
argument_list|)
decl_stmt|;
name|ne
operator|.
name|setRootCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ne
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|inter
operator|instanceof
name|Context
operator|)
condition|)
throw|throw
operator|new
name|NotContextException
argument_list|(
name|atom
operator|+
literal|" does not name a context"
argument_list|)
throw|;
return|return
operator|(
operator|(
name|Context
operator|)
name|inter
operator|)
operator|.
name|lookup
argument_list|(
name|nm
operator|.
name|getSuffix
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|bind
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|obj
parameter_list|)
throws|throws
name|NamingException
block|{
name|bind
argument_list|(
operator|new
name|CompositeName
argument_list|(
name|name
argument_list|)
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bind
parameter_list|(
name|Name
name|name
parameter_list|,
name|Object
name|obj
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidNameException
argument_list|(
literal|"Cannot bind empty name"
argument_list|)
throw|;
block|}
name|Name
name|nm
init|=
name|getMyComponents
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|atom
init|=
name|nm
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|inter
init|=
name|iBindings
operator|.
name|get
argument_list|(
name|atom
argument_list|)
decl_stmt|;
if|if
condition|(
name|nm
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|inter
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|NameAlreadyBoundException
argument_list|(
literal|"Use rebind to override"
argument_list|)
throw|;
name|obj
operator|=
name|NamingManager
operator|.
name|getStateToBind
argument_list|(
name|obj
argument_list|,
operator|new
name|CompositeName
argument_list|()
operator|.
name|add
argument_list|(
name|atom
argument_list|)
argument_list|,
name|this
argument_list|,
name|iEnv
argument_list|)
expr_stmt|;
name|iBindings
operator|.
name|put
argument_list|(
name|atom
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|inter
operator|instanceof
name|Context
operator|)
condition|)
throw|throw
operator|new
name|NotContextException
argument_list|(
name|atom
operator|+
literal|" does not name a context"
argument_list|)
throw|;
operator|(
operator|(
name|Context
operator|)
name|inter
operator|)
operator|.
name|bind
argument_list|(
name|nm
operator|.
name|getSuffix
argument_list|(
literal|1
argument_list|)
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|rebind
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|obj
parameter_list|)
throws|throws
name|NamingException
block|{
name|rebind
argument_list|(
operator|new
name|CompositeName
argument_list|(
name|name
argument_list|)
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rebind
parameter_list|(
name|Name
name|name
parameter_list|,
name|Object
name|obj
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|InvalidNameException
argument_list|(
literal|"Cannot bind empty name"
argument_list|)
throw|;
name|Name
name|nm
init|=
name|getMyComponents
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|atom
init|=
name|nm
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|nm
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|obj
operator|=
name|NamingManager
operator|.
name|getStateToBind
argument_list|(
name|obj
argument_list|,
operator|new
name|CompositeName
argument_list|()
operator|.
name|add
argument_list|(
name|atom
argument_list|)
argument_list|,
name|this
argument_list|,
name|iEnv
argument_list|)
expr_stmt|;
name|iBindings
operator|.
name|put
argument_list|(
name|atom
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|inter
init|=
name|iBindings
operator|.
name|get
argument_list|(
name|atom
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|inter
operator|instanceof
name|Context
operator|)
condition|)
throw|throw
operator|new
name|NotContextException
argument_list|(
name|atom
operator|+
literal|" does not name a context"
argument_list|)
throw|;
operator|(
operator|(
name|Context
operator|)
name|inter
operator|)
operator|.
name|rebind
argument_list|(
name|nm
operator|.
name|getSuffix
argument_list|(
literal|1
argument_list|)
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|unbind
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
name|unbind
argument_list|(
operator|new
name|CompositeName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unbind
parameter_list|(
name|Name
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|InvalidNameException
argument_list|(
literal|"Cannot unbind empty name"
argument_list|)
throw|;
name|Name
name|nm
init|=
name|getMyComponents
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|atom
init|=
name|nm
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|nm
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|iBindings
operator|.
name|remove
argument_list|(
name|atom
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|inter
init|=
name|iBindings
operator|.
name|get
argument_list|(
name|atom
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|inter
operator|instanceof
name|Context
operator|)
condition|)
throw|throw
operator|new
name|NotContextException
argument_list|(
name|atom
operator|+
literal|" does not name a context"
argument_list|)
throw|;
operator|(
operator|(
name|Context
operator|)
name|inter
operator|)
operator|.
name|unbind
argument_list|(
name|nm
operator|.
name|getSuffix
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|rename
parameter_list|(
name|String
name|oldname
parameter_list|,
name|String
name|newname
parameter_list|)
throws|throws
name|NamingException
block|{
name|rename
argument_list|(
operator|new
name|CompositeName
argument_list|(
name|oldname
argument_list|)
argument_list|,
operator|new
name|CompositeName
argument_list|(
name|newname
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rename
parameter_list|(
name|Name
name|oldname
parameter_list|,
name|Name
name|newname
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
name|oldname
operator|.
name|isEmpty
argument_list|()
operator|||
name|newname
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|InvalidNameException
argument_list|(
literal|"Cannot rename empty name"
argument_list|)
throw|;
name|Name
name|oldnm
init|=
name|getMyComponents
argument_list|(
name|oldname
argument_list|)
decl_stmt|;
name|Name
name|newnm
init|=
name|getMyComponents
argument_list|(
name|newname
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldnm
operator|.
name|size
argument_list|()
operator|!=
name|newnm
operator|.
name|size
argument_list|()
condition|)
throw|throw
operator|new
name|OperationNotSupportedException
argument_list|(
literal|"Do not support rename across different contexts"
argument_list|)
throw|;
name|String
name|oldatom
init|=
name|oldnm
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|newatom
init|=
name|newnm
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldnm
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|iBindings
operator|.
name|get
argument_list|(
name|newatom
argument_list|)
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|NameAlreadyBoundException
argument_list|(
name|newname
operator|.
name|toString
argument_list|()
operator|+
literal|" is already bound"
argument_list|)
throw|;
name|Object
name|oldBinding
init|=
name|iBindings
operator|.
name|remove
argument_list|(
name|oldatom
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldBinding
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NameNotFoundException
argument_list|(
name|oldname
operator|.
name|toString
argument_list|()
operator|+
literal|" not bound"
argument_list|)
throw|;
name|iBindings
operator|.
name|put
argument_list|(
name|newatom
argument_list|,
name|oldBinding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|oldatom
operator|.
name|equals
argument_list|(
name|newatom
argument_list|)
condition|)
throw|throw
operator|new
name|OperationNotSupportedException
argument_list|(
literal|"Do not support rename across different contexts"
argument_list|)
throw|;
name|Object
name|inter
init|=
name|iBindings
operator|.
name|get
argument_list|(
name|oldatom
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|inter
operator|instanceof
name|Context
operator|)
condition|)
throw|throw
operator|new
name|NotContextException
argument_list|(
name|oldatom
operator|+
literal|" does not name a context"
argument_list|)
throw|;
operator|(
operator|(
name|Context
operator|)
name|inter
operator|)
operator|.
name|rename
argument_list|(
name|oldnm
operator|.
name|getSuffix
argument_list|(
literal|1
argument_list|)
argument_list|,
name|newnm
operator|.
name|getSuffix
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NamingEnumeration
name|list
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
return|return
name|list
argument_list|(
operator|new
name|CompositeName
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NamingEnumeration
name|list
parameter_list|(
name|Name
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|ListOfNames
argument_list|(
name|iBindings
operator|.
name|keys
argument_list|()
argument_list|)
return|;
name|Object
name|target
init|=
name|lookup
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|instanceof
name|Context
condition|)
return|return
operator|(
operator|(
name|Context
operator|)
name|target
operator|)
operator|.
name|list
argument_list|(
literal|""
argument_list|)
return|;
throw|throw
operator|new
name|NotContextException
argument_list|(
name|name
operator|+
literal|" cannot be listed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|NamingEnumeration
name|listBindings
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
return|return
name|listBindings
argument_list|(
operator|new
name|CompositeName
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NamingEnumeration
name|listBindings
parameter_list|(
name|Name
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|ListOfBindings
argument_list|(
name|iBindings
operator|.
name|keys
argument_list|()
argument_list|)
return|;
name|Object
name|target
init|=
name|lookup
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|instanceof
name|Context
condition|)
return|return
operator|(
operator|(
name|Context
operator|)
name|target
operator|)
operator|.
name|listBindings
argument_list|(
literal|""
argument_list|)
return|;
throw|throw
operator|new
name|NotContextException
argument_list|(
name|name
operator|+
literal|" cannot be listed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroySubcontext
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
name|destroySubcontext
argument_list|(
operator|new
name|CompositeName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroySubcontext
parameter_list|(
name|Name
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|InvalidNameException
argument_list|(
literal|"Cannot destroy context using empty name"
argument_list|)
throw|;
name|unbind
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Context
name|createSubcontext
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
return|return
name|createSubcontext
argument_list|(
operator|new
name|CompositeName
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Context
name|createSubcontext
parameter_list|(
name|Name
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|InvalidNameException
argument_list|(
literal|"Cannot bind empty name"
argument_list|)
throw|;
name|Name
name|nm
init|=
name|getMyComponents
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|atom
init|=
name|nm
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|inter
init|=
name|iBindings
operator|.
name|get
argument_list|(
name|atom
argument_list|)
decl_stmt|;
if|if
condition|(
name|nm
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|inter
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|NameAlreadyBoundException
argument_list|(
literal|"Use rebind to override"
argument_list|)
throw|;
name|Context
name|child
init|=
name|createCtx
argument_list|(
name|this
argument_list|,
name|atom
argument_list|,
name|iEnv
argument_list|)
decl_stmt|;
name|iBindings
operator|.
name|put
argument_list|(
name|atom
argument_list|,
name|child
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|inter
operator|instanceof
name|Context
operator|)
condition|)
throw|throw
operator|new
name|NotContextException
argument_list|(
name|atom
operator|+
literal|" does not name a context"
argument_list|)
throw|;
return|return
operator|(
operator|(
name|Context
operator|)
name|inter
operator|)
operator|.
name|createSubcontext
argument_list|(
name|nm
operator|.
name|getSuffix
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|lookupLink
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
return|return
name|lookupLink
argument_list|(
operator|new
name|CompositeName
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|lookupLink
parameter_list|(
name|Name
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
return|return
name|lookup
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NameParser
name|getNameParser
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
return|return
name|getNameParser
argument_list|(
operator|new
name|CompositeName
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NameParser
name|getNameParser
parameter_list|(
name|Name
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
name|Object
name|obj
init|=
name|lookup
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Context
condition|)
operator|(
operator|(
name|Context
operator|)
name|obj
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|composeName
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|NamingException
block|{
name|Name
name|result
init|=
name|composeName
argument_list|(
operator|new
name|CompositeName
argument_list|(
name|name
argument_list|)
argument_list|,
operator|new
name|CompositeName
argument_list|(
name|prefix
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Name
name|composeName
parameter_list|(
name|Name
name|name
parameter_list|,
name|Name
name|prefix
parameter_list|)
throws|throws
name|NamingException
block|{
name|Name
name|result
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|name
operator|instanceof
name|CompositeName
operator|)
operator|&&
operator|!
operator|(
name|prefix
operator|instanceof
name|CompositeName
operator|)
condition|)
block|{
name|result
operator|=
operator|(
name|Name
operator|)
operator|(
name|prefix
operator|.
name|clone
argument_list|()
operator|)
expr_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompositeName
argument_list|()
operator|.
name|add
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|OperationNotSupportedException
argument_list|(
literal|"Do not support composing composite names"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|addToEnvironment
parameter_list|(
name|String
name|propName
parameter_list|,
name|Object
name|propVal
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
name|iEnv
operator|==
literal|null
condition|)
name|iEnv
operator|=
operator|new
name|Hashtable
argument_list|(
literal|5
argument_list|,
literal|0.75f
argument_list|)
expr_stmt|;
return|return
name|iEnv
operator|.
name|put
argument_list|(
name|propName
argument_list|,
name|propVal
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|removeFromEnvironment
parameter_list|(
name|String
name|propName
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
name|iEnv
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|iEnv
operator|.
name|remove
argument_list|(
name|propName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Hashtable
name|getEnvironment
parameter_list|()
throws|throws
name|NamingException
block|{
if|if
condition|(
name|iEnv
operator|==
literal|null
condition|)
return|return
operator|new
name|Hashtable
argument_list|(
literal|3
argument_list|,
literal|0.75f
argument_list|)
return|;
return|return
operator|(
name|Hashtable
operator|)
name|iEnv
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNameInNamespace
parameter_list|()
throws|throws
name|NamingException
block|{
name|LocalContext
name|ancestor
init|=
name|iParent
decl_stmt|;
if|if
condition|(
name|ancestor
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|Name
name|name
init|=
name|parse
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|name
operator|.
name|add
argument_list|(
name|iName
argument_list|)
expr_stmt|;
while|while
condition|(
name|ancestor
operator|!=
literal|null
operator|&&
name|ancestor
operator|.
name|iName
operator|!=
literal|null
condition|)
block|{
name|name
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|ancestor
operator|.
name|iName
argument_list|)
expr_stmt|;
name|ancestor
operator|=
name|ancestor
operator|.
name|iParent
expr_stmt|;
block|}
return|return
name|name
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|iName
operator|!=
literal|null
condition|)
block|{
return|return
name|iName
return|;
block|}
else|else
block|{
return|return
literal|"ROOT CONTEXT"
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|NamingException
block|{
block|}
comment|// Class for enumerating name/class pairs
class|class
name|ListOfNames
implements|implements
name|NamingEnumeration
block|{
specifier|protected
name|Enumeration
name|iNames
decl_stmt|;
name|ListOfNames
parameter_list|(
name|Enumeration
name|names
parameter_list|)
block|{
name|iNames
operator|=
name|names
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
try|try
block|{
return|return
name|hasMore
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|hasMore
parameter_list|()
throws|throws
name|NamingException
block|{
return|return
name|iNames
operator|.
name|hasMoreElements
argument_list|()
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
throws|throws
name|NamingException
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iNames
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|iBindings
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|new
name|NameClassPair
argument_list|(
name|name
argument_list|,
name|className
argument_list|)
return|;
block|}
specifier|public
name|Object
name|nextElement
parameter_list|()
block|{
try|try
block|{
return|return
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
block|}
block|}
comment|// Class for enumerating bindings
class|class
name|ListOfBindings
extends|extends
name|ListOfNames
block|{
name|ListOfBindings
parameter_list|(
name|Enumeration
name|names
parameter_list|)
block|{
name|super
argument_list|(
name|names
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
throws|throws
name|NamingException
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iNames
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Object
name|obj
init|=
name|iBindings
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
name|obj
operator|=
name|NamingManager
operator|.
name|getObjectInstance
argument_list|(
name|obj
argument_list|,
operator|new
name|CompositeName
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|)
argument_list|,
name|LocalContext
operator|.
name|this
argument_list|,
name|LocalContext
operator|.
name|this
operator|.
name|iEnv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|NamingException
name|ne
init|=
operator|new
name|NamingException
argument_list|(
literal|"getObjectInstance failed"
argument_list|)
decl_stmt|;
name|ne
operator|.
name|setRootCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ne
throw|;
block|}
return|return
operator|new
name|Binding
argument_list|(
name|name
argument_list|,
name|obj
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Name
name|parse
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
return|return
operator|new
name|CompoundName
argument_list|(
name|name
argument_list|,
name|sSyntax
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|InitialContextFactory
name|createInitialContextFactory
parameter_list|(
name|Hashtable
name|env
parameter_list|)
throws|throws
name|NamingException
block|{
return|return
operator|new
name|LocalContext
argument_list|(
name|env
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Context
name|getInitialContext
parameter_list|(
name|Hashtable
name|env
parameter_list|)
throws|throws
name|NamingException
block|{
return|return
operator|new
name|LocalContext
argument_list|(
name|env
argument_list|)
return|;
block|}
block|}
end_class

end_unit

