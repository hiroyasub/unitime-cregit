begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|htmlgen
package|;
end_package

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  *  * TODO To change the template for this generated type comment go to  * Window - Preferences - Java - Code Style - Code Templates  */
end_comment

begin_class
specifier|public
class|class
name|TestHtmlGen
block|{
comment|/** 	 *  	 */
specifier|public
name|TestHtmlGen
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// TODO Auto-generated constructor stub
block|}
specifier|public
name|String
name|htmlOutput
parameter_list|()
block|{
name|Table
name|table
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|table
operator|.
name|setBorder
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|table
operator|.
name|setCellPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|table
operator|.
name|setCellSpacing
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|table
operator|.
name|setBgColor
argument_list|(
literal|"lightgrey"
argument_list|)
expr_stmt|;
name|TableRow
name|row
init|=
operator|new
name|TableRow
argument_list|()
decl_stmt|;
name|row
operator|.
name|setBgColor
argument_list|(
literal|"pink"
argument_list|)
expr_stmt|;
name|row
operator|.
name|setBorderColor
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
name|TableCell
name|cell
init|=
operator|new
name|TableCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setBgColor
argument_list|(
literal|"blue"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderColor
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"This is a test for cell 1."
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"This should be in cell 1 as well"
argument_list|)
expr_stmt|;
name|Span
name|span
init|=
operator|new
name|Span
argument_list|()
decl_stmt|;
name|span
operator|.
name|setTitle
argument_list|(
literal|"span span span"
argument_list|)
expr_stmt|;
name|span
operator|.
name|addContent
argument_list|(
literal|"this is my span"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
name|span
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"center"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|cell
operator|=
operator|new
name|TableCell
argument_list|()
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"This is a test for cell 2."
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setValign
argument_list|(
literal|"bottom"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|cell
operator|=
operator|new
name|TableCell
argument_list|()
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"This is a test for cell 1."
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"This should be in cell 1 as well"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"center"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|cell
operator|=
operator|new
name|TableCell
argument_list|()
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"This is a test for cell 2."
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setValign
argument_list|(
literal|"bottom"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
return|return
operator|(
name|table
operator|.
name|toHtml
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

