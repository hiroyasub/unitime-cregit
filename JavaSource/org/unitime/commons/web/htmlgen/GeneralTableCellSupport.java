begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|htmlgen
package|;
end_package

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  *  * Window - Preferences - Java - Code Style - Code Templates  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|GeneralTableCellSupport
extends|extends
name|GeneralTableRowSupport
block|{
specifier|private
name|String
name|abbr
decl_stmt|;
specifier|private
name|String
name|axis
decl_stmt|;
specifier|private
name|int
name|colSpan
decl_stmt|;
specifier|private
name|String
name|headers
decl_stmt|;
specifier|private
name|int
name|rowSpan
decl_stmt|;
specifier|private
name|String
name|scope
decl_stmt|;
specifier|private
name|String
name|width
decl_stmt|;
specifier|private
name|boolean
name|noWrap
decl_stmt|;
comment|/** 	 *  	 */
specifier|public
name|GeneralTableCellSupport
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|setNoWrap
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @return Returns the abbr. 	 */
specifier|public
name|String
name|getAbbr
parameter_list|()
block|{
return|return
name|abbr
return|;
block|}
comment|/** 	 * @param abbr The abbr to set. 	 */
specifier|public
name|void
name|setAbbr
parameter_list|(
name|String
name|abbr
parameter_list|)
block|{
name|this
operator|.
name|abbr
operator|=
name|abbr
expr_stmt|;
block|}
comment|/** 	 * @return Returns the axis. 	 */
specifier|public
name|String
name|getAxis
parameter_list|()
block|{
return|return
name|axis
return|;
block|}
comment|/** 	 * @param axis The axis to set. 	 */
specifier|public
name|void
name|setAxis
parameter_list|(
name|String
name|axis
parameter_list|)
block|{
name|this
operator|.
name|axis
operator|=
name|axis
expr_stmt|;
block|}
comment|/** 	 * @return Returns the headers. 	 */
specifier|public
name|String
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
comment|/** 	 * @param headers The headers to set. 	 */
specifier|public
name|void
name|setHeaders
parameter_list|(
name|String
name|headers
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
block|}
comment|/** 	 * @return Returns the noWrap. 	 */
specifier|public
name|boolean
name|isNoWrap
parameter_list|()
block|{
return|return
name|noWrap
return|;
block|}
comment|/** 	 * @param noWrap The noWrap to set. 	 */
specifier|public
name|void
name|setNoWrap
parameter_list|(
name|boolean
name|noWrap
parameter_list|)
block|{
name|this
operator|.
name|noWrap
operator|=
name|noWrap
expr_stmt|;
block|}
comment|/** 	 * @return Returns the scope. 	 */
specifier|public
name|String
name|getScope
parameter_list|()
block|{
return|return
name|scope
return|;
block|}
comment|/** 	 * @param scope The scope to set. 	 */
specifier|public
name|void
name|setScope
parameter_list|(
name|String
name|scope
parameter_list|)
block|{
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
block|}
comment|/** 	 * @return Returns the width. 	 */
specifier|public
name|String
name|getWidth
parameter_list|()
block|{
return|return
name|width
return|;
block|}
comment|/** 	 * @param width The width to set. 	 */
specifier|public
name|void
name|setWidth
parameter_list|(
name|String
name|width
parameter_list|)
block|{
name|this
operator|.
name|width
operator|=
name|width
expr_stmt|;
block|}
specifier|protected
name|String
name|htmlForAttributes
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|super
operator|.
name|htmlForAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|htmlForAttribute
argument_list|(
literal|"abbr"
argument_list|,
name|this
operator|.
name|getAbbr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|htmlForAttribute
argument_list|(
literal|"axis"
argument_list|,
name|this
operator|.
name|getAxis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|getColSpan
argument_list|()
operator|>
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|htmlForAttribute
argument_list|(
literal|"colspan"
argument_list|,
name|this
operator|.
name|getColSpan
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|htmlForAttribute
argument_list|(
literal|"headers"
argument_list|,
name|this
operator|.
name|getHeaders
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|getRowSpan
argument_list|()
operator|>
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|htmlForAttribute
argument_list|(
literal|"rowspan"
argument_list|,
name|this
operator|.
name|getRowSpan
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|htmlForAttribute
argument_list|(
literal|"scope"
argument_list|,
name|this
operator|.
name|getScope
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|htmlForAttribute
argument_list|(
literal|"width"
argument_list|,
name|this
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|htmlForAttribute
argument_list|(
literal|"nowrap"
argument_list|,
name|this
operator|.
name|isNoWrap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
comment|/** 	 * @return Returns the colSpan. 	 */
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
name|colSpan
return|;
block|}
comment|/** 	 * @param colSpan The colSpan to set. 	 */
specifier|public
name|void
name|setColSpan
parameter_list|(
name|int
name|colSpan
parameter_list|)
block|{
name|this
operator|.
name|colSpan
operator|=
name|colSpan
expr_stmt|;
block|}
comment|/** 	 * @return Returns the rowSpan. 	 */
specifier|public
name|int
name|getRowSpan
parameter_list|()
block|{
return|return
name|rowSpan
return|;
block|}
comment|/** 	 * @param rowSpan The rowSpan to set. 	 */
specifier|public
name|void
name|setRowSpan
parameter_list|(
name|int
name|rowSpan
parameter_list|)
block|{
name|this
operator|.
name|rowSpan
operator|=
name|rowSpan
expr_stmt|;
block|}
block|}
end_class

end_unit

