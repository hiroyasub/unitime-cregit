begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|core
operator|.
name|Authentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|core
operator|.
name|GrantedAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|core
operator|.
name|context
operator|.
name|SecurityContextHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|authority
operator|.
name|AcademicSessionAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|authority
operator|.
name|ManagerAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|authority
operator|.
name|RoleAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * This class provides several simple methods directly used from JSP files   * (project version, data versions, login/logout, table orderings, column filters).   * It also provides all needed initialization.  *  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|Web
block|{
comment|/** double format */
specifier|private
specifier|static
name|DecimalFormat
name|sDoubleFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
comment|/** Represents the attribute name of the User object stored in HttpSession */
specifier|public
specifier|static
name|String
name|USER_ATTR_NAME
init|=
literal|"User"
decl_stmt|;
comment|// Session dependent methods
comment|/** Is someone logged      * @return true, if a user of the given session is logged in.      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|boolean
name|isLoggedIn
parameter_list|(
name|HttpSession
name|session
parameter_list|)
block|{
name|Authentication
name|auth
init|=
name|SecurityContextHolder
operator|.
name|getContext
argument_list|()
operator|.
name|getAuthentication
argument_list|()
decl_stmt|;
return|return
name|auth
operator|!=
literal|null
operator|&&
name|auth
operator|.
name|isAuthenticated
argument_list|()
operator|&&
name|auth
operator|.
name|getPrincipal
argument_list|()
operator|instanceof
name|UserContext
return|;
block|}
comment|/** Get logged-in user for the given session. */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|User
name|getUser
parameter_list|(
name|HttpSession
name|session
parameter_list|)
block|{
name|Authentication
name|auth
init|=
name|SecurityContextHolder
operator|.
name|getContext
argument_list|()
operator|.
name|getAuthentication
argument_list|()
decl_stmt|;
if|if
condition|(
name|auth
operator|==
literal|null
operator|||
operator|!
name|auth
operator|.
name|isAuthenticated
argument_list|()
operator|||
operator|!
operator|(
name|auth
operator|.
name|getPrincipal
argument_list|()
operator|instanceof
name|UserContext
operator|)
condition|)
return|return
literal|null
return|;
name|UserContext
name|user
init|=
operator|(
name|UserContext
operator|)
name|auth
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|User
name|legacy
init|=
operator|new
name|User
argument_list|()
decl_stmt|;
name|legacy
operator|.
name|setId
argument_list|(
name|user
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
name|legacy
operator|.
name|setName
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|legacy
operator|.
name|setLogin
argument_list|(
name|user
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|roles
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|GrantedAuthority
name|role
range|:
name|user
operator|.
name|getAuthorities
argument_list|()
control|)
block|{
if|if
condition|(
name|role
operator|instanceof
name|RoleAuthority
condition|)
name|roles
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RoleAuthority
operator|)
name|role
operator|)
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UserAuthority
name|authority
init|=
name|user
operator|.
name|getCurrentAuthority
argument_list|()
decl_stmt|;
if|if
condition|(
name|authority
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|authority
operator|instanceof
name|RoleAuthority
condition|)
block|{
name|legacy
operator|.
name|setRole
argument_list|(
name|authority
operator|.
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Roles
operator|.
name|ADMIN_ROLE
operator|.
name|equals
argument_list|(
name|legacy
operator|.
name|getRole
argument_list|()
argument_list|)
condition|)
name|legacy
operator|.
name|setAdmin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|authority
operator|.
name|getAcademicSessionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|legacy
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|,
name|authority
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|UserAuthority
name|sessionAuth
init|=
name|user
operator|.
name|getAuthority
argument_list|(
name|AcademicSessionAuthority
operator|.
name|TYPE
argument_list|,
name|authority
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionAuth
operator|!=
literal|null
condition|)
name|legacy
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_LABEL_ATTR_NAME
argument_list|,
name|sessionAuth
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|legacy
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_LABEL_ATTR_NAME
argument_list|,
name|authority
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|legacy
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_ATTR_NAME
argument_list|,
name|authority
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|UserAuthority
name|managerAuth
init|=
name|user
operator|.
name|getAuthority
argument_list|(
name|ManagerAuthority
operator|.
name|TYPE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|managerAuth
operator|!=
literal|null
condition|)
name|legacy
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|,
name|managerAuth
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|setAttribute
argument_list|(
name|Web
operator|.
name|USER_ATTR_NAME
argument_list|,
name|legacy
argument_list|)
expr_stmt|;
return|return
name|legacy
return|;
block|}
comment|/** Set logged-in user object for the given session. */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|setUser
parameter_list|(
name|HttpSession
name|session
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|session
operator|.
name|setAttribute
argument_list|(
name|Web
operator|.
name|USER_ATTR_NAME
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
comment|/** Is the logged-in user administrator? */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|boolean
name|isAdmin
parameter_list|(
name|HttpSession
name|session
parameter_list|)
block|{
name|User
name|user
init|=
name|getUser
argument_list|(
name|session
argument_list|)
decl_stmt|;
return|return
operator|(
name|user
operator|==
literal|null
condition|?
literal|false
else|:
name|user
operator|.
name|isAdmin
argument_list|()
operator|)
return|;
block|}
comment|/**      * Checks to see if the logged-in user has one of a set of roles      * @param session      * @param roles String[]      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|boolean
name|hasRole
parameter_list|(
name|HttpSession
name|session
parameter_list|,
name|String
index|[]
name|roles
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|roles
operator|!=
literal|null
operator|&&
name|roles
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|User
name|user
init|=
name|getUser
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|roles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|user
operator|.
name|hasRole
argument_list|(
name|roles
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|// Number Formatting Methods
specifier|public
specifier|static
name|String
name|format
parameter_list|(
name|double
name|x
parameter_list|)
block|{
return|return
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|x
argument_list|)
return|;
block|}
comment|// HTML Formatting Methods
comment|/**<META> expire to be added to HTML header */
specifier|public
specifier|static
name|String
name|metaExpireNow
parameter_list|()
block|{
return|return
literal|"<META http-equiv=\"Expires\" content=\"Mon, 1 Jan 1970 01:00:00 GMT\">"
return|;
block|}
block|}
end_class

end_unit

