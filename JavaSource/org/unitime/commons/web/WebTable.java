begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
operator|.
name|CSVField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|NaturalOrderComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|ToolBox
import|;
end_import

begin_comment
comment|/** This class provides a web table with some sorting and filtering possibilities.  *  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|WebTable
block|{
comment|/** down arrow */
specifier|protected
specifier|static
name|String
name|IMG_DEC
init|=
literal|"images/listdir_top_to_bot.gif"
decl_stmt|;
comment|/** up arrow */
specifier|protected
specifier|static
name|String
name|IMG_ASC
init|=
literal|"images/listdir_bot_to_top.gif"
decl_stmt|;
comment|/** number of columns -- for displaing header colspan */
specifier|protected
name|int
name|iColumns
decl_stmt|;
comment|/** lines -- table content */
specifier|protected
name|Vector
name|iLines
decl_stmt|;
comment|/** table name */
specifier|protected
name|String
name|iName
decl_stmt|;
comment|/** column headers */
specifier|protected
name|String
index|[]
name|iHeaders
decl_stmt|;
comment|/** allign of columns -- left, right, center */
specifier|protected
name|String
index|[]
name|iAlign
decl_stmt|;
comment|/** initial ordering -- true ascendant, false descendant */
specifier|protected
name|boolean
index|[]
name|iAsc
decl_stmt|;
comment|/** page reference -- for link order by this column -- %% is replaced by column number */
specifier|protected
name|String
name|iRef
decl_stmt|;
comment|/** row style - actually it is cell style */
specifier|protected
name|String
name|iRowStyle
init|=
literal|null
decl_stmt|;
comment|/** suppress row highlighting */
specifier|protected
name|boolean
name|suppressRowHighlight
init|=
literal|false
decl_stmt|;
comment|/** column filter -- hashatable<column key, Boolean> -- true if the column is filtered */
specifier|private
name|Hashtable
name|iColumnFilter
init|=
literal|null
decl_stmt|;
comment|/** column filter -- column keys */
specifier|private
name|String
index|[]
name|iColumnFilterKeys
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|iBlankWhenSame
init|=
literal|false
decl_stmt|;
specifier|protected
name|WebTableTweakStyle
name|iWebTableTweakStyle
init|=
literal|null
decl_stmt|;
comment|/** creates a WebTable instance */
specifier|public
name|WebTable
parameter_list|(
name|int
name|columns
parameter_list|,
name|String
name|name
parameter_list|,
name|String
index|[]
name|headers
parameter_list|,
name|String
index|[]
name|align
parameter_list|,
name|boolean
index|[]
name|asc
parameter_list|)
block|{
name|this
argument_list|(
name|columns
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|,
name|align
argument_list|,
name|asc
argument_list|)
expr_stmt|;
block|}
comment|/** creates a WebTable instance */
specifier|public
name|WebTable
parameter_list|(
name|int
name|columns
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
index|[]
name|headers
parameter_list|,
name|String
index|[]
name|align
parameter_list|,
name|boolean
index|[]
name|asc
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iColumns
operator|=
name|columns
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iHeaders
operator|=
name|headers
expr_stmt|;
name|iAlign
operator|=
name|align
expr_stmt|;
name|iAsc
operator|=
name|asc
expr_stmt|;
name|iRef
operator|=
name|ref
expr_stmt|;
name|iLines
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
block|}
comment|/** sets column filter */
specifier|public
name|void
name|setColumnFilter
parameter_list|(
name|Hashtable
name|filter
parameter_list|,
name|String
index|[]
name|keys
parameter_list|)
block|{
name|iColumnFilter
operator|=
name|filter
expr_stmt|;
name|iColumnFilterKeys
operator|=
name|keys
expr_stmt|;
block|}
specifier|public
name|void
name|setWebTableTweakStyle
parameter_list|(
name|WebTableTweakStyle
name|style
parameter_list|)
block|{
name|iWebTableTweakStyle
operator|=
name|style
expr_stmt|;
block|}
specifier|public
name|String
name|getStyle
parameter_list|(
name|WebTableLine
name|line
parameter_list|,
name|WebTableLine
name|next
parameter_list|,
name|int
name|order
parameter_list|)
block|{
name|String
name|style
init|=
operator|(
name|iRowStyle
operator|==
literal|null
condition|?
literal|""
else|:
name|iRowStyle
operator|+
literal|";"
operator|)
operator|+
operator|(
name|iWebTableTweakStyle
operator|==
literal|null
condition|?
literal|""
else|:
name|iWebTableTweakStyle
operator|.
name|getStyleHtml
argument_list|(
name|line
argument_list|,
name|next
argument_list|,
name|order
argument_list|)
operator|)
decl_stmt|;
return|return
operator|(
name|style
operator|==
literal|null
operator|||
name|style
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"style=\""
operator|+
name|style
operator|+
literal|"\""
operator|)
return|;
block|}
comment|/** sets row (cell) style */
specifier|public
name|void
name|setRowStyle
parameter_list|(
name|String
name|style
parameter_list|)
block|{
name|iRowStyle
operator|=
operator|(
name|iRowStyle
operator|==
literal|null
condition|?
literal|""
else|:
name|iRowStyle
operator|+
literal|";"
operator|)
operator|+
name|style
expr_stmt|;
block|}
comment|/** sets row highlight suppression */
specifier|public
name|void
name|setSuppressRowHighlight
parameter_list|(
name|boolean
name|suppress
parameter_list|)
block|{
name|suppressRowHighlight
operator|=
name|suppress
expr_stmt|;
block|}
comment|/** enable horizontal lines */
specifier|public
name|void
name|enableHR
parameter_list|()
block|{
name|setRowStyle
argument_list|(
literal|"border-bottom: rgb(81,81,81) 1px solid"
argument_list|)
expr_stmt|;
block|}
comment|/** enable horizontal lines */
specifier|public
name|void
name|enableHR
parameter_list|(
name|String
name|colorCode
parameter_list|)
block|{
name|setRowStyle
argument_list|(
literal|"border-bottom: 1px solid "
operator|+
name|colorCode
argument_list|)
expr_stmt|;
block|}
comment|/** add line to the table */
specifier|public
name|WebTableLine
name|addLine
parameter_list|(
name|String
index|[]
name|line
parameter_list|,
name|Comparable
index|[]
name|orderby
parameter_list|)
block|{
name|WebTableLine
name|wtline
init|=
operator|new
name|WebTableLine
argument_list|(
literal|null
argument_list|,
name|line
argument_list|,
name|orderby
argument_list|)
decl_stmt|;
name|iLines
operator|.
name|addElement
argument_list|(
name|wtline
argument_list|)
expr_stmt|;
return|return
name|wtline
return|;
block|}
comment|/** add line to the table */
specifier|public
name|WebTableLine
name|addLine
parameter_list|(
name|String
name|onClick
parameter_list|,
name|String
index|[]
name|line
parameter_list|,
name|Comparable
index|[]
name|orderby
parameter_list|,
name|String
name|uniqueId
parameter_list|)
block|{
name|WebTableLine
name|wtline
init|=
operator|new
name|WebTableLine
argument_list|(
name|onClick
argument_list|,
name|line
argument_list|,
name|orderby
argument_list|,
name|uniqueId
argument_list|)
decl_stmt|;
name|iLines
operator|.
name|addElement
argument_list|(
name|wtline
argument_list|)
expr_stmt|;
return|return
name|wtline
return|;
block|}
comment|/** add line to the table */
specifier|public
name|WebTableLine
name|addLine
parameter_list|(
name|String
name|onClick
parameter_list|,
name|String
index|[]
name|line
parameter_list|,
name|Comparable
index|[]
name|orderby
parameter_list|)
block|{
return|return
name|addLine
argument_list|(
name|onClick
argument_list|,
name|line
argument_list|,
name|orderby
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|WebTableLine
name|replaceLine
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|onClick
parameter_list|,
name|String
index|[]
name|line
parameter_list|,
name|Comparable
index|[]
name|orderby
parameter_list|)
block|{
return|return
name|replaceLine
argument_list|(
name|index
argument_list|,
name|onClick
argument_list|,
name|line
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|WebTableLine
name|replaceLine
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|onClick
parameter_list|,
name|String
index|[]
name|line
parameter_list|,
name|Comparable
index|[]
name|orderby
parameter_list|,
name|String
name|uniqueId
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|iLines
operator|.
name|size
argument_list|()
condition|)
block|{
name|iLines
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|WebTableLine
name|wtline
init|=
operator|new
name|WebTableLine
argument_list|(
name|onClick
argument_list|,
name|line
argument_list|,
name|orderby
argument_list|,
name|uniqueId
argument_list|)
decl_stmt|;
name|iLines
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|wtline
argument_list|)
expr_stmt|;
return|return
name|wtline
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/*  	 * Return the index of the line containing uniqueId 	 * Returns -1 if not found 	 */
specifier|public
name|int
name|indexOfLine
parameter_list|(
name|String
name|uniqueId
parameter_list|)
block|{
name|int
name|indx
init|=
literal|0
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|indx
operator|=
literal|0
init|;
name|indx
operator|<
name|iLines
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|found
condition|;
name|indx
operator|++
control|)
block|{
name|WebTableLine
name|wtLine
init|=
operator|(
name|WebTableLine
operator|)
name|iLines
operator|.
name|get
argument_list|(
name|indx
argument_list|)
decl_stmt|;
if|if
condition|(
name|wtLine
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|uniqueId
argument_list|)
condition|)
name|found
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|found
condition|)
block|{
return|return
operator|--
name|indx
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/*  	 * Return  line containing uniqueId 	 * Returns null if not found 	 */
specifier|public
name|WebTableLine
name|findLine
parameter_list|(
name|String
name|uniqueId
parameter_list|)
block|{
name|int
name|indx
init|=
name|indexOfLine
argument_list|(
name|uniqueId
argument_list|)
decl_stmt|;
if|if
condition|(
name|indx
operator|>=
literal|0
condition|)
return|return
operator|(
name|WebTableLine
operator|)
name|iLines
operator|.
name|get
argument_list|(
name|indx
argument_list|)
return|;
else|else
return|return
literal|null
return|;
block|}
comment|/*  	 * Return next uniqueId after line containing uniqueId 	 * Returns null if not found 	 */
specifier|public
name|String
name|nextUniqueId
parameter_list|(
name|String
name|uniqueId
parameter_list|)
block|{
name|int
name|indx
init|=
name|indexOfLine
argument_list|(
name|uniqueId
argument_list|)
decl_stmt|;
if|if
condition|(
name|indx
operator|<
literal|0
operator|||
name|indx
operator|>=
name|iLines
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|WebTableLine
operator|)
name|iLines
operator|.
name|get
argument_list|(
name|indx
operator|+
literal|1
argument_list|)
operator|)
operator|.
name|getUniqueId
argument_list|()
return|;
block|}
block|}
comment|/*  	 * Return previous uniqueId to line containing uniqueId 	 * Returns null if not found 	 */
specifier|public
name|String
name|previousUniqueId
parameter_list|(
name|String
name|uniqueId
parameter_list|)
block|{
name|int
name|indx
init|=
name|indexOfLine
argument_list|(
name|uniqueId
argument_list|)
decl_stmt|;
if|if
condition|(
name|indx
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|WebTableLine
operator|)
name|iLines
operator|.
name|get
argument_list|(
name|indx
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|getUniqueId
argument_list|()
return|;
block|}
block|}
comment|/** returns table's HTML code */
specifier|public
name|String
name|printTable
parameter_list|()
block|{
return|return
name|printTable
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** is column filtered? */
specifier|protected
name|boolean
name|isFiltered
parameter_list|(
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
name|iColumnFilter
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|name
init|=
name|iColumnFilterKeys
index|[
name|col
index|]
decl_stmt|;
return|return
operator|(
name|iColumnFilter
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|?
operator|(
operator|(
name|Boolean
operator|)
name|iColumnFilter
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
else|:
literal|false
operator|)
return|;
block|}
specifier|public
name|int
name|getNrFilteredColumns
parameter_list|()
block|{
if|if
condition|(
name|iColumnFilter
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iColumnFilter
operator|.
name|keys
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|e
operator|.
name|nextElement
argument_list|()
argument_list|)
condition|)
name|ret
operator|++
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/** returns table's HTML code, table is ordered by ordCol-th column */
specifier|public
name|String
name|printTable
parameter_list|(
name|int
name|ordCol
parameter_list|)
block|{
name|String
name|lastLine
index|[]
init|=
operator|new
name|String
index|[
name|Math
operator|.
name|max
argument_list|(
name|iColumns
argument_list|,
operator|(
name|iHeaders
operator|==
literal|null
condition|?
literal|0
else|:
name|iHeaders
operator|.
name|length
operator|)
argument_list|)
index|]
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|iName
operator|!=
literal|null
operator|&&
name|iName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<tr><td colspan="
operator|+
name|iColumns
operator|+
literal|"><div class=WelcomeRowHead>"
operator|+
name|iName
operator|+
literal|"</div></td></tr>"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|asc
init|=
operator|(
name|ordCol
operator|==
literal|0
operator|||
name|iAsc
operator|==
literal|null
operator|||
name|iAsc
operator|.
name|length
operator|<=
name|Math
operator|.
name|abs
argument_list|(
name|ordCol
argument_list|)
operator|-
literal|1
condition|?
literal|true
else|:
name|iAsc
index|[
name|Math
operator|.
name|abs
argument_list|(
name|ordCol
argument_list|)
operator|-
literal|1
index|]
operator|)
decl_stmt|;
if|if
condition|(
name|ordCol
operator|<
literal|0
condition|)
block|{
name|asc
operator|=
operator|!
name|asc
expr_stmt|;
block|}
if|if
condition|(
name|iHeaders
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<tr valign='top'>"
argument_list|)
expr_stmt|;
name|int
name|last
init|=
name|iColumns
operator|-
name|iHeaders
operator|.
name|length
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iHeaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|isFiltered
argument_list|(
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
name|iHeaders
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|String
name|header
init|=
name|ToolBox
operator|.
name|replace
argument_list|(
operator|(
name|iRef
operator|==
literal|null
operator|||
name|iLines
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
operator|(
operator|(
name|WebTableLine
operator|)
name|iLines
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getOrderBy
argument_list|()
operator|==
literal|null
operator|||
operator|(
operator|(
name|WebTableLine
operator|)
name|iLines
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getOrderBy
argument_list|()
index|[
name|i
index|]
operator|==
literal|null
condition|?
name|iHeaders
index|[
name|i
index|]
else|:
literal|"<A title=\"Order by this column.\" href=\""
operator|+
name|iRef
operator|+
literal|"\" class=\"sortHeader\">"
operator|+
name|iHeaders
index|[
name|i
index|]
operator|+
literal|"</A>"
operator|+
operator|(
name|i
operator|==
name|Math
operator|.
name|abs
argument_list|(
name|ordCol
argument_list|)
operator|-
literal|1
condition|?
literal|"<div class='WebTableOrderArrow'><img src='"
operator|+
operator|(
name|asc
condition|?
name|IMG_ASC
else|:
name|IMG_DEC
operator|)
operator|+
literal|"' border='0'></div>"
else|:
literal|""
operator|)
operator|)
argument_list|,
literal|"%%"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|==
name|Math
operator|.
name|abs
argument_list|(
name|ordCol
argument_list|)
operator|-
literal|1
condition|?
operator|-
name|ordCol
else|:
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td align=\""
operator|+
operator|(
name|iAlign
operator|!=
literal|null
condition|?
name|iAlign
index|[
name|i
index|]
else|:
literal|"left"
operator|)
operator|+
literal|"\""
operator|+
operator|(
name|i
operator|==
name|iHeaders
operator|.
name|length
operator|-
literal|1
condition|?
literal|" colspan="
operator|+
name|last
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
literal|" class=\"WebTableHeader\">"
operator|+
name|header
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<td class=\"WebTableHeader\" "
operator|+
operator|(
name|i
operator|==
name|iHeaders
operator|.
name|length
operator|-
literal|1
condition|?
literal|" colspan="
operator|+
name|last
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
literal|">&nbsp;</td>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ordCol
operator|!=
literal|0
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|iLines
argument_list|,
operator|new
name|WebTableComparator
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|ordCol
argument_list|)
operator|-
literal|1
argument_list|,
name|asc
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|el
init|=
literal|0
init|;
name|el
operator|<
name|iLines
operator|.
name|size
argument_list|()
condition|;
name|el
operator|++
control|)
block|{
name|WebTableLine
name|wtline
init|=
operator|(
name|WebTableLine
operator|)
name|iLines
operator|.
name|elementAt
argument_list|(
name|el
argument_list|)
decl_stmt|;
name|String
index|[]
name|line
init|=
name|wtline
operator|.
name|getLine
argument_list|()
decl_stmt|;
name|String
name|onClick
init|=
name|wtline
operator|.
name|getOnClick
argument_list|()
decl_stmt|;
name|String
name|bgColor
init|=
name|wtline
operator|.
name|getBgColor
argument_list|()
decl_stmt|;
name|String
name|style
init|=
name|getStyle
argument_list|(
name|wtline
argument_list|,
operator|(
name|el
operator|+
literal|1
operator|<
name|iLines
operator|.
name|size
argument_list|()
condition|?
operator|(
name|WebTableLine
operator|)
name|iLines
operator|.
name|elementAt
argument_list|(
name|el
operator|+
literal|1
argument_list|)
else|:
literal|null
operator|)
argument_list|,
name|ordCol
argument_list|)
decl_stmt|;
name|int
name|last
init|=
name|iColumns
operator|-
name|line
operator|.
name|length
operator|+
literal|1
decl_stmt|;
name|boolean
name|anchor
init|=
operator|(
name|onClick
operator|!=
literal|null
operator|&&
name|onClick
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
operator|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
operator|(
name|anchor
condition|?
name|onClick
else|:
literal|""
operator|)
operator|+
literal|"<tr valign='top' "
operator|+
operator|(
name|onClick
operator|==
literal|null
operator|||
name|anchor
condition|?
literal|""
else|:
name|onClick
operator|)
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|""
else|:
literal|" style='background-color:"
operator|+
name|bgColor
operator|+
literal|"'"
operator|)
operator|+
operator|(
operator|!
name|suppressRowHighlight
condition|?
literal|" onmouseover=\"this.style.backgroundColor='rgb(223,231,242)';"
else|:
literal|""
operator|)
operator|+
literal|"this.style.cursor='"
operator|+
operator|(
name|onClick
operator|==
literal|null
condition|?
literal|"default"
else|:
literal|"hand"
operator|)
operator|+
operator|(
name|onClick
operator|!=
literal|null
condition|?
literal|"';this.style.cursor='pointer"
else|:
literal|""
operator|)
operator|+
literal|"';\""
operator|+
operator|(
operator|!
name|suppressRowHighlight
condition|?
literal|"onmouseout=\"this.style.backgroundColor='"
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|"transparent"
else|:
name|bgColor
operator|)
operator|+
literal|"';\""
else|:
literal|""
operator|)
operator|+
literal|">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|wtline
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<A name=\""
operator|+
name|wtline
operator|.
name|iUniqueId
operator|+
literal|"\" />"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|blank
init|=
name|iBlankWhenSame
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|line
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|isFiltered
argument_list|(
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
name|blank
operator|&&
name|line
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
operator|!
name|line
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|lastLine
index|[
name|i
index|]
argument_list|)
condition|)
name|blank
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|blank
operator|&&
name|line
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<td "
operator|+
name|style
operator|+
literal|" align=\""
operator|+
operator|(
name|iAlign
operator|!=
literal|null
condition|?
name|iAlign
index|[
name|i
index|]
else|:
literal|"left"
operator|)
operator|+
literal|"\""
operator|+
operator|(
name|i
operator|==
name|line
operator|.
name|length
operator|-
literal|1
condition|?
literal|" colspan="
operator|+
name|last
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
literal|">"
operator|+
name|line
index|[
name|i
index|]
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<td "
operator|+
name|style
operator|+
literal|" "
operator|+
operator|(
name|i
operator|==
name|line
operator|.
name|length
operator|-
literal|1
condition|?
literal|" colspan="
operator|+
name|last
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
literal|">&nbsp;</td>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|lastLine
operator|.
name|length
condition|)
name|lastLine
index|[
name|i
index|]
operator|=
name|line
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</tr>"
operator|+
operator|(
name|anchor
condition|?
literal|"</a>"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|CSVFile
name|toCSVFile
parameter_list|(
name|int
name|ordCol
parameter_list|)
block|{
name|CSVFile
name|file
init|=
operator|new
name|CSVFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|iHeaders
operator|!=
literal|null
condition|)
block|{
name|Vector
name|header
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iHeaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|isFiltered
argument_list|(
name|i
argument_list|)
condition|)
name|header
operator|.
name|add
argument_list|(
operator|new
name|CSVField
argument_list|(
name|iHeaders
index|[
name|i
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|iHeaders
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
name|boolean
name|asc
init|=
operator|(
name|ordCol
operator|==
literal|0
operator|||
name|iAsc
operator|==
literal|null
operator|||
name|iAsc
operator|.
name|length
operator|<=
name|Math
operator|.
name|abs
argument_list|(
name|ordCol
argument_list|)
operator|-
literal|1
condition|?
literal|true
else|:
name|iAsc
index|[
name|Math
operator|.
name|abs
argument_list|(
name|ordCol
argument_list|)
operator|-
literal|1
index|]
operator|)
decl_stmt|;
if|if
condition|(
name|ordCol
operator|<
literal|0
condition|)
name|asc
operator|=
operator|!
name|asc
expr_stmt|;
if|if
condition|(
name|ordCol
operator|!=
literal|0
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|iLines
argument_list|,
operator|new
name|WebTableComparator
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|ordCol
argument_list|)
operator|-
literal|1
argument_list|,
name|asc
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|lastLine
index|[]
init|=
operator|new
name|String
index|[
name|Math
operator|.
name|max
argument_list|(
name|iColumns
argument_list|,
operator|(
name|iHeaders
operator|==
literal|null
condition|?
literal|0
else|:
name|iHeaders
operator|.
name|length
operator|)
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|Enumeration
name|el
init|=
name|iLines
operator|.
name|elements
argument_list|()
init|;
name|el
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|WebTableLine
name|wtline
init|=
operator|(
name|WebTableLine
operator|)
name|el
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
index|[]
name|line
init|=
name|wtline
operator|.
name|getLine
argument_list|()
decl_stmt|;
name|Vector
name|cline
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|boolean
name|blank
init|=
name|iBlankWhenSame
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|line
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isFiltered
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|blank
operator|&&
name|line
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
operator|!
name|line
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|lastLine
index|[
name|i
index|]
argument_list|)
condition|)
name|blank
operator|=
literal|false
expr_stmt|;
name|cline
operator|.
name|add
argument_list|(
operator|new
name|CSVField
argument_list|(
name|blank
operator|||
name|line
index|[
name|i
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|line
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|lastLine
index|[
name|i
index|]
operator|=
name|line
index|[
name|i
index|]
expr_stmt|;
block|}
name|file
operator|.
name|addLine
argument_list|(
name|cline
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
specifier|public
name|int
name|getNrColumns
parameter_list|()
block|{
return|return
name|iColumns
operator|-
name|getNrFilteredColumns
argument_list|()
return|;
block|}
specifier|public
name|String
index|[]
name|getHeader
parameter_list|()
block|{
return|return
name|iHeaders
return|;
block|}
specifier|public
name|boolean
name|isBlankWhenSame
parameter_list|()
block|{
return|return
name|iBlankWhenSame
return|;
block|}
specifier|public
name|void
name|setBlankWhenSame
parameter_list|(
name|boolean
name|blankWhenSame
parameter_list|)
block|{
name|iBlankWhenSame
operator|=
name|blankWhenSame
expr_stmt|;
block|}
comment|/** This class represents a single line in the WebTable */
specifier|public
class|class
name|WebTableLine
block|{
comment|/** fields */
specifier|private
name|String
index|[]
name|iLine
init|=
literal|null
decl_stmt|;
comment|/** filed comparators */
specifier|private
name|Comparable
index|[]
name|iOrderBy
init|=
literal|null
decl_stmt|;
comment|/** onclick event */
specifier|private
name|String
name|iOnClick
init|=
literal|null
decl_stmt|;
comment|/** String uniquely identifying the line */
specifier|private
name|String
name|iUniqueId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iBgColor
init|=
literal|null
decl_stmt|;
comment|/** constructor */
name|WebTableLine
parameter_list|(
name|String
name|onClick
parameter_list|,
name|String
index|[]
name|line
parameter_list|,
name|Comparable
index|[]
name|orderby
parameter_list|)
block|{
name|iOnClick
operator|=
name|onClick
expr_stmt|;
name|iLine
operator|=
name|line
expr_stmt|;
name|iOrderBy
operator|=
name|orderby
expr_stmt|;
block|}
comment|/** constructor */
name|WebTableLine
parameter_list|(
name|String
name|onClick
parameter_list|,
name|String
index|[]
name|line
parameter_list|,
name|Comparable
index|[]
name|orderby
parameter_list|,
name|String
name|uniqueId
parameter_list|)
block|{
name|this
argument_list|(
name|onClick
argument_list|,
name|line
argument_list|,
name|orderby
argument_list|)
expr_stmt|;
name|iUniqueId
operator|=
name|uniqueId
expr_stmt|;
block|}
specifier|public
name|String
name|getOnClick
parameter_list|()
block|{
return|return
name|iOnClick
return|;
block|}
specifier|public
name|String
index|[]
name|getLine
parameter_list|()
block|{
return|return
name|iLine
return|;
block|}
specifier|public
name|Comparable
index|[]
name|getOrderBy
parameter_list|()
block|{
return|return
name|iOrderBy
return|;
block|}
comment|/** compare two lines according to the given column and order direction */
specifier|public
name|int
name|compareTo
parameter_list|(
name|WebTableLine
name|another
parameter_list|,
name|int
name|column
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
if|if
condition|(
name|column
operator|<
literal|0
operator|||
name|iOrderBy
operator|==
literal|null
operator|||
name|iOrderBy
operator|.
name|length
operator|<=
name|column
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|another
operator|.
name|getOrderBy
argument_list|()
operator|==
literal|null
operator|||
name|another
operator|.
name|getOrderBy
argument_list|()
operator|.
name|length
operator|<=
name|column
condition|)
block|{
return|return
literal|0
return|;
block|}
name|NaturalOrderComparator
name|noc
init|=
operator|new
name|NaturalOrderComparator
argument_list|()
decl_stmt|;
name|Comparable
name|a
init|=
name|iOrderBy
index|[
name|column
index|]
decl_stmt|;
name|Comparable
name|b
init|=
name|another
operator|.
name|getOrderBy
argument_list|()
index|[
name|column
index|]
decl_stmt|;
name|int
name|ret
init|=
operator|(
name|a
operator|==
literal|null
condition|?
operator|(
name|b
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
else|:
name|b
operator|==
literal|null
condition|?
literal|1
else|:
name|a
operator|instanceof
name|String
operator|&&
name|b
operator|instanceof
name|String
condition|?
operator|(
name|asc
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
operator|*
name|noc
operator|.
name|compare
argument_list|(
operator|(
name|String
operator|)
name|a
argument_list|,
operator|(
name|String
operator|)
name|b
argument_list|)
else|:
operator|(
name|asc
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
operator|*
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|ret
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iOrderBy
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|a
operator|=
name|iOrderBy
index|[
name|i
index|]
expr_stmt|;
name|b
operator|=
name|another
operator|.
name|getOrderBy
argument_list|()
index|[
name|i
index|]
expr_stmt|;
name|ret
operator|=
operator|(
name|a
operator|==
literal|null
condition|?
operator|(
name|b
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
else|:
name|b
operator|==
literal|null
condition|?
literal|1
else|:
name|a
operator|instanceof
name|String
operator|&&
name|b
operator|instanceof
name|String
condition|?
operator|(
name|asc
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
operator|*
name|noc
operator|.
name|compare
argument_list|(
operator|(
name|String
operator|)
name|a
argument_list|,
operator|(
name|String
operator|)
name|b
argument_list|)
else|:
operator|(
name|asc
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
operator|*
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|ret
return|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/** 		 * @return 		 */
specifier|public
name|String
name|getUniqueId
parameter_list|()
block|{
return|return
name|iUniqueId
return|;
block|}
comment|/** 		 * @param String 		 */
specifier|public
name|void
name|setUniqueId
parameter_list|(
name|String
name|uniqueId
parameter_list|)
block|{
name|iUniqueId
operator|=
name|uniqueId
expr_stmt|;
block|}
specifier|public
name|void
name|setBgColor
parameter_list|(
name|String
name|bgColor
parameter_list|)
block|{
name|iBgColor
operator|=
name|bgColor
expr_stmt|;
block|}
specifier|public
name|String
name|getBgColor
parameter_list|()
block|{
return|return
name|iBgColor
return|;
block|}
block|}
comment|/** Table lines comparator */
specifier|public
specifier|static
class|class
name|WebTableComparator
implements|implements
name|Comparator
block|{
specifier|private
name|int
name|iColumn
init|=
literal|1
decl_stmt|;
specifier|private
name|boolean
name|iAsc
init|=
literal|true
decl_stmt|;
comment|/** constructor -- order column and order direction */
specifier|public
name|WebTableComparator
parameter_list|(
name|int
name|column
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
name|iColumn
operator|=
name|column
expr_stmt|;
name|iAsc
operator|=
name|asc
expr_stmt|;
block|}
comment|/** compares two lines */
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
operator|||
name|o2
operator|==
literal|null
operator|||
operator|!
operator|(
name|o1
operator|instanceof
name|WebTableLine
operator|)
operator|||
operator|!
operator|(
name|o2
operator|instanceof
name|WebTableLine
operator|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|WebTableLine
name|w1
init|=
operator|(
name|WebTableLine
operator|)
name|o1
decl_stmt|;
name|WebTableLine
name|w2
init|=
operator|(
name|WebTableLine
operator|)
name|o2
decl_stmt|;
return|return
name|w1
operator|.
name|compareTo
argument_list|(
name|w2
argument_list|,
name|iColumn
argument_list|,
name|iAsc
argument_list|)
return|;
block|}
comment|/** compares two lines */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|WebTableComparator
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|WebTableComparator
name|wtc
init|=
operator|(
name|WebTableComparator
operator|)
name|obj
decl_stmt|;
return|return
operator|(
name|wtc
operator|.
name|iAsc
operator|==
name|iAsc
operator|&&
name|wtc
operator|.
name|iColumn
operator|==
name|iColumn
operator|)
return|;
block|}
block|}
comment|/** get order (index of ordered column) for given session and table       * @param session session      * @param code table code      * @return index of ordered column (negative for desc.) */
specifier|public
specifier|static
name|int
name|getOrder
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|,
name|String
name|code
parameter_list|)
block|{
name|Hashtable
name|orderInfo
init|=
operator|(
name|Hashtable
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"OrderInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|orderInfo
operator|==
literal|null
condition|)
block|{
name|orderInfo
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"OrderInfo"
argument_list|,
name|orderInfo
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|orderInfo
operator|.
name|containsKey
argument_list|(
name|code
argument_list|)
condition|?
operator|(
operator|(
name|Integer
operator|)
name|orderInfo
operator|.
name|get
argument_list|(
name|code
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
comment|/** set order (index of ordered column) for given session and table       * @param session session      * @param code table code      * @param order new order (index of ordered column, negative if desc.)      * @param defOrder default order (if order is null)       */
specifier|public
specifier|static
name|void
name|setOrder
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|,
name|String
name|code
parameter_list|,
name|String
name|order
parameter_list|,
name|int
name|defOrder
parameter_list|)
block|{
name|Hashtable
name|orderInfo
init|=
operator|(
name|Hashtable
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"OrderInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|orderInfo
operator|==
literal|null
condition|)
block|{
name|orderInfo
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"OrderInfo"
argument_list|,
name|orderInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
name|orderInfo
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|order
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|orderInfo
operator|.
name|containsKey
argument_list|(
name|code
argument_list|)
condition|)
name|orderInfo
operator|.
name|put
argument_list|(
name|code
argument_list|,
operator|new
name|Integer
argument_list|(
name|defOrder
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** set order (index of ordered column) for given session and table       * @param session session      * @param code table code      * @param order new order (index of ordered column, negative if desc.)      */
specifier|public
specifier|static
name|void
name|setOrder
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|,
name|String
name|code
parameter_list|,
name|String
name|order
parameter_list|)
block|{
if|if
condition|(
name|order
operator|==
literal|null
condition|)
return|return;
name|Hashtable
name|orderInfo
init|=
operator|(
name|Hashtable
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"OrderInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|orderInfo
operator|==
literal|null
condition|)
block|{
name|orderInfo
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"OrderInfo"
argument_list|,
name|orderInfo
argument_list|)
expr_stmt|;
block|}
name|orderInfo
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|order
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Vector
name|getLines
parameter_list|()
block|{
return|return
name|iLines
return|;
block|}
specifier|public
name|void
name|setRef
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|iRef
operator|=
name|ref
expr_stmt|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
specifier|static
interface|interface
name|WebTableTweakStyle
block|{
specifier|public
name|String
name|getStyleHtml
parameter_list|(
name|WebTableLine
name|currentLine
parameter_list|,
name|WebTableLine
name|nextLine
parameter_list|,
name|int
name|orderBy
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

