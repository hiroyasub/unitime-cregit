begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|component
operator|.
name|VTimezone
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|io
operator|.
name|TimezoneInfo
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|io
operator|.
name|TzUrlDotOrgGenerator
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|io
operator|.
name|VTimezoneGenerator
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|io
operator|.
name|text
operator|.
name|ICalReader
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|TimezoneId
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * A variant of the {@link TzUrlDotOrgGenerator} that has been made configurable using unitime.calendar.timezone property.   *  */
end_comment

begin_class
specifier|public
class|class
name|CalendarVTimeZoneGenerator
implements|implements
name|VTimezoneGenerator
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|URI
argument_list|,
name|VTimezone
argument_list|>
name|cache
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|URI
argument_list|,
name|VTimezone
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|VTimezone
name|generate
parameter_list|(
name|TimeZone
name|timezone
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|URI
name|uri
decl_stmt|;
try|try
block|{
name|String
name|tz
init|=
name|ApplicationProperty
operator|.
name|CalendarVTimeZoneID
operator|.
name|value
argument_list|(
name|timezone
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tz
operator|!=
literal|null
condition|)
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|tz
argument_list|)
expr_stmt|;
else|else
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|ApplicationProperty
operator|.
name|CalendarVTimeZone
operator|.
name|value
argument_list|()
operator|.
name|replace
argument_list|(
literal|"{id}"
argument_list|,
name|timezone
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|VTimezone
name|component
init|=
name|cache
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
return|return
name|component
return|;
block|}
name|ICalReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|ICalReader
argument_list|(
name|uri
operator|.
name|toURL
argument_list|()
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
name|TimezoneInfo
name|tzinfo
init|=
name|reader
operator|.
name|getTimezoneInfo
argument_list|()
decl_stmt|;
name|component
operator|=
name|tzinfo
operator|.
name|getComponents
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|TimezoneId
name|componentId
init|=
name|component
operator|.
name|getTimezoneId
argument_list|()
decl_stmt|;
if|if
condition|(
name|componentId
operator|==
literal|null
condition|)
block|{
comment|/* 				 * There should always be a TZID property, but just in case 				 * there there isn't one, create one. 				 */
name|component
operator|.
name|setTimezoneId
argument_list|(
name|timezone
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|timezone
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|componentId
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
comment|/* 				 * Ensure that the value of the TZID property is identical to 				 * the ID of the Java TimeZone object. This is to ensure that 				 * the values of the TZID parameters throughout the iCal match 				 * the value of the VTIMEZONE component's TZID property. 				 *  				 * For example, if tzurl.org is queried for the "PRC" timezone, 				 * then a VTIMEZONE component with a TZID of "Asia/Shanghai" is 				 * *actually* returned. This is a problem because iCal 				 * properties use the value of the Java TimeZone object to get 				 * the value of the TZID parameter, so the values of the TZID 				 * parameters and the VTIMEZONE component's TZID property will 				 * not be the same. 				 */
name|componentId
operator|.
name|setValue
argument_list|(
name|timezone
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
return|return
name|component
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|notFound
argument_list|(
name|e
argument_list|,
name|timezone
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
throw|throw
name|notFound
argument_list|(
name|e
argument_list|,
name|timezone
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|IllegalArgumentException
name|notFound
parameter_list|(
name|Exception
name|e
parameter_list|,
name|TimeZone
name|timezone
parameter_list|)
block|{
return|return
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Timezone "
operator|+
name|timezone
operator|.
name|getID
argument_list|()
operator|+
literal|" not recognized."
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
end_class

end_unit

