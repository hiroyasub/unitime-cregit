begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Taken from Hibernate 3.2 (org.hibertane.pretty.Formater) as it is no longer present in Hibernate 3.5 */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_class
specifier|public
class|class
name|PrettyFormatter
block|{
specifier|private
specifier|static
specifier|final
name|Set
name|BEGIN_CLAUSES
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
name|END_CLAUSES
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
name|LOGICAL
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
name|QUANTIFIERS
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
name|DML
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
name|MISC
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
static|static
block|{
name|BEGIN_CLAUSES
operator|.
name|add
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|BEGIN_CLAUSES
operator|.
name|add
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
name|BEGIN_CLAUSES
operator|.
name|add
argument_list|(
literal|"inner"
argument_list|)
expr_stmt|;
name|BEGIN_CLAUSES
operator|.
name|add
argument_list|(
literal|"outer"
argument_list|)
expr_stmt|;
name|BEGIN_CLAUSES
operator|.
name|add
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|BEGIN_CLAUSES
operator|.
name|add
argument_list|(
literal|"order"
argument_list|)
expr_stmt|;
name|END_CLAUSES
operator|.
name|add
argument_list|(
literal|"where"
argument_list|)
expr_stmt|;
name|END_CLAUSES
operator|.
name|add
argument_list|(
literal|"set"
argument_list|)
expr_stmt|;
name|END_CLAUSES
operator|.
name|add
argument_list|(
literal|"having"
argument_list|)
expr_stmt|;
name|END_CLAUSES
operator|.
name|add
argument_list|(
literal|"join"
argument_list|)
expr_stmt|;
name|END_CLAUSES
operator|.
name|add
argument_list|(
literal|"from"
argument_list|)
expr_stmt|;
name|END_CLAUSES
operator|.
name|add
argument_list|(
literal|"by"
argument_list|)
expr_stmt|;
name|END_CLAUSES
operator|.
name|add
argument_list|(
literal|"join"
argument_list|)
expr_stmt|;
name|END_CLAUSES
operator|.
name|add
argument_list|(
literal|"into"
argument_list|)
expr_stmt|;
name|END_CLAUSES
operator|.
name|add
argument_list|(
literal|"union"
argument_list|)
expr_stmt|;
name|LOGICAL
operator|.
name|add
argument_list|(
literal|"and"
argument_list|)
expr_stmt|;
name|LOGICAL
operator|.
name|add
argument_list|(
literal|"or"
argument_list|)
expr_stmt|;
name|LOGICAL
operator|.
name|add
argument_list|(
literal|"when"
argument_list|)
expr_stmt|;
name|LOGICAL
operator|.
name|add
argument_list|(
literal|"else"
argument_list|)
expr_stmt|;
name|LOGICAL
operator|.
name|add
argument_list|(
literal|"end"
argument_list|)
expr_stmt|;
name|QUANTIFIERS
operator|.
name|add
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
name|QUANTIFIERS
operator|.
name|add
argument_list|(
literal|"all"
argument_list|)
expr_stmt|;
name|QUANTIFIERS
operator|.
name|add
argument_list|(
literal|"exists"
argument_list|)
expr_stmt|;
name|QUANTIFIERS
operator|.
name|add
argument_list|(
literal|"some"
argument_list|)
expr_stmt|;
name|QUANTIFIERS
operator|.
name|add
argument_list|(
literal|"any"
argument_list|)
expr_stmt|;
name|DML
operator|.
name|add
argument_list|(
literal|"insert"
argument_list|)
expr_stmt|;
name|DML
operator|.
name|add
argument_list|(
literal|"update"
argument_list|)
expr_stmt|;
name|DML
operator|.
name|add
argument_list|(
literal|"delete"
argument_list|)
expr_stmt|;
name|MISC
operator|.
name|add
argument_list|(
literal|"select"
argument_list|)
expr_stmt|;
name|MISC
operator|.
name|add
argument_list|(
literal|"on"
argument_list|)
expr_stmt|;
comment|//MISC.add("values");
block|}
name|String
name|indentString
init|=
literal|"    "
decl_stmt|;
name|String
name|initial
init|=
literal|"\n    "
decl_stmt|;
name|boolean
name|beginLine
init|=
literal|true
decl_stmt|;
name|boolean
name|afterBeginBeforeEnd
init|=
literal|false
decl_stmt|;
name|boolean
name|afterByOrSetOrFromOrSelect
init|=
literal|false
decl_stmt|;
name|boolean
name|afterValues
init|=
literal|false
decl_stmt|;
name|boolean
name|afterOn
init|=
literal|false
decl_stmt|;
name|boolean
name|afterBetween
init|=
literal|false
decl_stmt|;
name|boolean
name|afterInsert
init|=
literal|false
decl_stmt|;
name|int
name|inFunction
init|=
literal|0
decl_stmt|;
name|int
name|parensSinceSelect
init|=
literal|0
decl_stmt|;
specifier|private
name|LinkedList
name|parenCounts
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
specifier|private
name|LinkedList
name|afterByOrFromOrSelects
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|int
name|indent
init|=
literal|1
decl_stmt|;
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringTokenizer
name|tokens
decl_stmt|;
name|String
name|lastToken
decl_stmt|;
name|String
name|token
decl_stmt|;
name|String
name|lcToken
decl_stmt|;
specifier|public
name|PrettyFormatter
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|tokens
operator|=
operator|new
name|StringTokenizer
argument_list|(
name|sql
argument_list|,
literal|"()+*/-=<>'`\"[],"
operator|+
name|StringHelper
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PrettyFormatter
name|setInitialString
parameter_list|(
name|String
name|initial
parameter_list|)
block|{
name|this
operator|.
name|initial
operator|=
name|initial
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|PrettyFormatter
name|setIndentString
parameter_list|(
name|String
name|indent
parameter_list|)
block|{
name|this
operator|.
name|indentString
operator|=
name|indent
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|format
parameter_list|()
block|{
name|result
operator|.
name|append
argument_list|(
name|initial
argument_list|)
expr_stmt|;
while|while
condition|(
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|token
operator|=
name|tokens
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|lcToken
operator|=
name|token
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"'"
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|String
name|t
decl_stmt|;
do|do
block|{
name|t
operator|=
name|tokens
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|token
operator|+=
name|t
expr_stmt|;
block|}
do|while
condition|(
operator|!
literal|"'"
operator|.
name|equals
argument_list|(
name|t
argument_list|)
condition|)
do|;
block|}
if|else if
condition|(
literal|"\""
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|String
name|t
decl_stmt|;
do|do
block|{
name|t
operator|=
name|tokens
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|token
operator|+=
name|t
expr_stmt|;
block|}
do|while
condition|(
operator|!
literal|"\""
operator|.
name|equals
argument_list|(
name|t
argument_list|)
condition|)
do|;
block|}
if|if
condition|(
name|afterByOrSetOrFromOrSelect
operator|&&
literal|","
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|commaAfterByOrFromOrSelect
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|afterOn
operator|&&
literal|","
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|commaAfterOn
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"("
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|openParen
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|")"
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|closeParen
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|BEGIN_CLAUSES
operator|.
name|contains
argument_list|(
name|lcToken
argument_list|)
condition|)
block|{
name|beginNewClause
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|END_CLAUSES
operator|.
name|contains
argument_list|(
name|lcToken
argument_list|)
condition|)
block|{
name|endNewClause
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"select"
operator|.
name|equals
argument_list|(
name|lcToken
argument_list|)
condition|)
block|{
name|select
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|DML
operator|.
name|contains
argument_list|(
name|lcToken
argument_list|)
condition|)
block|{
name|updateOrInsertOrDelete
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"values"
operator|.
name|equals
argument_list|(
name|lcToken
argument_list|)
condition|)
block|{
name|values
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"on"
operator|.
name|equals
argument_list|(
name|lcToken
argument_list|)
condition|)
block|{
name|on
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|afterBetween
operator|&&
name|lcToken
operator|.
name|equals
argument_list|(
literal|"and"
argument_list|)
condition|)
block|{
name|misc
argument_list|()
expr_stmt|;
name|afterBetween
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|LOGICAL
operator|.
name|contains
argument_list|(
name|lcToken
argument_list|)
condition|)
block|{
name|logical
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|isWhitespace
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|white
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|misc
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isWhitespace
argument_list|(
name|token
argument_list|)
condition|)
name|lastToken
operator|=
name|lcToken
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|commaAfterOn
parameter_list|()
block|{
name|out
argument_list|()
expr_stmt|;
name|indent
operator|--
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
name|afterOn
operator|=
literal|false
expr_stmt|;
name|afterByOrSetOrFromOrSelect
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|commaAfterByOrFromOrSelect
parameter_list|()
block|{
name|out
argument_list|()
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|logical
parameter_list|()
block|{
if|if
condition|(
literal|"end"
operator|.
name|equals
argument_list|(
name|lcToken
argument_list|)
condition|)
name|indent
operator|--
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
name|out
argument_list|()
expr_stmt|;
name|beginLine
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|void
name|on
parameter_list|()
block|{
name|indent
operator|++
expr_stmt|;
name|afterOn
operator|=
literal|true
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
name|out
argument_list|()
expr_stmt|;
name|beginLine
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|void
name|misc
parameter_list|()
block|{
name|out
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"between"
operator|.
name|equals
argument_list|(
name|lcToken
argument_list|)
condition|)
block|{
name|afterBetween
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|afterInsert
condition|)
block|{
name|newline
argument_list|()
expr_stmt|;
name|afterInsert
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|beginLine
operator|=
literal|false
expr_stmt|;
if|if
condition|(
literal|"case"
operator|.
name|equals
argument_list|(
name|lcToken
argument_list|)
condition|)
block|{
name|indent
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|white
parameter_list|()
block|{
if|if
condition|(
operator|!
name|beginLine
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateOrInsertOrDelete
parameter_list|()
block|{
name|out
argument_list|()
expr_stmt|;
name|indent
operator|++
expr_stmt|;
name|beginLine
operator|=
literal|false
expr_stmt|;
if|if
condition|(
literal|"update"
operator|.
name|equals
argument_list|(
name|lcToken
argument_list|)
condition|)
name|newline
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"insert"
operator|.
name|equals
argument_list|(
name|lcToken
argument_list|)
condition|)
name|afterInsert
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|select
parameter_list|()
block|{
name|out
argument_list|()
expr_stmt|;
name|indent
operator|++
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
name|parenCounts
operator|.
name|addLast
argument_list|(
operator|new
name|Integer
argument_list|(
name|parensSinceSelect
argument_list|)
argument_list|)
expr_stmt|;
name|afterByOrFromOrSelects
operator|.
name|addLast
argument_list|(
operator|new
name|Boolean
argument_list|(
name|afterByOrSetOrFromOrSelect
argument_list|)
argument_list|)
expr_stmt|;
name|parensSinceSelect
operator|=
literal|0
expr_stmt|;
name|afterByOrSetOrFromOrSelect
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|out
parameter_list|()
block|{
name|result
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|endNewClause
parameter_list|()
block|{
if|if
condition|(
operator|!
name|afterBeginBeforeEnd
condition|)
block|{
name|indent
operator|--
expr_stmt|;
if|if
condition|(
name|afterOn
condition|)
block|{
name|indent
operator|--
expr_stmt|;
name|afterOn
operator|=
literal|false
expr_stmt|;
block|}
name|newline
argument_list|()
expr_stmt|;
block|}
name|out
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"union"
operator|.
name|equals
argument_list|(
name|lcToken
argument_list|)
condition|)
name|indent
operator|++
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
name|afterBeginBeforeEnd
operator|=
literal|false
expr_stmt|;
name|afterByOrSetOrFromOrSelect
operator|=
literal|"by"
operator|.
name|equals
argument_list|(
name|lcToken
argument_list|)
operator|||
literal|"set"
operator|.
name|equals
argument_list|(
name|lcToken
argument_list|)
operator|||
literal|"from"
operator|.
name|equals
argument_list|(
name|lcToken
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|beginNewClause
parameter_list|()
block|{
if|if
condition|(
operator|!
name|afterBeginBeforeEnd
condition|)
block|{
if|if
condition|(
name|afterOn
condition|)
block|{
name|indent
operator|--
expr_stmt|;
name|afterOn
operator|=
literal|false
expr_stmt|;
block|}
name|indent
operator|--
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
block|}
name|out
argument_list|()
expr_stmt|;
name|beginLine
operator|=
literal|false
expr_stmt|;
name|afterBeginBeforeEnd
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|values
parameter_list|()
block|{
name|indent
operator|--
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
name|out
argument_list|()
expr_stmt|;
name|indent
operator|++
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
name|afterValues
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|closeParen
parameter_list|()
block|{
name|parensSinceSelect
operator|--
expr_stmt|;
if|if
condition|(
name|parensSinceSelect
operator|<
literal|0
condition|)
block|{
name|indent
operator|--
expr_stmt|;
name|parensSinceSelect
operator|=
operator|(
operator|(
name|Integer
operator|)
name|parenCounts
operator|.
name|removeLast
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|afterByOrSetOrFromOrSelect
operator|=
operator|(
operator|(
name|Boolean
operator|)
name|afterByOrFromOrSelects
operator|.
name|removeLast
argument_list|()
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|inFunction
operator|>
literal|0
condition|)
block|{
name|inFunction
operator|--
expr_stmt|;
name|out
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|afterByOrSetOrFromOrSelect
condition|)
block|{
name|indent
operator|--
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
block|}
name|out
argument_list|()
expr_stmt|;
block|}
name|beginLine
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|void
name|openParen
parameter_list|()
block|{
if|if
condition|(
name|isFunctionName
argument_list|(
name|lastToken
argument_list|)
operator|||
name|inFunction
operator|>
literal|0
condition|)
block|{
name|inFunction
operator|++
expr_stmt|;
block|}
name|beginLine
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|inFunction
operator|>
literal|0
condition|)
block|{
name|out
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|out
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|afterByOrSetOrFromOrSelect
condition|)
block|{
name|indent
operator|++
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
name|beginLine
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|parensSinceSelect
operator|++
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|isFunctionName
parameter_list|(
name|String
name|tok
parameter_list|)
block|{
specifier|final
name|char
name|begin
init|=
name|tok
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isIdentifier
init|=
name|Character
operator|.
name|isJavaIdentifierStart
argument_list|(
name|begin
argument_list|)
operator|||
literal|'"'
operator|==
name|begin
decl_stmt|;
return|return
name|isIdentifier
operator|&&
operator|!
name|LOGICAL
operator|.
name|contains
argument_list|(
name|tok
argument_list|)
operator|&&
operator|!
name|END_CLAUSES
operator|.
name|contains
argument_list|(
name|tok
argument_list|)
operator|&&
operator|!
name|QUANTIFIERS
operator|.
name|contains
argument_list|(
name|tok
argument_list|)
operator|&&
operator|!
name|DML
operator|.
name|contains
argument_list|(
name|tok
argument_list|)
operator|&&
operator|!
name|MISC
operator|.
name|contains
argument_list|(
name|tok
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isWhitespace
parameter_list|(
name|String
name|token
parameter_list|)
block|{
return|return
name|StringHelper
operator|.
name|WHITESPACE
operator|.
name|indexOf
argument_list|(
name|token
argument_list|)
operator|>=
literal|0
return|;
block|}
specifier|private
name|void
name|newline
parameter_list|()
block|{
name|result
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indent
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|indentString
argument_list|)
expr_stmt|;
block|}
name|beginLine
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|PrettyFormatter
argument_list|(
name|StringHelper
operator|.
name|join
argument_list|(
literal|" "
argument_list|,
name|args
argument_list|)
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|PrettyFormatter
argument_list|(
literal|"insert into Address (city, state, zip, \"from\") values (?, ?, ?, 'insert value')"
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|PrettyFormatter
argument_list|(
literal|"delete from Address where id = ? and version = ?"
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|PrettyFormatter
argument_list|(
literal|"update Address set city = ?, state=?, zip=?, version = ? where id = ? and version = ?"
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|PrettyFormatter
argument_list|(
literal|"update Address set city = ?, state=?, zip=?, version = ? where id in (select aid from Person)"
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|PrettyFormatter
argument_list|(
literal|"select p.name, a.zipCode, count(*) from Person p left outer join Employee e on e.id = p.id and p.type = 'E' and (e.effective>? or e.effective<?) join Address a on a.pid = p.id where upper(p.name) like 'G%' and p.age> 100 and (p.sex = 'M' or p.sex = 'F') and coalesce( trim(a.street), a.city, (a.zip) ) is not null order by p.name asc, a.zipCode asc"
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|PrettyFormatter
argument_list|(
literal|"select ( (m.age - p.age) * 12 ), trim(upper(p.name)) from Person p, Person m where p.mother = m.id and ( p.age = (select max(p0.age) from Person p0 where (p0.mother=m.id)) and p.name like ? )"
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|PrettyFormatter
argument_list|(
literal|"select * from Address a join Person p on a.pid = p.id, Person m join Address b on b.pid = m.id where p.mother = m.id and p.name like ?"
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|PrettyFormatter
argument_list|(
literal|"select case when p.age> 50 then 'old' when p.age> 18 then 'adult' else 'child' end from Person p where ( case when p.age> 50 then 'old' when p.age> 18 then 'adult' else 'child' end ) like ?"
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

