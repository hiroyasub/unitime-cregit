begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|QueryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|jdbc
operator|.
name|Work
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ApplicationConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_comment
comment|/**  * Process resource given by application property tmtbl.db.update (defaults to file dbupdate.xml)   * and the update database accordingly.  *   * @author Tomas Muller, Stephanie Schluttenhofer  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|DatabaseUpdate
block|{
specifier|protected
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DatabaseUpdate
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Element
name|iRoot
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iDialectSQL
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|abstract
name|String
name|findDbUpdateFileName
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|String
name|versionParameterName
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|String
name|updateName
parameter_list|()
function_decl|;
specifier|protected
name|DatabaseUpdate
parameter_list|(
name|Document
name|document
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
literal|"dbupdate"
operator|.
name|equals
argument_list|(
name|document
operator|.
name|getRootElement
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unknown format."
argument_list|)
throw|;
name|iRoot
operator|=
name|document
operator|.
name|getRootElement
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|DatabaseUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|document
init|=
literal|null
decl_stmt|;
name|String
name|dbUpdateFile
init|=
name|findDbUpdateFileName
argument_list|()
decl_stmt|;
name|URL
name|dbUpdateFileUrl
init|=
name|ApplicationProperties
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|dbUpdateFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbUpdateFileUrl
operator|!=
literal|null
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Reading "
operator|+
name|URLDecoder
operator|.
name|decode
argument_list|(
name|dbUpdateFileUrl
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|document
operator|=
operator|(
operator|new
name|SAXReader
argument_list|()
operator|)
operator|.
name|read
argument_list|(
name|dbUpdateFileUrl
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|new
name|File
argument_list|(
name|dbUpdateFile
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Reading "
operator|+
name|dbUpdateFile
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|document
operator|=
operator|(
operator|new
name|SAXReader
argument_list|()
operator|)
operator|.
name|read
argument_list|(
operator|new
name|File
argument_list|(
name|dbUpdateFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to execute "
operator|+
name|updateName
argument_list|()
operator|+
literal|" database auto-update, reason: resource "
operator|+
name|dbUpdateFile
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
literal|"dbupdate"
operator|.
name|equals
argument_list|(
name|document
operator|.
name|getRootElement
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unknown format."
argument_list|)
throw|;
name|iRoot
operator|=
name|document
operator|.
name|getRootElement
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationConfig
operator|.
name|getConfigValue
argument_list|(
name|versionParameterName
argument_list|()
argument_list|,
literal|"0"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|performUpdate
parameter_list|()
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Current "
operator|+
name|updateName
argument_list|()
operator|+
literal|" database version: "
operator|+
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|dialect
init|=
name|_RootDAO
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"dialect"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iRoot
operator|.
name|elementIterator
argument_list|(
literal|"dialect"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|dialectElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dialect
operator|.
name|equals
argument_list|(
name|dialectElement
operator|.
name|getTextTrim
argument_list|()
argument_list|)
condition|)
name|iDialectSQL
operator|=
name|dialectElement
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iDialectSQL
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Dialect "
operator|+
name|dialect
operator|+
literal|" not recognized, falling back to mysql."
argument_list|)
expr_stmt|;
name|iDialectSQL
operator|=
literal|"mysql"
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|iRoot
operator|.
name|elementIterator
argument_list|(
literal|"update"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|updateElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|updateVersion
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|updateElement
operator|.
name|attributeValue
argument_list|(
literal|"version"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|updateVersion
operator|>
name|getVersion
argument_list|()
operator|&&
operator|!
name|performUpdate
argument_list|(
name|updateElement
argument_list|)
condition|)
break|break;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"New "
operator|+
name|updateName
argument_list|()
operator|+
literal|" database version: "
operator|+
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|performUpdate
parameter_list|(
name|Element
name|updateElement
parameter_list|)
block|{
name|int
name|version
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|updateElement
operator|.
name|attributeValue
argument_list|(
literal|"version"
argument_list|)
argument_list|)
decl_stmt|;
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|String
name|schema
init|=
name|_RootDAO
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"default_schema"
argument_list|)
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|Hashtable
name|variables
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  Performing "
operator|+
name|updateName
argument_list|()
operator|+
literal|" update to version "
operator|+
name|version
operator|+
literal|" ("
operator|+
name|updateElement
operator|.
name|attributeValue
argument_list|(
literal|"comment"
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|updateElement
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|queryElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|queryElement
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|queryElement
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"%SCHEMA%"
argument_list|,
name|schema
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|variables
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|query
operator|=
name|query
operator|.
name|replaceAll
argument_list|(
literal|"%"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"%"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|condition
init|=
name|queryElement
operator|.
name|attributeValue
argument_list|(
literal|"condition"
argument_list|,
literal|"none"
argument_list|)
decl_stmt|;
name|String
name|action
init|=
name|queryElement
operator|.
name|attributeValue
argument_list|(
literal|"action"
argument_list|,
literal|"next"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|queryElement
operator|.
name|attributeValue
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|String
name|into
init|=
name|queryElement
operator|.
name|attributeValue
argument_list|(
literal|"into"
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryElement
operator|.
name|attribute
argument_list|(
literal|"onFail"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|condition
operator|=
literal|"fail"
expr_stmt|;
name|action
operator|=
name|queryElement
operator|.
name|attributeValue
argument_list|(
literal|"onFail"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryElement
operator|.
name|attribute
argument_list|(
literal|"onEqual"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|condition
operator|=
literal|"equal"
expr_stmt|;
name|action
operator|=
name|queryElement
operator|.
name|attributeValue
argument_list|(
literal|"onEqual"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryElement
operator|.
name|attribute
argument_list|(
literal|"onNotEqual"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|condition
operator|=
literal|"notEqual"
expr_stmt|;
name|action
operator|=
name|queryElement
operator|.
name|attributeValue
argument_list|(
literal|"onNotEqual"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
try|try
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"hql"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"sql"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|iDialectSQL
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- HQL: "
operator|+
name|query
operator|+
literal|" (con:"
operator|+
name|condition
operator|+
literal|", act:"
operator|+
name|action
operator|+
literal|", val:"
operator|+
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
literal|null
decl_stmt|;
try|try
block|{
name|q
operator|=
operator|(
name|type
operator|.
name|equals
argument_list|(
literal|"hql"
argument_list|)
condition|?
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
else|:
name|hibSession
operator|.
name|createSQLQuery
argument_list|(
name|query
argument_list|)
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryException
name|e
parameter_list|)
block|{
comment|// Work-around Hibernate issue HHH-2697 (https://hibernate.onjira.com/browse/HHH-2697)
if|if
condition|(
operator|!
literal|"hql"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
specifier|final
name|String
name|sql
init|=
name|query
decl_stmt|;
name|hibSession
operator|.
name|doWork
argument_list|(
operator|new
name|Work
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|int
name|lines
init|=
name|statement
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- "
operator|+
name|lines
operator|+
literal|" lines affected."
argument_list|)
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
name|e
throw|;
block|}
name|boolean
name|ok
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|into
operator|!=
literal|null
condition|)
block|{
name|variables
operator|.
name|put
argument_list|(
name|into
argument_list|,
name|q
operator|.
name|uniqueResult
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"equal"
operator|.
name|equals
argument_list|(
name|condition
argument_list|)
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|ok
operator|=
name|value
operator|.
name|equals
argument_list|(
name|q
operator|.
name|uniqueResult
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"notEqual"
operator|.
name|equals
argument_list|(
name|condition
argument_list|)
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|ok
operator|=
operator|!
name|value
operator|.
name|equals
argument_list|(
name|q
operator|.
name|uniqueResult
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|int
name|lines
init|=
name|q
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- "
operator|+
name|lines
operator|+
literal|" lines affected."
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"noChange"
operator|.
name|equals
argument_list|(
name|condition
argument_list|)
condition|)
name|ok
operator|=
operator|(
name|lines
operator|==
literal|0
operator|)
expr_stmt|;
if|else if
condition|(
literal|"change"
operator|.
name|equals
argument_list|(
name|condition
argument_list|)
condition|)
name|ok
operator|=
operator|(
name|lines
operator|>
literal|0
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|ok
condition|)
block|{
if|if
condition|(
literal|"next"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"done"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
break|break;
if|if
condition|(
literal|"fail"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Update to "
operator|+
name|updateName
argument_list|()
operator|+
literal|" version "
operator|+
name|version
operator|+
literal|" failed (condition not met for query '"
operator|+
name|query
operator|+
literal|"', con:"
operator|+
name|condition
operator|+
literal|", act:"
operator|+
name|action
operator|+
literal|", val:"
operator|+
name|value
operator|+
literal|")."
argument_list|)
expr_stmt|;
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
else|else
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- skip: "
operator|+
name|query
operator|+
literal|" (con:"
operator|+
name|condition
operator|+
literal|", act:"
operator|+
name|action
operator|+
literal|", val:"
operator|+
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Query '"
operator|+
name|query
operator|+
literal|"' failed, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
name|sLog
operator|.
name|warn
argument_list|(
literal|"Cause: "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"fail"
operator|.
name|equals
argument_list|(
name|condition
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"next"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"done"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
break|break;
block|}
name|sLog
operator|.
name|error
argument_list|(
literal|"Update to version "
operator|+
name|version
operator|+
literal|" failed."
argument_list|)
expr_stmt|;
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|ApplicationConfig
name|versionCfg
init|=
name|ApplicationConfig
operator|.
name|getConfig
argument_list|(
name|versionParameterName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionCfg
operator|==
literal|null
condition|)
block|{
name|versionCfg
operator|=
operator|new
name|ApplicationConfig
argument_list|(
name|versionParameterName
argument_list|()
argument_list|)
expr_stmt|;
name|versionCfg
operator|.
name|setDescription
argument_list|(
literal|"Timetabling "
operator|+
name|updateName
argument_list|()
operator|+
literal|" DB version (do not change -- this is used by automatic database update)"
argument_list|)
expr_stmt|;
block|}
name|versionCfg
operator|.
name|setValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|versionCfg
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"    "
operator|+
name|updateName
argument_list|()
operator|+
literal|" Database version increased to: "
operator|+
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|clearCache
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
literal|"Update to version "
operator|+
name|version
operator|+
literal|" failed, reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|update
parameter_list|()
block|{
try|try
block|{
operator|new
name|UniTimeCoreDatabaseUpdate
argument_list|()
operator|.
name|performUpdate
argument_list|()
expr_stmt|;
name|String
name|additionalUpdates
init|=
name|ApplicationProperty
operator|.
name|DatabaseUpdateAddonClass
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|additionalUpdates
operator|!=
literal|null
operator|&&
operator|!
name|additionalUpdates
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DatabaseUpdate
name|du
init|=
operator|(
name|DatabaseUpdate
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|additionalUpdates
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
empty_stmt|;
name|du
operator|.
name|performUpdate
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to execute database auto-update, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|_RootDAO
operator|.
name|closeCurrentThreadSessions
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

