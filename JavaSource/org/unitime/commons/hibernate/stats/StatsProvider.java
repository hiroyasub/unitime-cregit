begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|stat
operator|.
name|CollectionStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|stat
operator|.
name|EntityStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|stat
operator|.
name|QueryStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|stat
operator|.
name|SecondLevelCacheStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|stat
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|htmlgen
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|htmlgen
operator|.
name|TableCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|htmlgen
operator|.
name|TableHeaderCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|htmlgen
operator|.
name|TableRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_comment
comment|/**  * Displays hibernate statistics in html format  * @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|StatsProvider
block|{
specifier|public
specifier|static
name|String
name|getStatsHtml
parameter_list|(
name|boolean
name|summaryOnly
parameter_list|)
block|{
return|return
operator|new
name|StatsProvider
argument_list|()
operator|.
name|getStatsHtml
argument_list|(
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionFactory
argument_list|()
argument_list|,
name|summaryOnly
argument_list|)
return|;
block|}
comment|/**      * Format statistics in HTML      * @param sessionFactory Hibernate Session Factory      * @param summaryOnly true - Display only summary info      * @return HTML String      */
specifier|public
name|String
name|getStatsHtml
parameter_list|(
name|SessionFactory
name|sessionFactory
parameter_list|,
name|boolean
name|summaryOnly
parameter_list|)
block|{
name|StringBuffer
name|hibStats
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Get statistics
name|Statistics
name|stats
init|=
name|sessionFactory
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
comment|// Checks statistics enabled
if|if
condition|(
operator|!
name|stats
operator|.
name|isStatisticsEnabled
argument_list|()
condition|)
block|{
return|return
literal|"<font color='red'><b>Hibernate statistics is not enabled.</b></font>"
return|;
block|}
comment|// Row Color for even numbered rows
name|String
name|evenRowColor
init|=
literal|"#FAFAFA"
decl_stmt|;
comment|// Generate HTML table
name|Table
name|table
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|table
operator|.
name|setWidth
argument_list|(
literal|"100%"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setBorder
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|table
operator|.
name|setCellSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|table
operator|.
name|setCellPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Links
name|StringBuffer
name|links
init|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|links
operator|.
name|append
argument_list|(
literal|"<A class=\"l7\" href=\"#Entity\">Entity</A>"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|summaryOnly
condition|)
name|links
operator|.
name|append
argument_list|(
literal|" -<A class=\"l7\" href=\"#EntityDetail\">Detail</A>"
argument_list|)
expr_stmt|;
name|links
operator|.
name|append
argument_list|(
literal|" |<A class=\"l7\" href=\"#Collection\">Collection</A>"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|summaryOnly
condition|)
name|links
operator|.
name|append
argument_list|(
literal|" -<A class=\"l7\" href=\"#CollectionDetail\">Detail</A>"
argument_list|)
expr_stmt|;
name|links
operator|.
name|append
argument_list|(
literal|" |<A class=\"l7\" href=\"#SecondLevelCache\">Second Level Cache</A>"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|summaryOnly
condition|)
name|links
operator|.
name|append
argument_list|(
literal|" -<A class=\"l7\" href=\"#SecondLevelCacheDetail\">Detail</A>"
argument_list|)
expr_stmt|;
name|links
operator|.
name|append
argument_list|(
literal|" |<A class=\"l7\" href=\"#Query\">Query</A>"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|summaryOnly
condition|)
name|links
operator|.
name|append
argument_list|(
literal|" -<A class=\"l7\" href=\"#QueryDetail\">Detail</A>"
argument_list|)
expr_stmt|;
name|TableRow
name|row
init|=
operator|new
name|TableRow
argument_list|()
decl_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|links
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|"center"
argument_list|,
literal|"middle"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
comment|// Link to top
name|TableRow
name|linkToTop
init|=
operator|new
name|TableRow
argument_list|()
decl_stmt|;
name|linkToTop
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"<A class=\"l7\" href=\"#BackToTop\">Back to Top</A>"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|"right"
argument_list|,
literal|"middle"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ---------------------- Overall Stats ------------------------
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"<A name=\"BackToTop\">Metric</A>"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"Value"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Start Time"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
operator|new
name|Date
argument_list|(
name|stats
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Connect Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getConnectCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Flush Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getFlushCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Session Open Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getSessionOpenCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Session Close Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getSessionCloseCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Transaction Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getTransactionCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Successful Transaction Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getSuccessfulTransactionCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Prepare Statement Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getPrepareStatementCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Close Statement Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getCloseStatementCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Optimistic Failure Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getOptimisticFailureCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"<hr>"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
comment|// ---------------------- Entity Stats ------------------------
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"<A name=\"Entity\">Entity</A>:"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Fetch Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getEntityFetchCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Load Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getEntityLoadCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Insert Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getEntityInsertCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Update Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getEntityUpdateCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Delete Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getEntityDeleteCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"<hr>"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|linkToTop
argument_list|)
expr_stmt|;
comment|// ---------------------- Detailed Entity Stats ------------------------
if|if
condition|(
operator|!
name|summaryOnly
condition|)
block|{
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"<A name=\"EntityDetail\">Entity Statistics Detail</A>:"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|String
index|[]
name|cEntityNames
init|=
name|stats
operator|.
name|getEntityNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|cEntityNames
operator|==
literal|null
operator|||
name|cEntityNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"No entity names found"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Table
name|subTable
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|subTable
operator|.
name|setCellSpacing
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|subTable
operator|.
name|setCellPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"&nbsp; "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Fetches "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Loads "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Inserts "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Updates "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Deletes "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|subTable
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cEntityNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|entityName
init|=
name|cEntityNames
index|[
name|i
index|]
decl_stmt|;
name|EntityStatistics
name|eStats
init|=
name|stats
operator|.
name|getEntityStatistics
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
name|row
operator|.
name|setBgColor
argument_list|(
name|evenRowColor
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|entityName
operator|+
literal|"&nbsp;"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|eStats
operator|.
name|getFetchCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|eStats
operator|.
name|getLoadCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|eStats
operator|.
name|getInsertCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|eStats
operator|.
name|getUpdateCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|eStats
operator|.
name|getDeleteCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|subTable
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|subTable
operator|.
name|toHtml
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"<hr>"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|linkToTop
argument_list|)
expr_stmt|;
block|}
comment|// ---------------------- Collection Stats ------------------------
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"<A name=\"Collection\">Collection</A>:"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Fetch Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getCollectionFetchCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Load Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getCollectionLoadCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Update Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getCollectionUpdateCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Remove Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getCollectionRemoveCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Recreate Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getCollectionRecreateCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"<hr>"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|linkToTop
argument_list|)
expr_stmt|;
comment|// ---------------------- Detailed Collection Stats ------------------------
if|if
condition|(
operator|!
name|summaryOnly
condition|)
block|{
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"<A name=\"CollectionDetail\">Collection Statistics Detail</A>:"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|String
index|[]
name|cRoleNames
init|=
name|stats
operator|.
name|getCollectionRoleNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|cRoleNames
operator|==
literal|null
operator|||
name|cRoleNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"No collection roles found"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Table
name|subTable
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|subTable
operator|.
name|setCellSpacing
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|subTable
operator|.
name|setCellPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"&nbsp; "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Fetches "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Loads "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Updates "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Removes "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Recreates "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|subTable
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cRoleNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|roleName
init|=
name|cRoleNames
index|[
name|i
index|]
decl_stmt|;
name|CollectionStatistics
name|cStats
init|=
name|stats
operator|.
name|getCollectionStatistics
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
name|row
operator|.
name|setBgColor
argument_list|(
name|evenRowColor
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|roleName
operator|+
literal|"&nbsp;"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|cStats
operator|.
name|getFetchCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|cStats
operator|.
name|getLoadCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|cStats
operator|.
name|getUpdateCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|cStats
operator|.
name|getRemoveCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|cStats
operator|.
name|getRecreateCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|subTable
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|subTable
operator|.
name|toHtml
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"<hr>"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|linkToTop
argument_list|)
expr_stmt|;
block|}
comment|// ---------------------- Second Level Cache Stats ------------------------
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"<A name=\"SecondLevelCache\">Second Level Cache</A>:"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Hit Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getSecondLevelCacheHitCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Miss Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getSecondLevelCacheMissCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Put Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getSecondLevelCachePutCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"<hr>"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|linkToTop
argument_list|)
expr_stmt|;
comment|// ---------------------- Detailed Second Level Cache Stats ------------------------
if|if
condition|(
operator|!
name|summaryOnly
condition|)
block|{
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"<A name=\"SecondLevelCacheDetail\">Second Level Cache Statistics Detail</A>:"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|String
index|[]
name|cRegionNames
init|=
name|stats
operator|.
name|getSecondLevelCacheRegionNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|cRegionNames
operator|==
literal|null
operator|||
name|cRegionNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"No region names found"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Table
name|subTable
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|subTable
operator|.
name|setCellSpacing
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|subTable
operator|.
name|setCellPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"&nbsp; "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Entities "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Hits "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Misses "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Puts "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" In Memory "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" On Disk "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Memory "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|subTable
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|long
name|elementsInMem
init|=
literal|0
decl_stmt|,
name|elementsOnDisk
init|=
literal|0
decl_stmt|,
name|putCnt
init|=
literal|0
decl_stmt|,
name|missCnt
init|=
literal|0
decl_stmt|,
name|hitCnt
init|=
literal|0
decl_stmt|,
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cRegionNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cRegionName
init|=
name|cRegionNames
index|[
name|i
index|]
decl_stmt|;
name|SecondLevelCacheStatistics
name|sStats
init|=
name|stats
operator|.
name|getSecondLevelCacheStatistics
argument_list|(
name|cRegionName
argument_list|)
decl_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
name|row
operator|.
name|setBgColor
argument_list|(
name|evenRowColor
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|cRegionName
operator|+
literal|"&nbsp;"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|sStats
operator|.
name|getElementCountInMemory
argument_list|()
operator|+
name|sStats
operator|.
name|getElementCountOnDisk
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|//sStats.getEntries().size()
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|sStats
operator|.
name|getHitCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|sStats
operator|.
name|getMissCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|sStats
operator|.
name|getPutCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|sStats
operator|.
name|getElementCountInMemory
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|sStats
operator|.
name|getElementCountOnDisk
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|sStats
operator|.
name|getSizeInMemory
argument_list|()
operator|+
literal|" bytes"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|elementsInMem
operator|+=
name|sStats
operator|.
name|getElementCountInMemory
argument_list|()
expr_stmt|;
name|elementsOnDisk
operator|+=
name|sStats
operator|.
name|getElementCountOnDisk
argument_list|()
expr_stmt|;
name|putCnt
operator|+=
name|sStats
operator|.
name|getPutCount
argument_list|()
expr_stmt|;
name|missCnt
operator|+=
name|sStats
operator|.
name|getMissCount
argument_list|()
expr_stmt|;
name|hitCnt
operator|+=
name|sStats
operator|.
name|getHitCount
argument_list|()
expr_stmt|;
name|size
operator|+=
name|sStats
operator|.
name|getSizeInMemory
argument_list|()
expr_stmt|;
name|subTable
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"Total&nbsp;"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|""
operator|+
operator|(
name|elementsInMem
operator|+
name|elementsOnDisk
operator|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|""
operator|+
name|hitCnt
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|""
operator|+
name|missCnt
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|""
operator|+
name|putCnt
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|""
operator|+
name|elementsInMem
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|""
operator|+
name|elementsOnDisk
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
name|size
operator|+
literal|" bytes"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|subTable
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|subTable
operator|.
name|toHtml
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"<hr>"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|linkToTop
argument_list|)
expr_stmt|;
block|}
comment|// ---------------------- Query Stats ------------------------
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"<A name=\"Query\">Query</A>:"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Execution Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getQueryExecutionCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Execution Max Time"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getQueryExecutionMaxTime
argument_list|()
operator|+
literal|" ms"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Cache Hit Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getQueryCacheHitCount
argument_list|()
operator|+
literal|" ms"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Cache Miss Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getQueryCacheMissCount
argument_list|()
operator|+
literal|" ms"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"&nbsp; Cache Put Count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|stats
operator|.
name|getQueryCachePutCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"<hr>"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|linkToTop
argument_list|)
expr_stmt|;
comment|// ---------------------- Detailed Query Stats ------------------------
if|if
condition|(
operator|!
name|summaryOnly
condition|)
block|{
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"<A name=\"QueryDetail\">Query Statistics Detail</A>:"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|String
index|[]
name|cQueryStrings
init|=
name|stats
operator|.
name|getQueries
argument_list|()
decl_stmt|;
if|if
condition|(
name|cQueryStrings
operator|==
literal|null
operator|||
name|cQueryStrings
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"No query strings found"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Table
name|subTable
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|subTable
operator|.
name|setCellSpacing
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|subTable
operator|.
name|setCellPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"&nbsp; "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Execs "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Rows "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Max Time "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Min Time "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Avg Time "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Cache Hits "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Cache Misses "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|" Cache Puts "
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|subTable
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cQueryStrings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cQueryString
init|=
name|cQueryStrings
index|[
name|i
index|]
decl_stmt|;
name|QueryStatistics
name|qStats
init|=
name|stats
operator|.
name|getQueryStatistics
argument_list|(
name|cQueryString
argument_list|)
decl_stmt|;
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
name|row
operator|.
name|setBgColor
argument_list|(
name|evenRowColor
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|cQueryString
operator|+
literal|"&nbsp;"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|qStats
operator|.
name|getExecutionCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|qStats
operator|.
name|getExecutionRowCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|qStats
operator|.
name|getExecutionMaxTime
argument_list|()
operator|+
literal|" ms"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|qStats
operator|.
name|getExecutionMinTime
argument_list|()
operator|+
literal|" ms"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|qStats
operator|.
name|getExecutionAvgTime
argument_list|()
operator|+
literal|" ms"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|qStats
operator|.
name|getCacheHitCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|qStats
operator|.
name|getCacheMissCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|qStats
operator|.
name|getCachePutCount
argument_list|()
operator|+
literal|""
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|subTable
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
name|subTable
operator|.
name|toHtml
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|row
operator|=
operator|new
name|TableRow
argument_list|()
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|(
literal|"<hr>"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|linkToTop
argument_list|)
expr_stmt|;
block|}
comment|// Add to generated HTML
name|hibStats
operator|.
name|append
argument_list|(
name|table
operator|.
name|toHtml
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|hibStats
operator|.
name|append
argument_list|(
literal|"Exception occured: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|hibStats
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Generate header cell      * @param content Content of cell      * @param rowSpan Row Span      * @param colSpan Column Span      * @return TableHeaderCell Object      */
specifier|private
name|TableHeaderCell
name|headerCell
parameter_list|(
name|String
name|content
parameter_list|,
name|int
name|rowSpan
parameter_list|,
name|int
name|colSpan
parameter_list|)
block|{
name|TableHeaderCell
name|cell
init|=
operator|new
name|TableHeaderCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setRowSpan
argument_list|(
name|rowSpan
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setColSpan
argument_list|(
name|colSpan
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setValign
argument_list|(
literal|"top"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<font size=\"-1\">"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"</font>"
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
comment|/**      * Generate table cell (align=left and valign=top)      * @param content Content of cell      * @param rowSpan Row Span      * @param colSpan Column Span      * @param noWrap noWrap attribute (true / false)      * @return TableCell Object      */
specifier|private
name|TableCell
name|cell
parameter_list|(
name|String
name|content
parameter_list|,
name|int
name|rowSpan
parameter_list|,
name|int
name|colSpan
parameter_list|,
name|boolean
name|noWrap
parameter_list|)
block|{
name|TableCell
name|cell
init|=
name|cell
argument_list|(
name|content
argument_list|,
name|rowSpan
argument_list|,
name|colSpan
argument_list|,
name|noWrap
argument_list|,
literal|"left"
argument_list|,
literal|"top"
argument_list|)
decl_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
comment|/**      * Generate table cell      * @param content Content of cell      * @param rowSpan Row Span      * @param colSpan Column Span      * @param noWrap noWrap attribute (true / false)      * @param align left / right / center      * @param valign top / bottom / middle      * @return TableCell Object      */
specifier|private
name|TableCell
name|cell
parameter_list|(
name|String
name|content
parameter_list|,
name|int
name|rowSpan
parameter_list|,
name|int
name|colSpan
parameter_list|,
name|boolean
name|noWrap
parameter_list|,
name|String
name|align
parameter_list|,
name|String
name|valign
parameter_list|)
block|{
name|TableCell
name|cell
init|=
operator|new
name|TableCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setRowSpan
argument_list|(
name|rowSpan
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setColSpan
argument_list|(
name|colSpan
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
name|noWrap
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
name|align
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setValign
argument_list|(
name|valign
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<font size=\"-1\">"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"</font>"
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
block|}
end_class

end_unit

