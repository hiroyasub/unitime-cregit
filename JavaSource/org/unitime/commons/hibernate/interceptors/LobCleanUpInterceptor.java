begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CallbackException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|EmptyInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|cfg
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|LobCleanUpInterceptor
extends|extends
name|EmptyInterceptor
block|{
specifier|protected
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LobCleanUpInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|iDoAudit
init|=
literal|false
decl_stmt|;
specifier|public
name|LobCleanUpInterceptor
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|iDoAudit
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|configuration
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.hibernate.audit"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// a thread local set to store temperary LOBs
specifier|private
specifier|static
specifier|final
name|ThreadLocal
name|sThreadTempLobs
init|=
operator|new
name|ThreadLocal
argument_list|()
block|{
specifier|protected
name|Object
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|doAudit
argument_list|()
condition|)
name|Debug
operator|.
name|info
argument_list|(
literal|"!!! Audit: Cleaning LOBs "
argument_list|)
expr_stmt|;
name|Set
name|tempLobs
init|=
operator|(
name|Set
operator|)
name|sThreadTempLobs
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|tempLobs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|lob
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Method
name|freeTemporary
init|=
name|lob
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"freeTemporary"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|freeTemporary
operator|.
name|invoke
argument_list|(
name|lob
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"clean LOB failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"clean LOB failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"clean LOB failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"clean LOB failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"clean LOB failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|tempLobs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// register oracle temperary BLOB/CLOB into
comment|// a thread-local set, this should be called at
comment|// the end of nullSafeSet(...) in BinaryBlobType
comment|// or StringClobType
specifier|public
specifier|static
name|void
name|registerTempLobs
parameter_list|(
name|Object
name|lob
parameter_list|)
block|{
operator|(
operator|(
name|Set
operator|)
name|sThreadTempLobs
operator|.
name|get
argument_list|()
operator|)
operator|.
name|add
argument_list|(
name|lob
argument_list|)
expr_stmt|;
block|}
comment|/*      * Audit Events      */
specifier|public
name|void
name|postFlush
parameter_list|(
name|Iterator
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|doAudit
argument_list|()
condition|)
name|Debug
operator|.
name|info
argument_list|(
literal|"!!! Audit: Post Flush "
argument_list|)
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
name|super
operator|.
name|postFlush
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|afterTransactionBegin
parameter_list|(
name|Transaction
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|doAudit
argument_list|()
condition|)
name|Debug
operator|.
name|info
argument_list|(
literal|"!!! Audit: Transaction Begun"
argument_list|)
expr_stmt|;
name|super
operator|.
name|afterTransactionBegin
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|afterTransactionCompletion
parameter_list|(
name|Transaction
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|doAudit
argument_list|()
condition|)
name|Debug
operator|.
name|info
argument_list|(
literal|"!!! Audit: Transaction Complete"
argument_list|)
expr_stmt|;
name|super
operator|.
name|afterTransactionCompletion
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onCollectionUpdate
parameter_list|(
name|Object
name|arg0
parameter_list|,
name|Serializable
name|arg1
parameter_list|)
throws|throws
name|CallbackException
block|{
if|if
condition|(
name|doAudit
argument_list|()
condition|)
name|Debug
operator|.
name|info
argument_list|(
literal|"!!! Audit: Collection Update ... "
operator|+
name|arg0
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|onCollectionUpdate
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|onFlushDirty
parameter_list|(
name|Object
name|arg0
parameter_list|,
name|Serializable
name|arg1
parameter_list|,
name|Object
index|[]
name|arg2
parameter_list|,
name|Object
index|[]
name|arg3
parameter_list|,
name|String
index|[]
name|arg4
parameter_list|,
name|Type
index|[]
name|arg5
parameter_list|)
block|{
if|if
condition|(
name|doAudit
argument_list|()
condition|)
name|Debug
operator|.
name|info
argument_list|(
literal|"!!! Audit: Flush Dirty ... "
operator|+
name|arg0
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|onFlushDirty
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|,
name|arg5
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|onLoad
parameter_list|(
name|Object
name|arg0
parameter_list|,
name|Serializable
name|arg1
parameter_list|,
name|Object
index|[]
name|arg2
parameter_list|,
name|String
index|[]
name|arg3
parameter_list|,
name|Type
index|[]
name|arg4
parameter_list|)
block|{
if|if
condition|(
name|doAudit
argument_list|()
condition|)
name|Debug
operator|.
name|info
argument_list|(
literal|"!!! Audit: Loading ... "
operator|+
name|arg0
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|onLoad
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|onSave
parameter_list|(
name|Object
name|arg0
parameter_list|,
name|Serializable
name|arg1
parameter_list|,
name|Object
index|[]
name|arg2
parameter_list|,
name|String
index|[]
name|arg3
parameter_list|,
name|Type
index|[]
name|arg4
parameter_list|)
block|{
if|if
condition|(
name|doAudit
argument_list|()
condition|)
name|Debug
operator|.
name|info
argument_list|(
literal|"!!! Audit: Saving ... "
operator|+
name|arg0
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|onSave
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|doAudit
parameter_list|()
block|{
return|return
name|iDoAudit
return|;
block|}
block|}
end_class

end_unit

