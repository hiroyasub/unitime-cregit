begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|jgroups
package|;
end_package

begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Global
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|PhysicalAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|View
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|conf
operator|.
name|ClassConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|conf
operator|.
name|PropertyConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|protocols
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|protocols
operator|.
name|PingData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|stack
operator|.
name|IpAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClusterDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ClusterDiscoveryDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|UniTimeClusterDiscovery
extends|extends
name|Discovery
block|{
static|static
block|{
name|ClassConfigurator
operator|.
name|addProtocol
argument_list|(
operator|(
name|short
operator|)
literal|666
argument_list|,
name|UniTimeClusterDiscovery
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Property
argument_list|(
name|description
operator|=
literal|"Number of additional ports to be probed for membership. A port_range of 0 does not "
operator|+
literal|"probe additional ports. Example: initial_hosts=A[7800] port_range=0 probes A:7800, port_range=1 probes "
operator|+
literal|"A:7800 and A:7801"
argument_list|)
specifier|protected
name|int
name|port_range
init|=
literal|1
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"initial_hosts"
argument_list|,
name|description
operator|=
literal|"Comma delimited list of hosts to be contacted for initial membership"
argument_list|,
name|converter
operator|=
name|PropertyConverters
operator|.
name|InitialHosts
operator|.
name|class
argument_list|,
name|dependsUpon
operator|=
literal|"port_range"
argument_list|,
name|systemProperty
operator|=
name|Global
operator|.
name|TCPPING_INITIAL_HOSTS
argument_list|)
specifier|protected
name|List
argument_list|<
name|IpAddress
argument_list|>
name|initial_hosts
init|=
name|Collections
operator|.
name|EMPTY_LIST
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|description
operator|=
literal|"Interval (in milliseconds) at which the own Address is written. 0 disables it."
argument_list|)
specifier|protected
name|long
name|interval
init|=
literal|60000
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|description
operator|=
literal|"Interval (in milliseconds) after which an old record is deleted from the cluster discovery table."
argument_list|)
specifier|protected
name|long
name|time_to_live
init|=
literal|600000
decl_stmt|;
specifier|private
name|Future
argument_list|<
name|?
argument_list|>
name|writer_future
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
specifier|final
name|Future
argument_list|<
name|?
argument_list|>
name|wf
init|=
name|writer_future
decl_stmt|;
if|if
condition|(
name|wf
operator|!=
literal|null
condition|)
block|{
name|wf
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|writer_future
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
name|deleteSelf
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to remove my address from the "
operator|+
name|group_addr
operator|+
literal|" cluster database."
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|interval
operator|>
literal|0
condition|)
block|{
name|writer_future
operator|=
name|timer
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|WriterTask
argument_list|()
argument_list|,
name|interval
argument_list|,
name|interval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|PhysicalAddress
argument_list|>
name|fetchClusterMembers
parameter_list|(
name|String
name|cluster_name
parameter_list|)
block|{
name|Set
argument_list|<
name|PhysicalAddress
argument_list|>
name|retval
init|=
operator|new
name|HashSet
argument_list|<
name|PhysicalAddress
argument_list|>
argument_list|(
name|initial_hosts
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ClusterDiscoveryDAO
operator|.
name|isConfigured
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Hibernate not configured yet, returning initial hosts for "
operator|+
name|group_addr
operator|+
literal|" cluster members."
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
name|List
argument_list|<
name|PingData
argument_list|>
name|members
init|=
name|readAllMembers
argument_list|()
decl_stmt|;
if|if
condition|(
name|members
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|retval
return|;
for|for
control|(
name|PingData
name|tmp
range|:
name|members
control|)
block|{
name|Collection
argument_list|<
name|PhysicalAddress
argument_list|>
name|dests
init|=
operator|(
name|tmp
operator|!=
literal|null
condition|?
name|tmp
operator|.
name|getPhysicalAddrs
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|dests
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|PhysicalAddress
name|dest
range|:
name|dests
control|)
block|{
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
continue|continue;
name|retval
operator|.
name|add
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
name|PhysicalAddress
name|my_addr
init|=
name|getAndSavePhysicalAddress
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Cluster "
operator|+
name|cluster_name
operator|+
literal|" has members "
operator|+
name|retval
operator|+
literal|" (I am "
operator|+
name|my_addr
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
specifier|protected
specifier|synchronized
name|List
argument_list|<
name|PingData
argument_list|>
name|readAllMembers
parameter_list|()
block|{
name|List
argument_list|<
name|PingData
argument_list|>
name|members
init|=
operator|new
name|ArrayList
argument_list|<
name|PingData
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ClusterDiscoveryDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|long
name|deadline
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|time_to_live
decl_stmt|;
for|for
control|(
name|ClusterDiscovery
name|cluster
range|:
operator|(
name|List
argument_list|<
name|ClusterDiscovery
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from ClusterDiscovery where clusterName = :clusterName"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"clusterName"
argument_list|,
name|group_addr
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|cluster
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|getTime
argument_list|()
operator|>=
name|deadline
condition|)
name|members
operator|.
name|add
argument_list|(
name|deserialize
argument_list|(
name|cluster
operator|.
name|getPingData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Failed to read  all members of cluster "
operator|+
name|group_addr
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|members
return|;
block|}
specifier|protected
specifier|static
name|String
name|addressAsString
parameter_list|(
name|Address
name|address
parameter_list|)
block|{
if|if
condition|(
name|address
operator|==
literal|null
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|address
operator|instanceof
name|UUID
condition|)
return|return
operator|(
operator|(
name|UUID
operator|)
name|address
operator|)
operator|.
name|toStringLong
argument_list|()
return|;
return|return
name|address
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|PhysicalAddress
name|getAndSavePhysicalAddress
parameter_list|()
block|{
name|PhysicalAddress
name|physical_addr
init|=
operator|(
name|PhysicalAddress
operator|)
name|down
argument_list|(
operator|new
name|Event
argument_list|(
name|Event
operator|.
name|GET_PHYSICAL_ADDRESS
argument_list|,
name|local_addr
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ClusterDiscoveryDAO
operator|.
name|isConfigured
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Hibernate not configured yet, skiping save of physical address for cluster "
operator|+
name|group_addr
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
name|physical_addr
return|;
block|}
name|List
argument_list|<
name|PhysicalAddress
argument_list|>
name|physical_addrs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|physical_addr
argument_list|)
decl_stmt|;
name|PingData
name|data
init|=
operator|new
name|PingData
argument_list|(
name|local_addr
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|UUID
operator|.
name|get
argument_list|(
name|local_addr
argument_list|)
argument_list|,
name|physical_addrs
argument_list|)
decl_stmt|;
name|updateMyData
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|physical_addr
return|;
block|}
specifier|protected
specifier|synchronized
name|void
name|updateMyData
parameter_list|(
name|PingData
name|data
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ClusterDiscoveryDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
name|String
name|own_address
init|=
name|addressAsString
argument_list|(
name|data
operator|.
name|getAddress
argument_list|()
argument_list|)
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|ClusterDiscovery
name|cluster
init|=
name|ClusterDiscoveryDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|ClusterDiscovery
argument_list|(
name|own_address
argument_list|,
name|group_addr
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|cluster
operator|==
literal|null
condition|)
name|cluster
operator|=
operator|new
name|ClusterDiscovery
argument_list|(
name|own_address
argument_list|,
name|group_addr
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setPingData
argument_list|(
name|serializeWithoutView
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setTimeStamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Failed to update my data for cluster "
operator|+
name|group_addr
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|down
parameter_list|(
name|Event
name|evt
parameter_list|)
block|{
specifier|final
name|Object
name|retval
init|=
name|super
operator|.
name|down
argument_list|(
name|evt
argument_list|)
decl_stmt|;
if|if
condition|(
name|evt
operator|.
name|getType
argument_list|()
operator|==
name|Event
operator|.
name|VIEW_CHANGE
condition|)
name|handleView
argument_list|(
operator|(
name|View
operator|)
name|evt
operator|.
name|getArg
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
specifier|protected
name|void
name|handleView
parameter_list|(
name|View
name|view
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ClusterDiscoveryDAO
operator|.
name|isConfigured
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Hibernate not configured yet, ignoring view change for cluster "
operator|+
name|group_addr
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Collection
argument_list|<
name|Address
argument_list|>
name|mbrs
init|=
name|view
operator|.
name|getMembers
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|is_coordinator
init|=
operator|!
name|mbrs
operator|.
name|isEmpty
argument_list|()
operator|&&
name|mbrs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
name|local_addr
argument_list|)
decl_stmt|;
if|if
condition|(
name|is_coordinator
condition|)
block|{
name|purgeOtherAddresses
argument_list|(
name|mbrs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|synchronized
name|void
name|purgeOtherAddresses
parameter_list|(
name|Collection
argument_list|<
name|Address
argument_list|>
name|members
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ClusterDiscoveryDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|long
name|deadline
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|time_to_live
decl_stmt|;
name|cluster
label|:
for|for
control|(
name|ClusterDiscovery
name|cluster
range|:
operator|(
name|List
argument_list|<
name|ClusterDiscovery
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from ClusterDiscovery where clusterName = :clusterName"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"clusterName"
argument_list|,
name|group_addr
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
for|for
control|(
name|Address
name|address
range|:
name|members
control|)
if|if
condition|(
name|cluster
operator|.
name|getOwnAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|addressAsString
argument_list|(
name|address
argument_list|)
argument_list|)
condition|)
continue|continue
name|cluster
continue|;
name|PingData
name|pd
init|=
name|deserialize
argument_list|(
name|cluster
operator|.
name|getPingData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|!=
literal|null
operator|&&
name|cluster
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|getTime
argument_list|()
operator|<
name|deadline
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Purging "
operator|+
name|pd
operator|.
name|getPhysicalAddrs
argument_list|()
operator|+
literal|" from cluster "
operator|+
name|group_addr
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|synchronized
name|void
name|deleteSelf
parameter_list|()
block|{
specifier|final
name|String
name|ownAddress
init|=
name|addressAsString
argument_list|(
name|local_addr
argument_list|)
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ClusterDiscoveryDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|ClusterDiscovery
name|cluster
init|=
name|ClusterDiscoveryDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|ClusterDiscovery
argument_list|(
name|ownAddress
argument_list|,
name|group_addr
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|hibSession
operator|.
name|delete
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|sendDiscoveryRequestsInParallel
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDynamic
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|protected
specifier|final
class|class
name|WriterTask
implements|implements
name|Runnable
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|getAndSavePhysicalAddress
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

