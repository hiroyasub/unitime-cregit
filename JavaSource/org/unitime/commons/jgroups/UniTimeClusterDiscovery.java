begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|jgroups
package|;
end_package

begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Global
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|PhysicalAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|View
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|annotations
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|annotations
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|conf
operator|.
name|ClassConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|conf
operator|.
name|PropertyConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|protocols
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|protocols
operator|.
name|PingData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|protocols
operator|.
name|PingHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|util
operator|.
name|BoundedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|util
operator|.
name|Responses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|util
operator|.
name|TimeScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|util
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClusterDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ClusterDiscoveryDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|UniTimeClusterDiscovery
extends|extends
name|Discovery
block|{
static|static
block|{
name|ClassConfigurator
operator|.
name|addProtocol
argument_list|(
operator|(
name|short
operator|)
literal|666
argument_list|,
name|UniTimeClusterDiscovery
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Future
argument_list|<
name|?
argument_list|>
name|info_writer
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isDynamic
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Whether the InfoWriter task is running"
argument_list|)
specifier|public
specifier|synchronized
name|boolean
name|isInfoWriterRunning
parameter_list|()
block|{
return|return
name|info_writer
operator|!=
literal|null
operator|&&
operator|!
name|info_writer
operator|.
name|isDone
argument_list|()
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Causes the member to write its own information into the DB, replacing an existing entry"
argument_list|)
specifier|public
name|void
name|writeInfo
parameter_list|()
block|{
name|writeOwnInformation
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Property
argument_list|(
name|description
operator|=
literal|"Removes the table contents a view change. Enabling this can help removing crashed members "
operator|+
literal|"that are still in the table, but generates more DB traffic"
argument_list|)
specifier|protected
name|boolean
name|clear_table_on_view_change
init|=
literal|true
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|description
operator|=
literal|"The max number of times my own information should be written to the DB after a view change"
argument_list|)
specifier|protected
name|int
name|info_writer_max_writes_after_view
init|=
literal|5
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|description
operator|=
literal|"Interval (in ms) at which the info writer should kick in"
argument_list|)
specifier|protected
name|long
name|info_writer_sleep_time
init|=
literal|10000
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|description
operator|=
literal|"Number of additional ports to be probed for membership. A port_range of 0 does not "
operator|+
literal|"probe additional ports. Example: initial_hosts=A[7800] port_range=0 probes A:7800, port_range=1 probes "
operator|+
literal|"A:7800 and A:7801"
argument_list|)
specifier|private
name|int
name|port_range
init|=
literal|1
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"initial_hosts"
argument_list|,
name|description
operator|=
literal|"Comma delimited list of hosts to be contacted for initial membership"
argument_list|,
name|converter
operator|=
name|PropertyConverters
operator|.
name|InitialHosts
operator|.
name|class
argument_list|,
name|dependsUpon
operator|=
literal|"port_range"
argument_list|,
name|systemProperty
operator|=
name|Global
operator|.
name|TCPPING_INITIAL_HOSTS
argument_list|)
specifier|private
name|List
argument_list|<
name|PhysicalAddress
argument_list|>
name|initial_hosts
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|description
operator|=
literal|"max number of hosts to keep beyond the ones in initial_hosts"
argument_list|)
specifier|protected
name|int
name|max_dynamic_hosts
init|=
literal|2000
decl_stmt|;
specifier|protected
name|BoundedList
argument_list|<
name|PhysicalAddress
argument_list|>
name|dynamic_hosts
decl_stmt|;
specifier|public
name|List
argument_list|<
name|PhysicalAddress
argument_list|>
name|getInitialHosts
parameter_list|()
block|{
return|return
name|initial_hosts
return|;
block|}
specifier|public
name|void
name|setInitialHosts
parameter_list|(
name|List
argument_list|<
name|PhysicalAddress
argument_list|>
name|initial_hosts
parameter_list|)
block|{
name|this
operator|.
name|initial_hosts
operator|=
name|initial_hosts
expr_stmt|;
block|}
specifier|public
name|int
name|getPortRange
parameter_list|()
block|{
return|return
name|port_range
return|;
block|}
specifier|public
name|void
name|setPortRange
parameter_list|(
name|int
name|port_range
parameter_list|)
block|{
name|this
operator|.
name|port_range
operator|=
name|port_range
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
specifier|public
name|String
name|getDynamicHostList
parameter_list|()
block|{
return|return
name|dynamic_hosts
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|ManagedOperation
specifier|public
name|void
name|clearDynamicHostList
parameter_list|()
block|{
name|dynamic_hosts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
specifier|public
name|String
name|getInitialHostsList
parameter_list|()
block|{
return|return
name|initial_hosts
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
name|dynamic_hosts
operator|=
operator|new
name|BoundedList
argument_list|<
name|PhysicalAddress
argument_list|>
argument_list|(
name|max_dynamic_hosts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|stopInfoWriter
argument_list|()
expr_stmt|;
name|deleteSelf
argument_list|()
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|down
parameter_list|(
name|Event
name|evt
parameter_list|)
block|{
switch|switch
condition|(
name|evt
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Event
operator|.
name|VIEW_CHANGE
case|:
name|View
name|old_view
init|=
name|view
decl_stmt|;
name|boolean
name|previous_coord
init|=
name|is_coord
decl_stmt|;
name|Object
name|retval
init|=
name|super
operator|.
name|down
argument_list|(
name|evt
argument_list|)
decl_stmt|;
name|View
name|new_view
init|=
operator|(
name|View
operator|)
name|evt
operator|.
name|getArg
argument_list|()
decl_stmt|;
name|handleView
argument_list|(
name|new_view
argument_list|,
name|old_view
argument_list|,
name|previous_coord
operator|!=
name|is_coord
argument_list|)
expr_stmt|;
for|for
control|(
name|Address
name|logical_addr
range|:
name|members
control|)
block|{
name|PhysicalAddress
name|physical_addr
init|=
operator|(
name|PhysicalAddress
operator|)
name|down_prot
operator|.
name|down
argument_list|(
operator|new
name|Event
argument_list|(
name|Event
operator|.
name|GET_PHYSICAL_ADDRESS
argument_list|,
name|logical_addr
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|physical_addr
operator|!=
literal|null
operator|&&
operator|!
name|initial_hosts
operator|.
name|contains
argument_list|(
name|physical_addr
argument_list|)
condition|)
block|{
name|dynamic_hosts
operator|.
name|addIfAbsent
argument_list|(
name|physical_addr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
case|case
name|Event
operator|.
name|SET_PHYSICAL_ADDRESS
case|:
name|retval
operator|=
name|super
operator|.
name|down
argument_list|(
name|evt
argument_list|)
expr_stmt|;
name|Tuple
argument_list|<
name|Address
argument_list|,
name|PhysicalAddress
argument_list|>
name|tuple
init|=
operator|(
name|Tuple
argument_list|<
name|Address
argument_list|,
name|PhysicalAddress
argument_list|>
operator|)
name|evt
operator|.
name|getArg
argument_list|()
decl_stmt|;
name|PhysicalAddress
name|physical_addr
init|=
name|tuple
operator|.
name|getVal2
argument_list|()
decl_stmt|;
if|if
condition|(
name|physical_addr
operator|!=
literal|null
operator|&&
operator|!
name|initial_hosts
operator|.
name|contains
argument_list|(
name|physical_addr
argument_list|)
condition|)
name|dynamic_hosts
operator|.
name|addIfAbsent
argument_list|(
name|physical_addr
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
return|return
name|super
operator|.
name|down
argument_list|(
name|evt
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|discoveryRequestReceived
parameter_list|(
name|Address
name|sender
parameter_list|,
name|String
name|logical_name
parameter_list|,
name|PhysicalAddress
name|physical_addr
parameter_list|)
block|{
name|super
operator|.
name|discoveryRequestReceived
argument_list|(
name|sender
argument_list|,
name|logical_name
argument_list|,
name|physical_addr
argument_list|)
expr_stmt|;
if|if
condition|(
name|physical_addr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|initial_hosts
operator|.
name|contains
argument_list|(
name|physical_addr
argument_list|)
condition|)
name|dynamic_hosts
operator|.
name|addIfAbsent
argument_list|(
name|physical_addr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|findMembers
parameter_list|(
specifier|final
name|List
argument_list|<
name|Address
argument_list|>
name|members
parameter_list|,
specifier|final
name|boolean
name|initial_discovery
parameter_list|,
name|Responses
name|responses
parameter_list|)
block|{
name|PhysicalAddress
name|physical_addr
init|=
operator|(
name|PhysicalAddress
operator|)
name|down
argument_list|(
operator|new
name|Event
argument_list|(
name|Event
operator|.
name|GET_PHYSICAL_ADDRESS
argument_list|,
name|local_addr
argument_list|)
argument_list|)
decl_stmt|;
comment|// https://issues.jboss.org/browse/JGRP-1670
name|PingData
name|data
init|=
operator|new
name|PingData
argument_list|(
name|local_addr
argument_list|,
literal|false
argument_list|,
name|org
operator|.
name|jgroups
operator|.
name|util
operator|.
name|UUID
operator|.
name|get
argument_list|(
name|local_addr
argument_list|)
argument_list|,
name|physical_addr
argument_list|)
decl_stmt|;
name|PingHeader
name|hdr
init|=
operator|new
name|PingHeader
argument_list|(
name|PingHeader
operator|.
name|GET_MBRS_REQ
argument_list|)
operator|.
name|clusterName
argument_list|(
name|cluster_name
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PhysicalAddress
argument_list|>
name|cluster_members
init|=
operator|new
name|ArrayList
argument_list|<
name|PhysicalAddress
argument_list|>
argument_list|(
name|initial_hosts
operator|.
name|size
argument_list|()
operator|+
operator|(
name|dynamic_hosts
operator|!=
literal|null
condition|?
name|dynamic_hosts
operator|.
name|size
argument_list|()
else|:
literal|0
operator|)
operator|+
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|PhysicalAddress
name|phys_addr
range|:
name|initial_hosts
control|)
if|if
condition|(
operator|!
name|cluster_members
operator|.
name|contains
argument_list|(
name|phys_addr
argument_list|)
condition|)
name|cluster_members
operator|.
name|add
argument_list|(
name|phys_addr
argument_list|)
expr_stmt|;
if|if
condition|(
name|dynamic_hosts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PhysicalAddress
name|phys_addr
range|:
name|dynamic_hosts
control|)
if|if
condition|(
operator|!
name|cluster_members
operator|.
name|contains
argument_list|(
name|phys_addr
argument_list|)
condition|)
name|cluster_members
operator|.
name|add
argument_list|(
name|phys_addr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|use_disk_cache
condition|)
block|{
comment|// this only makes sense if we have PDC below us
name|Collection
argument_list|<
name|PhysicalAddress
argument_list|>
name|list
init|=
operator|(
name|Collection
argument_list|<
name|PhysicalAddress
argument_list|>
operator|)
name|down_prot
operator|.
name|down
argument_list|(
operator|new
name|Event
argument_list|(
name|Event
operator|.
name|GET_PHYSICAL_ADDRESSES
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
for|for
control|(
name|PhysicalAddress
name|phys_addr
range|:
name|list
control|)
if|if
condition|(
operator|!
name|cluster_members
operator|.
name|contains
argument_list|(
name|phys_addr
argument_list|)
condition|)
name|cluster_members
operator|.
name|add
argument_list|(
name|phys_addr
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|PhysicalAddress
name|addr
range|:
name|cluster_members
control|)
block|{
if|if
condition|(
name|physical_addr
operator|!=
literal|null
operator|&&
name|addr
operator|.
name|equals
argument_list|(
name|physical_addr
argument_list|)
condition|)
comment|// no need to send the request to myself
continue|continue;
comment|// the message needs to be DONT_BUNDLE, see explanation above
specifier|final
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
name|addr
argument_list|)
operator|.
name|setFlag
argument_list|(
name|Message
operator|.
name|Flag
operator|.
name|INTERNAL
argument_list|,
name|Message
operator|.
name|Flag
operator|.
name|DONT_BUNDLE
argument_list|,
name|Message
operator|.
name|Flag
operator|.
name|OOB
argument_list|)
operator|.
name|putHeader
argument_list|(
name|this
operator|.
name|id
argument_list|,
name|hdr
argument_list|)
operator|.
name|setBuffer
argument_list|(
name|marshal
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|async_discovery_use_separate_thread_per_request
condition|)
block|{
name|timer
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"%s: sending discovery request to %s"
argument_list|,
name|local_addr
argument_list|,
name|msg
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
name|down_prot
operator|.
name|down
argument_list|(
operator|new
name|Event
argument_list|(
name|Event
operator|.
name|MSG
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"%s: sending discovery request to %s"
argument_list|,
name|local_addr
argument_list|,
name|msg
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
name|down_prot
operator|.
name|down
argument_list|(
operator|new
name|Event
argument_list|(
name|Event
operator|.
name|MSG
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|readAll
argument_list|(
name|members
argument_list|,
name|responses
argument_list|)
expr_stmt|;
name|update
argument_list|(
operator|new
name|PingData
argument_list|(
name|local_addr
argument_list|,
name|is_server
argument_list|,
name|UUID
operator|.
name|get
argument_list|(
name|local_addr
argument_list|)
argument_list|,
name|physical_addr
argument_list|)
operator|.
name|coord
argument_list|(
name|is_coord
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// remove all files which are not from the current members
specifier|protected
name|void
name|handleView
parameter_list|(
name|View
name|new_view
parameter_list|,
name|View
name|old_view
parameter_list|,
name|boolean
name|coord_changed
parameter_list|)
block|{
if|if
condition|(
name|is_coord
condition|)
block|{
if|if
condition|(
name|clear_table_on_view_change
condition|)
name|clearTable
argument_list|()
expr_stmt|;
if|else if
condition|(
name|old_view
operator|!=
literal|null
operator|&&
name|new_view
operator|!=
literal|null
condition|)
block|{
name|Address
index|[]
index|[]
name|diff
init|=
name|View
operator|.
name|diff
argument_list|(
name|old_view
argument_list|,
name|new_view
argument_list|)
decl_stmt|;
name|Address
index|[]
name|left_mbrs
init|=
name|diff
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|Address
name|left_mbr
range|:
name|left_mbrs
control|)
if|if
condition|(
name|left_mbr
operator|!=
literal|null
operator|&&
operator|!
name|new_view
operator|.
name|containsMember
argument_list|(
name|left_mbr
argument_list|)
condition|)
name|remove
argument_list|(
name|left_mbr
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|coord_changed
operator|||
name|clear_table_on_view_change
condition|)
name|writeOwnInformation
argument_list|()
expr_stmt|;
comment|// write immediately
if|if
condition|(
name|info_writer_max_writes_after_view
operator|>
literal|0
condition|)
name|startInfoWriter
argument_list|()
expr_stmt|;
comment|// and / or write in the background
block|}
specifier|protected
name|void
name|writeOwnInformation
parameter_list|()
block|{
name|PhysicalAddress
name|physical_addr
init|=
operator|(
name|PhysicalAddress
operator|)
name|down
argument_list|(
operator|new
name|Event
argument_list|(
name|Event
operator|.
name|GET_PHYSICAL_ADDRESS
argument_list|,
name|local_addr
argument_list|)
argument_list|)
decl_stmt|;
name|update
argument_list|(
operator|new
name|PingData
argument_list|(
name|local_addr
argument_list|,
name|is_server
argument_list|,
name|UUID
operator|.
name|get
argument_list|(
name|local_addr
argument_list|)
argument_list|,
name|physical_addr
argument_list|)
operator|.
name|coord
argument_list|(
name|is_coord
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|startInfoWriter
parameter_list|()
block|{
if|if
condition|(
name|info_writer
operator|==
literal|null
operator|||
name|info_writer
operator|.
name|isDone
argument_list|()
condition|)
name|info_writer
operator|=
name|timer
operator|.
name|scheduleWithDynamicInterval
argument_list|(
operator|new
name|InfoWriter
argument_list|(
name|info_writer_max_writes_after_view
argument_list|,
name|info_writer_sleep_time
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|stopInfoWriter
parameter_list|()
block|{
if|if
condition|(
name|info_writer
operator|!=
literal|null
condition|)
name|info_writer
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Class which calls writeOwnInformation a few times. Started after each view change */
specifier|protected
class|class
name|InfoWriter
implements|implements
name|TimeScheduler
operator|.
name|Task
block|{
specifier|protected
specifier|final
name|int
name|max_writes
decl_stmt|;
specifier|protected
name|int
name|num_writes
decl_stmt|;
specifier|protected
specifier|final
name|long
name|sleep_interval
decl_stmt|;
specifier|public
name|InfoWriter
parameter_list|(
name|int
name|max_writes
parameter_list|,
name|long
name|sleep_interval
parameter_list|)
block|{
name|this
operator|.
name|max_writes
operator|=
name|max_writes
expr_stmt|;
name|this
operator|.
name|sleep_interval
operator|=
name|sleep_interval
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|nextInterval
parameter_list|()
block|{
if|if
condition|(
operator|++
name|num_writes
operator|>
name|max_writes
condition|)
return|return
literal|0
return|;
comment|// discontinues this task
return|return
name|Math
operator|.
name|max
argument_list|(
literal|1000
argument_list|,
name|Util
operator|.
name|random
argument_list|(
name|sleep_interval
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|contains
argument_list|(
name|local_addr
argument_list|)
condition|)
name|writeOwnInformation
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|deleteSelf
parameter_list|()
block|{
name|remove
argument_list|(
name|local_addr
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|readAll
parameter_list|(
name|List
argument_list|<
name|Address
argument_list|>
name|members
parameter_list|,
name|Responses
name|responses
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ClusterDiscoveryDAO
operator|.
name|isConfigured
argument_list|()
condition|)
return|return;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ClusterDiscoveryDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|ClusterDiscovery
name|cluster
range|:
operator|(
name|List
argument_list|<
name|ClusterDiscovery
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from ClusterDiscovery where clusterName = :clusterName"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"clusterName"
argument_list|,
name|cluster_name
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
try|try
block|{
name|PingData
name|data
init|=
name|deserialize
argument_list|(
name|cluster
operator|.
name|getPingData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
operator|||
operator|(
name|members
operator|!=
literal|null
operator|&&
operator|!
name|members
operator|.
name|contains
argument_list|(
name|data
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|)
condition|)
continue|continue;
name|responses
operator|.
name|addResponse
argument_list|(
name|data
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|local_addr
operator|!=
literal|null
operator|&&
operator|!
name|local_addr
operator|.
name|equals
argument_list|(
name|data
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
name|addDiscoveryResponseToCaches
argument_list|(
name|data
operator|.
name|getAddress
argument_list|()
argument_list|,
name|data
operator|.
name|getLogicalName
argument_list|()
argument_list|,
name|data
operator|.
name|getPhysicalAddr
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Failed to read all members of cluster "
operator|+
name|cluster_name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|contains
parameter_list|(
name|Address
name|addr
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ClusterDiscoveryDAO
operator|.
name|isConfigured
argument_list|()
condition|)
return|return
literal|false
return|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ClusterDiscoveryDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
name|String
name|own_address
init|=
name|addressAsString
argument_list|(
name|addr
argument_list|)
decl_stmt|;
try|try
block|{
name|ClusterDiscovery
name|cluster
init|=
name|ClusterDiscoveryDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|ClusterDiscovery
argument_list|(
name|own_address
argument_list|,
name|cluster_name
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
return|return
name|cluster
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Failed to read data for cluster "
operator|+
name|cluster_name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|remove
parameter_list|(
name|Address
name|addr
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ClusterDiscoveryDAO
operator|.
name|isConfigured
argument_list|()
condition|)
return|return;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ClusterDiscoveryDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
name|String
name|own_address
init|=
name|addressAsString
argument_list|(
name|addr
argument_list|)
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|ClusterDiscovery
name|cluster
init|=
name|ClusterDiscoveryDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|ClusterDiscovery
argument_list|(
name|own_address
argument_list|,
name|cluster_name
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|hibSession
operator|.
name|delete
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Failed to delete data for cluster "
operator|+
name|cluster_name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|update
parameter_list|(
name|PingData
name|data
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ClusterDiscoveryDAO
operator|.
name|isConfigured
argument_list|()
condition|)
return|return;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ClusterDiscoveryDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
name|String
name|own_address
init|=
name|addressAsString
argument_list|(
name|data
operator|.
name|getAddress
argument_list|()
argument_list|)
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|ClusterDiscovery
name|cluster
init|=
name|ClusterDiscoveryDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|ClusterDiscovery
argument_list|(
name|own_address
argument_list|,
name|cluster_name
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|cluster
operator|==
literal|null
condition|)
name|cluster
operator|=
operator|new
name|ClusterDiscovery
argument_list|(
name|own_address
argument_list|,
name|cluster_name
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setPingData
argument_list|(
name|serializeWithoutView
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setTimeStamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Failed to update my data for cluster "
operator|+
name|cluster_name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|clearTable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|ClusterDiscoveryDAO
operator|.
name|isConfigured
argument_list|()
condition|)
return|return;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ClusterDiscoveryDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"delete ClusterDiscovery where clusterName = :clusterName"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"clusterName"
argument_list|,
name|cluster_name
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Failed to clear data for cluster "
operator|+
name|cluster_name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

